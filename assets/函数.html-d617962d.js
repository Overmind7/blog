import{_ as n,o as s,c as a,e as p}from"./app-04b0d2b0.js";const e={},t=p(`<h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h1><h2 id="c-的程序结构" tabindex="-1"><a class="header-anchor" href="#c-的程序结构" aria-hidden="true">#</a> Ｃ++的程序结构</h2><p>组成</p><ul><li><p>预处理指令</p><ul><li>如<code>#define</code>和<code>#include &lt;filename&gt;</code>等；</li><li>在程序中都是以 # 开头的</li></ul></li><li><p>全局声明</p><ul><li>在函数外对数据类型、函数和变量的声明和定义</li></ul></li><li><p>函数</p><ul><li>包含函数首部和函数体</li></ul></li></ul><h2 id="函数-function" tabindex="-1"><a class="header-anchor" href="#函数-function" aria-hidden="true">#</a> 函数（Function）</h2><p>一个函数就是一个功能</p><h3 id="main-函数" tabindex="-1"><a class="header-anchor" href="#main-函数" aria-hidden="true">#</a> main 函数</h3><p>1、 一个程序文件只能有一个主函数</p><p>​ 程序总是从main函数开始执行的，main函数由系统调用</p><p>​ &#39;<strong>由主函数调用其他函数，其他函数可以互相调用，但是不能调用main函数</strong>&#39;</p><p>​ 主函数的作用：调用其它函数</p><p>​ 主函数以外的函数大多是封装在&#39;<strong>类</strong>&#39;里的（通过类对象调用）</p><p>2、 标准C++要求main函数必须声明为 <code>int </code>型</p><ul><li><code> void main()</code>也能通过，无返回值的主函数</li></ul><p>3、 函数调用举例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">printstar</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;*******&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printstar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><p>1、<code>void</code> ： <code>void printstar(void)</code></p><p>第一个 void 表示无返回值函数</p><p>第二个 void 表示调用时&#39;<strong>不能</strong>&#39;也不必给出参数，可以省略这个 void （无参函数）</p><p>2、所有函数都是平行的（包括main函数），相互独立</p><p>一个函数并不属于另一个函数</p><p>不能在一个函数中定义另一个函数（嵌套定义）</p><p>不能在主函数main中定义</p><p>3、声明位置</p><ul><li>若在main函数之后定义，则要&#39;先声明&#39;才能被main调用</li><li>定义位置在main之前则不用声明}</li></ul><h3 id="函数分类" tabindex="-1"><a class="header-anchor" href="#函数分类" aria-hidden="true">#</a> 函数分类</h3><ol><li><p>系统函数（库函数） <code>#include &lt;filename&gt;</code></p></li><li><p>自定义函数：</p></li></ol><ul><li><p>无参函数：调用时不必给参数：</p><ul><li>有返回值</li><li>无返回值 <ul><li>以无返回值的居多<strong>主函数与其之间没有数据传递，一般执行固定操作</strong></li></ul></li></ul></li><li><p>有参函数：调用时必须给出参数(&#39;在主函数和被调用函数之间有数据传递&#39;)</p></li></ul><p>有返回值供主函数使用</p><p>也可无返回值（<code>void</code>）</p><h3 id="定义函数" tabindex="-1"><a class="header-anchor" href="#定义函数" aria-hidden="true">#</a> 定义函数</h3><p>1、定义无参函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typename</span> 函数名<span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  <span class="token comment">//void可以省略，该行无分号</span>
<span class="token punctuation">{</span>
    声明部分；
    执行语句；
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、定义有参函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typename</span> 函数名<span class="token punctuation">(</span>形式参数表列<span class="token punctuation">)</span> <span class="token comment">//函数首部，形参的类别在这里要声明</span>
<span class="token punctuation">{</span>
    声明部分；
    执行语句；
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数参数" tabindex="-1"><a class="header-anchor" href="#函数参数" aria-hidden="true">#</a> 函数参数</h3><p>形式参数&#39;<code>parameter</code>&#39;：定义时的变量名</p><ul><li>⚠️！注意是定义时的变量名</li></ul><p>实际参数&#39;<code>argument</code>&#39;：调用时的参数（表达式）</p><p>说明：</p><ul><li>&#39;<strong>形参未被调用时，不占内存</strong>&#39;,因此称为&quot;<strong>形式参数</strong>&quot;或者&quot;<strong>虚拟参数</strong>&quot;，调用时分配内存以接受实参的数据，调用结束之后形参内存释放</li><li>实参可以时&#39;<strong>常量、变量或者表达式</strong>&#39;(必须是确定的值)</li><li>函数的首部&#39;<strong>声明形参类型</strong>&#39;</li><li>实参与形参的类型应该&#39;<strong>相同或者赋值兼容</strong>&#39;（eg：<code>char </code>与 <code>int </code>），若不同则按照赋值规则进行转换,&#39;<strong>实参附给形参</strong>&#39;</li><li>实参向形参的数据传递是值传递（单向传递） <ul><li>调用函数时，编译系统临时给形参分配内存</li><li>实参与形参上不同单元</li><li>执行函数时，形参值改变，与实参无关（实参值不受影响）</li></ul></li></ul><h3 id="函数的返回值" tabindex="-1"><a class="header-anchor" href="#函数的返回值" aria-hidden="true">#</a> 函数的返回值</h3><p>通过函数的调用，使主函数能得到一个确定的函数值</p><ul><li>return 返回值</li></ul><p>​ 将被调用函数中的一个确定的值带回主函数</p><p>​ 可以无返回值，可以有多个 return （执行到哪个，哪个起作用）</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">return</span> Z <span class="token operator">&lt;=&gt;</span> <span class="token keyword">return</span><span class="token punctuation">(</span>Z<span class="token punctuation">)</span> <span class="token comment">//可以不要括号</span>
<span class="token keyword">return</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">)</span>  <span class="token comment">//可以是表达式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>返回值的类型</li></ul><p>由定义函数时的函数类型决定</p><p>若 return 的类型与函数值类型不一致，&#39;<strong>以函数类型为准，函数类型决定返回值类型</strong>&#39;</p><p>对于数值类型可以自动进行类型转换</p><h2 id="函数调用" tabindex="-1"><a class="header-anchor" href="#函数调用" aria-hidden="true">#</a> 函数调用</h2><h3 id="一般形式" tabindex="-1"><a class="header-anchor" href="#一般形式" aria-hidden="true">#</a> 一般形式</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">functionname</span><span class="token punctuation">(</span><span class="token punctuation">[</span>argument<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//函数名+实参表列</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 其中圆括号不能省略，可以没有实参表列</p><p>​ 用逗号隔开多个实参</p><p>​ 实参与形参的个数相等，类型匹配，按顺序一一对应传递数据</p><p>​ 不同编译器对于多个实参的求值顺序不同，例如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 若从左到右，则为 <code>func(3,4)</code></p><p>​ 若从右往左，则为 <code>func(3,3)</code>,如<code>VC++</code>和<code>GCC</code></p><blockquote><p>（函数参数的压栈顺序与函数的声明顺序相反？）</p></blockquote><p>其他要求</p><ul><li>必须时已经存在的函数；</li><li>如果是库函数需要<code> #include &lt;filename&gt;</code>加头文件</li><li>如果是自定义函数，需要与调用它的主函数在同一个程序单位中，&#39;若位置在主函数之后，还需要在调用前声明&#39;</li></ul><p>作用：</p><p>函数调用作为单独的语句，要求函数完成一定操作</p><p>函数表达式：带回一个确定时值参加表达式的计算</p><p>函数参数：函数调用作为另外一个函数的实参</p><p><code>m = max(a, sqrt(b));</code></p><h3 id="函数声明" tabindex="-1"><a class="header-anchor" href="#函数声明" aria-hidden="true">#</a> 函数声明</h3><p>在函数尚未定义的情况下，先将函数的有关信息通知给编译系统，以便编译正常进行。</p><p>声明和定义不是一回事：</p><ul><li><p>定义：对函数功能的确立，是一个完整独立的函数单位</p></li><li><p>声明：把函数的有关信息（名字、类型、形参及其类型、函数体等通知编译器）</p></li></ul><p>&#39;<strong>声明中也可以不写形参名，只写形参类型</strong>&#39;例如：</p><p><code>float add(float,float);</code></p><p>这种声明方法称为&#39;<strong>函数原型&#39;(function prototype)</strong>,作用:</p><p>&#39;<strong>根据函数原型在程序编译阶段对调用函数的合法性进行全面检查</strong>&#39;</p><p>函数原型的一般形式为：（基本形式）</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typename</span> <span class="token class-name">functioname</span><span class="token punctuation">(</span><span class="token keyword">typename</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">,</span> ……<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//函数类型 函数名（参数类型1，参数类型2，……）；</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者为了便于阅读</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typename</span> <span class="token class-name">functioname</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">parameter</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">parameter</span><span class="token punctuation">,</span>……<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 函数类型 函数名（参数类型1 参数名1， 参数类型2 参数名2，……）；</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编译系统不检查参数名，写成什么都无所谓</p><p>主要保证函数原型与函数首部写法上一致（函数类型、函数名、参数个数、参数类型、参数顺序）</p><p>&#39;<strong>对函数的外部声明</strong>&#39;：函数声明的位置可以在函数外面，在所有函数定义之前</p><ul><li>如果一个函数被多个函数调用，这样可以不必在每个主调函数中重复声明</li></ul><h3 id="函数的嵌套调用" tabindex="-1"><a class="header-anchor" href="#函数的嵌套调用" aria-hidden="true">#</a> 函数的嵌套调用</h3><p>c++不能嵌套定义函数，但是能够嵌套调用</p><p>在调用一个函数的过程中调用另一个函数</p><h3 id="函数的递归调用" tabindex="-1"><a class="header-anchor" href="#函数的递归调用" aria-hidden="true">#</a> 函数的递归调用</h3><p>在调用一个函数的过程中又直接或者间接地调用该函数本身，称为函数的递归（recursive）调用</p><p>包含递归调用的函数称为递归函数</p><h2 id="有默认参数的函数" tabindex="-1"><a class="header-anchor" href="#有默认参数的函数" aria-hidden="true">#</a> 有默认参数的函数</h2><h4 id="一个参数" tabindex="-1"><a class="header-anchor" href="#一个参数" aria-hidden="true">#</a> 一个参数</h4><p>当用同样的实参调用同一个函数的时候，Ｃ++中能够给实参一个默认的值</p><p>例，有函数声明如下</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">float</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token keyword">float</span> r<span class="token operator">=</span><span class="token number">6.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指定r的默认值为 6.5 ，在以默认参数调用时，不必给出实参的值</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//相当于 area(6.5)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不想用默认值，则通过实参另行给出</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">area</span><span class="token punctuation">(</span><span class="token number">7.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//形参得到的值时7.4而不是默认值6.5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="多个形参" tabindex="-1"><a class="header-anchor" href="#多个形参" aria-hidden="true">#</a> 多个形参</h4><p>可以使每个形参都有一个默认值，也可以只对一部分形参指定默认值，一部分不指定</p><p>例，求一个圆柱体体积</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">float</span> <span class="token function">volume</span><span class="token punctuation">(</span><span class="token keyword">float</span> h<span class="token punctuation">,</span><span class="token keyword">float</span> r <span class="token operator">=</span> <span class="token number">12.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//函数声明（函数原型），只对形参r指定默认值12.5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用可以</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">volume</span><span class="token punctuation">(</span><span class="token number">45.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//相当于 volume(45.6,12.5)</span>
<span class="token function">volume</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//两个参数都不采用默认值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意⚠️ &#39;实参与形参的结合是从左往右进行的，因此指定默认值必须放在形参表列中的最右端&#39;</p><p>例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">char</span> d <span class="token operator">=</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//不正确</span>
<span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">char</span> d <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//正确，将带有默认参数的形参放到右边</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 <code>f2()</code>的调用</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token char">&#39;x&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//形参的值全部从实参得到</span>
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">3.2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//最后一个形参取默认值</span>
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//最后两个形参取默认值b=0，d=‘a’</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、应用举例</p><p>求两个或三个&#39;正整数&#39;数的最大值，用默认参数的函数实现</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
    cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;max(a,b,c)&quot;</span><span class="token operator">&lt;&lt;</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;max(a,b)&quot;</span><span class="token operator">&lt;&lt;</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">&gt;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token operator">=</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">&gt;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token operator">=</span>c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意</p><ul><li><p>如果函数定义是在函数调用之前：</p><ul><li>则应该在函数定义中给出默认值</li></ul></li><li><p>如果函数定义是在函数调用之后：</p><ul><li>则在函数调用之前需要有函数声明，此时必须在函数声明中给出默认值</li></ul></li><li><p>总之必须在函数调用之前将默认信息告知编译系统</p></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>重复指定默认值报错信息，最好只在声明时指定默认值</p></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>一个函数不能既作为重载函数，又作为有默认参数的函数</p><p>二义性</p></div><h2 id="内部函数和外部函数" tabindex="-1"><a class="header-anchor" href="#内部函数和外部函数" aria-hidden="true">#</a> 内部函数和外部函数</h2><p>函数本质上是全局的（因为被其他函数调用）</p><p>但是也可以指定函数只能被本文件调用，而不能被其他文件调用</p><h3 id="内部函数" tabindex="-1"><a class="header-anchor" href="#内部函数" aria-hidden="true">#</a> 内部函数</h3><p><strong>如果一个函数只能被本文件中的其他函数调用，则被成为内部函数</strong></p><p>内部函数又称为静态（static）函数</p><p>通常把只能由同一文件使用的函数和外部变量放在一个文件中，在它们前面加上 static 局部化，使其他文件不能使用</p><p>2、使用</p><p>在定义内部函数时，在函数名和函数类型的前面加 static</p><p>函数首部的一般格式为：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> 类型标识符 函数名<span class="token punctuation">(</span>形参表<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="外部函数" tabindex="-1"><a class="header-anchor" href="#外部函数" aria-hidden="true">#</a> 外部函数</h3><p>在定义函数时，<strong>如果在函数首部的最左端冠以关键字 extern，则表示此函数是外部函数，可供其他文件调用</strong></p><p>如果在定义函数时省略 <code>extern</code>，则&#39;<code>默认</code>&#39;为外部函数</p><p>在需要调用此函数的文件中，用 <code>extern </code>声明所用的函数是外部函数</p><p>2、使用</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 这样函数 <code>func </code>就可以被其他文件调用</p><p>3、说明</p><p>使用 <code>extern </code>声明能够将其他文件中函数的作用域扩展到本文件中</p><p><code>extern </code>声明的形式是在函数原型的基础上加关键字 <code>extern</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ｃ++中允许在声明函数时省略 extern（函数在本质上是外部的）</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时就是函数原型</p><p>函数原型：</p><ul><li>用函数原型能够把函数的作用域扩展到到定义该函数的文件之外（不必使用 <code>extern</code>）</li><li>只要在使用该函数的每一个文件中包含该函数的原型即可</li><li>函数原型通知编译系统：该函数在本文件中稍后定义或者在另一个文件中定义</li><li>函数原型扩展作用域最常见例子： <code>#include &lt;filename&gt;</code> 指令。 <ul><li><code>#include &lt;cmath&gt;</code></li></ul></li></ul><h2 id="内置函数" tabindex="-1"><a class="header-anchor" href="#内置函数" aria-hidden="true">#</a> 内置函数</h2><ol><li>概念</li></ol><p>函数调用过程：~</p><p>如果函数频繁调用，会降低运行效率</p><p>Ｃ++能够在编译时将所调用函数的代码直接嵌入主调函数中，而不是将流程转出去</p><ul><li><p>这种嵌入到主调函数中的函数成为&#39;<strong>内置函数</strong>&#39; <code>inline function</code></p></li><li><p>又称 &#39;<strong>内嵌函数</strong>&#39;或者&#39;<strong>内联函数</strong>&#39;</p></li></ul><ol start="2"><li>使用</li></ol><p>举例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//声明内置函数</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>m<span class="token punctuation">;</span>
    m <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;max = &quot;</span><span class="token operator">&lt;&lt;</span>m<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//定义内置函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序分析：</p><p>在指定了 inline 函数之后，在编译时调用函数的语句 <code>max(i,j,k)</code> 就被替换成 <code>max </code>的函数体，同时用实参代替形参</p><div class="custom-container tip"><p class="custom-container-title">注意⚠️</p><p>可以在声明和定义函数的时候同时写 <code>inline </code>，也可以只在函数声明时加 <code>inline</code>，而定义函数时不加 <code>inline</code>。</p><p><strong>只要在调用函数之前把 inline 信息告知编译系统，就会按照内置函数处理</strong></p></div><ol start="3"><li>使用条件</li></ol><p>只将规模很小（五句以下）且使用频繁的函数声明为内置函数（函数规模很小时，函数调用开销甚至超过执行函数本身）</p><p>内置函数中不能包括复杂的控制语句，如循环语句和 switch 语句</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p><code>inline </code>声明是一个&#39;建议性的语句而不是指令性的&#39;，编译系统会根据具体情况决定是否这样做</p></div><p>​</p><h2 id="函数模版" tabindex="-1"><a class="header-anchor" href="#函数模版" aria-hidden="true">#</a> 函数模版</h2><p>Ｃ++提供了函数模版，以解决函数体完全相同，参数类型不同的情况</p><p>&#39;函数模版实际上是建立一个通用函数，其函数类型和参数类型不具体指定，用一个虚拟的类型来代表，这个通用函数就称为函数模版&#39;</p><p>凡是函数体相同的函数都可以用这个模版来代替，在调用函数时系统哦会根据实参的类型来取代模版中的虚拟类型</p><p>例，将函数重载（max）中的例子用函数模版实现</p><p>⚠️注意：&#39;只适用于函数体相同，函数参数个数相同而类型不同的情况&#39;</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>   <span class="token comment">//模版声明，其中T为类型参数</span>

T <span class="token function">max</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span>T b<span class="token punctuation">,</span>T c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//定义一个通用函数，用T作虚拟的类型名</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>i2<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>i3<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>i<span class="token punctuation">;</span>
    <span class="token keyword">double</span> d1<span class="token operator">=</span><span class="token number">1.3</span><span class="token punctuation">,</span>d2<span class="token operator">=</span><span class="token number">4.2</span><span class="token punctuation">,</span>d3<span class="token operator">=</span><span class="token number">5.2</span><span class="token punctuation">,</span>d<span class="token punctuation">;</span>
    <span class="token keyword">long</span> g1<span class="token operator">=</span><span class="token number">123445</span><span class="token punctuation">,</span>g2<span class="token operator">=</span><span class="token number">987655</span><span class="token punctuation">,</span>g3<span class="token operator">=</span><span class="token number">2345432</span><span class="token punctuation">,</span>g<span class="token punctuation">;</span>
    i <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span>i2<span class="token punctuation">,</span>i3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//调用函数模版，此时T被int取代</span>
    d <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>d3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//调用函数模版，此时T被double取代</span>
    g <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>g1<span class="token punctuation">,</span>g2<span class="token punctuation">,</span>g3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//调用函数模版，此时T被long取代</span>
    cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token char">&#39;\\n&#39;</span><span class="token operator">&lt;&lt;</span>d<span class="token operator">&lt;&lt;</span><span class="token char">&#39;\\n&#39;</span><span class="token operator">&lt;&lt;</span>g<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义函数模版的一般形式为</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通用函数定义；</p><p>或者为</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通用函数定义；</p><p>说明</p><ul><li><code>template </code>的含义是模版，在函数调用时才能确定<code>T</code>为什么类型，T也可以换成其他字母</li><li><code>class </code>和 <code>template </code>的作用相同，都表示类型名，可以互换，用 <code>typename </code>更好;</li><li><strong>类型参数可以不止一个</strong>，如 <code>template &lt;class T1,typename T2&gt;</code></li><li>通常情况下，函数模版参数个数不能为 0 个</li></ul><p>此外，如果输入的两个参数不同，可以强制转换成同一个参数，例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
T <span class="token function">fun</span><span class="token punctuation">(</span>T x<span class="token punctuation">,</span>T y<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token operator">*</span>y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>fun</code> 时</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2.3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时将两个参数都转换为float型，防止编译出错</p><h2 id="函数重载" tabindex="-1"><a class="header-anchor" href="#函数重载" aria-hidden="true">#</a> 函数重载</h2><p>Ｃ++允许用同一个函数名定义多个函数，而这些函数的参数个数和参数类型不相同</p><p>这就是&#39;<strong>函数重载</strong>&#39;，即&#39;对一个函数名重新赋予它新的含义，使一个函数名可以多用。所谓重载，其实也就是&quot;一物多用&quot;&#39;。</p><p>不仅函数可以重载，运算符也可以重载</p><p>函数重载举例</p><p>求两个或者三个整数的最大数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//函数声明</span>
    <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//函数声明</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;max(a,b,c)=&quot;</span><span class="token operator">&lt;&lt;</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token comment">//输出三个整数中的最大数</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;max(a,b)=&quot;</span><span class="token operator">&lt;&lt;</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//输出两个整数中的最大数</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//求三个整数中的最大数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">&gt;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment">//求两个整数中的最大数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>两次调用max函数的参数个数不同，系统根据这些不同找到与之匹配的函数</li><li>参数的个数和类型可以都不同，但不能只有函数的类型不同而参数的个数和类型相同 <ul><li>&#39;<strong>重载函数的参数个数、参数类型或参数顺序三者中至少有一个不同</strong>&#39;，否则调用形式一样 f(x) 编译系统无法判断调用哪一个</li></ul></li></ul><p>函数的返回值可以相同可以不同（无规定）</p><h2 id="常用标准库函数" tabindex="-1"><a class="header-anchor" href="#常用标准库函数" aria-hidden="true">#</a> 常用标准库函数</h2><p>常用数学函数</p><p>常用字符函数</p><p>常用字符串函数</p>`,199),o=[t];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","函数.html.vue"]]);export{d as default};
