import{_ as e,o as l,c as o,e as c}from"./app-04b0d2b0.js";const a={},d=c('<h1 id="linux系统io多路复用模型" tabindex="-1"><a class="header-anchor" href="#linux系统io多路复用模型" aria-hidden="true">#</a> Linux系统IO多路复用模型</h1><p><strong>I/O多路复用</strong>是一种在单个线程中管理多个输入/输出通道的技术。它允许一个线程同时监听多个输入流（例如网络套接字、文件描述符等），并在有数据可读或可写时进行相应的处理，而不需要为每个通道创建一个独立的线程。</p><p>在Linux系统中，有三种常见的I/O多路复用机制：<code>select</code>、<code>poll</code>和<code>epoll</code>。这些机制都允许对一组文件描述符进行相关事件的注册，并阻塞等待某些事件的发生或等待超时。</p><ul><li><code>select</code>：通过对一组文件描述符进行相关事件的注册，然后阻塞等待某些事件的发生或等待超时。</li><li><code>poll</code>：与<code>select</code>类似，也是对一组文件描述符进行相关事件的注册，然后阻塞等待某些事件的发生或等待超时。</li><li><code>epoll</code>：是Linux系统中性能最好的I/O多路复用机制。它使用了一种基于事件驱动的模型，可以高效地处理大量并发连接¹。</li></ul><p>这些I/O多路复用机制都可以关注多个文件描述符，并在有数据可读或可写时通知应用程序进行相应的读写操作。</p><h2 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> select</h2><h2 id="poll" tabindex="-1"><a class="header-anchor" href="#poll" aria-hidden="true">#</a> poll</h2><h2 id="epoll" tabindex="-1"><a class="header-anchor" href="#epoll" aria-hidden="true">#</a> epoll</h2>',8),i=[d];function t(n,r){return l(),o("div",null,i)}const h=e(a,[["render",t],["__file","Linux系统IO多路复用模型.html.vue"]]);export{h as default};
