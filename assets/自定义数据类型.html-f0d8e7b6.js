import{_ as n,o as s,c as a,e as p}from"./app-04b0d2b0.js";const e={},t=p(`<h1 id="自定义数据类型" tabindex="-1"><a class="header-anchor" href="#自定义数据类型" aria-hidden="true">#</a> 自定义数据类型</h1><h2 id="枚举类型" tabindex="-1"><a class="header-anchor" href="#枚举类型" aria-hidden="true">#</a> 枚举类型</h2><p>如果一个变量只能有几种可能的值，可以定义为枚举类型 enumeration</p><p>枚举指的是将变量的值一一列举出来，变量的值只能在列举出来的值的范围内</p><p><strong>声明</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">enum</span> 枚举类型名 <span class="token punctuation">{</span>枚举常量表<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">enum</span> <span class="token class-name">weekday</span><span class="token punctuation">{</span>sun<span class="token punctuation">,</span>mon<span class="token punctuation">,</span>tue<span class="token punctuation">,</span>wed<span class="token punctuation">,</span>thu<span class="token punctuation">,</span>fri，sat<span class="token punctuation">,</span>sun<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中花括号内部的称为 <strong>枚举元素</strong>，或者 枚举常量</p><p><strong>定义</strong></p><p>在声明了枚举类型之后，可以用它来定义变量</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>weekday workday<span class="token punctuation">,</span>week_end<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以在声明枚举类型的同时定义枚举变量</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">enum</span> <span class="token class-name">weekday</span><span class="token punctuation">{</span>sun<span class="token punctuation">,</span>mon<span class="token punctuation">,</span>tue<span class="token punctuation">,</span>wed<span class="token punctuation">,</span>thu<span class="token punctuation">,</span>fri，sat<span class="token punctuation">,</span>sun<span class="token punctuation">}</span>workday<span class="token punctuation">,</span>week_end<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>赋值</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>workday <span class="token operator">=</span> mon<span class="token punctuation">;</span>
week_end <span class="token operator">=</span> sun<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>枚举变量的值只能是所列出的枚举常量的值之一</p><p><strong>说明</strong></p><ol><li>枚举元素按常量处理，故称枚举常量</li></ol><p>​ 不是变量，不能赋值</p><ol start="2"><li>枚举元素作为常量，是有值的，值是一个整数</li></ol><p>​ 编译系统按照定义时的顺序，对它们赋值为 0，1，2，3…………</p><p>​ workday = mon;</p><p>​ 把枚举常量 mon 的值赋给枚举常量 workday，workday 的值等于 1，这个值是可以输出的</p><p>​ cout&lt;&lt;work; //输出整数为1，而不是 mon</p><p>​ 也可以在声明枚举类型时，自己定义指定枚举元素的值</p><p>​ enum weekday{sun = 7,mon = 1…………};</p><ol start="3"><li><p>枚举值可以用来做比较判断，按照整型比较规则比较</p></li><li><p>不能把一个整数直接赋给枚举变量，枚举变量只能接受枚举类型数据</p></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>workday <span class="token operator">=</span> tue<span class="token punctuation">;</span> <span class="token comment">//正确</span>
workday <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//错误❌，类型不匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 可以强制类型转换</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>workday <span class="token operator">=</span> <span class="token punctuation">(</span>weekday<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">;</span>
workday <span class="token operator">=</span> <span class="token function">weekday</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结构体类型" tabindex="-1"><a class="header-anchor" href="#结构体类型" aria-hidden="true">#</a> 结构体类型</h2><p>在一个组合项中包含若干个类型不同（也可不同）数据项</p><p>数据类型————结构体</p><p>1、声明</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> 结构体类型名<span class="token punctuation">{</span>
	成员表
<span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//⚠️分号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>结构体类型名作为结构体类型的标准</li><li>声明一个结构体类型时，对其各个成员都要声明 <ul><li>typename 成员名;</li></ul></li><li>成员也称为结构体中的 域 field，成员表 也称为 域表 <ul><li>C++中成员包括 数据成员 和 函数成员</li></ul></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>声明的是结构体类型</p><p>然后再用结构体类型声明结构体变量</p></div><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><p><strong>先声明结构体类型，再定义变量</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> mum<span class="token punctuation">;</span>
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> sex<span class="token punctuation">;</span>
  <span class="token keyword">int</span> age<span class="token punctuation">;</span>
  <span class="token keyword">float</span> score<span class="token punctuation">;</span>
  <span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//注意！⚠️有分号</span>

Student student1<span class="token punctuation">,</span>student2<span class="token punctuation">;</span>
<span class="token comment">//结构体类型名 结构体变量名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>声明类型的同时定义变量</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
	………………
<span class="token punctuation">}</span>student1<span class="token punctuation">,</span>student2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>提倡使用1的定义方法 ，便于不同函数甚至不同文件能使用所声明的结构体</p><p>或者将结构体类型集中到一个头文件中</p><p>2方法适用于简单程序</p></div><p>结构体的成员也可以是结构体变量</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Date</span><span class="token punctuation">{</span>

…………

<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>

…………

	Date birthday<span class="token punctuation">;</span>  <span class="token comment">//Date 是结构体类型，birthday是 Date 类型成员 p193</span>

<span class="token punctuation">}</span>student1<span class="token punctuation">,</span>student2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对结构体变量成员的引用：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>student1<span class="token punctuation">.</span>brithday<span class="token punctuation">.</span>yeam <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
student1<span class="token punctuation">.</span>birthday<span class="token punctuation">.</span>month <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用两个成员运算符</p><p><strong>定义结构体时，结构体名称缺省</strong></p><p>​ 同时定义结构体变量sum1，sum2。但后面不可再定义结构体变量！</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span><span class="token punctuation">{</span>
  <span class="token keyword">char</span> aa<span class="token punctuation">;</span>
  <span class="token keyword">char</span> bb<span class="token punctuation">;</span>
  <span class="token keyword">char</span> cc<span class="token punctuation">;</span>
  <span class="token keyword">int</span> dd<span class="token punctuation">;</span>
<span class="token punctuation">}</span>sum1<span class="token punctuation">,</span> sum2<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">sum3</span><span class="token punctuation">;</span>  <span class="token comment">// 这里编译器报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><ol><li><strong>定义时赋初值</strong></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
…………
<span class="token punctuation">}</span>student1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">&quot;zhang&quot;</span><span class="token punctuation">,</span><span class="token char">&#39;m&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>声明与定义分开，在定义时赋初值</strong></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Student student2 <span class="token operator">=</span> <span class="token punctuation">{</span>………………<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><strong>引用结构体变量</strong></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>student1 <span class="token operator">=</span> student2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将一个结构体变量的值赋给另一个具有相同结构的结构体变量</p><ol start="4"><li><strong>成员对应赋值</strong></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>结构体变量名<span class="token punctuation">.</span>成员名<span class="token punctuation">;</span>

Student1<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用成员运算符 “.” 进行赋值</p><p><mark>&#39;成员运算符&#39;所有运算符中等级最高</mark></p><h3 id="结构体数组" tabindex="-1"><a class="header-anchor" href="#结构体数组" aria-hidden="true">#</a> 结构体数组</h3><p>与数值型数组不同，每个数组元素都是一个结构体类型数据，它们都分别包括各个成员项</p><p>​ 举例，对候选人得票统计，有三个候选人，从键盘输入十个投票结果，输出获胜者</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">person</span><span class="token punctuation">{</span>
    string name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    person leader<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//定义 person 类型数组</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    string vote<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">&gt;&gt;</span> vote<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>vote <span class="token operator">==</span> leader<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                leader<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> leader<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span><span class="token string">&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> leader<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>count <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指向结构体变量的指针" tabindex="-1"><a class="header-anchor" href="#指向结构体变量的指针" aria-hidden="true">#</a> 指向结构体变量的指针</h3><p>该变量所占据的内存段的<strong>起始地址</strong></p><p>通过指向结构体变量的指针引用结构体变量中的成员</p><p>例:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Student stu<span class="token punctuation">;</span>

Student <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">;</span>

………………

cout <span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>num<span class="token operator">&lt;&lt;</span>……………
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>括号不能省略！否则成员运算符 “.” 的优先级高于 * ，*p.num 为结构体成员的地址</p></div><div class="custom-container tip"><p class="custom-container-title">指向运算符：-&gt;</p><p>C++提供了指向运算符表示指向结构体变量的指针的指向关系</p><p>一下三种方式等价</p><ol><li>结构体变量名.成员名;</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>stu<span class="token punctuation">.</span>num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>(*p).成员名;</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>p-&gt;成员名;</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p<span class="token operator">-&gt;</span>num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指向成员运算符的优先级也非常高！</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p<span class="token operator">-&gt;</span>n<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>n<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//等价于 (p-&gt;n)++</span>
<span class="token operator">++</span>p<span class="token operator">-&gt;</span>n<span class="token punctuation">;</span> <span class="token comment">//等价于 ++(p-&gt;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h4><p>​ 见指针中链表部分</p><h3 id="结构体变量型数据作为函数参数" tabindex="-1"><a class="header-anchor" href="#结构体变量型数据作为函数参数" aria-hidden="true">#</a> 结构体变量型数据作为函数参数</h3><ol><li>用结构体变量名作为函数参数</li></ol><p>值传递的方式，将结构体变量所占有的内存单元的全部内容顺序传给实参</p><p>形参也必须是相同类型的结构体变量</p><p>程序直观</p><p>占用开销大，一般不采用这种方法</p><p>函数声明和定义举例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Student stu<span class="token punctuation">)</span><span class="token punctuation">{</span>
……
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>用指向结构体变量的指针作实参</li></ol><ul><li>采用指针变量作为实参和形参，<strong>在调用函数时形参只占用四个字节</strong><ul><li>效率高，时间和内存开销少</li><li>程序不如1直观</li></ul></li></ul><p>函数声明和定义举例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Student <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Student <span class="token operator">*</span> ptr<span class="token punctuation">)</span><span class="token punctuation">{</span>
……
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>用结构体变量的引用作为形参，作为实参（结构体变量名）的别名</li></ol><ul><li>实参为结构体 Student 类型变量，形参为引用</li><li>实参传递的是地址给形参 <ul><li>效率高</li><li>可读性高</li></ul></li></ul><p>函数声明和定义举例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Student<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Student <span class="token operator">&amp;</span> stu<span class="token punctuation">)</span><span class="token punctuation">{</span>
   …………<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,94),c=[t];function i(o,l){return s(),a("div",null,c)}const d=n(e,[["render",i],["__file","自定义数据类型.html.vue"]]);export{d as default};
