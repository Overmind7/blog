import{_ as n,o as s,c as a,e as t}from"./app-04b0d2b0.js";const p={},e=t(`<h1 id="友元" tabindex="-1"><a class="header-anchor" href="#友元" aria-hidden="true">#</a> 友元</h1><p>友元不能被派生类继承</p><h2 id="友元函数" tabindex="-1"><a class="header-anchor" href="#友元函数" aria-hidden="true">#</a> 友元函数</h2><p>如果在本类以外的其他地方定义了一个函数（可以不属于任何类的非成员函数，也可以是其他类的成员函数）</p><ul><li><p>在类体中用friend对其进行声明，此函数就称为本类的友元函数</p></li><li><p>友元函数可以访问这个类中的私有成员（包括私有成员函数）</p></li></ul><h3 id="将普通函数声明为友元函数" tabindex="-1"><a class="header-anchor" href="#将普通函数声明为友元函数" aria-hidden="true">#</a> 将普通函数声明为友元函数</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Time</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Time</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//声明构造函数</span>
		<span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>Time <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//在类体中声明display函数为Time类的友元函数</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		<span class="token keyword">int</span> hour<span class="token punctuation">;</span>
		<span class="token keyword">int</span> minute<span class="token punctuation">;</span>
		<span class="token keyword">int</span> sec<span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">display1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Time</span><span class="token double-colon punctuation">::</span><span class="token function">Time</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//定义构造函数，给hour，minute，sec赋值</span>
	hour <span class="token operator">=</span> h<span class="token punctuation">;</span>
	minute <span class="token operator">=</span> m<span class="token punctuation">;</span>
	sec <span class="token operator">=</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token class-name">Time</span><span class="token double-colon punctuation">::</span><span class="token function">display1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;调用了私有成员函数&quot;</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>Time<span class="token operator">&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//这里display是普通的函数，形参上Time类对象的引用</span>
	cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">.</span>hour<span class="token operator">&lt;&lt;</span><span class="token string">&quot;:&quot;</span><span class="token operator">&lt;&lt;</span>t<span class="token punctuation">.</span>minute<span class="token operator">&lt;&lt;</span><span class="token string">&quot;:&quot;</span><span class="token operator">&lt;&lt;</span>t<span class="token punctuation">.</span>sec<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">display1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>                                     <span class="token comment">//这里的引用加上了对象名。</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	Time <span class="token function">t1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">display</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//调用display函数，实参t1时Time类对象</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ol><li>由于声明了display是Time类的friend函数，所以display函数可以引用Time中的私有成员</li><li>使用友元函数引用私有数据成员时，必须加上对象名（t.hour）， <ul><li>因为 display（友元函数）不是Time类的成员函数，没有this指针，不能默认引用Time类的数据成员，必须指定要访问的对象</li></ul></li></ol><h2 id="友元成员函数" tabindex="-1"><a class="header-anchor" href="#友元成员函数" aria-hidden="true">#</a> 友元成员函数</h2><p><code>friend</code>函数不仅可以是一般函数，也可以是另一个类中的成员函数，例：</p><p>有一个Date类的对象和一个Time类的对象，要求一次输出其中的日期和时间</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Date</span><span class="token punctuation">;</span>           <span class="token comment">//提前引用声明！</span>
<span class="token comment">// Date d1; </span>
<span class="token comment">//错误！编译出错，编译系统只有在见到类体之后才能确定为对象分配多大的内存</span>

<span class="token keyword">class</span> <span class="token class-name">Time</span><span class="token punctuation">{</span>           <span class="token comment">//声明Time类</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Time</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//声明Time类的构造函数</span>
		<span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>Date <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//声明display成员函数，形参是Date类对象的引用</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		<span class="token keyword">int</span> hour<span class="token punctuation">;</span>
		<span class="token keyword">int</span> sec<span class="token punctuation">;</span>
		<span class="token keyword">int</span> minute<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment">//声明类结尾分号！</span>
<span class="token keyword">class</span> <span class="token class-name">Date</span><span class="token punctuation">{</span>           <span class="token comment">//声明Date类</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//声明Date类的构造函数</span>
		<span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token class-name">Time</span><span class="token double-colon punctuation">::</span><span class="token function">display</span><span class="token punctuation">(</span>Date <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//声明Time中的display函数为本类的友元成员函数</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		<span class="token keyword">int</span> month<span class="token punctuation">;</span>
		<span class="token keyword">int</span> day<span class="token punctuation">;</span>
		<span class="token keyword">int</span> year<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token class-name">Time</span><span class="token double-colon punctuation">::</span><span class="token function">Time</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//定义类Time的构造函数</span>
	hour <span class="token operator">=</span> h<span class="token punctuation">;</span>
	minute <span class="token operator">=</span> m<span class="token punctuation">;</span>
	sec <span class="token operator">=</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token class-name">Time</span><span class="token double-colon punctuation">::</span><span class="token function">display</span><span class="token punctuation">(</span>Date <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//定义display函数，输出年月日和时分秒，在定义了Date类之后定义display函数</span>
<span class="token comment">//引用Date类对象中的私有数据：</span>
	cout <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span>month <span class="token operator">&lt;&lt;</span><span class="token string">&quot;/&quot;</span> <span class="token operator">&lt;&lt;</span>d<span class="token punctuation">.</span>day<span class="token operator">&lt;&lt;</span><span class="token string">&quot;/&quot;</span><span class="token operator">&lt;&lt;</span>d<span class="token punctuation">.</span>year<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token comment">//引用本类中的私有数据：</span>
	cout <span class="token operator">&lt;&lt;</span> hour <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">&lt;&lt;</span>minute<span class="token operator">&lt;&lt;</span><span class="token string">&quot;:&quot;</span><span class="token operator">&lt;&lt;</span>sec<span class="token operator">&lt;&lt;</span><span class="token string">&quot;:&quot;</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token class-name">Date</span><span class="token double-colon punctuation">::</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//定义类Date的构造函数</span>
	month <span class="token operator">=</span> m<span class="token punctuation">;</span>
	day <span class="token operator">=</span> d<span class="token punctuation">;</span>
	year <span class="token operator">=</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	Time <span class="token function">t1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          
	Date <span class="token function">d1</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	t1<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//调用t1中的display函数，实参上Date类对象d1</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ol><li><code>display</code>成员函数的实参是<code>Date</code>类对象<code>d1</code>，否则就不能访问对象<code>d1</code>中的私有数据</li><li>在<code>Time::display</code>函数中引用<code>Date</code>类私有数据时必须加上对象名，如<code>d.month</code></li><li><strong>提前引用</strong>：在正式声明一个类之前，先声明一个类名，表示此类将在稍后声明，只包含类名，不包含类体（类似 extern 全局变量的提前引用声明？） <ul><li>由于在Time类中声明和定义display函数时用到了Date类，然而Date类的定义在后面，所以需要对Date&#39;提前引用&#39;</li><li>但是<strong>类对提前声明使用范围时有限的</strong>，只有在正式声明一个类以后才能去定义类对象，在此之前试提前定义类对象是错误的！如本例中第三行提前引用之后</li></ul></li><li>本例中在正式声明Date类之后，才定义了 Time::display()函数，因为display函数中使用到了Date类的成员month、day、year。如果不先声明Date类，则出错，因为无法识别其中的Date成员</li><li>一个函数（包括普通函数和成员函数）<strong>可以被多个类声明成<code>friend</code></strong>，这样就可以引用多个类中的私有数据</li></ol><h2 id="友元类" tabindex="-1"><a class="header-anchor" href="#友元类" aria-hidden="true">#</a> 友元类</h2><p>不仅可以将一个函数声明为一个类的&#39;朋友&#39;，而且可以将一个类（Ｂ）声明为另一个类（A）的&#39;<strong>朋友</strong>&#39;。这时B类就是A类的友元类。</p><ul><li>友元类Ｂ中的所有函数都是A类的友元函数，可以访问A类中的所有成员</li></ul><p>在A类的定义体中用一下语句声明Ｂ类为其友元类：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">friend</span> B<span class="token punctuation">;</span>
<span class="token comment">//声明友元类的一般形式为</span>
<span class="token keyword">friend</span> 类名；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明</p><ol><li>友元的关系是单向的而不是双向的（如声明了Ｂ是A的友元类，此时A不是Ｂ的友元类，A类中的函数不能访问Ｂ的私有数据）</li><li>友元的关系不能传递</li></ol>`,22),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","友元.html.vue"]]);export{k as default};
