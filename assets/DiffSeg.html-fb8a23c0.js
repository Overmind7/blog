import{_ as l,r as i,o,c as p,a as s,d as a,b as t,e}from"./app-04b0d2b0.js";const c={},r=e(`<h1 id="diffseg" tabindex="-1"><a class="header-anchor" href="#diffseg" aria-hidden="true">#</a> DiffSeg</h1><p>Diffuse, Attend, and Segment: Unsupervised Zero-Shot Segmentation using Stable Diffusion</p><p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/image-20230909113225632.png" alt="image-20230909113225632"></p><p>Aug.23.2023</p><h2 id="相关工作" tabindex="-1"><a class="header-anchor" href="#相关工作" aria-hidden="true">#</a> 相关工作</h2><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/image-20230909114846240.png" alt="image-20230909114846240" style="zoom:67%;"><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/image-20230909114944332.png" alt="image-20230909114944332" style="zoom:67%;"><p>Transformer Decoder</p><blockquote><p>https://github.com/CompVis/latent-diffusion/blob/a506df5756472e2ebaf9078affdde2c4f1502cd4/ldm/modules/attention.py#L196C40-L196C40</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BasicTransformerBlock</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dim<span class="token punctuation">,</span> n_heads<span class="token punctuation">,</span> d_head<span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.</span><span class="token punctuation">,</span> context_dim<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> gated_ff<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> checkpoint<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>attn1 <span class="token operator">=</span> CrossAttention<span class="token punctuation">(</span>query_dim<span class="token operator">=</span>dim<span class="token punctuation">,</span> heads<span class="token operator">=</span>n_heads<span class="token punctuation">,</span> dim_head<span class="token operator">=</span>d_head<span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">)</span>  <span class="token comment"># is a self-attention</span>
        self<span class="token punctuation">.</span>ff <span class="token operator">=</span> FeedForward<span class="token punctuation">(</span>dim<span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">,</span> glu<span class="token operator">=</span>gated_ff<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>attn2 <span class="token operator">=</span> CrossAttention<span class="token punctuation">(</span>query_dim<span class="token operator">=</span>dim<span class="token punctuation">,</span> context_dim<span class="token operator">=</span>context_dim<span class="token punctuation">,</span>
                                    heads<span class="token operator">=</span>n_heads<span class="token punctuation">,</span> dim_head<span class="token operator">=</span>d_head<span class="token punctuation">,</span> dropout<span class="token operator">=</span>dropout<span class="token punctuation">)</span>  <span class="token comment"># is self-attn if context is none</span>
        self<span class="token punctuation">.</span>norm1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>LayerNorm<span class="token punctuation">(</span>dim<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>norm2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>LayerNorm<span class="token punctuation">(</span>dim<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>norm3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>LayerNorm<span class="token punctuation">(</span>dim<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>checkpoint <span class="token operator">=</span> checkpoint

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> checkpoint<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_forward<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>checkpoint<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">_forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>attn1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>norm1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> x
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>attn2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>norm2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token operator">=</span>context<span class="token punctuation">)</span> <span class="token operator">+</span> x
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>ff<span class="token punctuation">(</span>self<span class="token punctuation">.</span>norm3<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> x
        <span class="token keyword">return</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><h3 id="理论依据" tabindex="-1"><a class="header-anchor" href="#理论依据" aria-hidden="true">#</a> 理论依据</h3><h4 id="intra-attention-similarity" tabindex="-1"><a class="header-anchor" href="#intra-attention-similarity" aria-hidden="true">#</a> Intra-Attention Similarity</h4><p>一张 attn map 中，同一个 object group 附近相似。</p><h4 id="inter-attention-similarity" tabindex="-1"><a class="header-anchor" href="#inter-attention-similarity" aria-hidden="true">#</a> Inter-Attention Similarity</h4><p>同一个 object group 具有相似 attn map 。</p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/image-20230909113340573.png" alt="image-20230909113340573" style="zoom:67%;"><h3 id="attention-map" tabindex="-1"><a class="header-anchor" href="#attention-map" aria-hidden="true">#</a> attention map</h3>`,18),m=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"h"),s("mi",null,"k")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"w"),s("mi",null,"k")]),s("mo",{stretchy:"false"},")"),s("mo",null,"∈"),s("mo",{stretchy:"false"},"{"),s("mn",null,"8"),s("mo",null,"×"),s("mn",null,"8"),s("mo",{separator:"true"},","),s("mn",null,"16"),s("mo",null,"×"),s("mn",null,"16"),s("mo",{separator:"true"},","),s("mn",null,"32"),s("mo",null,"×"),s("mn",null,"32"),s("mo",{separator:"true"},","),s("mn",null,"64"),s("mo",null,"×"),s("mn",null,"64"),s("mo",{stretchy:"false"},"}")]),s("annotation",{encoding:"application/x-tex"}," (h_k,w_k)\\in\\{8\\times8,16\\times16,32\\times32,64\\times64\\} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"h"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0269em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"∈"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"{"),s("span",{class:"mord"},"8"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"8"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"16"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"16"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"32"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"32"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"64"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"64"),s("span",{class:"mclose"},"}")])])])])],-1),u=e('<p>总共16个注意力层</p><ul><li>使用无条件的 latent</li><li>仅运行一次SD <ul><li>t = 300，近似无噪音输入</li></ul></li></ul><div class="custom-container tip"><p class="custom-container-title">如何处理多头注意力</p><p>由于多头注意力机制，存在第五个维度。</p><p>每个注意力层都有 8 个多头输出。我们沿着多头轴平均注意力张量以减少到 4 个维度，因为它们在这个维度上非常相似。</p><p>实验中，多头之间的差异远小于不同map之间kl散度的阈值，即使不平均在后面也会被合并。</p></div><h3 id="attention-aggregation" tabindex="-1"><a class="header-anchor" href="#attention-aggregation" aria-hidden="true">#</a> Attention Aggregation</h3><p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/image-20230909122303224.png" alt="image-20230909122303224"></p>',5),h=s("ul",null,[s("li",null,[s("p",null,"对齐张量"),s("ul",null,[s("li",null,[a("不同大小的map使用双线性插值扩大 "),s("ul",null,[s("li",null,"归一化，保持和为1")])]),s("li",null,"不同数量的map进行复制")])]),s("li",null,[s("p",null,[a("相加，聚合成 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"64"),s("mo",null,"×"),s("mn",null,"64"),s("mo",null,"×"),s("mn",null,"64"),s("mo",null,"×"),s("mn",null,"64")]),s("annotation",{encoding:"application/x-tex"},"64\\times64\\times64\\times64")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"64"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"64"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"64"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"64")])])])]),s("ul",null,[s("li",null,"聚合权重，正比于map分辨率")])])],-1),d=s("h3",{id:"iterative-attention-merging",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#iterative-attention-merging","aria-hidden":"true"},"#"),a(" Iterative Attention Merging")],-1),g=s("ul",null,[s("li",null,"采样 64 个点（anchors）")],-1),k=s("p",null,[s("img",{src:"https://raw.githubusercontent.com/Overmind7/images/main/img/image-20230909122641936.png",alt:"image-20230909122641936",style:{zoom:"40%"}}),s("img",{src:"https://raw.githubusercontent.com/Overmind7/images/main/img/image-20230909122143496.png",alt:"image-20230909122143496",style:{zoom:"40%"}})],-1),f=s("blockquote",null,[s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"L"),s("mi",null,"a")])]),s("annotation",{encoding:"application/x-tex"},"L_a")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"L"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"a")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a("，sample grid，从 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"A"),s("mi",null,"f")])]),s("annotation",{encoding:"application/x-tex"},"A_f")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9694em","vertical-align":"-0.2861em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"A"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10764em"}},"f")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2861em"}},[s("span")])])])])])])])]),a("中采样")]),s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"A"),s("mi",null,"f")])]),s("annotation",{encoding:"application/x-tex"},"A_f")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9694em","vertical-align":"-0.2861em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"A"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10764em"}},"f")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2861em"}},[s("span")])])])])])])])]),a(", attn maps, "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"64"),s("mo",null,"×"),s("mn",null,"64"),s("mo",null,"×"),s("mn",null,"64"),s("mo",null,"×"),s("mn",null,"64")]),s("annotation",{encoding:"application/x-tex"},"64\\times64\\times64\\times64")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"64"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"64"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"64"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"64")])])])]),s("p",null,"N, iterations,"),s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"τ")]),s("annotation",{encoding:"application/x-tex"},"\\tau")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ")])])]),a(", threshold")])],-1),_=e('<ul><li><p>第一次迭代</p><ul><li>根据相似程度，将不同的maps聚类到不同的anchors上 <ul><li>KL散度，<img src="https://raw.githubusercontent.com/Overmind7/images/main/img/image-20230909130713818.png" alt="image-20230909130713818" style="zoom:50%;"></li><li>KL散度具有方向，取正反两个方向相加</li></ul></li><li>对每个聚类的anchors中的maps进行平均，得到这个anchor的attn map</li></ul></li><li><p>后续</p><ul><li>与第一次迭代类似，不同的是对anchor进行聚类和平均，减少anchor数量 <ul><li>类似 mean shift</li></ul></li></ul></li><li><p>双线性插值</p></li><li><p>非极大抑制</p></li></ul>',1),b={class:"custom-container tip"},v=s("p",{class:"custom-container-title"},"TIP",-1),y=s("p",null,"KL 散度不是距离指标，没有对称性",-1),x=s("p",null,"用其他方式衡量相似的？",-1),w=s("p",null,"Wasserstein Distance",-1),C={href:"https://zhuanlan.zhihu.com/p/58506295",target:"_blank",rel:"noopener noreferrer"},M=s("p",null,"Covariance",-1),A=e('<h2 id="结果" tabindex="-1"><a class="header-anchor" href="#结果" aria-hidden="true">#</a> 结果</h2><p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/image-20230909113631210.png" alt="image-20230909113631210"></p><h2 id="类似工作" tabindex="-1"><a class="header-anchor" href="#类似工作" aria-hidden="true">#</a> 类似工作</h2><h3 id="affinitynet" tabindex="-1"><a class="header-anchor" href="#affinitynet" aria-hidden="true">#</a> AffinityNet</h3>',4),z={href:"https://github.com/jiwoon-ahn/psa",target:"_blank",rel:"noopener noreferrer"},S={href:"https://blog.csdn.net/qq_36686169/article/details/106234954",target:"_blank",rel:"noopener noreferrer"},L=s("p",null,"输入：原始图像",-1),N=s("p",null,"输出：图像中相邻坐标像素对的语义相似度",-1),P=s("p",null,"仅通过图像级标签预测像素级别的语义相似度",-1),T=s("ul",null,[s("li",null,[s("p",null,"根据给定的图像和生成的CAM，首先建立一个邻域图，其中每个像素都在一定半径内与其邻域相连，通过AffinityNet估计图中连通像素对的语义相似度。")]),s("li",null,[s("p",null,"针对每一个类别，CAM中稀疏的激活区域通过随机游走策略传播到周围语义相同的区域，并对传播到其他语义类别的区域进行处罚。这种语义扩散对CAMs区域起到了很大的修正作用。")]),s("li",null,[s("p",null,"本文利用这个过程来进行训练，通过获取的每个像素位置与CAM对应类标签的关联性合成像素级的分割标签。生成的分割标签用于训练分割模型。")])],-1),D=s("p",null,"类似文章，把cnn的feature 换成了 transform 的feature",-1),O={href:"https://github.com/rulixiang/afa",target:"_blank",rel:"noopener noreferrer"},I=s("p",null,[s("img",{src:"https://raw.githubusercontent.com/Overmind7/images/main/img/afa.png",alt:"AFA flowchart"})],-1),R=s("h3",{id:"diffumasks",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#diffumasks","aria-hidden":"true"},"#"),a(" DiffuMasks")],-1),q={href:"https://github.com/weijiawu/DiffuMask",target:"_blank",rel:"noopener noreferrer"},V=s("p",null,"ICCV 2023",-1),E=s("p",null,"生成图片的同时生成mask，跨模态，文本监督",-1),W=s("p",null,[s("img",{src:"https://raw.githubusercontent.com/Overmind7/images/main/img/image-20230909142049679.png",alt:"image-20230909142049679"})],-1),j=s("h3",{id:"reco",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#reco","aria-hidden":"true"},"#"),a(" ReCo")],-1),F=s("p",null,"Reco: Retrieve and co-segment for zero-shot transfer.",-1),B={href:"https://github.com/NoelShin/reco",target:"_blank",rel:"noopener noreferrer"},K={href:"https://www.robots.ox.ac.uk/~vgg/research/reco/",target:"_blank",rel:"noopener noreferrer"},U=s("p",null,[s("img",{src:"https://raw.githubusercontent.com/Overmind7/images/main/img/image-20230909142643824.png",alt:"image-20230909142643824"})],-1),G=s("p",null,"不懂",-1),Z=s("p",null,"ReCo 的输入是未标记图像的集合以及要分割的概念的文本描述列表。通过将图像检索和图像集合中的联合分割相结合，ReCo 可以动态地为给定的概念构建分割器。在推理过程中，应用该分割器时无需对感兴趣的目标分布中的图像进行微调，从而支持零样本传输。",-1),Y={class:"custom-container tip"},H=s("p",{class:"custom-container-title"},"Dense Clip",-1),J=s("p",null,"将 clip 的 text - image 工作进一步拓展到 text - pixel ，以实现分割",-1),Q=s("img",{src:"https://raw.githubusercontent.com/Overmind7/images/main/img/v2-f62162a07e079101b97e107eb8c489e1_1440w.webp",alt:"img",style:{zoom:"67%"}},null,-1),X={href:"https://zhuanlan.zhihu.com/p/493775034",target:"_blank",rel:"noopener noreferrer"},$=s("h3",{id:"network-free",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#network-free","aria-hidden":"true"},"#"),a(" Network-free")],-1),ss=s("p",null,"cvpr‘2023",-1),as={href:"https://paperswithcode.com/paper/network-free-unsupervised-semantic",target:"_blank",rel:"noopener noreferrer"},ns=e('<p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/image-20230909133606320.png" alt="image-20230909133606320"></p><div class="custom-container tip"><p class="custom-container-title">核心idea</p><p>当使用 GAN 中的风格混合方法生成图像的合成变体时，属于同一语义段的一组像素的相关性不会改变。</p></div><h3 id="toco" tabindex="-1"><a class="header-anchor" href="#toco" aria-hidden="true">#</a> ToCo</h3>',3),ts={href:"https://github.com/rulixiang/toco",target:"_blank",rel:"noopener noreferrer"},es=s("p",null,[s("img",{src:"https://raw.githubusercontent.com/Overmind7/images/main/img/toco.png",alt:"AFA flowchart"})],-1),ls=s("p",null,"CAM: Class Activation Map, 分类网络预测图像时的激活区域。",-1),is=s("p",null,"EMA: 指数移动平均（Exponential Moving Average）也叫权重移动平均（Weighted Moving Average），是一种给予近期数据更高权重的平均方法。",-1),os={href:"https://zhuanlan.zhihu.com/p/68748778",target:"_blank",rel:"noopener noreferrer"},ps=e('<ul><li>vit存在的过度平滑问题,feature map</li></ul><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/7d2028f71bcd1b27eb49026e7f28d3ff.png" alt="7d2028f71bcd1b27eb49026e7f28d3ff.png" style="zoom:67%;"><h4 id="ptc-patch-token-contrast" tabindex="-1"><a class="header-anchor" href="#ptc-patch-token-contrast" aria-hidden="true">#</a> PTC：Patch Token Contrast</h4><p>利用中间层（第十个encoder)的输出外接辅助分类层得到Mm，主要是因为中间层仍然可以保持语义多样性，由它生成的token relations Y作为global patch tokens F的监督，可以解决vit存在的过度平滑问题。</p><h4 id="ctc-classtokencontrast" tabindex="-1"><a class="header-anchor" href="#ctc-classtokencontrast" aria-hidden="true">#</a> CTC：ClassTokenContrast</h4><p>PTC解决了vit存在的过度平滑问题，生成效果不错的辅助cam。然而，仍然存在一些识别能力较弱的难以区分的对象区域。</p><p>受ViT中class token 可以聚合高级语义的特性，设计了(class Token Contrast, CTC)模块，提高伪标签质量。</p><ul><li><p>从辅助CAM Mm指定的不确定区域和背景区域对原始图像进行随机裁剪得到局部图像，将其分配为正样本(来自不确定区域)或负样本(来自背景区域)。</p><p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/image-20230909140248549.png" alt="image-20230909140248549"></p></li><li><p>通过最小化全局class token P和正样本之间的差异（在不确定区域中激活出更多的前景区域），最大化全局class token P和负样本之间的差异（加大前景和背景的差异），</p></li><li><p>整个ctc loss 通过最小化全局class token 和局部class token 来促进局部非显著区域与全局对象之间表示的一致性，从而进一步强制从CAM中激活更多的对象区域。</p></li></ul>',8);function cs(rs,ms){const n=i("ExternalLinkIcon");return o(),p("div",null,[r,m,u,h,d,g,k,f,_,s("div",b,[v,y,x,w,s("p",null,[s("a",C,[a("【数学】Wasserstein Distance - 知乎 (zhihu.com)"),t(n)])]),M]),A,s("blockquote",null,[s("p",null,[s("a",z,[a("jiwoon-ahn/psa: Learning Pixel-level Semantic Affinity with Image-level Supervision for Weakly Supervised Semantic Segmentation, CVPR 2018 (github.com)"),t(n)])])]),s("p",null,[s("a",S,[a("论文笔记]AffinityNet_动如脱兔((≡ຶ̑ꀬ≡ຶ̑))静如脱兔的博客-CSDN博客"),t(n)])]),L,N,P,T,s("blockquote",null,[D,s("p",null,[s("a",O,[a("CVPR 2022] Learning Affinity from Attention: End-to-End Weakly-Supervised Semantic Segmentation with Transformers (github.com)"),t(n)])]),I]),R,s("p",null,[s("a",q,[a("weijiawu/DiffuMask: DiffuMask: Synthesizing Images with Pixel-level Annotations for Semantic Segmentation Using Diffusion Models (github.com)"),t(n)])]),V,E,W,j,F,s("p",null,[s("a",B,[a("NeurIPS'22 ReCo: Retrieve and Co-segment for Zero-shot Transfer (github.com)"),t(n)])]),s("p",null,[s("a",K,[a("ReCo (ox.ac.uk)"),t(n)])]),U,G,Z,s("div",Y,[H,J,Q,s("p",null,[s("a",X,[a("【CLIP系列Paper解读】DenseCLIP: Language-Guided Dense Prediction with Context-Aware Prompting - 知乎 (zhihu.com)"),t(n)])])]),$,ss,s("p",null,[s("a",as,[a("Network-Free, Unsupervised Semantic Segmentation With Synthetic Images | Papers With Code"),t(n)])]),ns,s("p",null,[s("a",ts,[a("CVPR 2023 Token Contrast for Weakly-Supervised Semantic Segmentation (github.com)"),t(n)])]),es,s("blockquote",null,[ls,is,s("p",null,[s("a",os,[a("【炼丹技巧】指数移动平均（EMA）的原理及PyTorch实现 - 知乎 (zhihu.com)"),t(n)])])]),ps])}const hs=l(c,[["render",cs],["__file","DiffSeg.html.vue"]]);export{hs as default};
