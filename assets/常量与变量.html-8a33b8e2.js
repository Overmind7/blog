import{_ as i,r as p,o as d,c,a,b as s,w as t,d as n,e as l}from"./app-04b0d2b0.js";const o={},r=a("h1",{id:"数据类型",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#数据类型","aria-hidden":"true"},"#"),n(" 数据类型")],-1),u={class:"table-of-contents"},h=l('<h2 id="c-的数据类型" tabindex="-1"><a class="header-anchor" href="#c-的数据类型" aria-hidden="true">#</a> Ｃ++ 的数据类型</h2><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h3><ul><li><p>数值型</p><ul><li><p>整型 int short long long long char bool</p></li><li><p>浮点型 float double long double</p></li></ul></li><li><p>非数值型 string</p></li></ul><h3 id="大小" tabindex="-1"><a class="header-anchor" href="#大小" aria-hidden="true">#</a> 大小</h3><p>8 bite = 1 byte</p><p>8 比特 = 1 字节</p>',6),m=a("table",null,[a("thead",null,[a("tr",null,[a("th",{style:{"text-align":"left"}},"类 型"),a("th",{style:{"text-align":"left"}},"类型标识符"),a("th",{style:{"text-align":"left"}},"位数/字节数"),a("th",{style:{"text-align":"left"}},"数值范围")])]),a("tbody",null,[a("tr",null,[a("td",{style:{"text-align":"left"}},"整型"),a("td",{style:{"text-align":"left"}},"int"),a("td",{style:{"text-align":"left"}},"32/4"),a("td",{style:{"text-align":"left"}})]),a("tr",null,[a("td",{style:{"text-align":"left"}},"无符号整型"),a("td",{style:{"text-align":"left"}},"unsigned int"),a("td",{style:{"text-align":"left"}},"4"),a("td",{style:{"text-align":"left"}})]),a("tr",null,[a("td",{style:{"text-align":"left"}},"短整型"),a("td",{style:{"text-align":"left"}},"short"),a("td",{style:{"text-align":"left"}},"16/2"),a("td",{style:{"text-align":"left"}},[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"−"),a("msup",null,[a("mn",null,"2"),a("mn",null,"15")]),a("mo",null,"−"),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"},"-2^{15}-1")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"−"),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"15")])])])])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1")])])]),n("~ "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mn",null,"2"),a("mn",null,"15")]),a("mo",null,"−"),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"},"2^{15}-1")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"15")])])])])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1")])])])])]),a("tr",null,[a("td",{style:{"text-align":"left"}},"无符号短整型"),a("td",{style:{"text-align":"left"}},"unsigned short"),a("td",{style:{"text-align":"left"}},"2"),a("td",{style:{"text-align":"left"}})]),a("tr",null,[a("td",{style:{"text-align":"left"}},"长整型"),a("td",{style:{"text-align":"left"}},"long"),a("td",{style:{"text-align":"left"}},"4"),a("td",{style:{"text-align":"left"}})]),a("tr",null,[a("td",{style:{"text-align":"left"}},"无符号长整型"),a("td",{style:{"text-align":"left"}},"unsigned long"),a("td",{style:{"text-align":"left"}},"4"),a("td",{style:{"text-align":"left"}})]),a("tr",null,[a("td",{style:{"text-align":"left"}},"字符型"),a("td",{style:{"text-align":"left"}},"char"),a("td",{style:{"text-align":"left"}},"1"),a("td",{style:{"text-align":"left"}},"-128 ~ 127")]),a("tr",null,[a("td",{style:{"text-align":"left"}},"无符号字符型"),a("td",{style:{"text-align":"left"}},"unsigned char"),a("td",{style:{"text-align":"left"}},"1"),a("td",{style:{"text-align":"left"}},"0 ~ 256")]),a("tr",null,[a("td",{style:{"text-align":"left"}},"单精度型"),a("td",{style:{"text-align":"left"}},"float"),a("td",{style:{"text-align":"left"}},"4"),a("td",{style:{"text-align":"left"}})]),a("tr",null,[a("td",{style:{"text-align":"left"}},"双精度型"),a("td",{style:{"text-align":"left"}},"double"),a("td",{style:{"text-align":"left"}},"8"),a("td",{style:{"text-align":"left"}})]),a("tr",null,[a("td",{style:{"text-align":"left"}},"长双精度型"),a("td",{style:{"text-align":"left"}},"long double"),a("td",{style:{"text-align":"left"}},"8"),a("td",{style:{"text-align":"left"}})])])],-1),g=l(`<p>​ 说明</p><ul><li>整型数据在内存中案二进制储存</li><li>修饰符 signed 表示有符号的，数值以补码的形式存放，储存单元中最高位（二进制最左边的）表示符号（- +）</li><li>修饰符 unsigned 没有符号，二进制数表示数值本身</li></ul><h3 id="用-typedef-声明新的类型名" tabindex="-1"><a class="header-anchor" href="#用-typedef-声明新的类型名" aria-hidden="true">#</a> 用 typedef 声明新的类型名</h3><p>​ 用 typedef 声明一个新的类型名，用来代替已有的类型名（为已有类型名取一个别名）</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> INTEGER<span class="token punctuation">;</span> <span class="token comment">//指定用标识符 INTEGER 代表 int 类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">float</span> REAL<span class="token punctuation">;</span>  <span class="token comment">//指定用 REAL代表 float 类型  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h4><p>​ 如果在一个程序中，整型变量时专门用来计数的，可以用 COUNT 来作为整型类型名：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> COUNT<span class="token punctuation">;</span>  <span class="token comment">//指定用 COUNT 代表 int 类型</span>
COUNT i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>			<span class="token comment">//将变量 i，j 定义为 COUNT 类型，即 int 类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在程序中将 i，j 定义为 COUNT 类型，可以使人一目了然地知道它们是用于技术的</p><h4 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h4><h5 id="_1、对一个结构体类型声明一个新的名字" tabindex="-1"><a class="header-anchor" href="#_1、对一个结构体类型声明一个新的名字" aria-hidden="true">#</a> 1、对一个结构体类型声明一个新的名字</h5><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">//注意在 struct 之前用了关键字 typedef，表示是声明新类型名</span>
    <span class="token keyword">int</span> month<span class="token punctuation">;</span>
    <span class="token keyword">int</span> day<span class="token punctuation">;</span>
    <span class="token keyword">int</span> year<span class="token punctuation">;</span>
<span class="token punctuation">}</span>DATE<span class="token punctuation">;</span>           <span class="token comment">//注意 DATE 是新类型名，而不是结构体变量名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 所声明的新的类型名 DATE 代表上面指定的一个结构体类型</p><h5 id="_2、进一步用-typedef-声明新的类型名" tabindex="-1"><a class="header-anchor" href="#_2、进一步用-typedef-声明新的类型名" aria-hidden="true">#</a> 2、进一步用 typedef 声明新的类型名</h5><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span>  NUM<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//声明 NUM 为整型数组类型，包含 100 个元素</span>
NUM n<span class="token punctuation">;</span>                  <span class="token comment">//定义 n 为包含 100 个整型数组元素的数组</span>

<span class="token keyword">typedef</span> <span class="token keyword">char</span> <span class="token operator">*</span>STRING<span class="token punctuation">;</span>   <span class="token comment">//声明 STRING 为 char * 类型（字符指针类型）</span>
	STRING p<span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//定义 p 为 字符指针变量，s为 char* 类型的指针数组</span>

<span class="token comment">//声明 POINTER 为指向函数的指针类型，函数的返回值为整型</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>POINTER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
POINTER p1<span class="token punctuation">,</span>p2<span class="token punctuation">;</span>          <span class="token comment">//p1，p2 为 POINTER 类型的指针变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="总结-声明一个新的类型名的方法" tabindex="-1"><a class="header-anchor" href="#总结-声明一个新的类型名的方法" aria-hidden="true">#</a> 总结：声明一个新的类型名的方法</h4><ol><li>先按照定义变量的方法写出定义语句 <code>int i;</code></li><li>将变量名换成新的类型名 <code>int COUNT;</code></li><li>在最前面加上 typedef <code>typedef int COUNT;</code></li><li>然后可以按照新类型名去定义变量</li></ol><div class="custom-container tip"><p class="custom-container-title">\`typedef\` 总结</p><ul><li>用typedef声明的新类型名又称为 typedef类型名，或 typedef名字</li><li>用typedef只是对已经存在的类型增加一个类型名，而不是创造新的类型</li><li>可以用typedef声明新类型名，但是不能用来定义变量</li><li>用typedef可以声明 数组类型、字符串类型、指针类型，使用比较方便</li><li>用typedef可以将声明数组类型和定义数组变量分离</li><li>一般写到头文件中</li><li>便于程序的通用与移植</li></ul></div><h2 id="c-常量" tabindex="-1"><a class="header-anchor" href="#c-常量" aria-hidden="true">#</a> Ｃ++ 常量</h2><p><strong>分类</strong></p><p>字面常量（直接常量）字面形式上即可认别为常量</p><ul><li>数值型常量 <ul><li>整型常量</li><li>实型常量</li></ul></li><li>字符型常量</li></ul><h3 id="数值常量" tabindex="-1"><a class="header-anchor" href="#数值常量" aria-hidden="true">#</a> 数值常量</h3><h4 id="整型" tabindex="-1"><a class="header-anchor" href="#整型" aria-hidden="true">#</a> 整型：</h4><p><strong>分类</strong></p><p>短整型 +-（2^15^ - 1） short</p><p>整型（长整型）+-（2^32^ -1） int 或 long int</p><p>常量无 unsigned 型，但是一个非负值整数可以赋给 unsigned 型变量（不能超过范围）</p><p><strong>表示形式</strong>：</p><p>十进制数</p><ul><li>常用于函数调参，注意形参和实参的类型匹配：</li><li>形参是 123L，实参也必须是 123L，而不能是 123</li><li>长整型：后面加一个字母L，如，123L，0L</li></ul><p>八进制数</p><ul><li>常数开头加一个数字 0, <ul><li>例如 020 相当于十进制下的 16</li></ul></li></ul><p>十六进制数</p><ul><li>常数开头加上数字 0 和字母 X ，例0X20 表示十六进制数 20，相当于十进制下的32, <ul><li>也有用+H的，42H 表示 66</li></ul></li></ul><h4 id="浮点数" tabindex="-1"><a class="header-anchor" href="#浮点数" aria-hidden="true">#</a> 浮点数</h4><h5 id="十进制小数" tabindex="-1"><a class="header-anchor" href="#十进制小数" aria-hidden="true">#</a> 十进制小数</h5><p>由整数部分 + 小数部分组成，可以省略其一，但是不能都省略</p><ul><li>默认处理为 double，八字节内存</li><li>单精度浮点数 float：后面加 F 或者 f</li><li>长双精度浮点数 long double：后面加 L 或者 l</li></ul><h5 id="指数形式-浮点形式" tabindex="-1"><a class="header-anchor" href="#指数形式-浮点形式" aria-hidden="true">#</a> 指数形式（浮点形式）</h5><p>数符 + 数字部分 + 指数部分</p><ul><li>字母 e 表示其后的数为以 10 为底的幂</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token number">3.14159</span> <span class="token operator">=</span> <span class="token number">0.314159e1</span> <span class="token operator">=</span> <span class="token number">31.4159e-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于不同的指数部分，使得小数点浮动</p><p>内存中以&#39;**规范化指数形式&#39;**存放：</p><ul><li>.314159e1 数字部分小于 1</li></ul><h4 id="字符常量" tabindex="-1"><a class="header-anchor" href="#字符常量" aria-hidden="true">#</a> 字符常量</h4><h5 id="普通的字符常量" tabindex="-1"><a class="header-anchor" href="#普通的字符常量" aria-hidden="true">#</a> 普通的字符常量</h5><p>用单撇号括起来的 <code>&#39;一个字符&#39;</code></p><ul><li><code>&#39;a&#39;</code>, <code>&#39;#&#39;</code></li><li>字符常量只能包含一个字符</li><li>区分大小</li><li><code>&#39;&#39;</code> 是界定符，不属于其中的一部分</li></ul><p><strong>ASCII码</strong></p><table><thead><tr><th style="text-align:left;">字符</th><th style="text-align:left;">0</th><th style="text-align:left;">9</th><th style="text-align:left;">A</th><th style="text-align:left;">Z</th><th style="text-align:left;">a</th><th style="text-align:left;">z</th></tr></thead><tbody><tr><td style="text-align:left;">ASCII码</td><td style="text-align:left;">48</td><td style="text-align:left;">57</td><td style="text-align:left;">65</td><td style="text-align:left;">90</td><td style="text-align:left;">97</td><td style="text-align:left;">122</td></tr></tbody></table><h5 id="转义字符型" tabindex="-1"><a class="header-anchor" href="#转义字符型" aria-hidden="true">#</a> 转义字符型</h5><p>以 &#39;&#39; 开头的字符序列</p><p>&#39;\\0&#39; 空字符</p><p>&#39;\\n&#39; 换行</p><p>&#39;\\t&#39; tab</p><p>&#39;\\&#39; 反斜杠字符 \\</p><p>&#39;&#39;&#39; 单引号字符 ’</p><p>&#39;&quot;&#39; 双引号字符 “</p><p>&#39;\\xdd&#39; 表示二位十六进制数，dd指的是两个数字，例 &#39;x12&#39;</p><p>&#39;\\ddd&#39; 表示三位八进制，&#39;123&#39;</p><p>以上两种字符型常量可以与整形通用，相当于对他们的 ASCII 码运算</p><h5 id="字符串常量" tabindex="-1"><a class="header-anchor" href="#字符串常量" aria-hidden="true">#</a> 字符串常量</h5><p>​ 用双引号括起来，系统会加一个 \\0 作为结束标识 ​ 一个中文字符两个字节 ​ &quot;a&quot; 两个字节 &#39;a&#39; 一个字节 ​ &quot;abc\\n&quot; 五个字节 ​ 如果 \\ 后面的无法构成一个合法的转义字符，则编译错误 ​ &quot;abc\\n&quot; 五个字符，六个字节</p><h5 id="符号常量" tabindex="-1"><a class="header-anchor" href="#符号常量" aria-hidden="true">#</a> 符号常量</h5><p>​ <code>#define PRICE 30</code></p><p>指定 PRICE　在本程序单位中表示 30</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>虽然符号常量有名字,但是不是变量</p></div><p>常用符号常量 <code>INT_MAX</code>，<code>INT_MIN</code>等</p><h5 id="宏定义" tabindex="-1"><a class="header-anchor" href="#宏定义" aria-hidden="true">#</a> 宏定义</h5><p>define是Ｃ语言中的预处理命令，用于宏定义以#开头，一般放在源文件的前面</p><h6 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h6><p>宏定义允许用户一个标识符表示一个字符串</p><p>被定义为“宏”的标识符为“宏名”</p><p>在预处理的时候，对程序中所有出现的宏名，都用宏定义中的字符串去代换，被称为&#39;宏代换&#39;或者&#39;宏展开&#39;</p><h6 id="形式" tabindex="-1"><a class="header-anchor" href="#形式" aria-hidden="true">#</a> 形式</h6><p><code>#define 标识符 字符串</code></p><h6 id="分类-1" tabindex="-1"><a class="header-anchor" href="#分类-1" aria-hidden="true">#</a> 分类</h6><ol><li>无参数</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">10</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>有参数</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">M</span><span class="token expression"><span class="token punctuation">(</span>y<span class="token punctuation">)</span> y<span class="token operator">*</span>y<span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span>y</span></span>
K<span class="token operator">=</span><span class="token function">M</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><ol><li>运算符优先问题</li></ol><p>​ 不仅宏体是纯文本替换，宏参数也是纯文本替换</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">M</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> x<span class="token operator">*</span>y</span></span>
<span class="token function">M</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//没有问题,1+3</span>
<span class="token function">M</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//纯文本替换，1+2*3，优先级错误，与本意不同</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法：每个参数加上括号，限定优先级</p><ol start="2"><li>分号吞噬</li></ol><p>​ <strong>宏不是语句，&#39;不能将分号；加入结尾！！</strong></p><p>​ 否则分号也会被替换入程序中，可能产生夹断</p><ol start="3"><li><mark>如何定义宏定义变量的时候定义数据类型？或者说只能用常变量？</mark></li></ol></div><h2 id="c-变量" tabindex="-1"><a class="header-anchor" href="#c-变量" aria-hidden="true">#</a> C++变量</h2><p>操作计算机——————操作计算机内存</p><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p>计算机中一块特定的内存空间，在程序运行期间其值可以改变的量 变量的三要素：类型，名字，值</p><h3 id="变量名的名命规则-标识符名命" tabindex="-1"><a class="header-anchor" href="#变量名的名命规则-标识符名命" aria-hidden="true">#</a> 变量名的名命规则(标识符名命)</h3><ul><li>（标识符）只能由字母、数字、下划线 3种字符组成</li><li>首字必须为 字母 或 下划线，不能是数字</li><li>不能包含除了”_“下划线之外的任何特殊字符</li><li>不能使用保留字（74 个）</li></ul><h3 id="定义和使用变量" tabindex="-1"><a class="header-anchor" href="#定义和使用变量" aria-hidden="true">#</a> 定义和使用变量</h3><p><mark>必须先定义，后使用</mark> ​定义变量：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typename</span> 变量名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>定义时初始化变量</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>typename 变量名 = 值;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>定义后初始化变量：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>typename 变量名;
变量名 = 值;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一条语句也可以声明多个同类型的变量，用逗号隔开</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>num2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>num3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 英语中逗号后最好有空格</p><p>​ 等号前后最好有空格</p><h3 id="初始化变量" tabindex="-1"><a class="header-anchor" href="#初始化变量" aria-hidden="true">#</a> 初始化变量</h3><p>​ 初始化不是在编译阶段完成的（除了静态储存变量和外部变量（全局变量）的初始化之外） ​ 而是在程序运行时执行本函数时赋予初值的</p><h3 id="常变量" tabindex="-1"><a class="header-anchor" href="#常变量" aria-hidden="true">#</a> 常变量</h3><h4 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1" aria-hidden="true">#</a> 概念</h4><p>​ 定义变量前，用 const 修饰， ​ 变量的值在程序运行期间不能改变</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ &#39;定义常变量的时候必须初始化&#39;，此后不能改变其值（不能出现在等式左边）</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> a<span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//❌错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 常变量又被称为&#39;只读变量&#39;</p><h4 id="与-define-的比较" tabindex="-1"><a class="header-anchor" href="#与-define-的比较" aria-hidden="true">#</a> 与 #define 的比较</h4><table><thead><tr><th>符号常量</th><th>常变量</th></tr></thead><tbody><tr><td>由 #define 定义</td><td>由 const 修饰</td></tr><tr><td>用符号代替字符串</td><td>具有变量的特征</td></tr><tr><td>没有类型，内存中没有以符号常量命名的储存单元</td><td>有类型，内存中存在………………</td></tr><tr><td>不是变量&#39;</td><td>可以用 sizeof(type) 测量长度</td></tr></tbody></table>`,112);function k(f,y){const e=p("router-link");return d(),c("div",null,[r,a("nav",u,[a("ul",null,[a("li",null,[s(e,{to:"#c-的数据类型"},{default:t(()=>[n("Ｃ++ 的数据类型")]),_:1}),a("ul",null,[a("li",null,[s(e,{to:"#分类"},{default:t(()=>[n("分类")]),_:1})]),a("li",null,[s(e,{to:"#大小"},{default:t(()=>[n("大小")]),_:1})]),a("li",null,[s(e,{to:"#用-typedef-声明新的类型名"},{default:t(()=>[n("用 typedef 声明新的类型名")]),_:1})])])]),a("li",null,[s(e,{to:"#c-常量"},{default:t(()=>[n("Ｃ++ 常量")]),_:1}),a("ul",null,[a("li",null,[s(e,{to:"#数值常量"},{default:t(()=>[n("数值常量")]),_:1})])])]),a("li",null,[s(e,{to:"#c-变量"},{default:t(()=>[n("C++变量")]),_:1}),a("ul",null,[a("li",null,[s(e,{to:"#概念"},{default:t(()=>[n("概念")]),_:1})]),a("li",null,[s(e,{to:"#变量名的名命规则-标识符名命"},{default:t(()=>[n("变量名的名命规则(标识符名命)")]),_:1})]),a("li",null,[s(e,{to:"#定义和使用变量"},{default:t(()=>[n("定义和使用变量")]),_:1})]),a("li",null,[s(e,{to:"#初始化变量"},{default:t(()=>[n("初始化变量")]),_:1})]),a("li",null,[s(e,{to:"#常变量"},{default:t(()=>[n("常变量")]),_:1})])])])])]),h,m,g])}const b=i(o,[["render",k],["__file","常量与变量.html.vue"]]);export{b as default};
