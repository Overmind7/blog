import{_ as i,r as c,o as l,c as u,a as n,b as a,w as e,d as s,e as o}from"./app-04b0d2b0.js";const r={},d={class:"table-of-contents"},k=o(`<h1 id="c-stl-部分用法" tabindex="-1"><a class="header-anchor" href="#c-stl-部分用法" aria-hidden="true">#</a> C++ STL 部分用法</h1><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h2><p>push_back 函数</p><p>上述代码输出的结果为：&quot;Hello!&quot;</p><p>请注意，push_back函数仅适用于向字符串添加一个字符。如果要添加一个字符串，可以使用字符串的加号运算符（+）或者append函数</p><p><code>substring</code> 函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">substr</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>表示从下标为index的地方开始算，截取len长度的字符。</p><p>如果只有一个参数则表示截取从该位置到末尾。</p><p><code>split</code> 函数</p><p>标准库里没有，要自己实现。</p><p>例如，分割以空格隔开的字符串，可能在前后和中间含有多个空格。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token function">splitString</span><span class="token punctuation">(</span>string sen<span class="token punctuation">)</span><span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> vec<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>sen<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> sen<span class="token punctuation">.</span>npos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sen<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            sen <span class="token operator">=</span> sen<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>sen<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sen<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sen<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sen<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sen <span class="token operator">=</span> sen<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>sen<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sen<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span>sen <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token keyword">return</span> vec<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sen<span class="token punctuation">)</span><span class="token punctuation">;</span>		   
        <span class="token keyword">return</span> vec<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>find</code> 函数</p><p>使用<code>string</code>类的<code>find</code>成员函数可以找到一个字符串在另一个字符串中的位置。<code>find</code>函数返回目标字符串在源字符串中的第一个匹配位置的索引，如果找不到则返回<code>string::npos</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>size_t pos <span class="token operator">=</span> sourceString<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>targetString<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="字符串类型转换函数" tabindex="-1"><a class="header-anchor" href="#字符串类型转换函数" aria-hidden="true">#</a> 字符串类型转换函数</h3><p><code>stoi</code>： <code>string</code>型变量转换为<code>int</code>型变量</p><p><code>stol</code>： <code>string</code>型变量转换为<code>long</code>型变量</p><p><code>stoul</code>：<code>string</code>型变量转换为<code>unsigned long</code>型变量</p><p><code>stoll</code>： <code>string</code>型变量转换为<code>long long</code>型变量(常用)</p><p><code>stoull</code>：<code>string</code>型变量转换为<code>unsigned long long</code>型变量</p><p><code>stof</code>： <code>string</code>型变量转换为<code>float</code>型变量</p><p><code>stod</code>： <code>string</code>型变量转换为<code>double</code>型变量(常用)</p><p><code>stold</code>：<code>string</code>型变量转换为<code>long double</code>型变量</p><div class="custom-container tip"><p class="custom-container-title">技巧</p><p>在日常使用中， 最常用的是stoll和stod这两个函数， stoll可以兼容stoi，stol； 而stod可以兼容stof。</p></div><p>例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span> </span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	string s <span class="token operator">=</span> <span class="token string">&quot;11.11&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token function">stod</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),v={href:"https://zhanglong.blog.csdn.net/article/details/110290292?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-110290292-blog-131157099.235%5Ev38%5Epc_relevant_sort_base3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-110290292-blog-131157099.235%5Ev38%5Epc_relevant_sort_base3&utm_relevant_index=1",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,[n("code",null,"to_string"),s(" 函数")],-1),b=n("p",null,"函数的主要作用是将数字转换为字符串。",-1),h={href:"https://www.python100.com/html/93357.html",target:"_blank",rel:"noopener noreferrer"},g=n("h2",{id:"vector",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vector","aria-hidden":"true"},"#"),s(" Vector")],-1),f={href:"https://blog.csdn.net/qq_45577081/article/details/115752585",target:"_blank",rel:"noopener noreferrer"},_={href:"https://zhuanlan.zhihu.com/p/336492399?utm_id=0",target:"_blank",rel:"noopener noreferrer"},y=o(`<div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>对于二维vector变量，vv.size()的值vector的行数，vv[i].size()的值是vector的列数</p></div><p>使用vector容器的头文件是<code>#include&lt; vector &gt;</code></p><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p>vector容器常被成为向量容器(据说是线性代数中的一维数组就是叫做向量)</p><p>vector是一个动态大小数组的顺序容器,可以认为vector是存放任意类型的动态数组</p><p>vector的特性:</p><p>顺序序列：vector容器是按照严格的线性序列排序</p><p>动态数组：vector容器支持对序列中元素快速访问元素通过下标的方式,也可在首尾快速的删除或增加元素，当vector的元素数量超过他的容量时,容量会增倍(vetcor.capacity());</p><h3 id="vector构造函数" tabindex="-1"><a class="header-anchor" href="#vector构造函数" aria-hidden="true">#</a> vector构造函数</h3><p><code>vetcor()</code>：创建一个空的vector容器。</p><p><code>vector(int n)</code>：创建一个size()为n的vector容器,元素值为0。</p><p><code>vector(int n,const T&amp; t)</code>：创建一个size()为n的vector容器且每个元素值为t。</p><p><code>vector(const vector&amp;)</code>：复制另一个vector容器内容到该容器中</p><p><code>vector(begin,end)</code>：复制一个数组区间为 [begin,end)(注意是左开右闭?) 的值到vector中</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">temp</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//temp容器元素为0,0,0</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//p容器元素为3,3,3,3,3</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">q</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//q容器元素为3,3,3,3,3</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">tmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//tmp容器元素为1,2,3</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vector增加函数" tabindex="-1"><a class="header-anchor" href="#vector增加函数" aria-hidden="true">#</a> vector增加函数</h3><p><code>void push_back(const T&amp; t)</code>：往vector容器最后一个元素位置后添加元素t。</p><p><code>iterator insert(iterator iter,const T&amp; t)</code>：往iter迭代器指向元素前添加元素t。</p><p><code>iterator insert(iterator iter,int n,const T&amp; t)</code>：往iter迭代器指向元素前添加n个值为t的元素。</p><p><code>iterator insert(iterator iter,iterator first,iterator last)</code>：往iter迭代器指向元素前插入另一个相同类型vector容器的 [first,last) 间的元素。</p><p><code>iterator emplace (const_iterator position, Args&amp;&amp;… args)</code>;往position迭代器指定位置前插入一个元素，并返回当前位置。(c++11新增函数)</p><p><code>void emplace_back (Args&amp;&amp;… args)</code>;往vector容器后插入一个元素，效率高于push_back()函数。</p><div class="custom-container tip"><p class="custom-container-title">注</p><p>vector容器中没有<code>push_front()</code>函数</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> p<span class="token punctuation">;</span>
    p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//p容器内元素为1</span>
    p<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//p容器内元素为2,1;</span>
    p<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//因为end()是指最后一个元素再下一个位置 p容器内元素为2,1,3,3;</span>
    p<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//p容器值为4,4,2,1,3,3</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vector删除函数" tabindex="-1"><a class="header-anchor" href="#vector删除函数" aria-hidden="true">#</a> vector删除函数</h3><p>void pop_back()：删除容器最后一个元素。</p><p>iterator erase(iterator iter)：删除iter位置的元素。</p><p>iterator erase(iterator first,iterator last)：删除容器内[first,last)的元素。</p><p>iterator clear()：清除容器内所有元素。</p><div class="custom-container tip"><p class="custom-container-title">注</p><p>很多同学在使用迭代器遍历vector删除指定元素时,会出现野指针问题,</p><p>原因在于erase(iterator iter)删除一个元素时会返回下一个元素的迭代器，而再++iter,则会出现指针指向错误,</p><p>删除最后一个元素是返回end()，此时在++会出现段错误。</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator iter<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//遍历+删除指定元素正确用法</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>iter<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>
          s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">else</span> iter<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    s<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//s容器内元素为4,4,1,3</span>
    s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//s容器内元素为4,1,3</span>
    s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//s容器为空</span>
    s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//s容器为空</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vector遍历函数" tabindex="-1"><a class="header-anchor" href="#vector遍历函数" aria-hidden="true">#</a> vector遍历函数</h3><p><code>at(int pos)</code> ：返回pos位置处元素的引用，如果超出范围会返回异常错误,所以相对于[]更安全。</p><p><code>front()</code>：返回首元素的引用</p><p><code>back()</code>：返回尾元素的应用</p><p><code>iterator begin()</code>：返回向量vector容器的头指针,指向第一个元素</p><p><code>iterator end()</code>：返回向量vector容器的尾指针,指向最后一个元素的下一个位置</p><p><code>reverse_iterator rbegin()</code>：反向迭代器，指向最后一个元素</p><p><code>reverse_iterator rend()</code>：反向迭代器，指向第一个元素之前的位置</p><div class="custom-container tip"><p class="custom-container-title">注</p><p>反向迭代器与正向迭代器声明时不同需要改为reverse_iterator</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator iter1<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>iter1<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>iter1<span class="token punctuation">;</span>
        iter1<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//输出为4,4,1,3,2</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>reverse_iterator iter2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>iter2<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>iter2<span class="token punctuation">;</span>
        iter2<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//输出为2,3,1,4,4</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vector关于元素数量函数" tabindex="-1"><a class="header-anchor" href="#vector关于元素数量函数" aria-hidden="true">#</a> vector关于元素数量函数</h3><p><code>void reserve (size_type n)</code>：申请n个元素个数的内存空间，一次性分配效率较高.</p><p><code>int size()</code>：返回vector容器元素个数。</p><p><code>int capacity()</code>：返回vector容器容量。</p><p><code>resize()</code>：设置vector容器大小。</p><p><code>bool empty()</code>：判断vector容器是否为空,为空返回<code>true</code>,否则返回<code>false</code>。</p><div class="custom-container tip"><p class="custom-container-title">注</p><p>当vector内元素超过开始设定的size()大小,vector的容量会翻倍增加(1-&gt;2,2-&gt;4…)</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//输出size()为5</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//s的容量为5</span>
    s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//s的容量为10</span>
    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//输出为0,flase</span>
    s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//输出为1,true</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vector其他函数" tabindex="-1"><a class="header-anchor" href="#vector其他函数" aria-hidden="true">#</a> vector其他函数</h3><p>void swap(vector&amp;)：交换两个同类型向量的数据 ??</p><p>void assign(int n,const T&amp; x)：设置向量中前n个元素的值为x</p><p>void assign(const_iterator first,const_iterator last)：向量中[first,last)中元素设置成当前向量元素</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//s容器内元素为3,3,3,3 p容器内元素为2,2,2,2,2</span>
    s<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//s容器内元素为1,1,3,3</span>
    p<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//p容器内元素为1,1,3,3</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h2>`,55),q={href:"https://blog.csdn.net/weixin_39690454/article/details/108354997",target:"_blank",rel:"noopener noreferrer"},w=o(`<div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>pair&lt; &gt; 的 first 和 second 属于模板的成员函数，用 <code>.</code> 调用</p><p>关联容器如 map&lt;key, value&gt; 等的 first 和 second 是迭代器，当成指针用，调用应该使用 <code>-&gt;</code></p></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>使用count，返回的是被查找元素的个数。如果有，返回1；否则，返回0。</p><ul><li>注意，map中不存在相同元素，所以返回值只能是1或0。</li></ul><p>使用find，返回的是被查找元素的位置，没有则返回map.end()。</p></div><h2 id="unordered-map" tabindex="-1"><a class="header-anchor" href="#unordered-map" aria-hidden="true">#</a> unordered_map</h2><p>在C++中，存在一种简单申请哈希表的函数：<code>unordered_map&lt;element type&gt; name {{},{}}</code></p><p>一.对该函数的简要介绍：</p><p>1、<code>unordered_map </code>是存储<code>&lt;key, value&gt;</code>键值对的关联式容器，其允许通过 <code>key </code>快速的索引到与其对应的<code>value（hashmap&lt;key&gt; == value）</code></p><p>2、<code>unordered_map </code>中，键值通常用于唯一的标识元素，而映射值是一个对象，其内容与此键关联，键和映射的类型可以不同</p><p>3、在内部，<code>unordered_map </code>没有对<code>&lt;key, value&gt;</code>进行排序，<code>unordered_map </code>将相同哈希值的键值对放在对应的桶中</p><p>4、<code>unordered_map </code>容器通过key访问单个元素比map快，但它遍历元素子集的范围和迭代方面效率较低</p><p>5、<code>unordered_map </code>实现了直接访问操作符（<code>operator[]</code>）允许通过 <code>key </code>作为参数访问 <code>value</code></p><p>6、<code>unordered_map </code>的迭代器至少是前向迭代器</p><p>二. unordered_map 迭代器</p><table><thead><tr><th>功能</th><th>成员方法</th></tr></thead><tbody><tr><td><code>begin()</code></td><td>返回指向容器中第一个键值对的正向迭代器。</td></tr><tr><td><code>end()</code></td><td>返回指向容器中最后一个键值对之后位置的正向迭代器。</td></tr><tr><td><code>cbegin()</code></td><td>和 begin() 功能相同，只不过在其基础上增加了 const 属性，即该方法返回的迭代器不能用于修改容器内存储的键值对。</td></tr><tr><td><code>cend()</code></td><td>和 end() 功能相同，只不过在其基础上，增加了 const 属性，即该方法返回的迭代器不能用于修改容器内存储的键值对。</td></tr><tr><td><code>find(key)</code></td><td>查找以 key 为键的键值对，如果找到，则返回一个指向该键值对的正向迭代器；反之，则返回一个指向容器中最后一个键值对之后位置的迭代器（如果 end() 方法返回的迭代器）。</td></tr><tr><td><code>equal_range(key)</code></td><td>返回一个 pair 对象，其包含 2 个迭代器，用于表明当前容器中键为 key 的键值对所在的范围。</td></tr></tbody></table><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//创建 umap 容器</span>
    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span> umap<span class="token punctuation">{</span>
        <span class="token punctuation">{</span><span class="token string">&quot;Python教程&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;http://python/&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">&quot;Java教程&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;http://java/&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">&quot;Linux教程&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;http://linux/&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;umap 存储的键值对包括：&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token comment">//遍历输出 umap 容器中所有的键值对</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> iter <span class="token operator">=</span> umap<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter <span class="token operator">!=</span> umap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>iter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&lt;&quot;</span> <span class="token operator">&lt;&lt;</span> iter<span class="token operator">-&gt;</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">&lt;&lt;</span> iter<span class="token operator">-&gt;</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&gt;&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//获取指向指定键值对的前向迭代器</span>
    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator iter <span class="token operator">=</span> umap<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;Java教程&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;umap.find(\\&quot;Java教程\\&quot;) = &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&lt;&quot;</span> <span class="token operator">&lt;&lt;</span> iter<span class="token operator">-&gt;</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">&lt;&lt;</span> iter<span class="token operator">-&gt;</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&gt;&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>umap 存储的键值对包括：
&lt;Python教程, http://python/&gt;
&lt;Linux教程, http://linux/&gt;
&lt;Java教程, http://java/&gt;
umap.find(&quot;Java教程&quot;) = &lt;Java教程, http://java/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),x={href:"https://blog.csdn.net/FightingCSH/article/details/121385477",target:"_blank",rel:"noopener noreferrer"},z=o(`<h2 id="unordered-set" tabindex="-1"><a class="header-anchor" href="#unordered-set" aria-hidden="true">#</a> unordered_set</h2><p>unordered_set 容器，可直译为“无序 set 容器”。即 unordered_set 容器和 set 容器很像，唯一的区别就在于 set 容器会自行对存储的数据进行排序，而 unordered_set 容器不会。（去重容器）</p><p>几个特性</p><blockquote><ol><li>不再以键值对的形式存储数据，而是直接存储数据的值 ；</li><li>容器内部存储的各个元素的值都互不相等，且不能被修改；</li><li>不会对内部存储的数据进行排序</li></ol></blockquote><p>C++ STL 中的 unordered_set 容器类模板中未提供 at() 成员函数，也未对 <code>[]</code> 运算符进行重载。因此，要想访问 unordered_set 容器中存储的元素，只能借助 unordered_set 容器的迭代器。</p><h3 id="头文件" tabindex="-1"><a class="header-anchor" href="#头文件" aria-hidden="true">#</a> 头文件</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_set&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> set1<span class="token punctuation">;</span> <span class="token comment">//创建空set</span>
unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">set2</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//拷贝构造</span>
unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">set3</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> set1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//迭代器构造</span>
unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">set4</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//数组构造</span>
unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">set5</span><span class="token punctuation">(</span><span class="token function">move</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//移动构造</span>
unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> set6 <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//使用initializer_list初始化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建空的set" tabindex="-1"><a class="header-anchor" href="#创建空的set" aria-hidden="true">#</a> 创建空的set</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> set1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="拷贝构造" tabindex="-1"><a class="header-anchor" href="#拷贝构造" aria-hidden="true">#</a> 拷贝构造</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">set2</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="使用迭代器构造" tabindex="-1"><a class="header-anchor" href="#使用迭代器构造" aria-hidden="true">#</a> 使用迭代器构造</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">set3</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> set1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="使用数组作为初值构造" tabindex="-1"><a class="header-anchor" href="#使用数组作为初值构造" aria-hidden="true">#</a> 使用数组作为初值构造</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">set4</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="移动构造" tabindex="-1"><a class="header-anchor" href="#移动构造" aria-hidden="true">#</a> 移动构造</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">set4</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="使用待处置的列表构造" tabindex="-1"><a class="header-anchor" href="#使用待处置的列表构造" aria-hidden="true">#</a> 使用待处置的列表构造</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> set6 <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="unordered-set-常用函数" tabindex="-1"><a class="header-anchor" href="#unordered-set-常用函数" aria-hidden="true">#</a> unordered_set 常用函数</h3><h4 id="empty" tabindex="-1"><a class="header-anchor" href="#empty" aria-hidden="true">#</a> empty()</h4><p>判断是否为空</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>set1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//若容器为空，则返回 true；否则 false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> find()</h4><p>查找</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p><strong>失败返回end()</strong></p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>set1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//查找2，找到返回迭代器，失败返回end()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="count" tabindex="-1"><a class="header-anchor" href="#count" aria-hidden="true">#</a> count()</h4><p>出现次数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>set1<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//返回指2出现的次数，0或1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="insert" tabindex="-1"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> insert()</h4><p>插入元素</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//插入元素，返回pair&lt;unordered_set&lt;int&gt;::iterator, bool&gt;</span>
set1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//使用initializer_list插入元素</span>
set1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//指定插入位置，如果位置正确会减少插入时间，返回指向插入元素的迭代器</span>
set1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//使用范围迭代器插入</span>
set1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>set2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> set2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>insert()</code> 函数返回值</p><ul><li><p>insert()只传入单个参数（待插入元素）</p><blockquote><ol><li>会返回一个 pair 对象</li><li>这个 pair 对象包含一个迭代器，以及一个附加的布尔值用来说明插入是否成功</li><li>如果元素被插入，返回的迭代器会指向新元素</li><li>如果没有被插入，迭代器指向阻止插入的元素</li></ol></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> pr <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;ninety&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns a pair - an iterator &amp; a bool value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>insert()传入两个参数（迭代器+待插入元素）</p><blockquote><ol><li>可以用一个迭代器作为insert()的第一个参数，它指定了元素被插入的位置</li><li>在这种情况下，只会返回一个迭代器</li></ol></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> iter <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">insert</span> <span class="token punctuation">(</span>pr<span class="token punctuation">.</span>first<span class="token punctuation">,</span> <span class="token string">&quot;nine&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1st arg is a hint. Returns an iterator</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>insert()传入初始化列表</p><blockquote><ol><li>插入初始化表中的元素</li><li>在这种情况下，什么都没有返回</li></ol></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>words<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;ten&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;seven&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;six&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Inserting an initializer list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><blockquote><p>由于unordered_set底层实现为hash，故set内不会出现重复元素。根据这个性质，结合insert函数，可以==<strong>验证插入元素是否重复</strong>==。</p></blockquote><h4 id="emplace" tabindex="-1"><a class="header-anchor" href="#emplace" aria-hidden="true">#</a> emplace()</h4><p>插入元素（转移构造）</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//使用转移构造函数添加新元素3，比insert效率高</span>
set1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="erase" tabindex="-1"><a class="header-anchor" href="#erase" aria-hidden="true">#</a> erase()</h4><p>删除元素</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//删除操作，成功返回1，失败返回0</span>
set1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//删除操作，成功返回下一个pair的迭代器</span>
set1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//删除set1的所有元素，返回指向end的迭代器</span>
set1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> set1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bucket-count" tabindex="-1"><a class="header-anchor" href="#bucket-count" aria-hidden="true">#</a> bucket_count()</h4><p>篮子数目</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//返回容器中的篮子总数</span>
set1<span class="token punctuation">.</span><span class="token function">bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stack-栈" tabindex="-1"><a class="header-anchor" href="#stack-栈" aria-hidden="true">#</a> Stack 栈</h2><p>栈提供push 和 pop 等等接口，所有元素必须符合先进后出规则，所以栈不提供走访功能，也不提供迭代器(iterator)。 不像是set 或者map 提供迭代器iterator来遍历所有元素。</p><p><strong>栈是以底层容器完成其所有的工作，对外提供统一的接口，底层容器是可插拔的（也就是说我们可以控制使用哪种容器来实现栈的功能）。</strong></p><p>所以STL中栈往往不被归类为容器，而被归类为container adapter（容器适配器）。</p><p>那么问题来了，STL 中栈是用什么容器实现的？</p><p>从下图中可以看出，栈的内部结构，栈的底层实现可以是vector，deque，list 都是可以的， 主要就是数组和链表的底层实现。</p><p><strong>我们常用的SGI STL，如果没有指定底层实现的话，默认是以deque为缺省情况下栈的底层结构。</strong></p><p>deque是一个双向队列，只要封住一段，只开通另一端就可以实现栈的逻辑了。</p><p><strong>SGI STL中 队列底层实现缺省情况下一样使用deque实现的。</strong></p><p>我们也可以指定vector为栈的底层实现，初始化语句如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> third<span class="token punctuation">;</span>  <span class="token comment">// 使用vector为底层容器的栈</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span> <span class="token comment">//表示定义一个类型为int名字为s的栈</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="压入" tabindex="-1"><a class="header-anchor" href="#压入" aria-hidden="true">#</a> 压入</h3><p>插入的函数是push，例如插入3：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="弹出" tabindex="-1"><a class="header-anchor" href="#弹出" aria-hidden="true">#</a> 弹出</h3><p>弹出的函数是pop，且弹出的是顶部元素，示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>无返回值，如果需要栈顶元素，需要在 <code>pop</code> 之前 <code>top</code></p><h3 id="栈顶元素" tabindex="-1"><a class="header-anchor" href="#栈顶元素" aria-hidden="true">#</a> 栈顶元素</h3><p>顶部元素是top，例如输出栈顶元素：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>和 <code>pop</code> 一样，栈不能为空，否则报错。</p><h3 id="是否为空" tabindex="-1"><a class="header-anchor" href="#是否为空" aria-hidden="true">#</a> 是否为空</h3><p>函数为<code>empty</code>，为空则返回1，反之返回0，示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;栈为空&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;栈不为空&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h2><h3 id="queue" tabindex="-1"><a class="header-anchor" href="#queue" aria-hidden="true">#</a> queue</h3><table><thead><tr><th></th><th>函数原型：push、pop、back、front</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td><code>push(elem)</code></td><td>向队尾添加元素</td></tr><tr><td>2</td><td><code>emplace()</code></td><td>向队尾添加元素</td></tr><tr><td>3</td><td><code>pop()</code></td><td>移除当前队首元素</td></tr><tr><td>4</td><td><code>back()</code></td><td>返回队尾元素</td></tr><tr><td>5</td><td><code>front()</code></td><td>返回队首元素</td></tr></tbody></table>`,77),S={class:"custom-container warning"},C=n("p",{class:"custom-container-title"},"注意",-1),T=n("code",null,"push",-1),N=n("code",null,"emplace",-1),A={href:"https://blog.csdn.net/AAADiao/article/details/130850283?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"},L=o("<li><p><code>std::queue</code> 不提供迭代器访问元素，只能通过 front() 和 back() 来访问队列的第一个和最后一个元素。</p></li><li><p><code>std::queue</code> 不支持随机访问，不能通过索引访问队列中的元素。</p></li><li><p><code>std::queue</code> 的底层容器可以在创建时指定，例如使用 <code>std::list</code> 作为底层容器：<code>std::queue&lt;int, std::list&lt;int&gt;&gt; myQueue;</code></p><ul><li>默认 <code>dequeue</code></li></ul></li>",3),I=o('<h4 id="queue-其他操作" tabindex="-1"><a class="header-anchor" href="#queue-其他操作" aria-hidden="true">#</a> queue 其他操作</h4><table><thead><tr><th></th><th>函数原型：empty、size、swap</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td><code>empty()</code></td><td>判断队列是否为空</td></tr><tr><td>2</td><td><code>size()</code></td><td>返回队列的大小</td></tr><tr><td>3</td><td><code>swap(queue&lt;T&gt; &amp; que)</code></td><td>将当前队列中元素和que中元素交换</td></tr></tbody></table><p><strong>注意：</strong> <code>swap()</code>交换的两个队列中包含元素的类型必须相同。</p><h3 id="deque" tabindex="-1"><a class="header-anchor" href="#deque" aria-hidden="true">#</a> deque</h3>',4),R={href:"https://blog.csdn.net/qq_39486027/article/details/116244660",target:"_blank",rel:"noopener noreferrer"},E=o(`<p>deque（双端队列）是由一段一段的定量连续空间构成，可以向两端发展，因此不论在尾部或头部安插元素都十分迅速。 在中间部分安插元素则比较费时，因为必须移动其它元素。</p><h4 id="初始化-1" tabindex="-1"><a class="header-anchor" href="#初始化-1" aria-hidden="true">#</a> 初始化</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;deque&gt;</span>  <span class="token comment">// 需使用 using std::deque;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>定义的实现代码</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> a<span class="token punctuation">;</span> <span class="token comment">// 定义一个int类型的双端队列a</span>
deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义一个int类型的双端队列a，并设置初始大小为10</span>
deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义一个int类型的双端队列a，并设置初始大小为10且初始值都为1</span>
deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">b</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义并用双端队列a初始化双端队列b</span>
deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">b</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将双端队列a中从第0个到第2个(共3个)作为双</span>
<span class="token comment">// 端队列b的初始值</span>

<span class="token comment">// 除此之外，还可以直接使用数组来初始化向量：</span>
<span class="token keyword">int</span> n<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 将数组n的前5个元素作为双端队列a的初值</span>
<span class="token comment">// 说明：当然不包括arr[4]元素，末尾指针都是指结束元素的下一个元素，</span>
<span class="token comment">// 这个主要是为了和deque.end()指针统一。</span>
deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将n[1]、n[2]、n[3]作为双端队列a的初值</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="操作函数" tabindex="-1"><a class="header-anchor" href="#操作函数" aria-hidden="true">#</a> 操作函数</h4><p>容量函数 容器大小：deq.size();</p><p>容器最大容量：deq.max_size();</p><p>更改容器大小：deq.resize();</p><p>容器判空：deq.empty();</p><p>减少容器大小到满足元素所占存储空间的大小：deq.shrink_to_fit();</p><p>添加函数</p><p>头部添加元素：<code>deq.push_front(const T&amp; x);</code></p><p>末尾添加元素：<code>deq.push_back(const T&amp; x);</code></p><p>任意位置插入一个元素：<code>deq.insert(iterator it, const T&amp; x);</code></p><p>任意位置插入 n 个相同元素：<code>deq.insert(iterator it, int n, const T&amp; x);</code></p><p>插入另一个向量的 [forst,last] 间的数据：deq.insert(iterator it, iterator first, iterator last);</p><p>删除函数</p><p>头部删除元素：<code>deq.pop_front();</code></p><p>末尾删除元素：<code>deq.pop_back();</code></p><p>任意位置删除一个元素：deq.erase(iterator it);</p><p>删除 <code>[first,last]</code> 之间的元素：<code>deq.erase(iterator first, iterator last);</code></p><p>清空所有元素：<code>deq.clear();</code></p><p>访问函数</p><p>下标访问：<code>deq[1];</code> // 并不会检查是否越界</p><p>at 方法访问：<code>deq.at(1); </code>// 以上两者的区别就是 at 会检查是否越界，是则抛出 out of range 异常</p><p>访问第一个元素：<code>deq.front();</code></p><p>访问最后一个元素：<code>deq.back();</code></p><p>其他函数</p><p>多个元素赋值：deq.assign(int nSize, const T&amp; x); // 类似于初始化时用数组进行赋值</p><p>交换两个同类型容器的元素：swap(deque&amp;);</p><h4 id="迭代器算法" tabindex="-1"><a class="header-anchor" href="#迭代器算法" aria-hidden="true">#</a> 迭代器算法</h4><p>迭代器</p><p>开始迭代器指针：deq.begin();</p><p>末尾迭代器指针：deq.end(); // 指向最后一个元素的下一个位置</p><p>指向常量的开始迭代器指针：deq.cbegin(); // 意思就是不能通过这个指针来修改所指的内容，但还是可以通过其他方式修改的，而且指针也是可以移动的。</p><p>指向常量的末尾迭代器指针：deq.cend();</p><p>反向迭代器指针，指向最后一个元素：deq.rbegin();</p><p>反向迭代器指针，指向第一个元素的前一个元素：deq.rend();</p><h4 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h4><p>遍历元素</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>it <span class="token operator">=</span> deq<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> deq<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token comment">// 或者</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> deq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> deq<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>元素翻转</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token function">reverse</span><span class="token punctuation">(</span>deq<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deq<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>元素排序</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token function">sort</span><span class="token punctuation">(</span>deq<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deq<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 采用的是从小到大的排序</span>

<span class="token comment">// 如果想从大到小排序，可以采用先排序后反转的方式，也可以采用下面方法:</span>
<span class="token comment">// 自定义从大到小的比较器，用来改变排序方式</span>
<span class="token keyword">bool</span> <span class="token function">Comp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">sort</span><span class="token punctuation">(</span>deq<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deq<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p>可以看到，<code>deque</code>与 <code>vector</code>的用法基本一致，除了以下几处不同：</p><ul><li><code>deque</code> 没有 <code>capacity()</code> 函数，而 <code>vector</code>有；</li><li><code>deque</code> 有 <code>push_front()</code> 和 <code>pop_front()</code> 函数，而 <code>vector</code>没有；</li><li><code>deque</code> 没有 <code>data()</code> 函数，而 <code>vector</code>有。</li></ul><div class="custom-container warning"><p class="custom-container-title">栈里面的元素在内存中是连续分布的么?</p><ul><li>栈是容器适配器，底层容器使用不同的容器，导致栈内数据在内存中不是连续分布。</li><li>缺省情况下，默认底层容器是deque，那么deque的在内存中的数据分布是什么样的呢？ 答案是：不连续的 <ul><li>我们用deque作为单调队列的底层数据结构，C++中deque是stack和queue默认的底层实现容器，deque是可以两边扩展的，而且deque里元素并不是严格的连续分布的。</li></ul></li></ul></div><h3 id="priority-queue" tabindex="-1"><a class="header-anchor" href="#priority-queue" aria-hidden="true">#</a> priority_queue</h3>`,51),D={href:"https://blog.csdn.net/xingzi201/article/details/119884227?ops_request_misc=%7B%22request%5Fid%22%3A%22169356240716800188595394%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&request_id=169356240716800188595394&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-119884227-null-null.142%5Ev93%5Econtrol&utm_term=priority_queue&spm=1018.2226.3001.4187",target:"_blank",rel:"noopener noreferrer"};function G(J,V){const t=c("router-link"),p=c("ExternalLinkIcon");return l(),u("div",null,[n("nav",d,[n("ul",null,[n("li",null,[a(t,{to:"#string"},{default:e(()=>[s("String")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#字符串类型转换函数"},{default:e(()=>[s("字符串类型转换函数")]),_:1})])])]),n("li",null,[a(t,{to:"#vector"},{default:e(()=>[s("Vector")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#概念"},{default:e(()=>[s("概念")]),_:1})]),n("li",null,[a(t,{to:"#vector构造函数"},{default:e(()=>[s("vector构造函数")]),_:1})]),n("li",null,[a(t,{to:"#vector增加函数"},{default:e(()=>[s("vector增加函数")]),_:1})]),n("li",null,[a(t,{to:"#vector删除函数"},{default:e(()=>[s("vector删除函数")]),_:1})]),n("li",null,[a(t,{to:"#vector遍历函数"},{default:e(()=>[s("vector遍历函数")]),_:1})]),n("li",null,[a(t,{to:"#vector关于元素数量函数"},{default:e(()=>[s("vector关于元素数量函数")]),_:1})]),n("li",null,[a(t,{to:"#vector其他函数"},{default:e(()=>[s("vector其他函数")]),_:1})])])]),n("li",null,[a(t,{to:"#map"},{default:e(()=>[s("Map")]),_:1})]),n("li",null,[a(t,{to:"#unordered-map"},{default:e(()=>[s("unordered_map")]),_:1})]),n("li",null,[a(t,{to:"#unordered-set"},{default:e(()=>[s("unordered_set")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#头文件"},{default:e(()=>[s("头文件")]),_:1})]),n("li",null,[a(t,{to:"#初始化"},{default:e(()=>[s("初始化")]),_:1})]),n("li",null,[a(t,{to:"#unordered-set-常用函数"},{default:e(()=>[s("unordered_set 常用函数")]),_:1})])])]),n("li",null,[a(t,{to:"#stack-栈"},{default:e(()=>[s("Stack 栈")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#定义"},{default:e(()=>[s("定义")]),_:1})]),n("li",null,[a(t,{to:"#压入"},{default:e(()=>[s("压入")]),_:1})]),n("li",null,[a(t,{to:"#弹出"},{default:e(()=>[s("弹出")]),_:1})]),n("li",null,[a(t,{to:"#栈顶元素"},{default:e(()=>[s("栈顶元素")]),_:1})]),n("li",null,[a(t,{to:"#是否为空"},{default:e(()=>[s("是否为空")]),_:1})])])]),n("li",null,[a(t,{to:"#队列"},{default:e(()=>[s("队列")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#queue"},{default:e(()=>[s("queue")]),_:1})]),n("li",null,[a(t,{to:"#deque"},{default:e(()=>[s("deque")]),_:1})]),n("li",null,[a(t,{to:"#priority-queue"},{default:e(()=>[s("priority_queue")]),_:1})])])])])]),k,n("blockquote",null,[n("p",null,[n("a",v,[s("【最贴心】C++字符串转换(stoi；stol；stoul；stoll；stoull；stof；stod；stold)_来老铁干了这碗代码的博客-CSDN博客"),a(p)])])]),m,b,n("blockquote",null,[n("p",null,[n("a",h,[s("C++ to_string函数详解_笔记大全"),a(p)])])]),g,n("p",null,[n("a",f,[s("C++vector容器无敌详细_c++创建vector_拒绝摆烂的博客-CSDN博客"),a(p)])]),n("p",null,[n("a",_,[s("C++：vector小指南（附带一些新手错误） - 知乎 (zhihu.com)"),a(p)])]),y,n("blockquote",null,[n("p",null,[n("a",q,[s("unordered_map和map的区别_unordered_map map_美丽心灵的永恒阳光的博客-CSDN博客"),a(p)])])]),w,n("p",null,[s("[^1]: "),n("a",x,[s("C++中申请哈希表的函数：unordered_map讲解_FightingCSH的博客-CSDN博客_unordered_map 哈希函数"),a(p)])]),z,n("div",S,[C,n("ul",null,[n("li",null,[n("p",null,[T,s("与"),N,s("区别详见 :"),n("a",A,[s("栈(stack)的使用及push与emplace异同点"),a(p)])])]),L])]),I,n("blockquote",null,[n("p",null,[n("a",R,[s("C++中的deque 用法_c++ dequeue__刘小雨的博客-CSDN博客"),a(p)])])]),E,n("blockquote",null,[n("p",null,[n("a",D,[s("优先队列(priority_queue)总结_行止AC的博客-CSDN博客"),a(p)])])])])}const W=i(r,[["render",G],["__file","stl.html.vue"]]);export{W as default};
