import{_ as n,o as s,c as a,e as p}from"./app-04b0d2b0.js";const e={},t=p(`<h1 id="指针" tabindex="-1"><a class="header-anchor" href="#指针" aria-hidden="true">#</a> 指针</h1><p>指针是一个值为内存地址的变量(或者数据对象)</p><blockquote><p>内存地址一般用16进制表示</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>地址 <span class="token operator">-&gt;</span> 内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>直接存取/直接访问:使用变量名（效率最高）</p></li><li><p>间接存取</p></li></ul><p>变量的指针就是变量的地址；一个变量的地址称为该变量的指针</p><p><strong>指针变量</strong>：用来存放变量地址的变量是<strong>指针变量</strong></p><p><strong>指针的大小与语言、类型、编译器无关，与硬件有关</strong>：</p><ul><li>32位系统：</li><li>64位系统：</li></ul><h3 id="取地址运算符" tabindex="-1"><a class="header-anchor" href="#取地址运算符" aria-hidden="true">#</a> &amp;：取地址运算符</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>i_pointer <span class="token operator">=</span> <span class="token operator">&amp;</span>i <span class="token comment">//将i的地址放入i_pointer中，&amp;i是变量i储存单元的 起始地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>*</code>：指针运算符（间接访问运算符）表示指向 <code>i_ptr</code>是一个指针变量，<code>*i_ptr</code>表示 <code>i_ptr</code> 所指向的变量 <code>i = 3</code>；等价于<code>*i_ptr = 3;</code> 将3赋给i_ptr所指向的变量</p><h3 id="声明及初始化指针变量" tabindex="-1"><a class="header-anchor" href="#声明及初始化指针变量" aria-hidden="true">#</a> 声明及初始化指针变量</h3><p><strong>声明指针</strong></p><p>​</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>数据类型 <span class="token operator">*</span> 指针变量名 <span class="token comment">//该指针变量指向的变量的类型，基类型</span>
<span class="token keyword">typename</span> <span class="token operator">*</span> pointername
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>in <span class="token operator">*</span> ptr_num<span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span> ptr_name<span class="token punctuation">;</span>
<span class="token keyword">float</span> <span class="token operator">*</span> money_ptr<span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token operator">*</span> p_price<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>变量名前加一个 <code>*</code> 表示该变量是指针变量，指针变量的变量名中不含 <code>*</code></p></blockquote><p><strong>初始化指针变量</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>i_ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>只能用 &amp; 对指针变量赋值</strong></p><div class="custom-container warning"><p class="custom-container-title">注意</p><ol><li><p>定义指针变量时必须声明其基类型（为了判断从内存中取多少数据大小）</p></li><li><p>不能用一个具体的数给指针变量赋值，可以将一个已经定义的变量的地址作为指针变量的初值</p></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>一个指针变量只能指向同一个类型的变量</li><li>在说明变量类型的时候，不能一般的说 “a是一个指针变量” ，而是 “a是指向整型数据的指针变量”（或者int*型变量）</li></ol></div><h2 id="引用指针变量" tabindex="-1"><a class="header-anchor" href="#引用指针变量" aria-hidden="true">#</a> 引用指针变量</h2><p>指针使用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">/*double num = 1024.5;
//声明一个指针，指向num变量
	double* ptr_num = &amp;num;
	cout &lt;&lt; &quot;ptr_num的值：&quot; &lt;&lt; ptr_num &lt;&lt; endl;
	cout &lt;&lt; &quot;ptr_num指向空间的值是：&quot; &lt;&lt; *ptr_num &lt;&lt; endl;
	*/</span>
	<span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
	cha <span class="token operator">*</span> ptr_ch <span class="token operator">=</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">;</span>
	<span class="token comment">//cha *在标准c中是定义字符串？？</span>
	<span class="token comment">//思考：打印的结果是地址？还是ch的值？</span>
	<span class="token comment">//有问题，char型指针在c/c++中是字符串了？？</span>
	<span class="token comment">//cout &lt;&lt; ptr_ch &lt;&lt; endl;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr_ch <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\t&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptr_ch<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//强制转换</span>
	<span class="token comment">//void *任意类型的指针，（总之打印出来，不管什么类型）</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于取地址运算符&amp;和指针运算符*的说明：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token operator">*</span> ptr_1<span class="token punctuation">;</span>
ptr_1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token operator">&amp;</span> <span class="token operator">*</span> ptr_1 <span class="token comment">//是什么？ </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><code>&amp;</code> 与<code>*</code>的优先级相同，从右往左结合，即<code>&amp;(*ptr_1)</code>等价于<code>&amp;a</code> ，即<code>a</code>的地址</p></li><li><p><code> *&amp;a</code> 等价于<code>a </code></p></li></ol><h2 id="空指针-null-pointer" tabindex="-1"><a class="header-anchor" href="#空指针-null-pointer" aria-hidden="true">#</a> 空指针（null pointer）</h2><p>空指针不指向任何对象，在试图使用一个指针之前可以检查是否为空</p><p>用法：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token operator">*</span> ptr1 <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span> ptr2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//能这样用吗？？？</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token keyword">int</span> <span class="token operator">*</span> ptr3 <span class="token operator">=</span> <span class="token constant">NULL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上三种等价</p><div class="custom-container danger"><p class="custom-container-title">野指针</p><pre><code>指针最危险的是没有指向任何对象，为了避免野指针出现，可以将指针初始化为0（nullptr）
</code></pre></div><h2 id="void-指针" tabindex="-1"><a class="header-anchor" href="#void-指针" aria-hidden="true">#</a> <code>void *</code> 指针</h2><p>​ 一种特殊的指针类型，可以存放任意对象的地址</p><p>​ 不指向任何类型的数据，理解为指向空类型，或者不指向确定类型</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>1、void* 指针存放一个内存地址，地址指向的内容是什么类型不能确定，由此</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span><span class="token operator">*</span> ptr1 <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span> <span class="token operator">*</span>ptr1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">//是错误的！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、一般用来和其他的指针比较；作为函数的输入和输出；赋值给另一个 <code>void*</code> 指针</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">;</span>  <span class="token comment">//输出字符串的地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3、可以将非void指针赋值给void指针，但是不能把void指针赋值给非void指针（需要强制转换），例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span><span class="token operator">*</span> p2<span class="token punctuation">;</span> 
<span class="token keyword">void</span><span class="token operator">*</span> p3<span class="token punctuation">;</span> 
p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>p3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>​</p><h2 id="const-指针" tabindex="-1"><a class="header-anchor" href="#const-指针" aria-hidden="true">#</a> <code>const</code> 指针</h2><p>可以指定指针变量是一个常量，或者指定指针变量指向的对象是一个常量</p><h3 id="指向常量的指针变量" tabindex="-1"><a class="header-anchor" href="#指向常量的指针变量" aria-hidden="true">#</a> 指向常量的指针变量</h3><p>​ 1、定义：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token operator">*</span> 指针变量名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 经过此定义后，不允许通过指针变量改变它指向的变量的值，例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>  <span class="token comment">//定义了p为指向整型变量 a 的 const 指针变量</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>            <span class="token comment">//试图通过p改变它指向的对象a的值，??非法     </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、说明</p><p>​ 虽然不能通过 p 来改变 a 的值，但是&#39;指针变量p的值（即p的指向）可以改变&#39;</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>             <span class="token comment">//合法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 定义了：(const int *)的指针变量之后，仍然可以通过直接赋值的方法改变 a 的值</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>a <span class="token operator">=</span> <span class="token number">15</span>；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 用指向常量的指针变量只是&#39;限制了通过指针变量改变它指向的对象的值&#39; ​</p><h4 id="指向常变量的指针变量" tabindex="-1"><a class="header-anchor" href="#指向常变量的指针变量" aria-hidden="true">#</a> 指向常变量的指针变量</h4><p>如果想保证指向的对象的值不变，应该定义为常量：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时 <code>p</code> 就成了 <strong>指向常变量的指针变量</strong>，此时用用直接访问或者间接访问的方式都无法改变 <code>a</code> 的值</p><p><strong>说明</strong></p><ul><li>如果一个变量已被声明为常变量，只能用指向常变量的指针变量指向它，而&#39;不能&#39;用一般的（非 <code>const</code>）类型的指针变量指向</li><li>指向常变量的指针变量还能指向普通变量（指向常量对指针变量）（非 <code>const</code>） <ul><li>此时不能通过此指针变量改变该变量的值，但是能够直接对变量赋值</li><li>定义指向常变量对指针变量p并使它指向c1，并不是说c1也声明为常变量，而只是&#39;用指针变量访问c1期间，c1具有常变量对特征&#39;，其值不能改变</li></ul></li><li>如果函数的形参是指向普通变量（非 <code>const</code>）的指针变量，实参只能用指向普通变量的指针，这样可通过指针改变指向变量的值</li></ul><div class="custom-container tip"><p class="custom-container-title">表.用指针变量作形参时形参和实参的对应关系</p><table><thead><tr><th>形参</th><th>实参</th><th>是否合法</th><th>改变指针所指向的变量的值</th></tr></thead><tbody><tr><td>指向非 const 型变量的指针</td><td>非 const 变量的地址</td><td>合法</td><td>可以</td></tr><tr><td>指向非 const 型变量的指针</td><td>const 变量的地址</td><td>非法</td><td>非法</td></tr><tr><td>指向 const 型变量的指针</td><td>const 变量的地址</td><td>合法</td><td>不可以</td></tr><tr><td>指向 const 型变量的指针</td><td>非 const 变量的地址</td><td>合法</td><td>不可以</td></tr></tbody></table></div><p><strong>用途</strong></p><p>指向常量的指针变量常用作函数的形参，以防止指针形参所指对象的值改变影响实参</p><p>举例，在函数中改变指针形参所指对象的值</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//形参是指向整型变量的指针变量</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//使p所指的变量为原值的5倍</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//用 a 的地址作为实参</span>
	cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果： 50</p><p>在以上程序中，如果不想在调用函数时改变指针形参所指对象的值，可以将形参改为指向常量的指针变量，</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//形参是指向常量的指针变量</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//错误</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不允许通过指针变量p的值改变 *p 的值，而只能使用 *p 的值</p><h3 id="常指针" tabindex="-1"><a class="header-anchor" href="#常指针" aria-hidden="true">#</a> 常指针</h3><p>​ 指定指针变量的值是常量。即指针变量的指向不能改变</p><ol><li>定义</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typename</span> <span class="token operator">*</span> <span class="token keyword">const</span> 指针变量名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明：</p><ul><li>这种指针变量称为&#39;常指针变量&#39;，简称&#39;常指针&#39;，即指针值不能改变</li><li>必须在定义时初始化，指定其指向</li><li>指针变量的指向不能改变，但是指向的变量的值可以改变</li><li>注意 <code>const</code> 和 <code>*</code> 的位置。<code>const</code> 在 <code>*</code> 之后</li></ul><p>举例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>   <span class="token comment">//定义常指针同时初始化指向a</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>               <span class="token comment">//使指向的变量的值改变</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指向常量的常指针" tabindex="-1"><a class="header-anchor" href="#指向常量的常指针" aria-hidden="true">#</a> 指向常量的常指针</h3><p>即 <strong>指针变量指向一个固定的对象，且不能通过指针变量改变该对象的值</strong>（以上两种合在一起）</p><ol><li>定义</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">typename</span> <span class="token operator">*</span> <span class="token keyword">const</span> 指针变量名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>举例</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> pt <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token comment">/*
pt = &amp;b;   //错误，试图改变指针的指向
*pt = 30;  //错误，试图通过指针改变所指对象的值
*/</span>
a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>     <span class="token comment">//仍然可以对 a 直接赋值</span>

<span class="token comment">// &#39;如果要完全禁止改变a的值，可以将a定义为常变量&#39;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span>；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指针小结" tabindex="-1"><a class="header-anchor" href="#指针小结" aria-hidden="true">#</a> 指针小结</h2><h3 id="有关指针的数据类型小结" tabindex="-1"><a class="header-anchor" href="#有关指针的数据类型小结" aria-hidden="true">#</a> 有关指针的数据类型小结</h3><table><thead><tr><th>变量定义</th><th>类型表示</th><th>含义</th></tr></thead><tbody><tr><td><code>int i; </code></td><td>int</td><td>定义整型变量 i</td></tr><tr><td><code>int *p;</code></td><td>int*</td><td>定义 p 为指向整型数据的指针变量</td></tr><tr><td><code>int a[5];</code></td><td>int[5]</td><td>定义整型数组 a，有五个元素</td></tr><tr><td><code>int *p[4];</code></td><td>int*[4]</td><td>定义指针数组 p，由四个指向整型数据的指针元素组成</td></tr><tr><td><code>int (*p)[4];</code></td><td>int(*)[4]</td><td>p 为指向包含四个元素的一维数组的指针变量</td></tr><tr><td><code>int f();</code></td><td>int()</td><td>f 为返回值类型为 int 的函数</td></tr><tr><td><code>int *p();</code></td><td>int*()</td><td>p 为返回一个指针的函数，该指针指向整型数据</td></tr><tr><td><code>int (*p)();</code></td><td>int(*)()</td><td>p 为指向函数的指针，该函数返回一个整型值</td></tr><tr><td><code>int **p;</code></td><td>int**</td><td>p 是一个指针变量，它指向一个指向整型数据的指针变量</td></tr><tr><td><code>int *const p;</code></td><td>int *const</td><td>p 是常指针，其值是固定的，即其指向不能变</td></tr><tr><td><code>const int *p;</code></td><td>const int*</td><td>p 是指向常量的指针变量，不能通过 p 改变其指向的对象的值</td></tr><tr><td><code>const int * const p;</code></td><td>const int * const</td><td>p 是指向常量的常指针，其指向不能改变，且不能通过 p 改变其指向的变量的值</td></tr><tr><td><code>void *p;</code></td><td>void</td><td>p 是一个指针变量，基类型为 void，不指向具体的对象</td></tr></tbody></table><h3 id="指针运算小结" tabindex="-1"><a class="header-anchor" href="#指针运算小结" aria-hidden="true">#</a> 指针运算小结</h3><ol><li><p>指针变量加/减一个整数 p++、p--、p+i、p-i、p-=i等</p><p>​ 一个指针变量加/减一个整数是将该指针变量的原值（一个地址）和它指向的变量所占用的内存单元字节数相加或相减</p><p>​ 如 <code>p+ i</code> 代表 <code>p + i*d</code></p></li><li><p>指针变量赋值</p><p>将一个变量地址赋值给一个指针变量</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>       <span class="token comment">//将变量 a的地址赋给 p</span>
p <span class="token operator">=</span> arry<span class="token punctuation">;</span>     <span class="token comment">//将数组 array 首元素的地址赋给 p</span>
p <span class="token operator">=</span> <span class="token operator">&amp;</span>arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//将数组 array 第 i 个元素的地址赋给 p</span>
p <span class="token operator">=</span> max<span class="token punctuation">;</span>      <span class="token comment">//max 为已定义的函数，将 max 的入口地址赋值给 p</span>
p1 <span class="token operator">=</span> p2<span class="token punctuation">;</span>      <span class="token comment">//p1 和 p2 都是同类型的指针变量，将 p2 的值赋给 p1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>指针变量可以有空值，即该指针变量不指向任何变量</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">NULL 、0 和 nullptr 的区别</p><ul><li><p>NULL 在c++中是一个宏，是一个空指针常量，如果将NULL扩展为常数，那么这个数是0，类型为int。所以，常数0既是整型常量，也是空指针常量，这就有可能导致二义性问题。因此，c++11新标准引入了 nullptr，将其作为空指针常量（特殊的字面常量，能够转化为任何类型的指针）。</p></li><li><p>NULL 在C++中就是0，这是因为在C++中 void* 类型是不允许隐式转换成其他类型的，所以之前C++中用0来代表空指针，但是在重载整形的情况下，会出现上述的问题。</p></li><li><p>所以，C++11加入了 nullptr，可以保证在任何情况下都代表空指针，而不会出现上述的情况，因此，建议以后还是都用 nullptr 替代 NULL，而NULL就当做0使用。</p></li><li><p><mark>野指针的情况非常危险，在引用指针变量之前应该对其赋值</mark></p></li><li><p>任何指针变量或地址都可以与空指针比较</p></li></ul></div></li><li><p>两个指针变量可以相减</p><p>如果两个指针变量指向同一个数组元素，则两个指针变量值之差是两个指针之间的元素个数</p><ul><li>假如 <code>p1</code> 指向 <code>a[1]</code>，<code>p2</code> 指向 <code>a[4]</code>,则 <code>p2 - p1 = a+4 -(a+1)=3</code></li><li>但是 <code>p1+p2</code> 没有意义</li></ul></li><li><p>两个指针变量比较</p><ul><li>若<strong>两个指针指向同一个数组的元素，则可以比较</strong>，</li><li>指向不同数组的指针比较没有意义</li><li>指向<strong>前面的元素</strong>的<strong>指针变量</strong><mark>小于</mark>指向<strong>后面元素</strong>的<strong>指针变量</strong><ul><li>上例中表达式 “p2 &gt; p1” 的值为真;</li></ul></li></ul></li><li><p>对指针赋值应该注意类型问题</p><ul><li>不同类型的指针变量之间不能相互赋值</li><li>如果一定要对不同类型的指针变量赋值，可以用强制类型转换</li></ul><p>​ 例，</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token punctuation">;</span><span class="token keyword">float</span> <span class="token operator">*</span>p3<span class="token punctuation">;</span>
p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>p2<span class="token punctuation">;</span>   <span class="token comment">//将 p2 的值强制转换为指向整型数据的指针类型，并赋值给 p1</span>
p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p3<span class="token punctuation">;</span>
p3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span>p1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="内存泄漏-memory-leak" tabindex="-1"><a class="header-anchor" href="#内存泄漏-memory-leak" aria-hidden="true">#</a> 内存泄漏（Memory Leak）</h3><p>是指程序中已动态分配的&#39;堆内存&#39;由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p>`,89),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","指针.html.vue"]]);export{r as default};
