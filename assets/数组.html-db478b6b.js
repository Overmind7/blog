import{_ as n,o as s,c as a,e as p}from"./app-04b0d2b0.js";const t={},e=p(`<h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h1><h2 id="字符数组与字符串" tabindex="-1"><a class="header-anchor" href="#字符数组与字符串" aria-hidden="true">#</a> 字符数组与字符串</h2><h3 id="字符数组" tabindex="-1"><a class="header-anchor" href="#字符数组" aria-hidden="true">#</a> 字符数组</h3><p>用来存放字符数据的数组</p><p>字符数组具有数组的共同属性</p><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义：</h4><p>方法与数值型数组类似</p><p>如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;t&#39;</span><span class="token punctuation">;</span>
c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h4><p>​ 1、用字符逐个给数组的元素赋值</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;i&#39;</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;m&#39;</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39;h&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;p&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;p&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;y&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
<span class="token comment">//把十个字符分别赋给十个元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>说明</p><ol><li>如果花括号中提供的初值个数大于数组长度，则按语法错误处理</li><li>如果初值个数小于数组长度，则只将这些字符赋给数组前面的元素，其余为空字符 <code>&#39;\\0&#39;</code></li><li>也可以在定义时省略字符长度，系统根据所给的初值确定数组长度</li><li>定义和初始化二维数组</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> diamond<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>………………<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="赋值与引用" tabindex="-1"><a class="header-anchor" href="#赋值与引用" aria-hidden="true">#</a> 赋值与引用</h4><p>​ &#39;<strong>只能对字符数组的元素赋值，而不能用赋值语句对整个数组赋值&#39;</strong>，例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//错误，不能对整个数组一次赋值</span>
c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">;</span>c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">;</span>  <span class="token comment">//正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，如果定义了 a 和 b 是具有相同类型和长度的数组，且 b 数组已经初始化</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>a <span class="token operator">=</span> b<span class="token punctuation">;</span>     <span class="token comment">//错误，不能对整个数组整体赋值</span>
a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//正确，引用数组元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例，设计和输出一个钻石图形</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">mian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> diamond<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> diamond<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串和字符串结束的标志" tabindex="-1"><a class="header-anchor" href="#字符串和字符串结束的标志" aria-hidden="true">#</a> 字符串和字符串结束的标志</h4><ol><li>字符串结束符</li></ol><p>一个字符数组可以存放一个字符串中的字符</p><p>C++规定了一个&#39;<strong>字符串结束标志</strong>&#39;：<code> &#39;\\0&#39;</code></p><ul><li>遇到字符 <code>&#39;\\0&#39;</code> 就表示字符串到此结束，由它前面的字符组成有效字符串</li><li>对于一个字符串常量，系统自动在最后加一个 <code>&#39;\\0&#39;</code> 作为结束符，占有一个字节</li></ul><p>有了结束符之后字符数组的长度就没那么重要了</p><p>&#39;<strong>在程序中往往依靠检测 <code>&#39;\\0&#39;</code> 的位置来判定字符串是否结束，而不是根据数组的长度决定字符串的长度</strong>&#39;</p><div class="custom-container tip"><p class="custom-container-title">注意：</p><p>字符数组不要求最后一个元素为 <code>&#39;\\0&#39;</code></p><p>甚至可以不包括 &#39;\\0&#39;</p></div><ol start="2"><li>用字符串常量来初始化字符数组</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;China&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以省略花括号</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;Chaina&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">注意</p><p>用字符串常量给字符数组初始化时，后面自带 <code>&#39;\\0&#39;</code>，长度+1</p><p>而如果单独的对字符数组赋值，最后可能没有 <code>&#39;\\0&#39;</code></p></div><h4 id="字符数组的输入和输出" tabindex="-1"><a class="header-anchor" href="#字符数组的输入和输出" aria-hidden="true">#</a> 字符数组的输入和输出</h4><ol><li><p>如上逐个字符的输入输出</p></li><li><p>将整个字符串一次输入输出</p></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
cin <span class="token operator">&gt;&gt;</span> str<span class="token punctuation">;</span>  <span class="token comment">//用字符数组名输入字符串</span>
cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">;</span>  <span class="token comment">//用字符数组名输出字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">注意：</p><p>输出的字符不包括结束符 <code>&#39;\\0&#39;</code></p><blockquote><p><strong>输出字符串时，cout 流中用字符数组元素名，而不是数组元素名</strong></p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cout<span class="token operator">&lt;&lt;</span> str<span class="token punctuation">;</span>   <span class="token comment">//用数组名，输出的是字符串</span>
cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">//用数组元素名，输出的是一个字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果数组长度大于字符串的实际长度，输出遇 <code>&#39;\\0&#39;</code> 结束</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;chaina&quot;</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>只输出了 chaina ，而不是10个字符</p><p>用 <code>cin</code> 从键盘向计算机输入一个字符串时，从键盘输入的字符串因该短于已经定义的字符长度</p></div><h4 id="字符串处理函数" tabindex="-1"><a class="header-anchor" href="#字符串处理函数" aria-hidden="true">#</a> 字符串处理函数</h4><p><code>#include &lt;cstring&gt;</code> <code>#include &lt;string.h&gt;</code></p><div class="custom-container tip"><p class="custom-container-title">cstring和string</p><p>有什么区别？</p></div><p>字符串处理函数的函数原型中，形参其实是 <code>(char*,const char*)</code>,返回的是字符指针 <code>char*</code></p><h5 id="字符串连接函数-stract" tabindex="-1"><a class="header-anchor" href="#字符串连接函数-stract" aria-hidden="true">#</a> 字符串连接函数 <code>stract</code></h5><ol><li>函数原型</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">stract</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>strcat</code> 是 string catenate 的缩写。</p><ol start="2"><li>作用</li></ol><ul><li>将第 2 个字符数组中的字符串连接到前面字符数组字符串的后面。</li><li>第 2 个字符数组被声明为 const</li><li>连接后的字符串放在第一个字符数组中</li><li>函数调用后得到的函数值就是第一个字符数组的地址</li></ul><p>3、例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;People&#39;s Republic of&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;China&quot;</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token function">stract</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出 …………</p><h5 id="字符串赋值函数-strcpy" tabindex="-1"><a class="header-anchor" href="#字符串赋值函数-strcpy" aria-hidden="true">#</a> 字符串赋值函数 <code>strcpy</code></h5><ol><li>函数原型</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>strcpy</code> 是 string copy 的缩写。</p><ol start="2"><li>作用</li></ol><ul><li><p>将第 2 个字符数组中的字符串复制到第一个字符数组中去</p></li><li><p>将第 1 个字符数组中的相应字符覆盖</p></li><li><p>第 2 个参数是字符型常数组，不能被改变</p></li></ul><ol start="3"><li>例</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code> <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;China&quot;</span><span class="token punctuation">;</span>
 <span class="token function">strcpy</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>说明</li></ol><ul><li>在调用 strcpy 函数时，第 1 个实参必须是数组名，第 2 个实参可以是字符数组名，也可以是一个字符串常量 <ul><li>如 <code>strcpy(str1,&quot;China&quot;);</code></li></ul></li><li>可以用 strcpy 函数将一个字符串中的前若干个字符，复制到一个字符数组中 <ul><li>如 <code>strcpy(str1,str2,2);</code></li><li>作用是将 <code>str2</code> 中前面 2 个字符复制到 str1 中去，然后再加一个<code>&#39;\\0&#39;</code></li></ul></li><li>只能通过调用 strcpy 函数实现将一个字符串赋给一个字符数组 <ul><li>不能用赋值语句将一个字符串常量或者字符数组直接赋值给一个字符数组，例如</li></ul></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>str1 <span class="token operator">=</span> <span class="token string">&quot;China&quot;</span><span class="token punctuation">;</span> <span class="token comment">//错误❌，不能将一个字符串常量赋值给一个字符数组（初始化？？？）</span>
str1 <span class="token operator">=</span> str2<span class="token punctuation">;</span>   <span class="token comment">//错误❌，不能将一个字符数组的内容赋给另一个字符数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>str1</code> 代表数组地址，是常量，不能被赋值，不可作为左值&#39;</p><h5 id="字符串比较函数-strcmp" tabindex="-1"><a class="header-anchor" href="#字符串比较函数-strcmp" aria-hidden="true">#</a> 字符串比较函数 <code>strcmp</code></h5><ol><li>函数原型</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>strcmp</code> 是string compare的缩写。</p><ol start="2"><li>举例</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">strcmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;china&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;american&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">strcmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span><span class="token string">&quot;Beijing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>作用</li></ol><ul><li><p>比较两个字符串</p></li><li><p>由于两个字符串只参加比较而不改变其内容，因此两个参数都加上 const 声明</p></li></ul><ol start="4"><li>返回值</li></ol><p>比较结果由返回值带回</p><ul><li>如果 <code>str1</code> 等于 <code>str2</code>，函数值为 0</li><li>如果 <code>str1</code> 大于 <code>str2</code>，函数值为一个正整数</li><li>如果 <code>str1</code> 小于 <code>str2</code>，函数值为一个负整数</li></ul><p>比较规则</p><ul><li>对两个字符串从左至右，逐个字符按ASCII码值大小比较，直到出现不同的字符或者&#39;\\0&#39;为止</li><li>如果全部相同，则认为相等</li><li>如果出现不同，则按照出现的第一个不同字符的比较结果为准</li></ul><div class="custom-container warning"><p class="custom-container-title">注意</p><p>不能直接使用 <code>&lt;</code> <code> &gt;</code> 对字符串比较，如</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">&gt;</span> str2<span class="token punctuation">)</span>  cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;yes&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>字符数组名代表数组地址，上面写法是对数组地址比较，除非重载运算符</p><p>否则只能用 strcmp() 函数进行比较</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h5 id="字符串长度函数-strlen" tabindex="-1"><a class="header-anchor" href="#字符串长度函数-strlen" aria-hidden="true">#</a> 字符串长度函数 <code>strlen</code></h5><ol><li>函数原型</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>strlen 是 string length 的缩写。</p><ol start="2"><li>作用</li></ol><p>测量字符串长度</p><p>函数值为字符串的实际长度，不包括 <code>&#39;\\0&#39;</code>在内</p><ol start="3"><li>举例</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;china&quot;</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为 5 ，而不是 6 或者 10</p><blockquote><p>字符数组应用举例</p><p>例，有五个国家，要找出按字母顺序排在最前面的国家</p><p>分析：</p><p>用二维数组 3✖️30，可以把 <code>str[0],str[1],str[2]</code>看成三个一维数组？？</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token comment">//为啥说要用 cstring ,string 编译不过？</span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>               
<span class="token comment">//函数声明</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">smallest_string</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">char</span> contry_name<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           
    <span class="token comment">//定义二维字符数组</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">&gt;&gt;</span>contry_name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          
        <span class="token comment">//遍历输入 3 个国家名</span>
    <span class="token punctuation">}</span>
    <span class="token function">smallest_string</span><span class="token punctuation">(</span>contry_name<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
<span class="token comment">//调用 smallest_string 函数</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">smallest_string</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
    <span class="token comment">//使 string 的值为 str[0] 的值</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>string<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     
    <span class="token comment">//将比较得到的小的数组复制到 string 中</span>
            <span class="token function">strcpy</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span><span class="token string">&quot;The smallest string is &quot;</span><span class="token operator">&lt;&lt;</span>string <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序分析：</p><ul><li>函数 <code>smallest_string</code> 用来找最小字符串</li><li>实参 <code>contry_name</code> 是 3 行 30 列的字符数组名，代表二维数组中第一行的首地址</li><li>实参 3 表示需要处理的字符串的个数</li><li>形参 <code>str</code> 是二维字符数组名，在声明时指定了第 2 维的大小为30，而没有指定第 1 维的大小</li></ul><h3 id="字符串类-与-字符串变量" tabindex="-1"><a class="header-anchor" href="#字符串类-与-字符串变量" aria-hidden="true">#</a> 字符串类 与 字符串变量</h3><p>字符数组总是有一定大小的，可能会出现溢出的情况</p><p>Ｃ++提供类一种新的数据类型————字符串类型 （string类型）</p><p>string 不是基本类型，而是Ｃ++标准库中声明的一个&#39;字符串类&#39;，用这种类可以定义对象</p><p>每一个字符串都是string类的一个对象</p><h4 id="字符串变量的定义和引用" tabindex="-1"><a class="header-anchor" href="#字符串变量的定义和引用" aria-hidden="true">#</a> 字符串变量的定义和引用</h4><p>​ 字符串变量必须先定义再使用，用类名进行定义</p><p>​ 在使用 string 类定义变量时，必须在本文件的开头将 Ｃ++ 标准库中的string头文件包含进来</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span>  <span class="token comment">//不是 string.h</span></span>
string string1<span class="token punctuation">;</span>   <span class="token comment">//定义 string1 为字符串变量</span>
string string2 <span class="token operator">=</span> <span class="token string">&quot;China&quot;</span><span class="token punctuation">;</span> <span class="token comment">//定义 string2 并初始化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对字符串变量赋值" tabindex="-1"><a class="header-anchor" href="#对字符串变量赋值" aria-hidden="true">#</a> 对字符串变量赋值</h4><p>​ 1、赋值</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>str1 <span class="token operator">=</span> <span class="token string">&quot;China&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意⚠️：</p><p>str1 是字符串变量，而不是字符数组名</p><p>字符数组不能直接用字符数组名赋值（指针混乱）</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
str <span class="token operator">=</span> <span class="token string">&quot;China&quot;</span><span class="token punctuation">;</span> <span class="token comment">//错误❌</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 2、用字符串赋值字符串</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>str1 <span class="token operator">=</span> str2<span class="token punctuation">;</span>   <span class="token comment">//str1 和 str2 都已经定义了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 不要求 <code>str1</code> 和 <code>str2</code> 的长度相同</p><p>​ 定义字符串时不需要指定长度，长度随其中的内容而改变</p><p>​ 3、对字符串中的某一个字符操作</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>string word <span class="token operator">=</span> <span class="token string">&quot;Then&quot;</span><span class="token punctuation">;</span>
word<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>     <span class="token comment">//修改序号为 2 的字符（从0开始），Than</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串变量的输入和输出" tabindex="-1"><a class="header-anchor" href="#字符串变量的输入和输出" aria-hidden="true">#</a> 字符串变量的输入和输出</h4><p>​ 可以在输入输出语句中使用字符串变量名字，输入输出字符串</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cin <span class="token operator">&gt;&gt;</span> str1<span class="token punctuation">;</span>   <span class="token comment">//如果用 cin 输入，遇到 空格 也会停止输入</span>
cout <span class="token operator">&lt;&lt;</span> str2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串变量的运算" tabindex="-1"><a class="header-anchor" href="#字符串变量的运算" aria-hidden="true">#</a> 字符串变量的运算</h4><p>​ 字符数组存放的字符串运算需要字符串函数</p><p>​ 而 string 类对象可以直接用运算符</p><p>​ 1、字符串复制直接用赋值号 =</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>str1 <span class="token operator">=</span> str2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 作用和 <code>strcpy(str1,str2);</code> 相同</p><p>​ 2、字符串连接用 + 号</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>string str1 <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span>
string str2 <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span>
str1 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span>  <span class="token comment">//连接 str1 和str2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 连接后 <code>str1</code> 的内容为 &quot;Ab&quot;</p><p>​ 3、字符串比较关系直接用关系运算符</p><p>​ 可以直接用 ==、&gt;、&lt;、!=、&gt;=、&lt;= 来对字符串进行比较</p><p>​ 因为 string 头文件中已经对这些运算符重载</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>需要查证，报错了</p></div><p>字符串运算举例：</p><p>​ 例，输入三个字符串，要求按字母由小到大排序</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    string str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span>str3<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Input strings&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> str1 <span class="token operator">&gt;&gt;</span> str2 <span class="token operator">&gt;&gt;</span> str3<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str1 <span class="token operator">&gt;</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> str2<span class="token punctuation">;</span>
        str2 <span class="token operator">=</span> str1<span class="token punctuation">;</span>
        str1 <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str1 <span class="token operator">&gt;</span> str3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> str3<span class="token punctuation">;</span>
        str3 <span class="token operator">=</span> str1<span class="token punctuation">;</span>
        str1 <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str2 <span class="token operator">&gt;</span> str3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> str2<span class="token punctuation">;</span>
        str2 <span class="token operator">=</span> str3<span class="token punctuation">;</span>
        str3 <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span><span class="token char">&#39;\\t&#39;</span><span class="token operator">&lt;&lt;</span> str2 <span class="token operator">&lt;&lt;</span><span class="token char">&#39;\\t&#39;</span><span class="token operator">&lt;&lt;</span> str3<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串数组" tabindex="-1"><a class="header-anchor" href="#字符串数组" aria-hidden="true">#</a> 字符串数组</h4><p>不仅可以用 string 定义字符串变量，也可以用 string 定义字符串数组</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>string name<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//定义一个字符串数组包含 5 个字符串元素</span>
string name<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;as&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bs&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ds&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ch&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bg&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//定义一个字符串数组并初始化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><p>在一个字符串数组中包含若干个元素，每个元素相当于一个字符串变量</p><p>并不要求每个字符串元素具有相同的长度，对于同一个元素，也可以重新赋值为不同长度</p><p>在字符串数组的每一个元素存放一个字符串，而不是字符</p><p>字符串数组中的每一个元素只包含字符串本身的字符，而不包括&#39;\\0&#39;</p><p>（字符串数组不是直接存放字符串，而是存放字符串的地址 pgae 148）</p><h3 id="字符串与指针" tabindex="-1"><a class="header-anchor" href="#字符串与指针" aria-hidden="true">#</a> 字符串与指针</h3><p>回顾，在c++中可以用三种方法访问字符串</p><ol><li><p>用字符数组存放一个字符串</p></li><li><p>用字符串变量存放字符串</p></li></ol><blockquote><p><code>#include &lt;string&gt;</code></p></blockquote><ol start="3"><li>用字符指针指向一个字符串</li></ol><h4 id="字符指针" tabindex="-1"><a class="header-anchor" href="#字符指针" aria-hidden="true">#</a> 字符指针</h4><p>​ 例，定义一个字符指针变量并初始化，然后输出它指向的字符串</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">&quot;China&quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析：</p><ul><li>这里没有定义字符数组</li><li>在程序中定义了一个字符指针变量 <code>str</code>，用字符串对其初始化</li></ul><p>&#39;<strong>实际上时把字符串中第 1 个字符的地址赋给 <code>str</code></strong>&#39;</p><p>等价于：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">;</span>
str <span class="token operator">=</span> <span class="token string">&quot;China&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong></p><ul><li>在输出时，系统先输出 str 指向的第一个字符数据，然后自动+1，使之指向下一个字符，直到遇见<code>&#39;\\0&#39;</code></li><li>字符串最后被自动加了一个<code>&#39;\\0&#39;</code></li></ul><p><strong>字符串中字符的存取</strong></p><p>​ 例，将字符串 <code>str1</code> 复制为字符串 <code>str2</code> 用字符指针</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;China&quot;</span><span class="token punctuation">,</span>str2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token punctuation">;</span>
    p1 <span class="token operator">=</span> str1<span class="token punctuation">;</span>
    p2 <span class="token operator">=</span> str2<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">*</span>p1 <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> p1<span class="token operator">++</span><span class="token punctuation">,</span>p2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    p1 <span class="token operator">=</span> str1<span class="token punctuation">;</span>   <span class="token comment">//注意，这里前面指针的值是不断变化的，如果要输出则要重新指向数组头</span>
    p2 <span class="token operator">=</span> str2<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;str1 is:&quot;</span> <span class="token operator">&lt;&lt;</span> p1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;str2 is:&quot;</span> <span class="token operator">&lt;&lt;</span> p2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>用 string 处理则十分简单</p></blockquote><p>​</p><p>用字符指针的时候也可以使用字符串处理函数</p><ul><li>可以用字符指针表示的字符串，对字符串数组 <code>a[]</code> 赋值</li></ul>`,162),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","数组.html.vue"]]);export{r as default};
