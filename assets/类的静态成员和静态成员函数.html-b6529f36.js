import{_ as n,o as s,c as a,e as t}from"./app-04b0d2b0.js";const p={},e=t(`<h1 id="类的静态成员和静态成员函数" tabindex="-1"><a class="header-anchor" href="#类的静态成员和静态成员函数" aria-hidden="true">#</a> 类的静态成员和静态成员函数</h1><h2 id="类的静态数据成员" tabindex="-1"><a class="header-anchor" href="#类的静态数据成员" aria-hidden="true">#</a> 类的静态数据成员</h2><p>如果想在同类的多个对象之间实现数据共享，也不要用全局对象，可以用静态的数据成员</p><h3 id="静态数据成员" tabindex="-1"><a class="header-anchor" href="#静态数据成员" aria-hidden="true">#</a> 静态数据成员</h3><p>静态数据成员是一种特殊的数据成员，以关键字 static 开头，例如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		……
	<span class="token keyword">private</span><span class="token operator">:</span>
		<span class="token keyword">static</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>   <span class="token comment">//把height定义为静态的数据成员</span>
		<span class="token keyword">int</span> width<span class="token punctuation">;</span>
		<span class="token keyword">int</span> length<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望各个对象中的数据成员的值是一样的，就可以把它定义为静态数据成员</p><ul><li><p>为各个对象所&#39;<strong>共有</strong>&#39;，所有对象都能引用</p></li><li><p>在内存中只占一份空间，而不是每个对象分别为它保留一份空间，节约空间提高效率</p></li></ul><ol><li>之前说过在声明类时数据成员不占有内存空间，在定义对象时才分配内存空间。</li></ol><div class="custom-container tip"><p class="custom-container-title">但是静态数据成员**不属于任何一个对象**</p><p>在为对象所分配的空间中不包括静态数据成员所占的空间。</p><p>静态数据成员是在所以对象之外单独开辟空间。</p><p>只要在&#39;<strong>声明类的时候指定了静态数据成员，这时候就会为其分配内存</strong>&#39;，</p><p><strong>即使使不定义对象，静态数据成员也可以被引用</strong></p></div><ol start="2"><li>静态数据成员与静态变量类似，不随对象的建立而分配空间，也不随对象的撤销而释放。</li></ol><blockquote><p>静态数据数据成员在程序开始运行时就分配空间，到程序结束的时候释放空间</p></blockquote><ol start="3"><li><strong>初始化静态数据成员</strong></li></ol><p>​ <strong>只能在类体外初始化</strong>，例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> Box<span class="token double-colon punctuation">::</span>height <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一般类型为：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>数据类型 类名<span class="token double-colon punctuation">::</span>静态数据成员名 <span class="token operator">=</span> 初值；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>不能用参数初始化表对静态函数成员初始化</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">Box</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">height</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//错误！height是静态数据成员</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​</p><ol start="4"><li>静态数据成员既可以通过对象名引用，也可以通过类名引用</li></ol><p>例：</p><p>有两个Box对象a，b；引用<strong>public</strong>静态数据成员<code>height</code></p><p>a.height 或者 b.height 或者 Box::height</p><ul><li><p>在类外可以通过&#39;<strong>对象名</strong>&#39;访问公用的静态数据成员，也可以通过&#39;<strong>类名</strong>&#39;引用静态数据成员</p><ul><li>这说明静态数据成员不是属于对象的，而是属于类的，但是能够被对象引用。</li><li>通过静态数据成员，各个对象之间有了沟通的渠道，实现数据共享，可以不使用全局，全局变量破坏了封装的原则，不符合面向对象程序的要求</li></ul></li><li><p>注意公用静态函数成员和全局变量的区别：&#39;<strong>静态数据成员的作用域只限于定义该类的作用域内</strong>&#39;，如果实在一个函数中定义类，那么其中静态数据成员的作用域就在此函数内。</p><ul><li>在此作用域内，可以通过类名和域运算符<code>::</code>引用静态数据成员，而不论对象是否存在</li></ul></li></ul><h3 id="静态成员函数" tabindex="-1"><a class="header-anchor" href="#静态成员函数" aria-hidden="true">#</a> 静态成员函数</h3><ul><li>成员函数也可以定义为静态的，在类中声明函数的前面加上 static 就成了静态成员函数，例：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">volum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>和静态数据成员一样，<strong>静态成员函数是类的一部分而不是对象的一部分</strong></p><ul><li><p>在类外调用公用的静态成员函数，要用类名和域运算符</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token class-name">Box</span><span class="token double-colon punctuation">::</span><span class="token function">volum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同时也允许通过对象名调用静态成员函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>a<span class="token punctuation">.</span><span class="token function">volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里不是说该函数属于对象a，而是使用了a的类型Box</p></li><li><p>与静态数据成员不同，静态成员函数的作用不是为了对象之间的沟通，而是为了处理静态数据成员</p><p>&#39;<strong>静态成员函数不属于某一对象，与任何对象都无关，没有this指针</strong>&#39;，</p><p>所以无法对一个对象中的非静态成员进行默认访问（即在引用数据时不指定对象名）</p><div class="custom-container warning"><p class="custom-container-title">静态成员函数与非静态成员函数的根本区别：</p><p>​ 非静态成员函数有 this 指针，而静态成员函数没有 this 指针。 ​ 由此决定了静态成员函数不能访问本类中的非静态成员。</p></div></li><li><p>静态成员函数可以直接引用本类中的&#39;<strong>静态成员</strong>&#39;</p><ul><li>因为静态成员同样是属于类的，可以直接引用。</li><li>在C++程序中，&#39;静态成员函数主要用来访问静态数据成员，而不访问非静态成员&#39;。</li></ul></li></ul><p>如果一定要访问：假设a为Box类，在静态成员函数中</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cout<span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span>width <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//引用本类对象a中的非静态成员</span>
cout<span class="token operator">&lt;&lt;</span> height <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//若height已经声明为static，则是引用本类中的静态成员，合法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>程序举例</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>                     <span class="token comment">//定义student类</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">float</span> s<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">num</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">age</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">score</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//定义构造函数</span>
		<span class="token keyword">void</span> <span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//声明成员函数</span>
		<span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//声明静态成员函数</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		<span class="token keyword">int</span> num<span class="token punctuation">;</span> 
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
		<span class="token keyword">float</span> score<span class="token punctuation">;</span>
		<span class="token keyword">static</span> <span class="token keyword">float</span> sum<span class="token punctuation">;</span>         <span class="token comment">//静态数据成员sum</span>
		<span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>         <span class="token comment">//静态数据成员count </span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token class-name">Student</span><span class="token double-colon punctuation">::</span><span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//定义非静态成员函数</span>
	sum <span class="token operator">+=</span> score<span class="token punctuation">;</span>                 <span class="token comment">//累加总分</span>
	count<span class="token operator">++</span><span class="token punctuation">;</span>                      <span class="token comment">//累加已统计的人数</span>
<span class="token punctuation">}</span>
<span class="token keyword">float</span> <span class="token class-name">Student</span><span class="token double-colon punctuation">::</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment">//定义静态成员函数</span>
	<span class="token keyword">return</span><span class="token punctuation">(</span>sun<span class="token operator">/</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">float</span> Student<span class="token double-colon punctuation">::</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment">//初始化静态数据成员</span>
<span class="token keyword">int</span> Student<span class="token double-colon punctuation">::</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment">//初始化静态数据成员</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	Student stud<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>             <span class="token comment">//定义对象数组并初始化</span>
		<span class="token function">Student</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token function">Student</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token function">Student</span><span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;please input the number of students:&quot;</span><span class="token punctuation">;</span>
	cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>                       <span class="token comment">//输入需要求签名多少学生的平均成绩</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//调用3次total函数</span>
		stud<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	cout<span class="token operator">&lt;&lt;</span> <span class="token string">&quot;the average score of &quot;</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span><span class="token string">&quot; students is &quot;</span><span class="token operator">&lt;&lt;</span> <span class="token class-name">Student</span><span class="token double-colon punctuation">::</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                                            <span class="token comment">//调用静态成员函数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明</p><ol><li>在Student类中定义了两个静态数据成员sum（总分）和count（累计统计的学生人数），因为这两个数据成员的值是需要进行累加的，不从属于某一个单独的对象，而是多个对象元素共有的</li><li>total时公用的成员函数，将一个学生的成绩累加到sum中。</li></ol><p><strong>公用到成员函数可以引用本对象中的一般数据成员，也可以引用类中的静态数据成员</strong></p><ol start="3"><li><p>average是静态成员函数，它可以直接引用私有的静态数据成员（不必加类名或者对象名）</p></li><li><p>在main函数中，引用普通成员函数要加对象名，引用静态成员函数要<strong>加类名</strong>或者<strong>对象名</strong></p></li><li><p>注意对象的作用域对于静态成员函数引用非静态数据成员的影响：</p><p>解决方法举例：在main外定义对象，则为全局；将对象作为参数，好处是实参可以改变</p></li></ol><blockquote><p><strong>只用静态成员函数引用静态数据成员，而不引用非静态数据成员</strong>，这样逻辑清晰，不易出错</p></blockquote>`,39),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","类的静态成员和静态成员函数.html.vue"]]);export{r as default};
