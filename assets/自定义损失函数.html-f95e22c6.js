import{_ as n,o as s,c as a,e as t}from"./app-04b0d2b0.js";const e={},p=t(`<h1 id="自定义损失函数" tabindex="-1"><a class="header-anchor" href="#自定义损失函数" aria-hidden="true">#</a> 自定义损失函数</h1><h2 id="_1-通过nn-module类来实现自定义的损失函数" tabindex="-1"><a class="header-anchor" href="#_1-通过nn-module类来实现自定义的损失函数" aria-hidden="true">#</a> 1. 通过nn.Module类来实现自定义的损失函数</h2><p>鉴于前面所说的，损失函数的本质也就是“对输入进行函数运算，得到一个输出”，所以我们可以像定义层一样自定义一个损失函数，比如我自己定义一个 MSE 损失函数，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">My_loss</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">#没有需要保存的参数和状态信息</span>
        
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义前向的函数运算即可</span>
        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>torch<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pytorch TypeError: __init__() takes 1 positional argument but 3 were given
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在自己编写loss函数Myloss_for_neg后，调用时出现问题。</p><p>原因是需要<strong>初始化</strong>，即分两步：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>loss_fun <span class="token operator">=</span> My_loss<span class="token punctuation">(</span><span class="token punctuation">)</span>
loss <span class="token operator">=</span> My_loss<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> label<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于模型初始化</p></div><h2 id="_2-通过直接定义函数来完成" tabindex="-1"><a class="header-anchor" href="#_2-通过直接定义函数来完成" aria-hidden="true">#</a> 2. 通过直接定义函数来完成</h2><p>自定义类中，其实最终调用还是forward实现，同时<code>nn.Module</code>还要维护一些其他变量和状态。不如直接自定义loss函数实现：</p><blockquote><p># 直接定义函数 ， 不需要维护参数，梯度等信息</p><p># 注意所有的数学操作需要使用 tensor 完成。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_mse_loss</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>torch<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>nn.functional</code> 里面定义了一些常见的函数，当然也包括一些常见的损失函数</p><blockquote><p>https://blog.csdn.net/qq_27825451/article/details/95165265</p></blockquote>`,11),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","自定义损失函数.html.vue"]]);export{d as default};
