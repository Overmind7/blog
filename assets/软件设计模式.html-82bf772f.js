import{_ as e,o as t,c as n,e as o}from"./app-04b0d2b0.js";const _={},r=o('<h1 id="软件设计模式" tabindex="-1"><a class="header-anchor" href="#软件设计模式" aria-hidden="true">#</a> 软件设计模式</h1><p>单例模式(Singleton)，保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p>单例模式可以分为<strong>懒汉式</strong>和<strong>饿汉式</strong>，两者之间的区别在于创建实例的时间不同：</p><ul><li>懒汉式：指系统运行中，实例并不存在，只有当需要使用该实例时，才会去创建并使用实例。（这种方式要考 虑线程安全）</li><li>饿汉式：指系统⼀运行，就初始化创建实例，当需要时，直接调用即可。（本身就线程安全，没有多线程的问题）</li></ul><p>实现思路：私有化它的构造函数，以防止外界创建单例类的对象；使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例。</p>',5),s=[r];function a(c,i){return t(),n("div",null,s)}const d=e(_,[["render",a],["__file","软件设计模式.html.vue"]]);export{d as default};
