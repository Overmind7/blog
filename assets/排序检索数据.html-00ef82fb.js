import{_ as s,o as e,c as n,e as a}from"./app-04b0d2b0.js";const d={},c=a(`<h1 id="排序检索数据" tabindex="-1"><a class="header-anchor" href="#排序检索数据" aria-hidden="true">#</a> 排序检索数据</h1><h2 id="_1-排序数据" tabindex="-1"><a class="header-anchor" href="#_1-排序数据" aria-hidden="true">#</a> 1. 排序数据</h2><p>关系数据库设计理论认为如果不明确规定排序顺序，则检索出的数据顺序无意义</p><div class="custom-container tip"><p class="custom-container-title">子句</p><p>子句(clause) SQL语句由子句构成， 有些子句是必需的，而有的是可选的。一个子句通常由一个关键字和所提供的数据组成。子句的例子有SELECT语句的FROM子句，我们在前一章看到过这个子句。</p></div><p><code>order by</code> 子句。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> prod_name
<span class="token keyword">from</span> products
<span class="token keyword">order</span> <span class="token keyword">by</span> prod_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>使用非选择的列进行排序是合法的</p></div><h2 id="_2-按多个列排序" tabindex="-1"><a class="header-anchor" href="#_2-按多个列排序" aria-hidden="true">#</a> 2. 按多个列排序</h2><p>例如按姓和名排序，在有多个相同姓的时候</p><p>指定列名，使用逗号分割</p><p>例：检索三个列，并按其中两个列对结果排序，先按价格，再按名称</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> prod_id<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_name
<span class="token keyword">from</span> products
<span class="token keyword">order</span> <span class="token keyword">by</span> prod_price<span class="token punctuation">,</span> prod_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/image-20230919204328981.png" alt="image-20230919204328981" style="zoom:50%;"><h2 id="_3-指定排序方向" tabindex="-1"><a class="header-anchor" href="#_3-指定排序方向" aria-hidden="true">#</a> 3. 指定排序方向</h2><p><code>DESC</code> 关键字： (<code>ASC</code> 关键字是默认的)</p><p>数据排序不限于升序排序(从A到Z)。这只是默认的排序顺序，还可以使用<code>ORDER BY</code> 子句以降序(从Z到A)顺序排序。为了进行降序排序，必须指定<code>DESC</code>关键字。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> prod_id<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_name
<span class="token keyword">from</span> products
<span class="token keyword">order</span> <span class="token keyword">by</span> prod_price <span class="token keyword">desc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">对多个列降序排序</p><ul><li><p><code>DESC</code>关键字只应用到直接位于前面的那一个列</p></li><li><p>如果想对多个列进行降序排序，必须对每个列都指定 <code>DESC</code> 关键字</p></li></ul></div><p>使用ORDER BY和LIMIT的组合，能够找出一个列中最高或最低的值 下面的例子演示如何找出最昂贵物品的值:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> prod_price
<span class="token keyword">from</span> products
<span class="token keyword">order</span> <span class="token keyword">by</span> prod_price <span class="token keyword">DESC</span>
<span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>prod_priceDESC保证行是按照由最昂贵到最便宜检索的，而LIMIT 1告诉MySQL仅返回一行。</p>`,21),o=[c];function i(p,r){return e(),n("div",null,o)}const t=s(d,[["render",i],["__file","排序检索数据.html.vue"]]);export{t as default};
