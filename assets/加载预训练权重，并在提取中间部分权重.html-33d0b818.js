import{_ as n,o as s,c as a,e as t}from"./app-04b0d2b0.js";const p={},o=t(`<h1 id="加载预训练权重-并在提取中间部分权重" tabindex="-1"><a class="header-anchor" href="#加载预训练权重-并在提取中间部分权重" aria-hidden="true">#</a> 加载预训练权重，并在提取中间部分权重</h1><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>model_path <span class="token operator">=</span> <span class="token string">&quot;model_best.slam.pth&quot;</span>
model_dict <span class="token operator">=</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>
pretrained_dict <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>model_path<span class="token punctuation">,</span> map_location<span class="token operator">=</span>device<span class="token punctuation">)</span>
load_key<span class="token punctuation">,</span> no_load_key<span class="token punctuation">,</span> temp_dict <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> pretrained_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 进行名字和张量大小的双重对比</span>
    <span class="token keyword">if</span> k <span class="token keyword">in</span> model_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>model_dict<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span>
        temp_dict<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v
        load_key<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        no_load_key<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>
model_dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span>temp_dict<span class="token punctuation">)</span>
model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>model_dict<span class="token punctuation">)</span>

<span class="token comment"># 输出导入了多少没导入多少</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nSuccessful Load Key:&quot;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>load_key<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;……\\nSuccessful Load Key Num:&quot;</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>load_key<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nFail To Load Key:&quot;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>no_load_key<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;……\\nFail To Load Key num:&quot;</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>no_load_key<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果名字有不同，还要看看然后再改名字再比对</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> pretrained_dict<span class="token punctuation">[</span><span class="token string">&quot;model&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 假如这个权重保存的时候的名字前面还加了其他的东西比如 “backbone_net.”</span>
    name <span class="token operator">=</span> <span class="token string">&quot;backbone_net.&quot;</span><span class="token operator">+</span>k
    <span class="token comment"># print(name)</span>
    <span class="token keyword">if</span> name <span class="token keyword">in</span> model_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>model_dict<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span>
        temp_dict<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> v
        load_key<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        no_load_key<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
model_dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span>temp_dict<span class="token punctuation">)</span>
model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>model_dict<span class="token punctuation">,</span> strict<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存权重</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;model.pth&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),e=[o];function c(u,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","加载预训练权重，并在提取中间部分权重.html.vue"]]);export{k as default};
