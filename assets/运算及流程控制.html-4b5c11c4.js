import{_ as l,r as p,o as c,c as i,b as n,a,d as t,e as s}from"./app-04b0d2b0.js";const d={},r=s(`<h1 id="运算及流程控制" tabindex="-1"><a class="header-anchor" href="#运算及流程控制" aria-hidden="true">#</a> 运算及流程控制</h1><h2 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式" aria-hidden="true">#</a> 表达式</h2><h3 id="算术运算与算术表达式" tabindex="-1"><a class="header-anchor" href="#算术运算与算术表达式" aria-hidden="true">#</a> 算术运算与算术表达式</h3><h4 id="基本算术运算" tabindex="-1"><a class="header-anchor" href="#基本算术运算" aria-hidden="true">#</a> 基本算术运算</h4><p>​ <code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code></p><p>说明</p><ul><li>两个整型相除除不尽，一般采用向零取整？？</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> c <span class="token operator">=</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 c 等于 2，因为整型 a/b 的值为 2</p><ul><li>此外，&#39;<strong>Ｃ++对运算时所有的float型数据按照double型处理</strong>&#39;</li></ul><h4 id="不同数值类型的混合运算-隐式类型转换" tabindex="-1"><a class="header-anchor" href="#不同数值类型的混合运算-隐式类型转换" aria-hidden="true">#</a> 不同数值类型的混合运算（隐式类型转换）</h4><p>不同类型的数据先转换为同一类型，再进行运算</p>`,12),u=s(`<p>float -&gt; double</p><p>​ long</p><p>​ unsigned</p><p>char,short -&gt; int</p><blockquote><p>向右的箭头是必定的转换</p><p>由下往上优先级越来越高</p><p>箭头仅表示方向，不表示过程（转换一步到位）</p><ul><li>总之从范围小的转换到范围大的</li></ul></blockquote><h4 id="自增自减运算符" tabindex="-1"><a class="header-anchor" href="#自增自减运算符" aria-hidden="true">#</a> 自增自减运算符</h4><p>使变量的值 +1 或者 -1</p><p><code>++i</code>：先<code> i = i + 1</code>，在使用 <code>i</code></p><p><code>i++</code>：先使用 <code>i</code> ，在执行<code> i = i + 1</code></p><div class="custom-container tip"><p class="custom-container-title">++i和i++的区别</p><p>?????</p></div><h4 id="强制类型转换运算符" tabindex="-1"><a class="header-anchor" href="#强制类型转换运算符" aria-hidden="true">#</a> 强制类型转换运算符</h4><p>​ 一般不同类型的数据可以自动转换，有时需要手动强制转换</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">(</span><span class="token keyword">typename</span><span class="token punctuation">)</span>表达式
<span class="token keyword">typename</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">a</span>
<span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">int</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> 注意与 <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>x <span class="token operator">+</span> y 不同
<span class="token keyword">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>强制类型转换得到的是一个中间值，一般作为输出或者赋给另一个变量</p><p>原变量的类型不变</p></div>`,16),k={class:"custom-container tip"},v=a("p",{class:"custom-container-title"},"TIP",-1),h=a("p",null,"LL代表的意思是long long类型， 1LL是为了在计算时，把int类型的变量转化为long long类型，然后再赋值给long long类型的变量",-1),b={href:"https://blog.csdn.net/weixin_51765822/article/details/119488145?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-119488145-blog-100053242.235%5Ev38%5Epc_relevant_sort_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-119488145-blog-100053242.235%5Ev38%5Epc_relevant_sort_base3&utm_relevant_index=2",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.csdn.net/qq_38576126/article/details/76286266",target:"_blank",rel:"noopener noreferrer"},g=s(`<h3 id="赋值运算与赋值表达式" tabindex="-1"><a class="header-anchor" href="#赋值运算与赋值表达式" aria-hidden="true">#</a> 赋值运算与赋值表达式</h3><h4 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h4><p><code>=</code></p><p>从右向左</p><h4 id="复制过程中的类型转换" tabindex="-1"><a class="header-anchor" href="#复制过程中的类型转换" aria-hidden="true">#</a> 复制过程中的类型转换</h4><p>如果赋值运算符两侧的类型不一致，但是都是数值型或者字符型，在赋值时自动进行类型转换</p><ol><li>浮点型赋给整型，舍弃小数部分</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出 i 为 3（整型）</p><ol start="2"><li>整型赋给浮点型</li></ol><p>数值不变，但是在内存中已经变成指数形式（变为浮点型）</p><ol start="3"><li>将 <code>double </code>赋给 <code>float</code></li></ol><p>注意不要溢出</p><ol start="4"><li>将字符型赋给整型</li></ol><p>赋给字符的 ASCII 码</p><ol start="5"><li>将 <code>int</code>，<code>short </code>或 <code>long </code>赋给 <code>char</code></li></ol><p>仅取低 8 位（发生截断）</p><ol start="6"><li>将有符号 <code>signed </code>赋给长度相同的 <code>unsigned</code></li></ol><p>将储存单位内容原样照搬</p><p>总结：<strong>不同类型的整型数据直接的赋值就是按照存储单元中的存储形式直接传送</strong></p><h4 id="复合赋值运算符" tabindex="-1"><a class="header-anchor" href="#复合赋值运算符" aria-hidden="true">#</a> 复合赋值运算符</h4><p>在赋值符 = 之前加上其他运算符，可以构成复合运算符</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>a <span class="token operator">+=</span> <span class="token number">3</span>    	a <span class="token operator">=</span> a<span class="token operator">+</span><span class="token number">3</span>
a <span class="token operator">*=</span> b <span class="token operator">+</span> <span class="token number">3</span>	a <span class="token operator">=</span> a<span class="token operator">*</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//赋值运算符优先级较低且为右结合性</span>
a <span class="token operator">%=</span> <span class="token number">3</span>     	a <span class="token operator">=</span> a <span class="token operator">%</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>凡是双目运算符可以与赋值符一起组合位复合运算符</p><h4 id="赋值表达式" tabindex="-1"><a class="header-anchor" href="#赋值表达式" aria-hidden="true">#</a> 赋值表达式</h4><p>1、形式</p><p><code>变量 = 表达式</code></p><p>2、求解过程</p><p>先求右值<code>(right valve，rvalve)</code>再将右值赋给左值</p><ul><li><p>左值：</p><ul><li>赋值运算符左侧的标识符</li><li>不是任何对象都可作为右值</li></ul></li><li><p>右值：</p><ul><li>左值都可以作为右值 a = b</li><li>表达式可以为赋值表达式 a = b = 5</li></ul></li></ul><p>3、结果</p><ul><li>赋值表达式整体有一个值作为结果</li><li><code>a=3*5</code>的值为 15，执行表达式后 a 的值也为 15</li></ul><p>4、使用</p><p>Ｃ++赋值表达式式可以以表达式的形式出现在非赋值语句中，例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>a <span class="token operator">=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//赋值输出双功能</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="逗号运算符和逗号表达式" tabindex="-1"><a class="header-anchor" href="#逗号运算符和逗号表达式" aria-hidden="true">#</a> 逗号运算符和逗号表达式</h3><p>又称为<strong>顺序求值运算符</strong></p><ol><li>形式：</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>表达式<span class="token number">1</span><span class="token punctuation">,</span> 表达式<span class="token number">2</span><span class="token punctuation">,</span> …………<span class="token punctuation">,</span> 表达式n<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>求解</li></ol><p>先求解表达式1，再求表达式2（从左到右）</p><p>整个逗号表达式的值是表达式2的值（后面那个表达式的值）</p><p>例，3+5,6+8 &quot;3+5,6+8&quot;的值为 14</p><ol start="3"><li>优先级</li></ol><p>逗号运算符的优先级最低，比赋值 = 还低，例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>a<span class="token operator">=</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span>a<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>求解：</p><p>先对a赋值 a = 15</p><p>再求 a*4 = 60，即整个表达式的值为 60</p><ol start="4"><li>运用</li></ol><ul><li><p>逗号表达式一般是把若干个表达式串联起来</p><ul><li>只是为了在一个表达式中对若干个表达式进行计算得到值，而并非为了整个逗号表达式的值</li></ul></li><li><p>常用于循环语句</p></li></ul><h3 id="条件运算符与条件表达式" tabindex="-1"><a class="header-anchor" href="#条件运算符与条件表达式" aria-hidden="true">#</a> 条件运算符与条件表达式</h3><ol><li><p>条件运算符 <code>? :</code></p></li><li><p>条件表达式</p></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>表达式<span class="token number">1</span> <span class="token operator">?</span> 表达式<span class="token number">2</span><span class="token operator">:</span>表达式<span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>求解：</p><p>先求解表达式1</p><ul><li><p>如果表达式1的值 非0（真）</p><ul><li>则整个表达式的值为 表达式2</li></ul></li><li><p>如果表达式1的值 <code>0</code>（假）</p><ul><li>则整个表达式的值为 表达式3</li></ul></li></ul><ol start="3"><li>举例</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>max <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span> <span class="token comment">//将a，b中较大的值赋给 max</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="关系运算与关系表达式" tabindex="-1"><a class="header-anchor" href="#关系运算与关系表达式" aria-hidden="true">#</a> 关系运算与关系表达式</h3><ol><li>关系运算：</li></ol><p>比较运算，将两个数据进行比较</p><p>还可以对字符表达式比较</p><ol start="2"><li>关系表达式：</li></ol><p>表达式 关系运算符 表达式</p><ol start="3"><li>关系运算符</li></ol><p><code>&lt;</code> 优先级相同，比下面两个更高</p><p><code>&lt;=</code></p><p><code>&gt;</code></p><p><code>&gt;=</code></p><p><code>== </code> (等于，不等于的优先级低于大于小于)</p><p><code>!=</code> 不等于</p><ol start="4"><li>优先级与结合性</li></ol><p>​ 结合性：</p><p>​ 从左向右，例</p><p>​ a&gt;b&gt;c 等价于 (a&gt;b)&gt;c</p><p>​ 上面的优先级更高：</p><p>​ 算术运算符</p><p>​ 关系运算符</p><p>​ 赋值运算符</p><p>​ 例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>c <span class="token operator">&gt;</span> a <span class="token operator">+</span> b	c <span class="token operator">&gt;</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>
a <span class="token operator">&gt;</span> b <span class="token operator">==</span> <span class="token function">c</span>  <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> c
a <span class="token operator">==</span> b <span class="token operator">&lt;</span> c  a <span class="token operator">==</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> c<span class="token punctuation">)</span>
a <span class="token operator">=</span> b <span class="token operator">&gt;</span> c   a <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">&gt;</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>关系表达式的值</li></ol><p>关系表达式的值是&#39;逻辑值，即真或者假&#39;</p><h3 id="逻辑运算与逻辑表达式" tabindex="-1"><a class="header-anchor" href="#逻辑运算与逻辑表达式" aria-hidden="true">#</a> 逻辑运算与逻辑表达式</h3><ol><li><strong>逻辑常量与逻辑变量</strong></li></ol><p>Ｃ语言中没有逻辑型数据，真或假（关系表达式）对值使用 1 和 0 代表的</p><p>C++中增加了逻辑型数据</p><ul><li>逻辑常量 <ul><li>false; 假，编辑器将 false 处理为 0</li><li>true; 真，将 true 处理为 1</li></ul></li></ul><blockquote><p>占 1 字节</p></blockquote><ul><li>逻辑变量 <ul><li>类型表示符 bool</li><li>值只能为 true 或者 false，例</li></ul></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> A<span class="token punctuation">;</span>
A <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>布尔变量 布尔常量 <ul><li>逻辑型又被称为布尔型</li></ul></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cout<span class="token operator">&lt;&lt;</span>boolalpha<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//按照bool类型访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>布尔代数 <ul><li>可以与数值型数据混合进行算术运算</li><li><strong>若将非零整数赋给布尔型数据，则按“真”处理，值为 1</strong></li></ul></li></ul><ol start="2"><li><strong>逻辑运算符</strong></li></ol><table><thead><tr><th style="text-align:left;"><code>&amp;&amp;</code></th><th style="text-align:left;"><code>||</code></th><th><code>!</code></th></tr></thead><tbody><tr><td style="text-align:left;">与</td><td style="text-align:left;">或</td><td>非</td></tr><tr><td style="text-align:left;">双目运算符</td><td style="text-align:left;">双目运算符</td><td>单目运算符</td></tr></tbody></table><p>优先级</p><ul><li><p>!(非) 大于 &amp;&amp;（与）大于 ||(或)</p></li><li><p>!(非)</p><p>算术运算符</p><p>关系运算符</p><p>逻辑运算符</p><p>赋值运算符</p></li></ul><ol start="3"><li><strong>逻辑表达式</strong></li></ol><p>形式</p><p><code>表达式 逻辑运算符 表达式</code></p><p>2、说明</p><p>得到一个逻辑量：真/假</p><p>非<code>0</code> ——〉 真 ——〉值为<code>1</code></p><p><code>0</code> ——〉假</p><p><strong>逻辑运算符两侧可以为任何数值型数据</strong></p><p>​</p><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><p>1、算术运算符</p><table><thead><tr><th><code>+</code></th><th><code>-</code></th><th><code>*</code></th><th><code>/</code></th><th><code>%</code></th><th><code>++</code></th><th><code>--</code></th></tr></thead><tbody><tr><td>加</td><td>减</td><td>乘</td><td>除</td><td>整数求余</td><td>自加</td><td>自减</td></tr></tbody></table><p>2、关系运算符</p><p><code>&gt;</code> <code>&lt;</code> <code> ==</code> <code>&gt;= </code> <code>&lt;=</code> <code>!=</code></p><p>3、逻辑运算符</p><p><code>&amp;&amp;</code> <code>||</code> <code>!</code></p><p>4、位运算符</p><table><thead><tr><th><code>&lt;&lt;</code></th><th><code>&gt;&gt;</code></th><th><code>&amp;</code></th><th><code>|</code></th><th><code>^</code></th><th><code>~</code></th></tr></thead><tbody><tr><td>按位左移</td><td>按位右移</td><td>按位与</td><td>按位或</td><td>按位异或</td><td>按位取反</td></tr></tbody></table><p>目数：双目</p><p>结合性：从左往右</p><p>例 <code>2 &lt;&lt; 3</code> =16 ：将 2（10）的二进制数全部向左移动 16（10000）,如果溢出则舍去高位</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>&lt;&lt;左移运算符：expr1&lt;&lt;expr2 表示 expr1 左移 expr2 位，数值上表示 expr1 扩大了 2^expr2 倍；</p><blockquote><p>右移运算符：expr1&gt;&gt;expr2表示 expr2 右移 expr2 位，数值上表示 expr1 缩小了 2^expr2 倍；</p></blockquote><p>左边的数表示被移位的数字，1&lt;&lt;n = 2^n、n&lt;&lt;1 = 2*n</p><p><strong>总结：</strong></p><p>左移就是扩大 2^移位数^，右移就是缩小2^移位数^</p><p>————————————————</p><p>版权声明：本文为CSDN博主「algsup」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</p><p>原文链接：https://blog.csdn.net/qq_43152052/article/details/100076874</p></div><p>5、赋值运算符</p><p><code>=</code> <code>-=</code> <code>+=</code> <code>*=</code> <code>/=</code>………………</p><p>6、条件运算符</p><p><code>? :</code></p><p>7、逗号运算符</p><p><code>,</code></p><p>8、指针运算符</p><p><code>*</code></p><p>9、引用运算符和地址运算符</p><p><code>&amp;</code></p><p>10、求字节数运算符</p><p><code>sizeof(type)</code></p><p>11、强制类型转换运算符</p><p><code>(typename) </code>或者 <code>typename()</code></p><p>12、成员运算符</p><p><code>.</code></p><p>13、指向成员的运算符</p><p><code> -&gt;</code></p><p>14、下标运算符</p><p><code>[]</code></p><p>15、其他（如函数调用运算符() ）</p><p><code>:: </code>作用域运算符：标识某个成员属于哪个类</p><h3 id="运算符的优先级、结合性与目数" tabindex="-1"><a class="header-anchor" href="#运算符的优先级、结合性与目数" aria-hidden="true">#</a> 运算符的优先级、结合性与目数</h3><h4 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级" aria-hidden="true">#</a> 优先级</h4><p>在求解表达式时，按运算符的优先级依次执行</p><p>同一优先级则按照结合方向</p><p>大致优先级：</p><ol><li>初等运算符 <code>::</code> <code>-&gt;</code> <code>.\`\` ()</code> <code>[]</code></li><li>单目运算符 <ol><li>自增自减（后置）</li><li>自增自减（前置）</li><li>逻辑非 !</li><li>正负</li><li>算术（先乘除，后加减）</li></ol></li><li>关系</li><li>条件</li><li>赋值</li><li>逗号</li></ol><h4 id="目数" tabindex="-1"><a class="header-anchor" href="#目数" aria-hidden="true">#</a> 目数</h4><blockquote><p>运算对象的个数</p></blockquote><ul><li>单目运算符</li></ul><p><code>-\`\`+</code>（正负）<code> ++</code> <code>--</code> <code>sizeof(type)</code> ………… 只在运算符一侧出现一个运算对象</p><ul><li>双目运算符</li></ul><p><code>-</code> <code>+</code>（加减）………… 两侧各有一个运算对象</p><ul><li>三目运算符</li></ul><p>条件运算符</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>x<span class="token operator">?</span>a<span class="token operator">:</span>b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>唯一一个三目运算符</p><h4 id="结合性" tabindex="-1"><a class="header-anchor" href="#结合性" aria-hidden="true">#</a> 结合性</h4><p>结合方向</p><ul><li><p>从左向右</p><ul><li>大部分运算符都是从左向右</li></ul></li><li><p>从右向左</p><ul><li>大部分单目运算符是从右向左</li><li>赋值运算符是从右向左（先算等式右边的）</li></ul></li></ul><h2 id="语句" tabindex="-1"><a class="header-anchor" href="#语句" aria-hidden="true">#</a> 语句</h2><p>Ｃ++语句</p><p>Ｃ++程序中最小的独立单位，一般以分号结尾，复合语句以 &quot;}&quot; 结尾</p><p>分类</p><ul><li>声明语句</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 对变量和其他对象的定义（Ｃ语言中不是语句）</p><p>​ 位置可以在任何地方</p><p>​ 作用范围从声明开始到本函数或本块的结尾</p><ul><li><p>执行语句</p><ol><li><p>控制语句</p><p>完成一定的控制功能</p></li><li><p>函数和流对象调用语句</p><p>函数调用</p><p>流调用</p><p>表达式语句</p><ul><li>表达式 + 分号</li></ul></li><li><p>空语句</p><p>只有一个分号，什么也不做</p><p>常作为转向点，循环语句中的循环体：循环体是空语句，表示循环体什么也不做</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">++</span><span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span> <span class="token comment">//输出为 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>复合语句</p></li></ol><p>​ 用 {} 把一些语句扩起来，成为复合语句</p></li></ul><h3 id="选择控制语句" tabindex="-1"><a class="header-anchor" href="#选择控制语句" aria-hidden="true">#</a> 选择控制语句</h3><ol><li>if 语句</li></ol><p>根据表达式值的真或假，执行给出的操作</p><p>​ 1、形式</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> 语句
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> 语句<span class="token number">1</span>
<span class="token keyword">else</span> 语句<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&gt;</span>y<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span>y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> 语句
<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> 语句
<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> 语句
………………
<span class="token keyword">else</span> 语句
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><ul><li><p>执行 if 时先对（）中的表达式求解，按照 非0（真） 和 0（假） 处理</p><ul><li>例：if(2)cout&lt;&lt;ok;</li></ul></li><li><p>分号⚠️</p><ul><li>语句以&quot;;&quot;或者&quot;}&quot;结尾</li></ul></li><li><p>在复合语句中定义的变量为&#39;<strong>局部变量</strong>&#39;，只在该语句中有效</p></li></ul></div><ol start="2"><li>if 语句嵌套</li></ol><p>​ 例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token keyword">else</span> 
<span class="token keyword">else</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 <code>if </code>和 <code>else </code>的配对关系：</p><ul><li><code>else </code>总是和它上面最近的，且未配对的 <code>if </code>配对</li><li>如果 <code>if </code>和 <code>else </code>的数量不一样，可以用花括号来确定关系</li></ul><p>​</p><h3 id="多分支选择结构与-switch-语句" tabindex="-1"><a class="header-anchor" href="#多分支选择结构与-switch-语句" aria-hidden="true">#</a> 多分支选择结构与 switch 语句</h3><p>​ 1、形式</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> condition<span class="token operator">:</span> 语句<span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> condition<span class="token operator">:</span> 语句<span class="token number">2</span><span class="token punctuation">;</span>
        ……………
    <span class="token keyword">case</span> condition<span class="token operator">:</span> 语句n<span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>语句 n<span class="token operator">+</span><span class="token number">1</span>     <span class="token comment">//default 可以不写，可以有一个，无论在哪都是最后执行</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 2、说明</p><p>​ 1、switch 后面的表达式只能是整型或者字符类型（枚举类型）</p><p>​ 2、当 switch 表达式的值与某一个 case 子句中的常量表达式值相匹配时，就执行此 case 子句</p><p>​ 如果都不能匹配，就执行 default 子句中的内嵌语句;</p><p>​ 3、每一个 case 表达式的值必须互不相同，否则会出现矛盾;</p><p>​ 4、各个 case 和 default: 的出现次序不影响执行结果;</p><p>​ 5、执行完一个 case 子句之后，流程控制转移到下一个 case 子句继续执行</p><p>​ 并不是在 case 处进行条件判断</p><p>​ 根据 switch 表达式的值，找到匹配的case之后，就从 case 开始执行下去，不再进行判断</p><p>​ 为了跳出结构，中止语句，可以在每一个 case 之后加上 break; 例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token char">&#39;A&#39;</span><span class="token operator">:</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;85~95\\n&quot;</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
  	<span class="token keyword">case</span> <span class="token char">&#39;B&#39;</span><span class="token operator">:</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;70~84\\n&quot;</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
  	………………
  	<span class="token keyword">default</span><span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;error\\n&quot;</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">//最后一个子句（这里是default）可以不加</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 6、多个 case 执行同一个语句</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>grad<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token char">&#39;A&#39;</span><span class="token operator">:</span> 
 	<span class="token keyword">case</span> <span class="token char">&#39;B&#39;</span><span class="token operator">:</span> 
  	<span class="token keyword">case</span> <span class="token char">&#39;c&#39;</span><span class="token operator">:</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;&gt;60\\n&quot;</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 当grade的值为 A，B，Ｃ的时候执行同一个语句;</p><p>​</p><h3 id="循环结构和循环语句" tabindex="-1"><a class="header-anchor" href="#循环结构和循环语句" aria-hidden="true">#</a> 循环结构和循环语句</h3><p>1、用while语句构成循环</p><p>​ 1、形式</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    语句<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 2、作用</p><p>当指定的条件为真（表达式为非0）时，执行while语句中的内嵌语句（循环体）</p><p>​ 3、特点</p><p>先判断表达式，再执行语句</p><p>​</p><div class="custom-container warning"><p class="custom-container-title">\`goto\`和\`break\`</p></div>`,218);function x(y,f){const o=p("Mermaid"),e=p("ExternalLinkIcon");return c(),i("div",null,[r,n(o,{id:"mermaid-42",code:"eJxLL0osyFDwCeJKy8lPLNHVtUvJL03KSQUycvLz0oFUaV5xZnpeagqQmZlXwpWckVikU5yRXwRSCxIAANwtFhU="}),u,a("div",k,[v,h,a("p",null,[a("a",b,[t("C/C++ 一个数字后面加上LL_ida 数字后面加ll_彭华成的博客-CSDN博客"),n(e)])]),a("p",null,[a("a",m,[t("C++中的1LL_c++ 1ll_ACM小学生的博客-CSDN博客"),n(e)])])]),g])}const _=l(d,[["render",x],["__file","运算及流程控制.html.vue"]]);export{_ as default};
