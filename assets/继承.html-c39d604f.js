import{_ as n,o as s,c as a,e as t}from"./app-04b0d2b0.js";const l={},e=t(`<h1 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h1><p>面向对象程序设计的四个主要特点：抽象、封住、继承、多态</p><p>继承性是面向对象程序设计最重要的特征</p><p>面向对象技术强调&#39;<strong>软件的可重用性</strong>&#39;（software reusability），Ｃ++语言提供了类的继承机制，解决了软件重用问题</p><h2 id="_1-继承与派生的概念" tabindex="-1"><a class="header-anchor" href="#_1-继承与派生的概念" aria-hidden="true">#</a> 1. 继承与派生的概念</h2><p>Ｃ++中可重用性通过&#39;<strong>继承</strong>&#39;(inheritance)机制实现</p><p>在Ｃ++中继承就是在一个已存在的类的基础上建立一个新的类。</p><ul><li>已存在的类被称为&#39;<strong>基类</strong>&#39;（base class）或&#39;<strong>父类</strong>&#39;（father class）</li><li>新建的类称为&#39;<strong>派生类</strong>&#39;（derived class）或&#39;<strong>子类</strong>&#39;（son class）</li><li>&#39;<strong>子类型</strong>&#39;：必须是子类继承了父类所有的可继承特性（公有继承），才能说是子类型，否则是单纯的子类</li></ul><hr><p>&#39;<strong>类的继承</strong>&#39;：一个新类从已有的类那里获得其他已有特性</p><ul><li>通过继承，一个新建子类从已有的父类获得父类的特性</li></ul><p>&#39;<strong>类的派生</strong>&#39;：从已有的类（父类）产生一个新的子类</p><ul><li>类的继承是用已有的类来建立专用类的编程技术</li></ul><hr><p>类的&#39;<strong>继承层次结构</strong>&#39; 派生类继承了基类的所有数据成员和成员函数，并根据需要对成员做出必要的调整</p><ul><li>类的每一次派生，都继承了其基类的基本特征，同时又有区别和发展</li><li>一个基类可以派生出多个派生类，每一个派生类又可以作为基类再派生出新的派生类</li><li>因此基类和派生类都是相对而言的。一代一代的派生下去，就形成了类的&#39;<strong>继承层次结构</strong>&#39;</li></ul><p>继承具有&#39;<strong>传递性</strong>&#39;</p><hr><p><strong>单继承</strong>：一个派生类只从一个基类派生（继承最简单的情况），形成一个树形结构</p><p><strong>多重继承</strong>：一个派生类有两个或多个基类的称为&#39;多重继承&#39;（multiple inheritance）</p><ul><li>理解：一个派生类还可以从多个基类派生（如马和驴子杂交骡），一个派生类可以有多个基类</li></ul><p>派生类和基类的关系：<strong>派生类是基类的具体化，基类是派生类的抽象</strong></p><ul><li>基类综合了派生类的公共特征，派生类则在基类的基础上增加了某些特性，把抽象类变成具体的、实用的类型</li></ul><h2 id="_2-派生类的声明" tabindex="-1"><a class="header-anchor" href="#_2-派生类的声明" aria-hidden="true">#</a> 2. 派生类的声明</h2><p>单继承举例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>                                  <span class="token comment">//声明一个类Student</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;num: &quot;</span><span class="token operator">&lt;&lt;</span>num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;name: &quot;</span><span class="token operator">&lt;&lt;</span>name<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;sex: &quot;</span><span class="token operator">&lt;&lt;</span>sex<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		<span class="token keyword">int</span> num<span class="token punctuation">;</span>
		string name<span class="token punctuation">;</span>
		<span class="token keyword">char</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Student1</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Student</span></span><span class="token punctuation">{</span>                 <span class="token comment">//声明基类是Student</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token keyword">void</span> <span class="token function">display_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;age: &quot;</span><span class="token operator">&lt;&lt;</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>          <span class="token comment">//新增加的成员函数</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;address: &quot;</span><span class="token operator">&lt;&lt;</span>address<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  
		<span class="token punctuation">}</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>                               <span class="token comment">//新增加的数据成员</span>
		<span class="token keyword">int</span> address<span class="token punctuation">;</span>                           <span class="token comment">//新增加的数据成员</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明</p><ul><li>在定义第二个类时，Student1 是新建的类名，冒号后面的 Student 表示是已声明的基类</li><li>在 Student 前的关键字<code>public</code>表示基类 Student 中的成员在派生类 Student1 中的&#39;继承方式&#39;</li><li>基类名前有 <code>public</code>的称为<strong>公用继承</strong>（public inheritance），此外还有**<code>private</code>(私有继承)<strong>、</strong><code>protected</code>(保护继承)**</li><li>如果不写则<strong>默认&#39;私有继承&#39;</strong></li></ul><p>声明派生类的一般形式为</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> 派生类名<span class="token operator">:</span><span class="token punctuation">[</span>继承方式<span class="token punctuation">]</span>基类名
<span class="token punctuation">{</span>
	派生类新增加的成员
<span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">//类声明分号结尾！！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-派生类的构成" tabindex="-1"><a class="header-anchor" href="#_3-派生类的构成" aria-hidden="true">#</a> 3. 派生类的构成</h2><p>派生类中的成员包括从基类继承过来的成员和自己增加的成员两大部分</p><ul><li>从基类继承的成员体系类派生类从基类继承而获得的共性</li><li>新增加的成员体现了派生类的个性，（正是这些新增加的成员体现了派生类与基类的不同） <ul><li>派生类通过 添加新的成员 将其本身与基类区分开来</li></ul></li></ul><hr><hr><p>构造一个派生类包括三部分工作（并不少简单的把基类的成员和派生类自己增加的成员加在一起成为派生类）</p><ol><li><strong>从基类接收成员</strong></li></ol><ul><li>派生类把基类的<strong>全部</strong>成员（不包括构造函数和析构函数、友元特性、赋值运算符重载函数 <code>=</code> ）接收过来，没有选择余地，不能接收一部分放弃一部分</li><li>在多次派生后会造成数据冗余问题，目前在Ｃ++中无法解决，所以要求慎重选择基类，考虑如何是派生类的结构更加合理</li><li>有些类是专门为基类设计的，在设计时充分考虑到了派生类的要求</li></ul><ol start="2"><li><strong>调整从基类接收的成员</strong></li></ol><ul><li>接收基类成员无法选择，但是能够对成员调整</li><li>例如通过指定继承方式调整基类成员在派生类中的访问属性</li><li>可以在派生类中声明一个与基类成员同名的成员，则派生类中的新成员会覆盖基类的同名成员</li></ul><p>利用这种方法可以用新成员取代基类的成员</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>如果是成员函数应该使函数名和函数的参数表（参数的个数和类型相同），如果不同则是函数的重载而不是覆盖</p></div><ol start="3"><li><strong>在声明派生类是增加的成员</strong></li></ol><ul><li>增加的成员体现了派生类对基类的功能扩展，需要精心设计成员和函数</li><li>在声明派生类时，一般还应该自己定义派生类的构造函数和析构函数（构造函数和析构函数不能从基类继承）</li></ul><div class="custom-container tip"><p class="custom-container-title">综上所述</p><p>派生类是基类定义的延续，通过对基类声明的延续，将一个抽象的基类转化为具体的派生类。因此，<strong>派生类是抽象基类的具体实现</strong></p></div><h2 id="_4-派生类成员的访问属性" tabindex="-1"><a class="header-anchor" href="#_4-派生类成员的访问属性" aria-hidden="true">#</a> 4. 派生类成员的访问属性</h2><p>不同的继承方式决定了基类成员在派生类中的访问属性，一个成员在不同的派生层次中的访问属性可能是不同的</p><p>有以下几种访问情况需要讨论</p><h2 id="_5-区分-派生类对象-和-派生类-对基类成员的访问权限" tabindex="-1"><a class="header-anchor" href="#_5-区分-派生类对象-和-派生类-对基类成员的访问权限" aria-hidden="true">#</a> 5. 区分 派生类对象 和 派生类 对基类成员的访问权限</h2><ol><li><p>“派生类对象”对基类成员的访问权限：</p><ul><li>对于公有继承，只有基类的公有成员可以被“派生类对象”访问，其他(保护和私有)成员不能被访问。</li><li>对于私有继承和保护继承，基类中所有成员都不能被“派生类对象”访问。</li></ul></li><li><p>“派生类”对基类中成员的访问权限：</p><ul><li>对于公有继承，基类中的公有成员和保护成员可以被“派生类”访问，而基类中的私有成员不能被访问。</li><li>对私有继承和保护继承，也是基类中的公有成员和保护成员可以被“派生类”访问，而基类中的私有成员不能被访问。</li></ul></li></ol>`,50),p=[e];function o(i,c){return s(),a("div",null,p)}const u=n(l,[["render",o],["__file","继承.html.vue"]]);export{u as default};
