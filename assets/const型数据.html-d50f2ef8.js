import{_ as n,o as s,c as a,e as t}from"./app-04b0d2b0.js";const e={},p=t(`<h1 id="const型数据" tabindex="-1"><a class="header-anchor" href="#const型数据" aria-hidden="true">#</a> const型数据</h1><h2 id="_1-const指针" tabindex="-1"><a class="header-anchor" href="#_1-const指针" aria-hidden="true">#</a> 1. const指针</h2><h3 id="_1-1-指向常量的指针变量" tabindex="-1"><a class="header-anchor" href="#_1-1-指向常量的指针变量" aria-hidden="true">#</a> 1.1 指向常量的指针变量</h3><h3 id="_1-2-常指针" tabindex="-1"><a class="header-anchor" href="#_1-2-常指针" aria-hidden="true">#</a> 1.2 常指针</h3><h3 id="_1-3-指向常量的常指针" tabindex="-1"><a class="header-anchor" href="#_1-3-指向常量的常指针" aria-hidden="true">#</a> 1.3 指向常量的常指针</h3><h2 id="_2-常对象" tabindex="-1"><a class="header-anchor" href="#_2-常对象" aria-hidden="true">#</a> 2. 常对象</h2><h2 id="_3-常对象成员" tabindex="-1"><a class="header-anchor" href="#_3-常对象成员" aria-hidden="true">#</a> 3. 常对象成员</h2><h2 id="_4-指向对象的常指针" tabindex="-1"><a class="header-anchor" href="#_4-指向对象的常指针" aria-hidden="true">#</a> 4. 指向对象的常指针</h2><p><strong>将指针变量声明为const型，这样指针变量始终保持为初值，不能改变，即指向不变</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Time <span class="token function">t1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t2<span class="token punctuation">;</span>   <span class="token comment">//定义对象</span>
Time <span class="token operator">*</span><span class="token keyword">const</span> ptr1<span class="token punctuation">;</span>       <span class="token comment">//const位置在指针变量名前，指定 ptr1 是常指针变量</span>
ptr1 <span class="token operator">=</span> <span class="token operator">&amp;</span>t1<span class="token punctuation">;</span>             <span class="token comment">//ptr1 指向对象t1，此后不能改变指向</span>
ptr1 <span class="token operator">=</span> <span class="token operator">&amp;</span>t2<span class="token punctuation">;</span>             <span class="token comment">//错误，ptr1不能改变指向</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-指向常对象的指针变量" tabindex="-1"><a class="header-anchor" href="#_5-指向常对象的指针变量" aria-hidden="true">#</a> 5. 指向常对象的指针变量</h2><blockquote><p>区别于 指向常变量的指针</p></blockquote><h2 id="_6-对象的常引用" tabindex="-1"><a class="header-anchor" href="#_6-对象的常引用" aria-hidden="true">#</a> 6. 对象的常引用</h2><p>一个变量的引用就是一个变量的别名</p><ul><li>引用实际上是一个指针变量，用来存放该变量的地址，</li><li>如果形参为变量的引用，实参为变量名，在调用函数时虚实结合，把实参变量的地址传递给形参（引用），这样引用就指向实参变量。</li><li>对象的引用与此类似</li></ul><p>把引用声明为 const 即常引用</p><p>举例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Time</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Time</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//声明构造函数</span>
		<span class="token keyword">int</span> hour<span class="token punctuation">;</span>
		<span class="token keyword">int</span> minute<span class="token punctuation">;</span>
		<span class="token keyword">int</span> sec<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Time</span><span class="token double-colon punctuation">::</span><span class="token function">Time</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//定义构造函数</span>
	hour <span class="token operator">=</span> h<span class="token punctuation">;</span>
	minute <span class="token operator">=</span> m<span class="token punctuation">;</span>
	sec <span class="token operator">=</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>Time <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment">//形参 t 是 Time 类对象的引用</span>
	t<span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	Time <span class="token function">t1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//定义 Time类对象 t1</span>
	<span class="token function">fun</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//实参是 Time 类对象，可以通过引用来修改实参t1的值</span>
	cout <span class="token operator">&lt;&lt;</span>t1<span class="token punctuation">.</span>hour<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-小结" tabindex="-1"><a class="header-anchor" href="#_7-小结" aria-hidden="true">#</a> 7. 小结</h2><table><thead><tr><th style="text-align:center;">形式</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;"><code>Time const t;</code></td><td style="text-align:center;">t 是常对象，其值在任何情况下都不能改变</td></tr><tr><td style="text-align:center;"><code>void Time::fun()const;</code></td><td style="text-align:center;">fun 是 Time 类中的常成员函数，可以引用，但不能修改本类中的数据成员</td></tr><tr><td style="text-align:center;"><code>Time * const p;</code></td><td style="text-align:center;">p 是指向 Time 类对象的&#39;<strong>常指针</strong>&#39;变量，p 的值（p 的指向）不能改变</td></tr><tr><td style="text-align:center;"><code>const Time *p;</code></td><td style="text-align:center;">p 是指向 Time 类&#39;<strong>常对象</strong>&#39;的指针变量，p 指向的类对象的值不能通过 p 来改变</td></tr><tr><td style="text-align:center;"><code>const Time &amp;t1 = t;</code></td><td style="text-align:center;">t1 是 Time 类对象 t 的引用，二者指向同一储存空间，t 的值不能改变</td></tr><tr><td style="text-align:center;"><code>fun(const 形参)</code></td><td style="text-align:center;">一般作用于引用或者指针形参，防止程序改变执行的对象，提高函数的可维护性</td></tr></tbody></table>`,20),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","const型数据.html.vue"]]);export{d as default};
