import{_ as i,r as l,o as s,c as h,a as t,b as e,w as o,d as n,e as d}from"./app-04b0d2b0.js";const T={},p={class:"table-of-contents"},c={href:"https://xiaolincoding.com/network/2_http/http_interview.html#http-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5",target:"_blank",rel:"noopener noreferrer"},g=d('<h1 id="http-常见面试题" tabindex="-1"><a class="header-anchor" href="#http-常见面试题" aria-hidden="true">#</a> HTTP 常见面试题</h1><h2 id="http-基本概念" tabindex="-1"><a class="header-anchor" href="#http-基本概念" aria-hidden="true">#</a> HTTP 基本概念</h2><h3 id="http-是什么" tabindex="-1"><a class="header-anchor" href="#http-是什么" aria-hidden="true">#</a> HTTP 是什么</h3><p>HTTP 是超文本传输协议，HyperText Transfer Protocol</p><h3 id="http-常见状态码" tabindex="-1"><a class="header-anchor" href="#http-常见状态码" aria-hidden="true">#</a> HTTP 常见状态码</h3><p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/6-五大类HTTP状态码.png" alt=" 五大类 HTTP 状态码 "></p><p><code>1xx</code> 类状态码属于<strong>提示信息</strong>，是协议处理中的一种中间状态，实际用到的比较少。</p><p><code>2xx</code> 类状态码表示服务器<strong>成功</strong>处理了客户端的请求，也是我们最愿意看到的状态。</p><ul><li>「<strong>200 OK</strong>」是最常见的成功状态码，表示一切正常。如果是非 <code>HEAD</code> 请求，服务器返回的响应头都会有 body 数据。</li><li>「<strong>204 No Content</strong>」也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。</li><li>「<strong>206 Partial Content</strong>」是应用于 HTTP 分块下载或断点续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。</li></ul><p><code>3xx</code> 类状态码表示客户端请求的资源发生了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是<strong>重定向</strong>。</p><ul><li>「<strong>301 Moved Permanently</strong>」表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。</li><li>「<strong>302 Found</strong>」表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。</li></ul><p>301 和 302 都会在响应头里使用字段 <code>Location</code>，指明后续要跳转的 URL，浏览器会自动重定向新的 URL。</p><ul><li>「<strong>304 Not Modified</strong>」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，也就是告诉客户端可以继续使用缓存资源，用于缓存控制。</li></ul><p><code>4xx</code> 类状态码表示客户端发送的<strong>报文有误</strong>，服务器无法处理，也就是错误码的含义。</p><ul><li>「<strong>400 Bad Request</strong>」表示客户端请求的报文有错误，但只是个笼统的错误。</li><li>「<strong>403 Forbidden</strong>」表示服务器禁止访问资源，并不是客户端的请求出错。</li><li>「<strong>404 Not Found</strong>」表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。</li></ul><p><code>5xx</code> 类状态码表示客户端请求报文正确，但是<strong>服务器处理时内部发生了错误</strong>，属于服务器端的错误码。</p><ul><li>「<strong>500 Internal Server Error</strong>」与 400 类型，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道。</li><li>「<strong>501 Not Implemented</strong>」表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。</li><li>「<strong>502 Bad Gateway</strong>」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。</li><li>「<strong>503 Service Unavailable</strong>」表示服务器当前很忙，暂时无法响应客户端，类似“网络服务正忙，请稍后重试”的意思。</li></ul><h2 id="get-与-post" tabindex="-1"><a class="header-anchor" href="#get-与-post" aria-hidden="true">#</a> GET 与 POST</h2><h2 id="http-特性" tabindex="-1"><a class="header-anchor" href="#http-特性" aria-hidden="true">#</a> HTTP 特性</h2><h2 id="http-缓存技术" tabindex="-1"><a class="header-anchor" href="#http-缓存技术" aria-hidden="true">#</a> HTTP 缓存技术</h2><h3 id="http-缓存有哪些实现方式" tabindex="-1"><a class="header-anchor" href="#http-缓存有哪些实现方式" aria-hidden="true">#</a> HTTP 缓存有哪些实现方式？</h3><p>对于一些具有重复性的 HTTP 请求，比如每次请求得到的数据都一样的，我们可以把这对「请求-响应」的数据都<strong>缓存在本地</strong>，那么下次就直接读取本地的数据，不必在通过网络获取服务器的响应了，这样的话 HTTP/1.1 的性能肯定肉眼可见的提升。</p><p>所以，避免发送 HTTP 请求的方法就是通过<strong>缓存技术</strong>，HTTP 设计者早在之前就考虑到了这点，因此 HTTP 协议的头部有不少是针对缓存的字段。</p><p>HTTP 缓存有两种实现方式，分别是<strong>强制缓存</strong>和<strong>协商缓存</strong>。</p><h3 id="强制缓存" tabindex="-1"><a class="header-anchor" href="#强制缓存" aria-hidden="true">#</a> 强制缓存</h3><h3 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a> 协商缓存</h3><h2 id="http-与-https" tabindex="-1"><a class="header-anchor" href="#http-与-https" aria-hidden="true">#</a> HTTP 与 HTTPS</h2><h3 id="http-与-https-有哪些区别" tabindex="-1"><a class="header-anchor" href="#http-与-https-有哪些区别" aria-hidden="true">#</a> HTTP 与 HTTPS 有哪些区别？</h3><ul><li>HTTP 是超文本传输协议，信息是明文传输，存在安全风险的问题。HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 SSL/TLS 安全协议，使得报文能够加密传输。</li><li>HTTP 连接建立相对简单， TCP 三次握手之后便可进行 HTTP 的报文传输。而 HTTPS 在 TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。</li><li>两者的默认端口不一样，HTTP 默认端口号是 80，HTTPS 默认端口号是 443。</li><li>HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。</li></ul><h3 id="https-解决了-http-的哪些问题" tabindex="-1"><a class="header-anchor" href="#https-解决了-http-的哪些问题" aria-hidden="true">#</a> HTTPS 解决了 HTTP 的哪些问题？</h3><p>HTTP 由于是明文传输，所以安全上存在以下三个风险：</p><ul><li><strong>窃听风险</strong>，比如通信链路上可以获取通信内容，用户号容易没。</li><li><strong>篡改风险</strong>，比如强制植入垃圾广告，视觉污染，用户眼容易瞎。</li><li><strong>冒充风险</strong>，比如冒充淘宝网站，用户钱容易没。</li></ul><p><img src="https://raw.githubusercontent.com/Overmind7/images/main/img/19-HTTPS与HTTP.jpeg" alt="HTTP 与 HTTPS 网络层"></p><p>HTTP<strong>S</strong> 在 HTTP 与 TCP 层之间加入了 <code>SSL/TLS</code> 协议，可以很好的解决了上述的风险：</p><ul><li><strong>信息加密</strong>：交互信息无法被窃取，但你的号会因为「自身忘记」账号而没。</li><li><strong>校验机制</strong>：无法篡改通信内容，篡改了就不能正常显示，但百度「竞价排名」依然可以搜索垃圾广告。</li><li><strong>身份证书</strong>：证明淘宝是真的淘宝网，但你的钱还是会因为「剁手」而没。</li></ul><p>可见，只要自身不做「恶」，SSL/TLS 协议是能保证通信是安全的。</p><div class="custom-container tip"><p class="custom-container-title">HTTPS 是如何解决上面的三个风险的？</p><ul><li><strong>混合加密</strong>的方式实现信息的<strong>机密性</strong>，解决了窃听的风险。</li><li><strong>摘要算法</strong>的方式来实现<strong>完整性</strong>，它能够为数据生成独一无二的「指纹」，指纹用于校验数据的完整性，解决了篡改的风险。</li><li>将服务器公钥放入到<strong>数字证书</strong>中，解决了冒充的风险。</li></ul></div><h2 id="http-演变" tabindex="-1"><a class="header-anchor" href="#http-演变" aria-hidden="true">#</a> HTTP 演变</h2>',38);function u(P,H){const r=l("router-link"),a=l("ExternalLinkIcon");return s(),h("div",null,[t("nav",p,[t("ul",null,[t("li",null,[e(r,{to:"#http-基本概念"},{default:o(()=>[n("HTTP 基本概念")]),_:1}),t("ul",null,[t("li",null,[e(r,{to:"#http-是什么"},{default:o(()=>[n("HTTP 是什么")]),_:1})]),t("li",null,[e(r,{to:"#http-常见状态码"},{default:o(()=>[n("HTTP 常见状态码")]),_:1})])])]),t("li",null,[e(r,{to:"#get-与-post"},{default:o(()=>[n("GET 与 POST")]),_:1})]),t("li",null,[e(r,{to:"#http-特性"},{default:o(()=>[n("HTTP 特性")]),_:1})]),t("li",null,[e(r,{to:"#http-缓存技术"},{default:o(()=>[n("HTTP 缓存技术")]),_:1}),t("ul",null,[t("li",null,[e(r,{to:"#http-缓存有哪些实现方式"},{default:o(()=>[n("HTTP 缓存有哪些实现方式？")]),_:1})]),t("li",null,[e(r,{to:"#强制缓存"},{default:o(()=>[n("强制缓存")]),_:1})]),t("li",null,[e(r,{to:"#协商缓存"},{default:o(()=>[n("协商缓存")]),_:1})])])]),t("li",null,[e(r,{to:"#http-与-https"},{default:o(()=>[n("HTTP 与 HTTPS")]),_:1}),t("ul",null,[t("li",null,[e(r,{to:"#http-与-https-有哪些区别"},{default:o(()=>[n("HTTP 与 HTTPS 有哪些区别？")]),_:1})]),t("li",null,[e(r,{to:"#https-解决了-http-的哪些问题"},{default:o(()=>[n("HTTPS 解决了 HTTP 的哪些问题？")]),_:1})])])]),t("li",null,[e(r,{to:"#http-演变"},{default:o(()=>[n("HTTP 演变")]),_:1})])])]),t("blockquote",null,[t("p",null,[t("a",c,[n("3.1 HTTP 常见面试题 | 小林coding (xiaolincoding.com)"),e(a)])])]),g])}const f=i(T,[["render",u],["__file","HTTP常见面试题.html.vue"]]);export{f as default};
