import{_ as n,o as s,c as a,e as p}from"./app-04b0d2b0.js";const e={},t=p(`<h1 id="类和面向对象" tabindex="-1"><a class="header-anchor" href="#类和面向对象" aria-hidden="true">#</a> 类和面向对象</h1><h2 id="对象、面向对象" tabindex="-1"><a class="header-anchor" href="#对象、面向对象" aria-hidden="true">#</a> 对象、面向对象</h2><p>凡是以类对象为基本构成单位的程序称为基于对象的程序</p><blockquote><p>面向对象的程序特点：抽象、封装、继承、多态性</p></blockquote><p>类对象体现了c++的抽象与封装</p><ol><li><strong>对象</strong>：万物皆对象（object）</li></ol><div class="custom-container tip"><p class="custom-container-title">对象的两个要素</p><ul><li><p>静态特征:&#39;<strong>属性</strong>&#39;(attribute)</p></li><li><p>动态特征:&#39;<strong>行为（或者功能）</strong>&#39;(behavior)</p></li></ul></div><p>从外部控制对象：发送一个信息:&#39;<strong>消息</strong>&#39;(message)</p><ul><li><p>在一个系统中的多个对象之间通过一定的渠道互相联系</p></li><li><p>要是某一对象实现某一种行为（操作），应向它传送相应的消息</p></li></ul><p>对象是由一组属性和一组行为构成的</p><p>C++中，每个对象都是由&#39;<strong>数据</strong>&#39;和&#39;<strong>函数</strong>&#39;构成的</p><ol start="2"><li><strong>封装与信息隐蔽</strong></li></ol><p>对一个对象进行封装处理，把它的一部分属性和功能对外界隐蔽</p><p>把对象的内部实现和外部行为分隔开</p><div class="custom-container tip"><p class="custom-container-title">封装性(encapsulation)</p><ol><li><p>将有关的数据和操作代码封装在一个对象中，形成一个基本单位，各个对象之间相互独立，互不干扰</p></li><li><p>将对象中的某些部分对外隐蔽，即隐蔽基本细节，只保留少量接口，以便对外联系和接受信息。这种做法被称为信息隐蔽（imofrmation hiding） //c++中函数名就是对外接口</p></li></ol></div><ol start="3"><li><strong>抽象</strong></li></ol><p>抽象的作用是表示同一类事物的本质</p><p>类是对象的抽象，而对象则是类的特例，即类的具体表现形式</p><ol start="4"><li><strong>继承与重用</strong></li></ol><p>继承机制:若已经建立了一个A类，再建立一个与A基本相同的Ｂ类，不必再从头设计一个新类，只需在A类的基础上增加新的内容</p><p>父类/基类</p><p>子类/派生类</p><ol start="5"><li><strong>多态性</strong></li></ol><ul><li><p>多态现象：有几个相似但是不完全相同的对象，在向它们发送同一个消息时，它们的反应各不相同，分别执行不同的操作</p></li><li><p>多态性：由继承而产生的不同的派生类，其对象对同一消息会做出不同的响应。</p></li><li><p>多态性时面向对象程序设计的一个重要特征，能增加程序的灵活性</p></li></ul><blockquote><p>*面向对象程序设计的特点</p><p>把数据和有关操作封装成一个对象</p><p>包括两个方面:</p><ol><li><p>设计所需的各种类和对象，即决定把那些数据和操作封装在一起</p></li><li><p>考虑如何向有关对象发送消息，以完成任务</p></li></ol></blockquote><h2 id="类的声明、定义、引用" tabindex="-1"><a class="header-anchor" href="#类的声明、定义、引用" aria-hidden="true">#</a> 类的声明、定义、引用</h2><p>类是对象的抽象，对象是类的具体实例</p><p>类是对象的&#39;模版&#39;</p><p>类是抽象的，不占用内存；而对象是具体的，占用储存空间</p><h3 id="声明类类型" tabindex="-1"><a class="header-anchor" href="#声明类类型" aria-hidden="true">#</a> 声明类类型</h3><p>与声明结构体类型相似，一般形式为</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> 类名<span class="token punctuation">{</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
    私有的数据和成员函数
    <span class="token keyword">public</span><span class="token operator">:</span>
    公有的数据和成员函数
<span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//有分号结尾！！！！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明</p><ul><li><p><code>private</code>和<code>public</code>是成员访问限定符，用来声明各成员的访问属性。</p><ul><li>被声明为私有的成员，只能被本类中的成员函数引用，类外的不能调用(友元类除外)</li></ul></li><li><p>还有一种成员限定符&#39; <code>protected</code>&#39;，不能被类外访问，但是能被&#39;派生类&#39;成员函数访问</p></li><li><p>声明<code>private</code>、<code>public</code>、<code>protected</code>时没有规定的顺序，访问限定符也可以出现多次（最好一次）</p></li><li><p>如果没有任何声明，默认&#39;<code>private</code>&#39;</p></li></ul><h3 id="定义对象" tabindex="-1"><a class="header-anchor" href="#定义对象" aria-hidden="true">#</a> 定义对象</h3><p>1、先声明类类型，然后在定义对象,eg</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Student stud1<span class="token punctuation">,</span>stud2<span class="token punctuation">;</span>  <span class="token comment">//Student是已经声明过的类类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Student</span> stud1<span class="token punctuation">,</span>stud2<span class="token punctuation">;</span>  <span class="token comment">//标准c继承下来的写法，c++种可以像上一种一样不加class更简单</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、在声明类的同时定义对象,eg</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;num&quot;</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
                <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;name&quot;</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
                <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;gender&quot;</span> <span class="token operator">&lt;&lt;</span> gender <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token keyword">private</span><span class="token operator">:</span>
        <span class="token keyword">int</span> num<span class="token punctuation">;</span>
        <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> gender<span class="token punctuation">;</span>

<span class="token punctuation">}</span>stud1<span class="token punctuation">,</span>stud2<span class="token punctuation">;</span>   <span class="token comment">//在这里定义两个类对象，别忘了分号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、不出现类名，直接定义对象eg：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
    	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>stud1<span class="token punctuation">,</span>stud2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 不提倡使用这种方法</p><h3 id="类的成员函数" tabindex="-1"><a class="header-anchor" href="#类的成员函数" aria-hidden="true">#</a> 类的成员函数</h3><p>性质：</p><ul><li>是函数的一种，简称类函数</li><li>属于类的成员，调用时注意权限</li><li>对外接口：需要被外界调用的函数应指定为<code>public</code></li><li>工具函数：为本类中的成员函数调用，是类中其他成员的工具函数，应设置为<code>private</code></li></ul><h4 id="在类外定义成员函数" tabindex="-1"><a class="header-anchor" href="#在类外定义成员函数" aria-hidden="true">#</a> 在类外定义成员函数</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//公用成员函数原型声明</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> gender<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//表示Student类作用域中的display函数</span>
<span class="token keyword">void</span> <span class="token class-name">Student</span><span class="token double-colon punctuation">::</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;num&quot;</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
        <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;name&quot;</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
        <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;gender&quot;</span> <span class="token operator">&lt;&lt;</span> gender <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Student stud1<span class="token punctuation">,</span>stud2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明</p><ol><li><p><code>::</code>是作用域限定符，或称作用域运算符，在类外定义成员函数时，必须在函数名前加上类名</p></li><li><p>如果<code>::</code>前面没有类名，或者类名和作用域运算符都没有</p></li></ol><p>​ <code>::display()</code> 或者<code> display()</code>则表示全局函数（普通函数）</p><h4 id="内置成员函数-inline-见内置函数" tabindex="-1"><a class="header-anchor" href="#内置成员函数-inline-见内置函数" aria-hidden="true">#</a> 内置成员函数（<code>inline</code>）（见内置函数）</h4><p>类的成员函数也可被指定为内置函数</p><p><strong>概念</strong></p><p>由于类体中函数规模一般较小，调用一个函数的时间开销远远大于执行该函数的时间</p><p>为了减小时间开销，如果在&#39;<strong>类体中定义的&#39;成员函数</strong>，且不包括循环等控制结构</p><p>Ｃ++系统自动将它们作为&#39;<strong>内置</strong>&#39;函数处理</p><p><strong>使用</strong></p><p>Ｃ++要求对一般的内置函数要用 <code>inline </code>关键字声明</p><p>但是对类体内部定义的成员函数，可以省略 <code>inline</code>，因为这些成员函数已经被隐含地指定为内置函数</p><p>也可以自己加上 <code>inline</code></p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>对于在类外定义的成员函数</p><ul><li><p>在类外定义的函数不是默认内置函数</p></li><li><p>需要自己手动添加 <code>inline </code>做显示的声明</p></li><li><p>同样的只有在类外定义的成员函数规模很小而调用频率很高时，才指定为内置函数</p></li></ul></div><p><strong>举例</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//声明此成员函数为内置哈是你</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    string name<span class="token punctuation">;</span>
    <span class="token keyword">char</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token class-name">Student</span><span class="token double-colon punctuation">::</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//在类外定义的函数 display 需要手动添加 inline</span>
    cout<span class="token operator">&lt;&lt;</span>…………
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在普通函数的声明或者定义中做 <code>inline </code>声明都可以（有一个就行）</p><p>如果在类体外定义 <code>inline </code>函数，必须将类定义和成员函数定义都放在同一个头文件中（或者写在同一个源文件中），否则编译时无法置换</p><h4 id="成员函数的储存" tabindex="-1"><a class="header-anchor" href="#成员函数的储存" aria-hidden="true">#</a> 成员函数的储存</h4><p>概念</p><ul><li>&#39;<strong>同一类的不同对象中的数据成员的值一般时不相同的，而不同对象的函数的代码时相同的</strong>，</li><li><strong>不论调用哪一个函数的代码，其实调用的都是同样内容的代码</strong>&#39; <ul><li>例证：一个对象所占空间的大小只取决于其数据成员所占的空间，而与成员函数无关（<code>sizeof(对象)</code>）</li></ul></li></ul><p>函数的目标代码是储存在对象空间之外的</p><p>但是调用不同对象的成员函数执行同一段代码结果却不一样：Ｃ++中专门设立了 <code>this </code>指针用来指向不同的对象</p><hr><p>说明</p><ol><li>不论成员函数在类内定义还是在类外定义，成员函数的代码段的储存方式是相同的，都不占有对象的储存空间</li><li>不要将成员函数的这种储存方式与 <code>inline </code>函数的概念混淆</li></ol><p>​ 不论是否用 <code>inline </code>声明，成员函数的代码段都不占有对象的储存空间</p><p>​ <code>inline </code>函数只是印象程序的执行效率，而与成员函数是否占有对象的储存空间无关</p><ol start="3"><li>成员对象的储存方式是从物理的角度而言的，而“对象 <code>stud1 </code>的成员函数 <code>display</code>”是从逻辑的角度而言的</li></ol><h3 id="对象成员的引用" tabindex="-1"><a class="header-anchor" href="#对象成员的引用" aria-hidden="true">#</a> 对象成员的引用</h3><p>1、通过对象名和成员运算符访问对象中的成员</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>对象名<span class="token punctuation">.</span>成员名  <span class="token comment">//stud1.num  stud1.display()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 应该注意在类外只能调用公有函数，&#39;<strong>在一个类中应至少有一个公用函数成员，作为对外的接口，否则就无法对对象进行任何操作</strong>&#39;</p><p>​ 举例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
uisng <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Time</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> min<span class="token punctuation">;</span>
    <span class="token keyword">int</span> hour<span class="token punctuation">;</span>
    <span class="token keyword">int</span> sec<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    Time t1<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span>t1<span class="token punctuation">.</span>hour <span class="token operator">&gt;&gt;</span> t1<span class="token punctuation">.</span>min <span class="token operator">&gt;&gt;</span> t1<span class="token punctuation">.</span>sec<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span>t1<span class="token punctuation">.</span>hour <span class="token operator">&lt;&lt;</span>t1<span class="token punctuation">.</span>min <span class="token operator">&lt;&lt;</span>t1<span class="token punctuation">.</span>sec<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、通过指向对象的指针访问（与指向结构体的指针相似）</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Time</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> hour<span class="token punctuation">;</span>
    <span class="token keyword">int</span> minute<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Time t<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>     <span class="token comment">//定义对象t和指针变量p</span>
p <span class="token operator">=</span> <span class="token operator">&amp;</span>t<span class="token punctuation">;</span>       <span class="token comment">//使p指向对象t</span>
cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>hour<span class="token punctuation">;</span>   <span class="token comment">//输出p指向对象中的成员hour</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在p指向t的前提下 <code>p-&gt;hour</code>, <code>(*p).hour</code>, <code>t.hour</code> 等价</p><p>3、通过对象的引用来访问对象中的成员</p><p>为对象定义一个引用；与通过对象名引用一样</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Time t1<span class="token punctuation">;</span>
Time <span class="token operator">&amp;</span>t2 <span class="token operator">=</span> t1<span class="token punctuation">;</span>  <span class="token comment">//定义Time类引用t2，并初始化为t1</span>
cout <span class="token operator">&lt;&lt;</span>t2<span class="token punctuation">.</span>hour<span class="token punctuation">;</span>  <span class="token comment">//输出对象t1中的成员hour</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象名作为函数参数" tabindex="-1"><a class="header-anchor" href="#对象名作为函数参数" aria-hidden="true">#</a> 对象名作为函数参数</h3><p>在函数中，用对象名作为函数参数时，在函数调用时建立一个新的对象，它是实参对象的拷贝。</p><p>&#39;<strong>此时会调用拷贝构造函数，函数结束时调用析构函数！</strong>&#39;</p><p>实参把值传给形参，二者分别占有不同的储存空间。</p><p>无论形参是否修改都不会影响实参的值。</p><p>而且这样的虚实结合要产生实参对象的拷贝，时间和内存开销大</p><p>&#39;<strong>因此常用指针作为函数参数，而不用对象名</strong>&#39;</p><h2 id="用new和delete运算符进行动态分配和撤销储存空间" tabindex="-1"><a class="header-anchor" href="#用new和delete运算符进行动态分配和撤销储存空间" aria-hidden="true">#</a> 用new和delete运算符进行动态分配和撤销储存空间</h2><h3 id="new-分配空间" tabindex="-1"><a class="header-anchor" href="#new-分配空间" aria-hidden="true">#</a> new 分配空间</h3><p>Ｃ++提供了较简单强大的&#39;<strong>运算符</strong>&#39; <code>new </code>和 <code>delete </code>来取代 <code>malloc(size)</code> 和 <code>free(pointer)</code> 函数</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>new 和 delete 是&#39;运算符&#39;，不是函数，执行效率高</p></div><p>2、使用</p><p>一般格式为</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">new</span> <span class="token keyword">typename</span><span class="token punctuation">[</span>初值<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span>             
<span class="token comment">//开辟一个存放整数的储存空间，返回一个指向该存储空间的地址（即指针）</span>

<span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          
<span class="token comment">//开辟存放一个整数的空间，并指定该整数的初值为100，返回一个指向该存储空间的地址</span>

<span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          
<span class="token comment">//开辟一个存放包含 10 个元素字符数组的空间，返回字符数组首元素的地址</span>

<span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         
<span class="token comment">//开辟一个存放而为整型数组（大小为5*4）的空间，返回首元素的地址</span>

<span class="token keyword">float</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">3.14159</span><span class="token punctuation">)</span>  
<span class="token comment">//开辟一个存放单精度数的空间，并指定该数的初值为3.14159，将返回的该空间的地址赋值给指针变量p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">注意</p><p>用 <code>new </code>分配数组空间时不能指定初值</p><p>如果内存不足等原因无法正常分配空间，则 <code>new </code>会返回一个空指针 <code>NULL </code>，可以据此判断分配空间是否成功</p></div><h3 id="delete-撤销储存空间" tabindex="-1"><a class="header-anchor" href="#delete-撤销储存空间" aria-hidden="true">#</a> delete 撤销储存空间</h3><p>1、格式</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">delete</span> 指针变量；  <span class="token comment">//对变量</span>
<span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> 指针变量；<span class="token comment">//对数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、举例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">delete</span> p<span class="token punctuation">;</span>     
<span class="token comment">//上例中撤销 new 开辟的单精度数的空间</span>
<span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> pt<span class="token punctuation">;</span>   
<span class="token comment">//如果把一个开辟的数组空间返回的地址赋值给了pt，在指针变量名前加一对方括号，表示对数组空间的操作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、程序举例</p><p>例，临时开辟一个储存空间以存放一个结构体数据。假设已经声明了一个结构体类型<code>Student（name，num，sex）</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">char</span> sex<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    Student <span class="token operator">*</span>p<span class="token punctuation">;</span>
    p <span class="token operator">=</span> <span class="token keyword">new</span> Student<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>name <span class="token operator">=</span> <span class="token string">&quot;Wang Fang&quot;</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>num <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span>
    p <span class="token operator">-&gt;</span>sex <span class="token operator">=</span> <span class="token char">&#39;m&#39;</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">-&gt;</span>name<span class="token operator">&lt;&lt;</span><span class="token char">&#39;\\n&#39;</span><span class="token operator">&lt;&lt;</span>p<span class="token operator">-&gt;</span>num<span class="token operator">&lt;&lt;</span><span class="token char">&#39;\\n&#39;</span><span class="token operator">&lt;&lt;</span>p<span class="token operator">-&gt;</span>sex<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> p<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序说明：</p><ul><li>本程序没有在主函数中定义结构体变量，而是定义了一个基类型为Student 的指针变量 <code>p</code>。</li><li>用 <code>new </code>开辟一段空间以存放一个 <code>Student </code>类型的数据，空间大小由系统根据 <code>Student </code>自动算出，不必用户指定</li><li>执行 <code>new </code>得到一个指向 <code>Student </code>类型的指针赋值给 <code>p </code></li><li>这样虽然没有定义一个结构体变量，但是可以通过指针变量 <code>p</code> 访问该空间 <ul><li>可以认为是对一个&#39;<strong>无名的结构体变量进行操作</strong>&#39;</li></ul></li></ul><p>&#39;<strong>想访问用 new 所开辟的空间，无法通过变量名进行，只能通过指针 p 进行访问</strong>&#39;</p><h3 id="对象的动态建立与释放" tabindex="-1"><a class="header-anchor" href="#对象的动态建立与释放" aria-hidden="true">#</a> 对象的动态建立与释放</h3><p>可以用 <code>new </code>运算符动态建立对象，用 <code>delete </code>运算符释放这些内存空间</p><p>1、对象的动态建立</p><p>​ 1、建立</p><p>​ 如果已经定义了一个 Box 类，可以</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">new</span> Box<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 执行此语句时，系统开辟了一段内存空间，并在此内存空间中存放一个 Box 类对象</p><p>​ 同时调用了该类的构造函数，以使该对象初始化（如果由此功能（默认参数））</p><p>​ 但是用户无法访问此&#39;无名对象&#39;，new 会返回一个地址，只能通过指针访问，例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Box <span class="token operator">*</span>pt<span class="token punctuation">;</span>    <span class="token comment">//定义个一个执行Box类对象的指针变量pt</span>
pt <span class="token operator">=</span> <span class="token keyword">new</span> Box<span class="token punctuation">;</span>  <span class="token comment">//在pt中存放了新建对象的起始地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 这样就可以通过指针变量 pt 访问这个新建的对象，如</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cout <span class="token operator">&lt;&lt;</span> pt<span class="token operator">-&gt;</span>height<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​</p><p>​ 2、初始化</p><p>​ 可以在执行 new 时，对新建立的对象进行初始化，如</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Box <span class="token operator">*</span>pt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 这种写法把 定义指针变量 和 用 new 建立新对象 合并为一句话，并指定初值</p><p>​</p><p>​ 3、用途</p><p>​ 主要用于动态的数据结构，如链表</p><p>​ 访问链表中的节点并不需要对象名，而是上一个节点中存放的下一个节点的地址，从而从上一个节点找到下一个节点，构成链接关系</p><p>​ 4、错误处理</p><p>​ 在执行 new 运算时，如果内存不足，无法开辟空间，大多数编译系统会返回一个空指针 NULL</p><p>​ 只要检查返回值是否为 0，就可以判断分配内存是否成功</p><p>2、动态建立对象的释放</p><p>​ 在不需要由 <code>new </code>建立的对象时，用 <code>delete </code>运算符释放，如</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">delete</span> pt<span class="token punctuation">;</span>    <span class="token comment">//释放pt指向的内存空间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 这样就撤销了 pt 指向的对象</p><p>​ &#39;如果用一个指针变量pt 先后指向了不同的动态对象，应该注意指针变量的当前指向，以免删错对象&#39;</p><p>​ 在执行 delete 运算符时，在释放内存空间之前，自动调用析构函数，完成善后清理工作</p><h2 id="对象的初始化" tabindex="-1"><a class="header-anchor" href="#对象的初始化" aria-hidden="true">#</a> 对象的初始化</h2><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>不能在类的声明中对数据成员初始化，因为类不是一个实体，而是一种&#39;<strong>抽象类型，不占用储存空间</strong>&#39;</p></div><p>如果一个类中所有的成员都是公用的，可以在&#39;<strong>定义对象</strong>&#39;时，对数据成员进行初始化</p><p>但是如果类中有<code>private</code>或者<code>protected</code>的数据成员，就不能用这种方式初始化</p><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h3><p>用构造函数实现数据成员的初始化</p><h4 id="构造函数-constructor" tabindex="-1"><a class="header-anchor" href="#构造函数-constructor" aria-hidden="true">#</a> 构造函数(constructor)</h4><p>是一种特殊的成员函数，不需要用户调用，在建立对象的时候自动运行</p><p>构造函数的名字必须与类名同名，不具有任何类型，不返回任何值，eg</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Time</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        
        <span class="token comment">//定义构造成员函数，函数名与类名相同</span>
        hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   
        <span class="token comment">//利用构造函数对对象中的数据成员赋值</span>
        minute <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        sec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">set_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//声明成员函数</span>
    <span class="token keyword">void</span> <span class="token function">show_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//声明成员函数</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> hour<span class="token punctuation">;</span>
    <span class="token keyword">int</span> minute<span class="token punctuation">;</span>
    <span class="token keyword">int</span> sec<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//声明类对象大括号结尾的分号！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明</p><ul><li>与在声明类时对数据成员赋值不同，赋值语句是写在构造函数的函数体中的，只用在调用构造函数的时候才执行这些赋值语句</li><li>赋值步骤:先建立对象t1（这里略写类），在执行构造函数的过程中对t1中的数据成员赋值</li><li>也可以在类的定义内仅声明构造函数，在类的定义外定义构造函数，eg</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>……
<span class="token function">Time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token comment">//在类的定义内仅有声明</span>
……
    
<span class="token comment">//在类的定义外构造成员函数，要加上类名Time和域限定符&quot;::&quot;</span>
<span class="token class-name">Time</span><span class="token double-colon punctuation">::</span><span class="token function">Time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    minute <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    sec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>在建立类对象的时候自动调用构造函数。建立对象的时候系统为该对象分配储存单元，此时执行构造函数，把初值送到储存单元中。每建立一个对象就调用一次构造函数</li><li>构造函数呢没有返回值，没有类型，总用仅为初始化对象</li><li>不需要也不能被用户调用,在定义对象的时候由系统自动执行，只能执行一次，&#39;构造函数一般声明为public&#39;</li><li>可以用一个类对象初始化另一个类对象</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Time t2<span class="token operator">=</span>t1；  <span class="token comment">//建立对象t2，并用t1初始化t2，此时不调用t2.Time()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果用户没有定义构造函数，系统会自动生成一个构造函数，函数体是空的，没有任何操作</li></ul><p>​</p><p>​</p><h4 id="带参数的构造函数" tabindex="-1"><a class="header-anchor" href="#带参数的构造函数" aria-hidden="true">#</a> 带参数的构造函数</h4><p>上面的方法使得每一个对象的初值相同，但是无法用于对不同的对象赋予不同的初值</p><p>所以可以采用&#39;<strong>带参数的构造函数</strong>&#39;，在调用不同对象的构造函数时，从外面将不同的数据传递给构造函数，以实现不同时初始化，函数首部一般为：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>构造函数名<span class="token punctuation">(</span>类型<span class="token number">1</span> 形参<span class="token number">1</span>，类型<span class="token number">2</span> 形参<span class="token number">2</span>，…<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于用户无法调用构造函数，所以在定义对象的时候给出实参：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>类名 对象名<span class="token punctuation">(</span>实参<span class="token number">1</span>，实参<span class="token number">2</span>，……<span class="token punctuation">)</span>；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例：俩长方体，用俩类求体积</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Box</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">//用函数原型声明带参数的构造函数</span>
    <span class="token keyword">int</span> <span class="token function">volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> height<span class="token punctuation">;</span>
    <span class="token keyword">int</span> width<span class="token punctuation">;</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//分号！！！！！！</span>

<span class="token class-name">Box</span><span class="token double-colon punctuation">::</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token keyword">int</span> h <span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//在类外定义带参的构造函数</span>
    height <span class="token operator">=</span> h<span class="token punctuation">;</span>
    width <span class="token operator">=</span> w<span class="token punctuation">;</span>
    length <span class="token operator">=</span> l<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token class-name">Box</span><span class="token double-colon punctuation">::</span><span class="token function">volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>height<span class="token operator">*</span>width<span class="token operator">*</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">//定义求体积函数</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//在定义对象的时候给出实参，初始化对象</span>
    Box <span class="token function">box1</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span>…………<span class="token operator">&lt;&lt;</span> box1<span class="token punctuation">.</span><span class="token function">volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>……  
        <span class="token comment">//建立（定义）对象box1，并指定box1的长宽高</span>
        <span class="token comment">//在定义对象的时候给出实参，初始化对象</span>
        Box <span class="token function">box2</span><span class="token punctuation">(</span><span class="token number">394</span><span class="token punctuation">,</span><span class="token number">223</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span>…………<span class="token operator">&lt;&lt;</span> box2<span class="token punctuation">.</span><span class="token function">volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>……  
        <span class="token comment">//建立对象box2，并指定box2的长宽高</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明:</p><ul><li>带参构造函数中的形参对应的实参是在建立对象时给定的。</li><li>在建立对象的同时指定数据成员的初值</li></ul><p>​</p><h4 id="用参数初始化表对数据成员初始化" tabindex="-1"><a class="header-anchor" href="#用参数初始化表对数据成员初始化" aria-hidden="true">#</a> 用参数初始化表对数据成员初始化</h4><p>在函数首部实现对数据成员的初始化</p><p>一般形式如</p><blockquote><p><strong>方括号内的可有可无</strong></p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>类名<span class="token double-colon punctuation">::</span>构造函数名<span class="token punctuation">(</span><span class="token punctuation">[</span>参数表<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">:</span>成员函数初始化表<span class="token punctuation">]</span>
<span class="token punctuation">{</span>
  <span class="token punctuation">[</span>构造函数体<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 上一例中，可以改为：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token class-name">Box</span><span class="token double-colon punctuation">::</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">height</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">width</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>用形参<code>h</code>的值初始化数据成员<code>height</code>……</li><li>空的花括号</li></ul><div class="custom-container warning"><p class="custom-container-title">对于数组</p><p><strong>数据成员是数组不能在参数初始化表中对其初始化</strong>，应当在构造函数的函数体中用语句对其初始化。</p></div><h4 id="构造函数重载" tabindex="-1"><a class="header-anchor" href="#构造函数重载" aria-hidden="true">#</a> 构造函数重载</h4><p>概念</p><p>一个类中可以定义多个构造函数，以为对象提供不同的初始化方法选择</p><p>这些构造函数具有相同的名字，而<strong>参数的个数或者类型不同</strong></p><p>这被称为构造函数的&#39;重载&#39;</p><p>使用</p><ol><li>在建立对象时不必给出实参的构造函数，为默认构造函数</li></ol><p>无参的构造函数属于默认构造函数</p><p>一个类只能有一个默认的构造函数</p><p>如果用户没有定义构造函数，系统自动提供的默认构造函数函数体是空的，不初始化</p><p>如果要在创建对象时就有初值，就必须自己定义构造函数</p><ol start="2"><li>如果在建立对象时用的是无参的构造函数</li></ol><blockquote><p>注意此时定义对象的写法：</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Box box1<span class="token punctuation">;</span>  <span class="token comment">//正确建立对象并调用了默认构造函数</span>
Box <span class="token function">box1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//错误，是声明一个普通函数返回值为 Box 类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>构造函数不能被用户显式调用</strong></p><ol start="3"><li>一个类中可以有多个构造函数，但是建立一个对象时只能调用其中一个构造函数</li></ol><p>​</p><h4 id="默认参数的构造函数" tabindex="-1"><a class="header-anchor" href="#默认参数的构造函数" aria-hidden="true">#</a> 默认参数的构造函数</h4><p>​ <strong>构造函数中参数的值既可以通过实参传递，也可以指定为某些默认值</strong></p><p>​ （有默认参数的普通函数）在声明构造函数时指定默认参数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Box</span><span class="token punctuation">(</span><span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Box(int = 10,int = 10,int = 10);   //形参名可以省略</span>
    <span class="token keyword">int</span> <span class="token function">volum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> height<span class="token punctuation">;</span>
    <span class="token keyword">int</span> width<span class="token punctuation">;</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">Box</span><span class="token double-colon punctuation">::</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>
    height <span class="token operator">=</span> h<span class="token punctuation">;</span>
    width <span class="token operator">=</span> w<span class="token punctuation">;</span>
    length <span class="token operator">=</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token class-name">Box</span><span class="token double-colon punctuation">::</span><span class="token function">volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>height<span class="token operator">*</span>width<span class="token operator">*</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    Box box1<span class="token punctuation">;</span>       <span class="token comment">//没有给实参，形参均取默认值</span>
    Box <span class="token function">box2</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//只给一个实参，w和len去默认值</span>
    Box <span class="token function">box3</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//只给两个实参，</span>
    Box <span class="token function">box4</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//给三个实参</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><p>1、在什么地方指定构造函数的默认参数？</p><p>&#39;应该在声明构造函数时指定默认值，而不是在定义构造函数时指定默认值&#39;</p><p>2、声明构造函数时&#39;<strong>形参名可以省略</strong>&#39;，即</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">Box</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、<strong>应该避免同时出现定义了 无参的构造函数 和 全部参数都指定了默认值 的构造函数</strong></p><p>以避免出现歧义性为原则</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>构造函数全部参数指定了默认值，在定义对象时也可以不给出实参</p><p>此时也属于默认构造函数，如果还定义了无参的构造函数，就会出现歧义</p><p><strong>一个类只能有一个默认构造函数</strong></p><p><strong>可以不用参数而调用的构造函数只能有一个</strong></p></div><p>4、在一个类中定义了全部时默认参数的构造函数之后，不能再定义重载构造函数</p><p>如果构造函数中的参数并非完全默认值，需要具体分析，<strong>以是否出现歧义为标准</strong></p><p>例1,</p><p>有如下声明：</p><p>Box(int = 11,int = 11,int = 11);</p><p>Box();</p><p>Box(int,int);</p><p>有如下定义？</p><p>Box box1;</p><p>Box box2(11,22);</p><p>例2，有如下声明：</p><p>Box(int,int = 10,int = 11);</p><p>Box();</p><p>Box(int,int);</p><p>有如下定义？</p><p>Box box1;</p><p>Box box2(11);</p><p>Box box3(11,22);</p><h2 id="析构函数-destructor" tabindex="-1"><a class="header-anchor" href="#析构函数-destructor" aria-hidden="true">#</a> 析构函数（destructor）</h2><ul><li><p>析构函数也是一个特殊的成员函数，作用与构造函数相反</p><ul><li>在类名前加一个&#39;<code>~</code>&#39;位取反运算符</li><li>当对象的生命周期结束时，自动执行析构函数 <ul><li>在一个函数中定义了一个对象（局部），当函数被调用结束时，对象应该被释放，在对象释放前自动执行析构函数</li><li>&#39;<strong>静态</strong>&#39;(static) 局部对象在函数调用结束时对象并不释放，因此不调用析构函数，只有在<code>main</code>函数结束或者调用 <code>exit()</code> 函数结束时，才调用 <code>static</code>局部对象的析构函数</li><li>如果定义了一个全局对象，则在函数的流程离开其作用域时（例如<code>main</code>函数结束或者调用<code>exit</code>函数），调用该全局对象的析构函数</li><li>如果用 <code>new</code>运算符动态的建立了一个对象，应用 <code>delete</code>运算符释放该对象时，先调用该对象的析构函数</li></ul></li></ul></li><li><p>&#39;<strong>析构函数作用并不是删除对象，而是在撤销对象占用内存之前完成一些清理工作</strong>&#39;</p></li></ul><p>还可以来执行&#39;<strong>在最后一次使用对象之后的任何操作</strong>&#39;</p><p>析构函数不返回任何值，没有函数类型。没有函数参数，所以&#39;<strong>不能被重载</strong>&#39;</p><p>一个类可以有多个构造函数，但是只能有一个析构函数</p><blockquote><p>如果用户没有在声明类的时候定义析构函数，编译系统自动生成一个无任何操作的析构函数</p></blockquote><ul><li>析构函数举例：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>                   
    <span class="token comment">//声明类，在main之前，作用域全局</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>string nam<span class="token punctuation">,</span><span class="token keyword">char</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">//定义有参构造函数</span>
        num <span class="token operator">=</span> n<span class="token punctuation">;</span>
        name <span class="token operator">=</span> nam<span class="token punctuation">;</span>
        sex <span class="token operator">=</span> s<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Constructor called&quot;</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//定义析构函数</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Destructor called&quot;</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment">//定义成员函数</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;num&quot;</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
            <span class="token operator">&lt;&lt;</span><span class="token string">&quot;name&quot;</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span><span class="token char">&#39;\\n&#39;</span>
            <span class="token operator">&lt;&lt;</span><span class="token string">&quot;sex:&quot;</span> <span class="token operator">&lt;&lt;</span> sex <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    Student <span class="token function">stud1</span><span class="token punctuation">(</span><span class="token number">10010</span><span class="token punctuation">,</span><span class="token string">&quot;Gan&quot;</span><span class="token punctuation">,</span><span class="token char">&#39;m&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//定义对象stud1</span>
    stud1<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//输出stud1数据</span>
    Student <span class="token function">stud1</span><span class="token punctuation">(</span><span class="token number">10020</span><span class="token punctuation">,</span><span class="token string">&quot;qin&quot;</span><span class="token punctuation">,</span><span class="token char">&#39;f&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stud2<span class="token punctuation">.</span><span class="token function">diaplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">调用构造函数和析构函数的顺序</p><p><strong>先构造的后析构，后构造的先析构</strong>，</p><p>相当于一个栈，先进后出</p></div><div class="custom-container tip"><p class="custom-container-title">什么时候调用析构函数和构造函数？</p><p>1、在全局范围定义的对象</p><p>构造函数：</p><p>在本文件模块中所有函数（包括main）之前调用</p><p>如果一个程序包含多个文件，每个都有全局对象，则顺序不确定</p><p>析构函数</p><p>在 main 函数执行完毕 或者 调用 exit() 函数时</p><p>2、局部自动对象（例如在函数中定义的对象）</p><p>构造函数：</p><p>建立对象时调用</p><p>如果函数调用多次，每次都要调用</p><p>析构函数</p><p>函数调用结束时，对象释放前调用析构函数</p><p>3、在函数中定义的&#39;<strong>静态</strong>&#39; static 局部对象</p><p>构造函数：</p><p>只在程序第一次调用时调用构造函数</p><p>析构函数：</p><p>静态局部对象在函数调用结束时不释放，</p><p>因此在 main 函数结束或者调用 exit() 时对象释放时调用析构函数</p></div><h2 id="对象的赋值与复制" tabindex="-1"><a class="header-anchor" href="#对象的赋值与复制" aria-hidden="true">#</a> 对象的赋值与复制</h2><h3 id="对象的赋值" tabindex="-1"><a class="header-anchor" href="#对象的赋值" aria-hidden="true">#</a> 对象的赋值</h3><p>1、概念</p><p>如果一个类定义了两个或多个对象，则这些同类对象之间可以相互赋值</p><p>通过成员复制完成</p><p>对象的赋值只对其中的数据成员赋值，不对成员函数赋值</p><p>&#39;<strong>类中的数据成员不能包括动态分配的数据，否则在赋值时会出现严重后果</strong>&#39;</p><p>对象之间的赋值通过赋值运算符 <code>=</code> 进行</p><p>（本来 <code>=</code> 只能对单个变量赋值，这里通过运算符重载扩展了使用）</p><p>2、形式</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>对象名<span class="token number">1</span> <span class="token operator">=</span> 对象名<span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对象名1和对象名2必须属于同一个类，如</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Student stud1<span class="token punctuation">,</span>stud2<span class="token punctuation">;</span>  <span class="token comment">//定义两个同类的对象</span>
stud2 <span class="token operator">=</span> stud1<span class="token punctuation">;</span>     <span class="token comment">//将 stud1 赋给 stud2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3、举例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
<span class="token function">Box</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//声明有默认参数的构造函数</span>
    <span class="token keyword">int</span> <span class="token function">volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> height<span class="token punctuation">;</span>
    <span class="token keyword">int</span> width<span class="token punctuation">;</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">Box</span><span class="token double-colon punctuation">::</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>     
    <span class="token comment">//定义构造函数</span>
    height <span class="token operator">=</span> h<span class="token punctuation">;</span>
    width <span class="token operator">=</span> w<span class="token punctuation">;</span>
    length <span class="token operator">=</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token class-name">Box</span><span class="token double-colon punctuation">::</span><span class="token function">volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           
    <span class="token comment">//定义体积函数</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>height<span class="token operator">*</span>width<span class="token operator">*</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回体积</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    Box <span class="token function">box1</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">,</span>box2<span class="token punctuation">;</span>      <span class="token comment">//定义两个对象</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The volume of box1 is&quot;</span><span class="token operator">&lt;&lt;</span>box1<span class="token punctuation">.</span><span class="token function">volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    box2 <span class="token operator">=</span> box1<span class="token punctuation">;</span>            <span class="token comment">//将 box1 的值赋给 box2</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;The volume of box2 is&quot;</span><span class="token operator">&lt;&lt;</span>box2<span class="token punctuation">.</span><span class="token function">volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象的复制" tabindex="-1"><a class="header-anchor" href="#对象的复制" aria-hidden="true">#</a> 对象的复制</h3><p>用一个已有的对象快速地复制出多个完全相同的对象</p><ol><li>一般形式为</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>类名 对象<span class="token number">2</span><span class="token punctuation">(</span>对象<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用<code> 对象1</code> 复制出 <code>对象2</code> ，例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Box <span class="token function">box2</span><span class="token punctuation">(</span>box1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//用已有的 box1 复制出 box2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>还可以用赋值号代替括号</li></ol><p>一般形式为</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>类名 对象<span class="token number">2</span> <span class="token operator">=</span> 对象<span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例，</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Box box2 <span class="token operator">=</span> box1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还可以在一个语句中对多个对象进行复制，如</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Box box2 <span class="token operator">=</span> box1，box3 <span class="token operator">=</span> box2<span class="token punctuation">;</span>  <span class="token comment">//按 box1 复制出 box2 和 box3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="复制构造函数" tabindex="-1"><a class="header-anchor" href="#复制构造函数" aria-hidden="true">#</a> 复制构造函数</h4><ol><li>概念</li></ol><p>对象复制与对象定义的方式相似，但是括号中的参数不是一般变量而是对象名</p><p>在建立对象时调用一个特殊构造函数————&#39;<strong>复制构造函数&#39;(copy constructor)</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token class-name">Box</span><span class="token double-colon punctuation">::</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token keyword">const</span> Box<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    height <span class="token operator">=</span> b<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
    width <span class="token operator">=</span> b<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
    length <span class="token operator">=</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复制构造函数只有一个参数，是&#39;<strong>本类的对象</strong>&#39;</p><p>采用对象的引用形式，一般约定用 <code>const </code>声明，防止调用时不慎改变实参</p><ol start="2"><li>调用</li></ol><p>由于参数是对象，编译系统就调用复制构造函数（构造函数重载？）而不会调用其他构造函数</p><p>如果用户没有自定义复制构造函数</p><p>系统默认的复制构造函数只是简单的复制类中的每个数据成员</p><p>​</p><h3 id="有关比较" tabindex="-1"><a class="header-anchor" href="#有关比较" aria-hidden="true">#</a> 有关比较</h3><h4 id="对象的复制与赋值" tabindex="-1"><a class="header-anchor" href="#对象的复制与赋值" aria-hidden="true">#</a> 对象的复制与赋值</h4><p>​ 对象的赋值是对一个已经存在的对象赋值，必须先定义被赋值的对象</p><p>​ 对象的复制是复制出一个新的对象，与原对象完全相同</p><h4 id="普通构造函数和复制构造函数" tabindex="-1"><a class="header-anchor" href="#普通构造函数和复制构造函数" aria-hidden="true">#</a> 普通构造函数和复制构造函数</h4><ol><li>形式上</li></ol><p>普通构造函数：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>类名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制构造函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>类名<span class="token punctuation">(</span>类名 <span class="token operator">&amp;</span>对象名<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>建立对象时实参类型不同</li></ol><p>系统会根据实参的类型决定调用普通构造函数还是复制构造函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Box <span class="token function">box1</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//实参是整数，调用普通构造函数</span>
Box <span class="token function">box2</span><span class="token punctuation">(</span>box1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//实参是对象名，调用复制构造函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用方式不同</li></ol><ul><li>普通构造函数</li></ul><p>在程序中建立对象时被调用</p><hr><ul><li>复制构造函数</li></ul><p>在用已有的对象复制一个新对象时被调用：</p><p>1、程序中需要建立一个新对象，并用一个同类的对象对它进行初始化</p><p>2、当函数的参数为类的对象时</p><p>在调用函数时需要将实参对象完整地传递给形参，需要建立一个实参的的拷贝</p><p>这时需要调用复制构造函数实现</p><p>3、函数的返回值是类的对象</p><p>在函数调用完毕将返回值带回函数调用处时，需要将函数中的对象复制一个临时对象传给函数调用处</p><p>举例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Box <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment">//函数 f 的类型为 Box 类类型</span>
    Box <span class="token function">box1</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> box1<span class="token punctuation">;</span>     <span class="token comment">//返回值是 Box 类的对象</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    Box box2<span class="token punctuation">;</span>       <span class="token comment">//定义 Box 类的对象 box2</span>
    box2 <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
    <span class="token comment">//调用 f 函数，返回 Box 类的临时对象，并将它赋值给 box2</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明；</p><p>由于 <code>box1</code>是在函数 <code>f</code> 中定义的，调用结束时，<code>box1</code>的生命周期结束</p><p>因此不是将 <code>box1</code>带回了主函数，而是在函数 <code>f</code> 结束前，调用 <code>Box</code>类中的复制构造函数</p><p>复制 <code>box1</code>得到一个临时对象，再赋值给 <code>box2</code></p><h2 id="对象数组" tabindex="-1"><a class="header-anchor" href="#对象数组" aria-hidden="true">#</a> 对象数组</h2><p>数组不仅可以由简单变量组成，也可以由类对象组成</p><p>&#39;<strong>对象数组的每一个元素都是同类的对象</strong>&#39;</p><p>1.定义</p><p>​ 例如，定义一个学生类的对象数组，每一个数组元素就是一个“学生类”对象</p><div class="language-CPP line-numbers-mode" data-ext="CPP"><pre class="language-CPP"><code>Student stud[50];  //假设已声明了 Student 类，定义 stud 数组，有五十个元素
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>初始化</li></ol><p>构建对象数组一定要有默认构造函数（或者全为默认参数）</p><p>在建立对象数组时，会调用构造函数，如果有50个元素，就要调用50次</p><p>在需要时可以在定义数组时提供实参以实现初始化</p><ul><li>如果构造函数只有一个参数，在定义数组时可以直接在等号后面的花括号内提供实参，例</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Student stud<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">23</span>，<span class="token number">42</span>，<span class="token number">56</span><span class="token punctuation">}</span>；  <span class="token comment">//三个实参分别传递给3个数组元素的构造函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 编译系统只为每个元素对象的构造函数传递一个实参，&#39;<strong>提供的的实参个数不能超过数组元素个数</strong>&#39;</p><ul><li>如果构造函数有多个参数 <ul><li>不能在定义数组时直接提供所有实参，容易产生歧义（如果采用上例方法，则是提供给三个元素的第一个实参）</li><li>应该在花括号中分别写出<strong>构造函数名</strong>并在括号内指定实参，例(三个参数分别为学号，年龄，成绩)</li></ul></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Student Stud<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>     <span class="token comment">//定义对象数组</span>
    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//调用第一个元素的构造函数，向它提供三个实参，用逗号隔开</span>
    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token comment">//是一个语句，注意末尾有分号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>应用举例</li></ol><h2 id="对象与指针" tabindex="-1"><a class="header-anchor" href="#对象与指针" aria-hidden="true">#</a> 对象与指针</h2><h3 id="指向对象的指针-类比结构体指针" tabindex="-1"><a class="header-anchor" href="#指向对象的指针-类比结构体指针" aria-hidden="true">#</a> 指向对象的指针（类比结构体指针）</h3><p>在建立对象时，编译系统会为每一个对象分配一定的储存空间，以存放数据成员</p><p><strong>对象空间的起始地址就是对象的指针</strong></p><p>1、定义指向对象的指针,若有一个类如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Time</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> hour<span class="token punctuation">;</span>
    <span class="token keyword">int</span> minute<span class="token punctuation">;</span>
    <span class="token keyword">int</span> sec<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">ge_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//在类中声明成员函数</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment">//类定义结尾的分号！</span>

<span class="token keyword">void</span> <span class="token class-name">Time</span><span class="token double-colon punctuation">::</span><span class="token function">get_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//在类外定义成员函数</span>
    cout<span class="token operator">&lt;&lt;</span> hour <span class="token operator">&lt;&lt;</span><span class="token string">&quot;:&quot;</span><span class="token operator">&lt;&lt;</span>minute<span class="token operator">&lt;&lt;</span><span class="token string">&quot;:&quot;</span><span class="token operator">&lt;&lt;</span>sec<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在此基础上定义指向对象的指针变量</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Time <span class="token operator">*</span> pt<span class="token punctuation">;</span>  <span class="token comment">//定义pt为指向Time类对象的指针变量</span>
Time t1<span class="token punctuation">;</span>   <span class="token comment">//定义ti为Time类对象</span>
pt <span class="token operator">=</span> <span class="token operator">&amp;</span>t1<span class="token punctuation">;</span>   <span class="token comment">//将t1的起始地址赋值给pt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义类对象的指针的一般形式为：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>类名 <span class="token operator">*</span> 指针对象名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、通过指针对象访问对象和对象的成员</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token operator">*</span>pt<span class="token punctuation">;</span>        <span class="token comment">//pt所指向的对象t1</span>
<span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>hour     <span class="token comment">//pt所指向对象中的hour成员，即t1.hour</span>
pt <span class="token operator">-&gt;</span>hour     <span class="token comment">//pt所指向对象中的hour成员，即t1.hour</span>
<span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//调用pt所指向对象中的get_time函数，即t1.get_time</span>
pt <span class="token operator">-&gt;</span><span class="token function">get_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//调用pt所指向对象中的get_time函数，即t1.get_time</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指向对象成员的指针" tabindex="-1"><a class="header-anchor" href="#指向对象成员的指针" aria-hidden="true">#</a> 指向对象成员的指针</h3><p>指向对象的指针变量：存放对象的起始地址的指针变量</p><p>指向对象成员的指针变量：存放对象成员地址的指针变量</p><h4 id="指向对象数据成员的指针" tabindex="-1"><a class="header-anchor" href="#指向对象数据成员的指针" aria-hidden="true">#</a> 指向对象数据成员的指针</h4><p>定义指向对象数据成员的指针变量的方法和定义指向普通变量的指针变量方法相同，如</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>	
<span class="token keyword">typename</span> <span class="token operator">*</span>pointername<span class="token punctuation">;</span>  <span class="token comment">//定义指向对象数据成员的指针变量的一般形式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code>Time</code>类的数据成员<code>hour</code>为<code>public</code>，</p><p>可以在类外通过指向对象数据成员的指针变量访问对象的数据成员<code>hour</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>t1<span class="token punctuation">.</span>hour<span class="token punctuation">;</span>    <span class="token comment">//将对象t1的数据成员hour的地址赋给p1，p1指向t1.hour</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p1 <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token comment">//输出t1.hour</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>不能用在类外的指针指向私有的数据类型，因为在类外无法访问！</p></div><h4 id="指向对象成员函数的指针" tabindex="-1"><a class="header-anchor" href="#指向对象成员函数的指针" aria-hidden="true">#</a> 指向对象成员函数的指针</h4><p>注意与指向普通函数的指针变量的区别</p><p>​</p><div class="custom-container tip"><p class="custom-container-title">复习：指向普通函数的指针：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typename</span> <span class="token punctuation">(</span><span class="token operator">*</span>指针变量名<span class="token punctuation">)</span><span class="token punctuation">(</span>参数表列<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如</span>
<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//p是指向void型函数的指针变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过使它指向一个函数，并通过指针变量调用函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p <span class="token operator">=</span> fun<span class="token punctuation">;</span>   <span class="token comment">//将fun函数的入口地址赋给指针变量p，p就指向函数fun</span>
<span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//调用fun函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>1、概念</p><p>指向&#39;<strong>对象成员函数</strong>&#39;的指针要复杂一些，编译系统要求指针变量的类型与赋值号右侧的函数类型相匹配：</p><ul><li>函数的参数的类型和参数个数</li><li>函数返回值的类型</li><li>所属的类</li></ul><p>如果直接使上例中的<code>p</code>指向一个成员函数，<code>p</code>与类无关，<strong>不能在类外直接用成员函数名作为函数入口地址去调用成员函数</strong></p><p>2、定义与初始化</p><p>定义指向成员函数的指针变量，使其指向一个共用成员函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span><span class="token punctuation">(</span>Time<span class="token double-colon punctuation">::</span> <span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//定义p2为指向Time类中公用成员函数的指针变量</span>
p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>Time<span class="token double-colon punctuation">::</span>get_time<span class="token punctuation">;</span>    <span class="token comment">//使指针变量指向一个公用成员函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一般形式为：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typename</span><span class="token punctuation">(</span>类名<span class="token double-colon punctuation">::</span> <span class="token operator">*</span>指针变量名<span class="token punctuation">)</span><span class="token punctuation">(</span>参数表列<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意，第一个括号不能省略，否则就是返回值为“typename”类型的指针函数</span>
指针变量名 <span class="token operator">=</span> <span class="token operator">&amp;</span>类名<span class="token double-colon punctuation">::</span>成员函数名<span class="token punctuation">;</span>  <span class="token comment">//把公用成员函数的入口地址赋给一个指向公用成员函数的指针变量即可</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><ul><li><p>成员函数入口地址的写法为<code>&amp;类名::成员函数名</code>，不能写成 <code>p2 = &amp;t1.get_time</code>;</p><ul><li>因为<code>t1</code>是对象名而不是类名（成员函数不是存放在对象空间中的，而是存放在对象外）</li></ul></li><li><p>定义指向成员函数的指针变量和初始化可以写一行：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span><span class="token punctuation">(</span>Time<span class="token double-colon punctuation">::</span> <span class="token operator">*</span>p3<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Time<span class="token double-colon punctuation">::</span>get_time<span class="token punctuation">;</span>  <span class="token comment">//定义指针变量并初始化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>可以不写&amp;，和指向普通函数的指针的赋值一样</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p <span class="token operator">=</span> Time<span class="token double-colon punctuation">::</span>get_time<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="this-指针" tabindex="-1"><a class="header-anchor" href="#this-指针" aria-hidden="true">#</a> this 指针</h3><p>每一个成员函数中都包含一个特殊的指针，这个指针的名字是固定的，称为 <code>this</code></p><p><code>this</code>指针是&#39;指向本类对象的指针，它的值是当前被调用的成员函数所在的对象的起始地址&#39;</p><p>用来解决不同对象调用同一个函数的目标代码时，保证引用的所指定对象的成员</p><p>例如，当调用成员函数 <code>a.volume</code> 时，编译系统就把对象<code>a</code>的起始地址赋给 <code>this</code> 指针，在成员函数引用数据成员时，就按照 <code>this</code> 的指向找到对象<code>a</code>的数据成员</p><p><code>this</code> 指针是隐式使用的，它是作为参数被传递给成员函数的</p><p>综上所述，所谓“调用对象a的成员函数f”，实际上是在调用成员函数f时使 this 指针指向对象a，从而访问对象a的成员</p><h2 id="类模板" tabindex="-1"><a class="header-anchor" href="#类模板" aria-hidden="true">#</a> 类模板</h2><p>与函数模板类似</p><p>有多个类，功能是相同的，仅仅是数据类型不同</p><p>Ｃ++提供模板功能，提供解决这类问题的途径</p><h3 id="声明" tabindex="-1"><a class="header-anchor" href="#声明" aria-hidden="true">#</a> 声明</h3><p>声明通用类模板</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> 类型参数名<span class="token operator">&gt;</span>
    <span class="token keyword">class</span> 类名<span class="token punctuation">{</span>类体<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">numtype</span><span class="token operator">&gt;</span>
    <span class="token keyword">class</span> <span class="token class-name">Compare</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">Compare</span><span class="token punctuation">(</span>numtype a<span class="token punctuation">,</span>numtype b<span class="token punctuation">)</span><span class="token punctuation">{</span>
            x <span class="token operator">=</span> a<span class="token punctuation">;</span>
            y <span class="token operator">=</span> b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        numtype <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">&gt;</span>y<span class="token punctuation">)</span><span class="token operator">?</span>x<span class="token operator">:</span>y<span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        numtype <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>y<span class="token punctuation">)</span><span class="token operator">?</span>x<span class="token operator">:</span>y<span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">private</span><span class="token operator">:</span>
        numtype x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ol><li>声明类模板前面加一行</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> 类型参数名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>template</code>是声明类模板的关键字</p><p>在 <code>template</code>后面的尖括号内的内容为模板的参数表</p><p>关键字 <code>class</code> 表示后面的是类型参数</p><ul><li>本例中 <code>numtype</code> 就是一个类型参数名，这个名字是任意选取的，合法的标识符</li><li>并不是实际存在的类型名，只是一个虚拟类型参数名</li><li>在这之后将被一个实际的类型名取代;</li></ul><hr><ol start="2"><li>在建立类对象时，如果将实际类型指定为 <code>int</code> 型，编译系统就会用 <code>int</code> 取代所有 <code>numtype</code></li></ol><p>这样就能实现&#39;<strong>一类多用</strong>&#39;</p><p>由于类模板包含类型参数，因此又被称为&#39;<strong>参数化的类</strong>&#39;</p><p>类是对象的抽象，对象是类的实例</p><p>&#39;<strong>类模板是类的抽象，类是类模板的实例</strong>&#39;</p><p>​</p><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><p>1、一般形式</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>类模板名 <span class="token operator">&lt;</span>实际类型名<span class="token operator">&gt;</span> 对象名<span class="token punctuation">(</span>参数表<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不能直接用 类模板名，因为不是一个具体的类</p><p>2、举例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Compare <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明：</p><ul><li>Compare是类模板名，在之后的尖括号内指定实际的类型名</li><li>在编译时，系统用 int 替换类模板中的类型参数 numtype</li><li>这样就把类模板具体化（实例化）</li></ul><p>​</p><h3 id="在类模板外定义成员函数" tabindex="-1"><a class="header-anchor" href="#在类模板外定义成员函数" aria-hidden="true">#</a> 在类模板外定义成员函数</h3><p>不能使用一般定义类成员函数的形式</p><p>而应该写成类模板，例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">numtype</span><span class="token operator">&gt;</span>
    numtype <span class="token class-name">Compare</span><span class="token operator">&lt;</span>numtype<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">(</span>x<span class="token operator">&gt;</span>y<span class="token operator">?</span>x<span class="token operator">:</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><p>第一行表示类模板</p><p>第二行左边的 <code>numtype</code>是虚拟类型名，</p><p>后面的 <code>Compare&lt;numtype&gt;</code> 是一个整体，是带参的类</p><p>表示所定义的 max 函数时在类 <code>Compare&lt;numtype&gt;</code> 的作用域内的，</p><p>在定义对象时，用户指定实际类型的时候，编译器将类模板中的虚拟类型名 <code>numtype</code> 替换为实际类型</p><p>这时 <code>Compare&lt;numtype&gt;</code> 就相当于一个实际的类，</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>1、先写出一个实际的类</p><p>2、将此类中准备改变的类型名改成一个自定的虚拟类型名</p><p>3、在类的声明前面加入一行：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> 虚拟类型参数<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4、用类模板定义对象时，用以下形式</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>类模板名<span class="token operator">&lt;</span>实际类型名<span class="token operator">&gt;</span>对象名<span class="token punctuation">;</span>
类模板名<span class="token operator">&lt;</span>实际类型名<span class="token operator">&gt;</span>对象名<span class="token punctuation">(</span>实参表<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>5、如果在类模板外定义成员，应该写成类模板形式</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> 虚拟类型函数<span class="token operator">&gt;</span>
    函数类型 类模板名<span class="token operator">&lt;</span>虚拟类型参数<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>成员函数名<span class="token punctuation">(</span>函数形参表<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ………
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、类模板的类型参数可以有一个或多个，每个类型前面都必须加 <code>class</code>，如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span><span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">&gt;</span>
    <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>………………<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>定义时分别加入实际的类型名</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>A<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">&gt;</span>obj<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>7、使用类模板要注意其作用域，只能在其有效作用域内用它定义对象</p><p>如果类模板是在文件A开头定义的，则A文件范围为有效作用域，但是在B文件中不能用类模板定义对象</p><p>8、类模板可以有层次，一个类模板可以作为基类，派生出派生模板类</p>`,433),o=[t];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","类和面向对象.html.vue"]]);export{d as default};
