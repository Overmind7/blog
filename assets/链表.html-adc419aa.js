import{_ as n,o as s,c as a,e as p}from"./app-04b0d2b0.js";const t={},e=p(`<h1 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h1><p>链表是动态地进行储存分配的一种结构。</p><p>用数组存放数据时，必须事先定义固定的长度（即元素个数），如果不确定长度，则需要把数组定的足够大</p><p>链表根据需要开辟内存单元，没有这种缺点</p><p>异质链表：</p><p>用抽象类指针指向派生类对象的链表</p><h2 id="单向链表结构" tabindex="-1"><a class="header-anchor" href="#单向链表结构" aria-hidden="true">#</a> 单向链表结构</h2><p>1、结构</p><p>​ 链表有一个头指针变量（head），存放一个地址，改地址指向一个元素</p><p>​ 链表中的每一个元素称为结点</p><p>​ 结点包括两个部分</p><p>​ 用户所需用到的实际数据</p><p>​ 下一个结点的地址</p><p>​ 表尾</p><p>​ head 指向第一个元素，第一个元素指向第二个元素…………直到最后一个元素</p><p>​ 该元素不再指向其他元素，称为表尾</p><p>​ 表尾的地址是一个空地址 NULL，链表到此结束</p><p>2、特点</p><p>​ 链表中的各个元素可以不是连续存放的</p><p>​ 一个结点中应该包含一个指针变量，用它存放下一个结点的地址</p><p>​ 用结构体变量或者类对象作为链表中的结点最为合适</p><p>3、例，建立一个三个学生数据的结点构成的链表，输出各结点中的数据</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL</span> <span class="token expression"><span class="token number">0</span>   </span><span class="token comment">//可以省略，在 iostream 中已有此定义，或者用 nullptr</span></span>
<span class="token comment">//codeblock 无法编译 nullptr ，没有支持 c++ 11 的新特性</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">{</span>
    <span class="token keyword">long</span> num<span class="token punctuation">;</span>
    <span class="token keyword">float</span> score<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">student</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token operator">*</span>head<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>
    a<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>
    b<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">4.6</span><span class="token punctuation">;</span>
    c<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">23.3</span><span class="token punctuation">;</span>  <span class="token comment">//为结点的 num 和 score 成员赋值</span>
    head <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token comment">//将结点 a 的起始地址赋值给头指针 head</span>
    a<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>   <span class="token comment">//将结点 b 的起始地址赋值给 a 结点的 next 成员</span>
    b<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span>   <span class="token comment">//将结点 c 的起始地址赋值给 b 结点的 next 成员</span>
    c<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">//c 结点的 next 成员不存放其他结点的地址</span>
    p <span class="token operator">=</span> head<span class="token punctuation">;</span>     <span class="token comment">//使 p 指针指向 a 结点</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>num <span class="token operator">&lt;&lt;</span><span class="token char">&#39;\\t&#39;</span><span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>score <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//输出 p 指向的结点的数据</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>   <span class="token comment">//使 p 指向下一个结点</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出完 c 结点后 p 的值为 null</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 说明</p><p>​ 本例所有结点都是在程序中定义的，不是临时开辟的，也不能用完后释放</p><p>​ 这种链表称为&#39;静态链表&#39;</p><h2 id="动态链表" tabindex="-1"><a class="header-anchor" href="#动态链表" aria-hidden="true">#</a> 动态链表</h2><p>用一个<code>creat </code>函数，建立一个有三个学生数据的单向动态链表</p><p>1、算法</p><p>​ 1、设置三个指针变量 <code>head </code>、 <code>p1 </code>、 <code>p2</code>，指向 student<code></code>类型</p><p>​ 2、用 <code>new </code>运算符开辟第 1 个结点，并使 <code>p1 </code>和 <code>p2 </code>指向它</p><p>​ 约定输入的学号不为 0，输入 0 表示完成链表构建，该结点不连接到链表中</p><p>​ <code>head </code>的初值为 <code>nullptr</code>，即链表为空的情况，建立第一个结点就使 <code>head</code> 指向该结点</p><p>​ 3、如果 <code>p1-&gt;num</code> 不等于 0</p><p>​ 输入第一个结点数据，<code>n == 1</code></p><p>​ 令 <code>head = p1;</code> 使 <code>head </code>指向新开劈的结点，为第一个结点</p><p>​ 再另开辟一个结点，并用 <code>p1 </code>指向它，接着输入该结点的数据</p><p>​ 4、如果输入的 <code>p1-&gt;num</code> 不等于 0，</p><p>​ <code>n == 2；</code></p><p>​ 将第二个结点的地址赋给第一个结点中的 <code>next </code>成员</p><p>​ <code>p2-&gt;next = p1</code>，此时 <code>p2 </code>仍然指向第一个结点，第一个结点中的 <code>next </code>指向第二个结点</p><p>​ 再将 <code>p2 </code>指向刚建立的第二个结点，<code>p2 = p1</code>，此时 p1 和 p2 都指向了第二个结点</p><p>​ 再开辟一个新的结点（第三个），用 p1 指向它</p><p>​ 5、如果输入的 0</p><p>​ ………………</p><p>​ 循环下去，知道达到输入 0 的中止条件</p><p>​ 此时后面的循环不再进行，新结点不连接到链表中</p><p>​ 最后一个结点的<code>next</code>没有指向这个新开劈的结点，虽然 <code>p1</code> 指向但是不再链表中</p><p>​ &#39;<strong>让 <code>p1</code> 指向新的结点，<code>p2</code> 指向链表中的最后一个结点，把 <code>p1</code> 所指的结点连接在 <code>p2</code> 所指的结点后面，用 <code>p2-&gt;next = p1</code> 实现</strong>&#39;</p><p>2、建立函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">{</span>
    <span class="token keyword">long</span> num<span class="token punctuation">;</span>
    <span class="token keyword">float</span> score<span class="token punctuation">;</span>
    student <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>          <span class="token comment">//n 为全局变量，本文件中的各个函数均可使用</span>

student <span class="token operator">*</span><span class="token function">creat</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//定义函数，此函数带回一个指向链表头的指针</span>
    student <span class="token operator">*</span>head<span class="token punctuation">;</span>
    student <span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token punctuation">;</span>
    n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// n 用来累计结点个数</span>
    p1 <span class="token operator">=</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> student<span class="token punctuation">;</span>     <span class="token comment">//开辟一个新单元，并使 p1，p2 指向它</span>
    cin <span class="token operator">&gt;&gt;</span> p1<span class="token operator">-&gt;</span>num <span class="token operator">&gt;&gt;</span> p1<span class="token operator">-&gt;</span>score<span class="token punctuation">;</span>
    head <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1<span class="token operator">-&gt;</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            head <span class="token operator">=</span> p1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            p2<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>
        p1 <span class="token operator">=</span> <span class="token keyword">new</span> student<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> p1<span class="token operator">-&gt;</span>num <span class="token operator">&gt;&gt;</span> p1<span class="token operator">-&gt;</span>score<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    p2<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        
    <span class="token comment">//指针类型的函数，返回一个指针值，指向 student 类型数据，即一个链表的起始地址</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链表的遍历" tabindex="-1"><a class="header-anchor" href="#链表的遍历" aria-hidden="true">#</a> 链表的遍历</h2><p>将上面建立的链表中的各个结点数据依次输出</p><p>1、算法</p><p>已知 head 头指针的值后，用一个指针变量 p 指向它</p><p>进行操作之后，将 p 往后移一个结点，即</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>直到链表的尾结点</p><p>2、举例</p><p>假设已经有如下程序</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">{</span>
    <span class="token keyword">long</span> num<span class="token punctuation">;</span>
    <span class="token keyword">float</span> score<span class="token punctuation">;</span>
    student <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>

<span class="token comment">//可以写出 print 函数如下：</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>student <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    student <span class="token operator">*</span>p<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span><span class="token string">&quot;Now,These &quot;</span><span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span><span class="token string">&quot; records are:&quot;</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    p <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>num <span class="token operator">&lt;&lt;</span><span class="token char">&#39;\\t&#39;</span><span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>score <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序说明：</p><p><code>head </code>的值由实参传递过来，也就是将已有的链表的头指针传给被调用的函数</p><p><code>p = p-&gt;next</code> 是将第二个结点的起始地址赋值给 <code>p</code>，使 <code>p</code> 指向第二个结点</p><p>这里用的是 do —— while 循环，因为最后遇到 <code>nullptr </code>就直接退出循环</p><p>也可以</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">for</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> i <span class="token operator">=</span> head<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> i<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">-&gt;</span>val <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链表结点的删除" tabindex="-1"><a class="header-anchor" href="#链表结点的删除" aria-hidden="true">#</a> 链表结点的删除</h2><p>从动态链表中删去一个结点，并不是真正从内存中抹去，而是把它从链表中分离开</p><p>撤销原来的连接关系</p><p><strong>算法</strong></p><p>在上例中，以某个标准，如学号作为删除结点的标准</p><p>从 <code>p </code>指向的第一个结点开始，检查该结点中的 <code>num </code>是否为要删除的那个学号</p><ul><li><p>如果相等就删除</p></li><li><p>如果不等就将 p 移到后一个结点，直到表尾</p></li></ul><p>具体操作：</p><p>设定两个指针变量 <code>p1 </code>和 <code>p2</code></p><p>将 <code>p1 </code>指向第一个结点</p><p>如果删除的是第一个结点（<code>p1 = head</code>）</p><p>则应该 <code>head = p1-&gt;next </code>，将头指针指向第二个结点</p><p>如果要删除的不是第一个结点</p><p>将 <code>p1 </code>赋值给 <code>p2</code>，使 <code>p2 </code>指向刚检查过的结点</p><p>使 <code>p1 </code>移向下一个结点</p><p>（&#39;<strong><code>p1 </code>指向的结点比 <code>p2 </code>永远快一步</strong>&#39;）</p><p>直到找到所有要删除的结点</p><p>找到后：</p><p><code>p2-&gt;next = p1-&gt;next </code>使 <code>p2 </code>指向 <code>p1</code> 指向结点的下一个结点，跳过 <code>p1 </code>所指向的结点</p><p>还要考虑链表是空表（无结点）、链表中找不到要删除的结点的情况</p><p>3、举例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">{</span>
    <span class="token keyword">long</span> num<span class="token punctuation">;</span>
    <span class="token keyword">float</span> score<span class="token punctuation">;</span>
    student <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>

student <span class="token operator">*</span><span class="token function">del</span><span class="token punctuation">(</span>student <span class="token operator">*</span>head<span class="token punctuation">,</span><span class="token keyword">long</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token comment">//函数类型为指向 student 类型的指针，参数为 head 和要删除的学号</span>
    student <span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token punctuation">;</span>  <span class="token comment">//在vs 中 p2 必须要有初值 nullptr</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//空表的情况</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;是空表&quot;</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>         <span class="token comment">//如果不是空表，使 p1 指向第一个结点</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> p1<span class="token operator">-&gt;</span>num <span class="token operator">&amp;&amp;</span> p1 <span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment">//如果 p1 指向的不是所要找的结点，而且后面还有结点</span>
        p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>        <span class="token comment">//将 p2 指向 已经检查过了的 p1 指向的结点</span>
        p1 <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>     <span class="token comment">//p1 指向下一个结点</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> p1<span class="token operator">-&gt;</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//如果找到了要删除的点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//如果要删除的是第一个结点</span>
            head <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token comment">//将头指针指向第二个结点</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            p2<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>      
            <span class="token comment">//如果要删除的不是第一个结点，将要删除点的下一个结点的地址赋给前一个结点的 next</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;删除了：&quot;</span><span class="token operator">&lt;&lt;</span>num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        n <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment">//删去了一个之后，链表长度 -1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;找不到结点 &quot;</span><span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//如果找不到该结点</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//返回值是头指针，它的值可能会改变</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链表结点的插入" tabindex="-1"><a class="header-anchor" href="#链表结点的插入" aria-hidden="true">#</a> 链表结点的插入</h2><p>将一个结点插入到一个已有的链表中</p><p>算法</p><p>如果链表按照某种方式排序了（从小到大），现在要在其中插入一个新的结点</p><ul><li>先将指针变量 <code>p0 </code>指向要插入的结点，<code>p1</code> 指向第一个结点</li><li>将 <code>p0-&gt;num</code> 与 <code>p1-&gt;num</code> 相比较 <ul><li>如果 <code>p0-&gt;num &gt; p1-&gt;num</code> ,则待插入的结点不应插在 <code>p1</code> 所指的结点之前</li><li>此时应该将 <code>p1</code> 后移，并使 <code>p2</code> 指向刚才 <code>p1</code> 所指的结点</li></ul></li></ul><p>再将 <code>p1-&gt;num</code> 与 <code>p0-&gt;num</code> 比，</p><ul><li><p>如果仍然是 <code>p0-&gt;num</code> 大</p><ul><li>使 <code>p1</code> 继续后移</li><li>直到 <code>p0-&gt;num &lt;= p1-&gt;num</code> 为止</li></ul></li><li><p>如果 <code>p1 </code>所指的已经是表尾结点</p><ul><li><code>p1 </code>不后移了。</li></ul></li><li><p>如果 <code>p0-&gt;num</code> 比所有结点的 <code>num </code>都大</p><ul><li>则应将 <code>p0</code>所指的结点插到链表末尾</li></ul></li></ul><p>如果插入的位置既不在第一个结点之前，又不在表尾结点之后</p><ul><li><code>p2-&gt;next = p0</code>, 将 <code>p0 </code>的值赋给 <code>p2-&gt;next</code> ,使 <code>p2-&gt;next</code> 指向待插入的结点</li><li><code>p0-&gt;next = p1</code>, 将 <code>p1 </code>的值赋给 <code>p0-&gt;next</code> ,使 <code>p0-&gt;next</code> 指向 <code>p1 </code>指向的变量</li></ul><p>这样就在这两个结点之间插入一个新的结点</p><p>如果插入位置为第一个结点之前（<code>p1 = head</code>）</p><p><code>head = p0</code> 将 <code>p0 </code>赋给 <code>head</code></p><p><code>p0-&gt;next = p1</code> 将 <code>p1 </code>赋给 <code>p0-&gt;next</code></p><p>如果要插入到表尾之后</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p1<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p0
p0<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、实例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>student <span class="token operator">*</span><span class="token function">insert</span><span class="token punctuation">(</span>student <span class="token operator">*</span>head<span class="token punctuation">,</span>student <span class="token operator">*</span>stud<span class="token punctuation">)</span><span class="token punctuation">{</span>
    student <span class="token operator">*</span>p0<span class="token punctuation">,</span><span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token punctuation">;</span>  <span class="token comment">//在 vs 必须要有初值 nullptr</span>
    p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token comment">//使 p1 指向第一个结点</span>
    p0 <span class="token operator">=</span> stud<span class="token punctuation">;</span>  <span class="token comment">//使 p0 指向要插入的结点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//空链表的情况</span>
        head <span class="token operator">=</span> p0<span class="token punctuation">;</span>      <span class="token comment">//将头指针指向要插入的结点，</span>
        p0<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p0<span class="token operator">-&gt;</span>num <span class="token operator">&gt;</span> p1<span class="token operator">-&gt;</span>num<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p1<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//检查在哪里插入，同时防止 p1 指向末尾的空指针</span>
            p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>     <span class="token comment">//使 p2 指向刚才 p1 指向的结点</span>
            p1 <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token comment">//使 p1 后移一个结点</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//对要插入的位置进行分类处理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p0<span class="token operator">-&gt;</span>num <span class="token operator">&lt;=</span> p1<span class="token operator">-&gt;</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">//如果插入位置不在链尾</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> p1<span class="token punctuation">)</span> head <span class="token operator">=</span> p0<span class="token punctuation">;</span> <span class="token comment">//如果插入位置在头部，将 p0 赋值给头指针</span>
            <span class="token keyword">else</span> p2<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p0<span class="token punctuation">;</span>     <span class="token comment">//如果插入位置不在头部，插入到 p2 之后</span>
            p0<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>       <span class="token comment">//将要插入结点的 next 与下一个结点（p1）连接起来</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>              <span class="token comment">//如果在链尾 插入</span>
        <span class="token punctuation">{</span>
            p1<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p0<span class="token punctuation">;</span>
            p0<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="整合" tabindex="-1"><a class="header-anchor" href="#整合" aria-hidden="true">#</a> 整合</h2><p>将以上四个函数整合在一起，实现链表的建立，输出，删除，插入</p><p>有问题的例子：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">{</span>
    <span class="token keyword">long</span> num<span class="token punctuation">;</span>
    <span class="token keyword">float</span> score<span class="token punctuation">;</span>
    student <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    student <span class="token operator">*</span><span class="token function">creat</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student <span class="token operator">*</span><span class="token function">del</span><span class="token punctuation">(</span>student <span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student <span class="token operator">*</span><span class="token function">insert</span><span class="token punctuation">(</span>student <span class="token operator">*</span><span class="token punctuation">,</span>student <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>student <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student <span class="token operator">*</span>head<span class="token punctuation">,</span>stu<span class="token punctuation">;</span>
    <span class="token keyword">long</span> delNum<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;输入节点&quot;</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    head <span class="token operator">=</span> <span class="token function">creat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;输入要删除的数据&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> delNum<span class="token punctuation">;</span>
    head <span class="token operator">=</span> <span class="token function">del</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>delNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;输入要插入的节点&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> stu<span class="token punctuation">.</span>num <span class="token operator">&gt;&gt;</span> stu<span class="token punctuation">.</span>score<span class="token punctuation">;</span>
    head <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">注意</p><p>​ 直接将上面几个函数整合在一起的话，</p><p>​ 如果只删除一个，插入一个，运行正确</p><p>​ 如果有多次插入（重复最后五行），运行会出错！！</p><p>​ 错误原因分析：</p><p>​ 要插入的节点 <code>stu </code>是一个固定地址的结构体变量，第二次插入之后，stu 节点被覆盖，导致第一次插入的没有了</p><p>解决方法</p><p>每次插入的时候新开辟一个内存区</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">{</span>
    <span class="token keyword">long</span> num<span class="token punctuation">;</span>
    <span class="token keyword">float</span> score<span class="token punctuation">;</span>
    student <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    student <span class="token operator">*</span><span class="token function">creat</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student <span class="token operator">*</span><span class="token function">del</span><span class="token punctuation">(</span>student <span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student <span class="token operator">*</span><span class="token function">insert</span><span class="token punctuation">(</span>student <span class="token operator">*</span><span class="token punctuation">,</span>student <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>student <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student <span class="token operator">*</span>head<span class="token punctuation">,</span>stu<span class="token punctuation">;</span>
    <span class="token keyword">long</span> delNum<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;输入节点&quot;</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    head <span class="token operator">=</span> <span class="token function">creat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;输入要删除的数据&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> delNum<span class="token punctuation">;</span>
    head <span class="token operator">=</span> <span class="token function">del</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>delNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;输入要插入的节点&quot;</span><span class="token punctuation">;</span>
    
    <span class="token comment">//新增内容！</span>
    stu <span class="token operator">=</span> <span class="token keyword">new</span> student<span class="token punctuation">;</span>  <span class="token comment">//开辟一个新的无名节点给 stu</span>
    cin <span class="token operator">&gt;&gt;</span> stu<span class="token punctuation">.</span>num <span class="token operator">&gt;&gt;</span> stu<span class="token punctuation">.</span>score<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>stu<span class="token operator">-&gt;</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//直到要插入的为 0 0 的时候结束插入</span>
        head <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span><span class="token operator">&amp;</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">print</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;输入要插入的节点&quot;</span><span class="token punctuation">;</span>
        stu <span class="token operator">=</span> <span class="token keyword">new</span> student<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> stu<span class="token punctuation">.</span>num <span class="token operator">&gt;&gt;</span> stu<span class="token punctuation">.</span>score<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

student <span class="token operator">*</span><span class="token function">creat</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//定义函数，此函数带回一个指向链表头的指针</span>
    student <span class="token operator">*</span>head<span class="token punctuation">;</span>
    student <span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token punctuation">;</span>
    n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// n 用来累计结点个数</span>
    p1 <span class="token operator">=</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> student<span class="token punctuation">;</span>     <span class="token comment">//开辟一个新单元，并使 p1，p2 指向它</span>
    cin <span class="token operator">&gt;&gt;</span> p1<span class="token operator">-&gt;</span>num <span class="token operator">&gt;&gt;</span> p1<span class="token operator">-&gt;</span>score<span class="token punctuation">;</span>
    head <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1<span class="token operator">-&gt;</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            head <span class="token operator">=</span> p1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            p2<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>
        p1 <span class="token operator">=</span> <span class="token keyword">new</span> student<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> p1<span class="token operator">-&gt;</span>num <span class="token operator">&gt;&gt;</span> p1<span class="token operator">-&gt;</span>score<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    p2<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        
    <span class="token comment">//指针类型的函数，返回一个指针值，指向 student 类型数据，即一个链表的起始地址</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>student <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    student <span class="token operator">*</span>p<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span><span class="token string">&quot;Now,These &quot;</span><span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span><span class="token string">&quot; records are:&quot;</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    p <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>num <span class="token operator">&lt;&lt;</span><span class="token char">&#39;\\t&#39;</span><span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>score <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

student <span class="token operator">*</span><span class="token function">del</span><span class="token punctuation">(</span>student <span class="token operator">*</span>head<span class="token punctuation">,</span><span class="token keyword">long</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token comment">//函数类型为指向 student 类型的指针，参数为 head 和要删除的学号</span>
    student <span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//空表的情况</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;是空表&quot;</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>         <span class="token comment">//如果不是空表，使 p1 指向第一个结点</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> p1<span class="token operator">-&gt;</span>num <span class="token operator">&amp;&amp;</span> p1 <span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment">//如果 p1 指向的不是所要找的结点，而且后面还有结点</span>
        p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>        <span class="token comment">//将 p2 指向 已经检查过了的 p1 指向的结点</span>
        p1 <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>     <span class="token comment">//p1 指向下一个结点</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> p1<span class="token operator">-&gt;</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//如果找到了要删除的点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//如果要删除的是第一个结点</span>
            head <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token comment">//将头指针指向第二个结点</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            p2<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>      
            <span class="token comment">//如果要删除的不是第一个结点，将要删除点的下一个结点的地址赋给前一个结点的 next</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;删除了：&quot;</span><span class="token operator">&lt;&lt;</span>num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment">//删去了一个之后，链表长度 -1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;找不到结点 &quot;</span><span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//如果找不到该结点</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//返回值是头指针，它的值可能会改变</span>
<span class="token punctuation">}</span>

student <span class="token operator">*</span><span class="token function">insert</span><span class="token punctuation">(</span>student <span class="token operator">*</span>head<span class="token punctuation">,</span>student <span class="token operator">*</span>stud<span class="token punctuation">)</span><span class="token punctuation">{</span>
    student <span class="token operator">*</span>p0<span class="token punctuation">,</span><span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token punctuation">;</span>
    p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token comment">//使 p1 指向第一个结点</span>
    p0 <span class="token operator">=</span> stud<span class="token punctuation">;</span>  <span class="token comment">//使 p0 指向要插入的结点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//空链表的情况</span>
        head <span class="token operator">=</span> p0<span class="token punctuation">;</span>      <span class="token comment">//将头指针指向要插入的结点，</span>
        p0<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//检查在哪里插入，同时防止 p1 指向末尾的空指针</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p0<span class="token operator">-&gt;</span>num <span class="token operator">&gt;</span> p1<span class="token operator">-&gt;</span>num<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p1<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>     <span class="token comment">//使 p2 指向刚才 p1 指向的结点</span>
            p1 <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token comment">//使 p1 后移一个结点</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//对要插入的位置进行分类处理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p0<span class="token operator">-&gt;</span>num <span class="token operator">&lt;=</span> p1<span class="token operator">-&gt;</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">//如果插入位置不在链尾</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> p1<span class="token punctuation">)</span> head <span class="token operator">=</span> p0<span class="token punctuation">;</span> <span class="token comment">//如果插入位置在头部，将 p0 赋值给头指针</span>
            <span class="token keyword">else</span> p2<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p0<span class="token punctuation">;</span>     <span class="token comment">//如果插入位置不在头部，插入到 p2 之后</span>
            p0<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>       <span class="token comment">//将要插入结点的 next 与下一个结点（p1）连接起来</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>              <span class="token comment">//如果在链尾 插入</span>
        <span class="token punctuation">{</span>p1<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p0<span class="token punctuation">;</span>
         p0<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,112),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","链表.html.vue"]]);export{r as default};
