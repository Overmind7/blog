const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const d=o[h-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const p=c[l],f=i*d,g=f-i;let a=o[f];const m=Math.max(0,d-s-1),y=Math.min(i-1,d+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<a&&(a=L)}if(a>s)continue t}W(e.get(c),t,s,n,o,d,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const a of p.keys()){if(!e._documentIds.has(a)){gt(e,l,a,s),f-=1;continue}const m=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!m)continue;const y=p.get(a),_=e._fieldLength.get(a)[l],b=at(y,f,e._documentCount,_,g,r),z=n*d*m*b,A=h.get(a);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(a,{score:z,terms:[t],match:{[s]:[c]}})}}return h},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((a,m)=>({...a,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:d}={...J.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const a=t.fuzzy===!0?.2:t.fuzzy,m=a<1?Math.min(r,Math.round(t.term.length*a)):a;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[a,m]of f){const y=a.length-t.term.length;if(!y)continue;g==null||g.delete(a);const _=d*a.length/(a.length+.3*y);B(e,t.term,a,_,m,o,u,h,p)}if(g)for(const a of g.keys()){const[m,y]=g.get(a);if(!y)continue;const _=c*a.length/(a.length+y);B(e,t.term,a,_,m,o,u,h,p)}return p},X=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(p=>X(e,p,d));return Y(l,d.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(d=>h(d)).filter(d=>!!d).map(ft(i)).map(d=>At(e,d,i));return Y(c,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,d={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&o.push(d)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new Et(d);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const a of Object.keys(f)){let m=f[a];c===1&&(m=m.ds),g.set(parseInt(a,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,d=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:d?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,d||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[d,l]=u.split(/[#@]/),{contents:p}=n[d]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:d,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:d,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const a=i.map(m=>j(g,m)).filter(m=>m!==null);a.length&&p.push([{type:"text",key:d,...c&&{anchor:l},display:a},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":964,\"nextId\":964,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-8daa1a0e#test-2\",\"2\":\"v-126286db\",\"3\":\"v-126286db#项目组成\",\"4\":\"v-126286db#日志系统\",\"5\":\"v-126286db#设计模式\",\"6\":\"v-126286db#细节\",\"7\":\"v-126286db#线程池\",\"8\":\"v-126286db#为什么要使用线程池\",\"9\":\"v-126286db#数据库\",\"10\":\"v-126286db#数据库连接池是如何运行的\",\"11\":\"v-126286db#日志系统-1\",\"12\":\"v-126286db#并发性问题\",\"13\":\"v-126286db#reactor、proactor模型的区别\",\"14\":\"v-126286db#io多路复用\",\"15\":\"v-126286db#什么是et-什么是lt\",\"16\":\"v-126286db#lt什么时候会触发-et呢\",\"17\":\"v-126286db#为什么et模式不可以文件描述符阻塞-lt模式可以呢\",\"18\":\"v-126286db#优化\",\"19\":\"v-126286db#定时器处理非活动链接\",\"20\":\"v-126286db#定时器优化\",\"21\":\"v-126286db#基础知识\",\"22\":\"v-126286db#raii\",\"23\":\"v-126286db#信号量\",\"24\":\"v-126286db#互斥量\",\"25\":\"v-126286db#条件变量\",\"26\":\"v-126286db#锁机制的功能\",\"27\":\"v-126286db#封装的功能\",\"28\":\"v-126286db#文件描述符\",\"29\":\"v-126286db#服务器编程基本框架\",\"30\":\"v-126286db#五种i-o模型\",\"31\":\"v-126286db#事件处理模式\",\"32\":\"v-126286db#同步i-o模拟proactor模式\",\"33\":\"v-126286db#并发编程模式\",\"34\":\"v-126286db#半同步-半反应堆-没用这个\",\"35\":\"v-126286db#线程池-1\",\"36\":\"v-126286db#静态成员变量\",\"37\":\"v-126286db#静态成员函数\",\"38\":\"v-126286db#select-poll-epoll\",\"39\":\"v-126286db#et、lt、epolloneshot\",\"40\":\"v-126286db#http报文格式\",\"41\":\"v-126286db#请求报文\",\"42\":\"v-126286db#响应报文\",\"43\":\"v-126286db#http状态码\",\"44\":\"v-126286db#有限状态机\",\"45\":\"v-126286db#http处理流程\",\"46\":\"v-126286db#http报文处理流程\",\"47\":\"v-2d09fb6e\",\"48\":\"v-5283c97a\",\"49\":\"v-5283c97a#deep-interactive-object-selection-cvpr-2016\",\"50\":\"v-5283c97a#interactive-image-segmentation-with-first-click-attention-in-cvpr-2020\",\"51\":\"v-5283c97a#interactive-image-segmentation-via-backpropagating-refinement-scheme-cvpr-2019\",\"52\":\"v-5283c97a#f-brs-rethinking-backpropagating-refinement-for-interactive-segmentation-cvpr-2020\",\"53\":\"v-5283c97a#edgeflow-iccv2021\",\"54\":\"v-5283c97a#ritm\",\"55\":\"v-5283c97a#focalclick-towards-practical-interactive-image-segmentation-cvpr2022\",\"56\":\"v-5283c97a#interactive-object-segmentation-in-3d-point-clouds\",\"57\":\"v-584d4898\",\"58\":\"v-584d4898#主要方向\",\"59\":\"v-584d4898#现状\",\"60\":\"v-584d4898#基于手工特征的传统机器学习目标检测\",\"61\":\"v-584d4898#基于端到端自动提取特征的深度学习模型\",\"62\":\"v-584d4898#问题\",\"63\":\"v-584d4898#需求\",\"64\":\"v-584d4898#难点\",\"65\":\"v-584d4898#创新方向\",\"66\":\"v-83bd35b2\",\"67\":\"v-bbaa4628\",\"68\":\"v-21dc10a4\",\"69\":\"v-21dc10a4#_1-理论基础\",\"70\":\"v-21dc10a4#_2-递归遍历\",\"71\":\"v-21dc10a4#_3-迭代遍历\",\"72\":\"v-21dc10a4#_4-层序遍历\",\"73\":\"v-21dc10a4#_104-二叉树的最大深度-力扣-leetcode\",\"74\":\"v-21dc10a4#_559-n-叉树的最大深度-力扣-leetcode\",\"75\":\"v-21dc10a4#_111-二叉树的最小深度-力扣-leetcode\",\"76\":\"v-21dc10a4#_6-翻转二叉树\",\"77\":\"v-21dc10a4#_7-对称二叉树\",\"78\":\"v-21dc10a4#相同的树-力扣\",\"79\":\"v-21dc10a4#另一棵树的子树\",\"80\":\"v-21dc10a4#_8-完全二叉树的节点个数\",\"81\":\"v-21dc10a4#_9-平衡二叉树\",\"82\":\"v-21dc10a4#_10-二叉树的所有路径\",\"83\":\"v-21dc10a4#_11-左叶子之和\",\"84\":\"v-21dc10a4#_12-找树左下角的值\",\"85\":\"v-21dc10a4#_13-路径总和\",\"86\":\"v-21dc10a4#_14-二叉树的还原\",\"87\":\"v-21dc10a4#_15-最大二叉树\",\"88\":\"v-21dc10a4#_16-合并二叉树\",\"89\":\"v-21dc10a4#_17-二叉树的最近公共祖先\",\"90\":\"v-21dc10a4#_1123-最深叶节点的最近公共祖先-力扣-leetcode\",\"91\":\"v-21dc10a4#_235-二叉搜索树的最近公共祖先-力扣-leetcode\",\"92\":\"v-21dc10a4#_18-二叉搜索树\",\"93\":\"v-21dc10a4#_1-性质\",\"94\":\"v-21dc10a4#_2-查找\",\"95\":\"v-21dc10a4#_3-插入\",\"96\":\"v-21dc10a4#_4-创建\",\"97\":\"v-21dc10a4#_5-删除\",\"98\":\"v-21dc10a4#修剪二叉搜索树-力扣-leetcode\",\"99\":\"v-21dc10a4#_6-例子\",\"100\":\"v-21dc10a4#二叉树中的双指针\",\"101\":\"v-4e1c56fe\",\"102\":\"v-4e1c56fe#数组\",\"103\":\"v-4e1c56fe#链表\",\"104\":\"v-4e1c56fe#哈希表\",\"105\":\"v-4e1c56fe#字符串\",\"106\":\"v-4e1c56fe#栈和队列\",\"107\":\"v-4e1c56fe#_239-滑动窗口最大值-力扣-leetcode\",\"108\":\"v-4e1c56fe#_347-前-k-个高频元素-力扣-leetcode\",\"109\":\"v-4e1c56fe#二叉树\",\"110\":\"v-768567d9\",\"111\":\"v-768567d9#_1-组合问题\",\"112\":\"v-768567d9#_77-组合-力扣-leetcode\",\"113\":\"v-768567d9#_216-组合总和-iii-力扣-leetcode\",\"114\":\"v-768567d9#_17-电话号码的字母组合-力扣-leetcode\",\"115\":\"v-768567d9#_39-组合总和-力扣-leetcode\",\"116\":\"v-768567d9#_40-组合总和-ii-力扣-leetcode\",\"117\":\"v-768567d9#_2-分割问题\",\"118\":\"v-768567d9#_131-分割回文串-力扣-leetcode\",\"119\":\"v-768567d9#_93-复原-ip-地址-力扣-leetcode\",\"120\":\"v-768567d9#_3-子集问题\",\"121\":\"v-768567d9#_78-子集-力扣-leetcode\",\"122\":\"v-768567d9#_90-子集-ii-力扣-leetcode\",\"123\":\"v-768567d9#_491-递增子序列-力扣-leetcode\",\"124\":\"v-768567d9#_4-排列问题\",\"125\":\"v-768567d9#_46-全排列-力扣-leetcode\",\"126\":\"v-768567d9#_47-全排列-ii-力扣-leetcode\",\"127\":\"v-768567d9#_5-棋盘问题\",\"128\":\"v-768567d9#_51-n-皇后-力扣-leetcode\",\"129\":\"v-768567d9#_37-解数独-力扣-leetcode\",\"130\":\"v-768567d9#_6-其他\",\"131\":\"v-768567d9#_491-递增子序列-力扣-leetcode-1\",\"132\":\"v-768567d9#_332-重新安排行程-力扣-leetcode\",\"133\":\"v-e98c400a\",\"134\":\"v-e98c400a#拓扑排序\",\"135\":\"v-e98c400a#_207-课程表-力扣-leetcode\",\"136\":\"v-2aabb458\",\"137\":\"v-2aabb458#_76-最小覆盖子串-力扣-leetcode\",\"138\":\"v-2aabb458#_438-找到字符串中所有字母异位词-力扣-leetcode\",\"139\":\"v-2aabb458#_3-无重复字符的最长子串-力扣-leetcode\",\"140\":\"v-469d9d12\",\"141\":\"v-469d9d12#简单题目\",\"142\":\"v-469d9d12#_455-分发饼干-力扣-leetcode\",\"143\":\"v-469d9d12#_1005-k-次取反后最大化的数组和-力扣-leetcode\",\"144\":\"v-469d9d12#中等题目\",\"145\":\"v-469d9d12#序列问题\",\"146\":\"v-469d9d12#_376-摆动序列-力扣-leetcode\",\"147\":\"v-469d9d12#股票问题\",\"148\":\"v-469d9d12#_122-买卖股票的最佳时机-ii-力扣-leetcode\",\"149\":\"v-469d9d12#两个维度权衡问题\",\"150\":\"v-469d9d12#有点难度\",\"151\":\"v-469d9d12#区间问题\",\"152\":\"v-469d9d12#_55-跳跃游戏-力扣-leetcode\",\"153\":\"v-469d9d12#_53-最大子数组和-力扣-leetcode\",\"154\":\"v-469d9d12#_134-加油站-力扣-leetcode\",\"155\":\"v-884a0bbc\",\"156\":\"v-884a0bbc#ubuntu\",\"157\":\"v-884a0bbc#解决qt-qpa-xcb-could-not-connect-to-display问题\",\"158\":\"v-884a0bbc#ubuntu设置虚拟内存\",\"159\":\"v-884a0bbc#screen安装与使用\",\"160\":\"v-884a0bbc#修改文件夹权限\",\"161\":\"v-884a0bbc#重装ubuntu-的-nvidia-驱动\",\"162\":\"v-884a0bbc#ubuntu挂载多个硬盘并赋予权限\",\"163\":\"v-884a0bbc#批量修改-jpeg-文件后缀\",\"164\":\"v-884a0bbc#docker\",\"165\":\"v-884a0bbc#使用-docker-创建-conda-环境\",\"166\":\"v-884a0bbc#importerror-libgl-so-1-cannot-open-shared-object-file-no-such-file-or-directory\",\"167\":\"v-884a0bbc#git\",\"168\":\"v-884a0bbc#git-强制更新覆盖本地代码\",\"169\":\"v-625aae9d\",\"170\":\"v-625aae9d#设置-swap\",\"171\":\"v-625aae9d#删除-swap\",\"172\":\"v-806cf9aa\",\"173\":\"v-18d6a15e\",\"174\":\"v-18d6a15e#bad-interpreter\",\"175\":\"v-18d6a15e#usr-bin-env-bashr-没有那个文件或目录\",\"176\":\"v-1f3fbda0\",\"177\":\"v-1f3fbda0#_1-检查是否已安装-screen\",\"178\":\"v-1f3fbda0#_2-安装-screen\",\"179\":\"v-1f3fbda0#_3-创建一个-screen-会话\",\"180\":\"v-1f3fbda0#_4-断开与当前-screen-连接\",\"181\":\"v-1f3fbda0#_5-恢复某-screen-会话\",\"182\":\"v-1f3fbda0#_6-删除不需要的-screen\",\"183\":\"v-325f83aa\",\"184\":\"v-325f83aa#创建容器\",\"185\":\"v-325f83aa#安装常用软件\",\"186\":\"v-325f83aa#配置-ssh-链接\",\"187\":\"v-8966dafa\",\"188\":\"v-8966dafa#出现原因\",\"189\":\"v-8966dafa#解决方法\",\"190\":\"v-117e001d\",\"191\":\"v-117e001d#安装自定义显卡驱动版本号\",\"192\":\"v-fcaa3ada\",\"193\":\"v-fcaa3ada#解决的问题\",\"194\":\"v-fcaa3ada#主要贡献\",\"195\":\"v-fcaa3ada#架构\",\"196\":\"v-fcaa3ada#sparse-3d-u-net\",\"197\":\"v-fcaa3ada#query-decoder\",\"198\":\"v-fcaa3ada#query-selection\",\"199\":\"v-fcaa3ada#摘要\",\"200\":\"v-fcaa3ada#method\",\"201\":\"v-fcaa3ada#query-decoder-1\",\"202\":\"v-fcaa3ada#shared-prediction-head\",\"203\":\"v-fcaa3ada#_1-minkengine\",\"204\":\"v-fcaa3ada#sparse-tensor-quantization\",\"205\":\"v-fcaa3ada#generalized-sparse-convolution\",\"206\":\"v-fcaa3ada#pooling\",\"207\":\"v-fcaa3ada#non-spatial-funtions\",\"208\":\"v-fcaa3ada#_2-spconv\",\"209\":\"v-fcaa3ada#建立输入哈希表\",\"210\":\"v-fcaa3ada#建立rulebook\",\"211\":\"v-fcaa3ada#_3-torchsparse\",\"212\":\"v-2166b8f0\",\"213\":\"v-2166b8f0#_1-数据集\",\"214\":\"v-2166b8f0#_2-评价指标\",\"215\":\"v-2166b8f0#_3-分类\",\"216\":\"v-2166b8f0#_3-1基于投影的网络\",\"217\":\"v-2166b8f0#_3-1-1-多视图表示\",\"218\":\"v-2166b8f0#_3-1-2-体素化表示\",\"219\":\"v-2166b8f0#_3-2基于点的网络\",\"220\":\"v-2166b8f0#_3-2-1-点式mlp网络\",\"221\":\"v-2166b8f0#_3-2-2-基于卷积的网络\",\"222\":\"v-2166b8f0#连续卷积\",\"223\":\"v-2166b8f0#离散卷积\",\"224\":\"v-2166b8f0#_3-2-3-基于图的网络\",\"225\":\"v-2166b8f0#基于图的空间域\",\"226\":\"v-2166b8f0#基于图的谱域\",\"227\":\"v-2166b8f0#_3-2-4-基于数据索引的网络\",\"228\":\"v-2166b8f0#_3-2-5-其他模型\",\"229\":\"v-2166b8f0#小结\",\"230\":\"v-2166b8f0#_4-检测-跟踪\",\"231\":\"v-2166b8f0#_4-1-3d-目标检测\",\"232\":\"v-2166b8f0#_4-1-1-基于区域建议的方法\",\"233\":\"v-2166b8f0#基于多视图的方法\",\"234\":\"v-2166b8f0#基于分割的方法\",\"235\":\"v-2166b8f0#基于视锥的方法\",\"236\":\"v-2166b8f0#其他方法\",\"237\":\"v-2166b8f0#_4-1-2-single-shot-方法-end-to-end\",\"238\":\"v-2166b8f0#基于bev的方法\",\"239\":\"v-2166b8f0#基于点云的方法\",\"240\":\"v-2166b8f0#_4-2-3d目标跟踪\",\"241\":\"v-2166b8f0#_4-3-3d场景流估计\",\"242\":\"v-2166b8f0#小结-1\",\"243\":\"v-2166b8f0#_5-分割\",\"244\":\"v-2166b8f0#_5-1-3d-场景分割\",\"245\":\"v-2166b8f0#_5-1-1-基于投影的网络\",\"246\":\"v-2166b8f0#_5-1-2-基于离散化的方法\",\"247\":\"v-2166b8f0#_5-1-3-混合方法\",\"248\":\"v-2166b8f0#_5-1-4-基于点的方法\",\"249\":\"v-2166b8f0#小结-2\",\"250\":\"v-2166b8f0#_5-2-实例分割\",\"251\":\"v-2166b8f0#_5-2-1-基于proposal的方法\",\"252\":\"v-2166b8f0#_5-2-2-proposal-free-methods\",\"253\":\"v-2166b8f0#_5-3-部件分割\",\"254\":\"v-2166b8f0#小结-3\",\"255\":\"v-2724712e\",\"256\":\"v-2724712e#pointcontrast\",\"257\":\"v-2724712e#motivation\",\"258\":\"v-2724712e#方法\",\"259\":\"v-2724712e#shapenet-有监督预训练测试\",\"260\":\"v-2724712e#算法\",\"261\":\"v-2724712e#结果\",\"262\":\"v-2724712e#depthcontrast\",\"263\":\"v-2724712e#方法-1\",\"264\":\"v-2724712e#结果-1\",\"265\":\"v-2724712e#总结\",\"266\":\"v-2724712e#masked-scene-contrast\",\"267\":\"v-2724712e#approch\",\"268\":\"v-2724712e#对比学习\",\"269\":\"v-2724712e#数据增强\",\"270\":\"v-2724712e#重建学习\",\"271\":\"v-2724712e#macarons\",\"272\":\"v-2724712e#point-m2ae\",\"273\":\"v-2724712e#geomae\",\"274\":\"v-2724712e#返回\",\"275\":\"v-493e74a9\",\"276\":\"v-493e74a9#创新点\",\"277\":\"v-ab56f822\",\"278\":\"v-ab56f822#_3d-representation\",\"279\":\"v-ab56f822#model\",\"280\":\"v-ab56f822#input-encoder\",\"281\":\"v-ab56f822#initial-prediction-of-sdf\",\"282\":\"v-ab56f822#surface-refinement-with-volume-subdivision\",\"283\":\"v-ab56f822#learnable-surface-subdivision\",\"284\":\"v-ab56f822#_3d-discriminator\",\"285\":\"v-ab56f822#损失函数\",\"286\":\"v-37ca48d4\",\"287\":\"v-37ca48d4#训练\",\"288\":\"v-37ca48d4#特征提取\",\"289\":\"v-37ca48d4#构建特征体-feature-volume\",\"290\":\"v-37ca48d4#differentiable-homography\",\"291\":\"v-37ca48d4#特征体构建\",\"292\":\"v-37ca48d4#生成代价体-cost-volume\",\"293\":\"v-37ca48d4#代价体正则化\",\"294\":\"v-37ca48d4#深度图初始估计\",\"295\":\"v-37ca48d4#损失计算\",\"296\":\"v-37ca48d4#后处理\",\"297\":\"v-37ca48d4#深度图滤波\",\"298\":\"v-37ca48d4#几何约束\",\"299\":\"v-37ca48d4#光度约束\",\"300\":\"v-37ca48d4#深度图融合\",\"301\":\"v-7e182033\",\"302\":\"v-7e182033#overview\",\"303\":\"v-7e182033#invariant-convolution\",\"304\":\"v-7e182033#mesh-convolution\",\"305\":\"v-7e182033#输入特征\",\"306\":\"v-7e182033#global-ordering\",\"307\":\"v-7e182033#pooling\",\"308\":\"v-7e182033#mesh-pooling\",\"309\":\"v-7e182033#mesh-unpooling\",\"310\":\"v-7e182033#网络设置\",\"311\":\"v-7e182033#result\",\"312\":\"v-7e182033#总结\",\"313\":\"v-778e10ee\",\"314\":\"v-778e10ee#pointgpt-的整体架构\",\"315\":\"v-778e10ee#point-cloud-sequencer\",\"316\":\"v-778e10ee#点云序列\",\"317\":\"v-778e10ee#点块分割\",\"318\":\"v-778e10ee#排序\",\"319\":\"v-778e10ee#嵌入\",\"320\":\"v-778e10ee#transformer-decoder-with-a-dual-masking-strategy\",\"321\":\"v-778e10ee#dual-masking-strategy\",\"322\":\"v-778e10ee#extractor-generator\",\"323\":\"v-778e10ee#generation-target\",\"324\":\"v-778e10ee#experiment\",\"325\":\"v-778e10ee#结论\",\"326\":\"v-2285a90f\",\"327\":\"v-2285a90f#abstract\",\"328\":\"v-2285a90f#方法\",\"329\":\"v-2285a90f#_1-初始深度图生成\",\"330\":\"v-2285a90f#_2-2d-3d-特征融合\",\"331\":\"v-2285a90f#_2-1-特征提取\",\"332\":\"v-2285a90f#_2-1-动态特征融合\",\"333\":\"v-2285a90f#_3-点云优化\",\"334\":\"v-2285a90f#_3-1-假设点生成\",\"335\":\"v-2285a90f#_3-2-边缘卷积\",\"336\":\"v-2285a90f#_3-3-残差生成\",\"337\":\"v-2285a90f#_4-上采样与迭代优化\",\"338\":\"v-2285a90f#损失函数\",\"339\":\"v-2285a90f#实验结果\",\"340\":\"v-3ca2edb0\",\"341\":\"v-0b6a5a10\",\"342\":\"v-0b6a5a10#dtu-数据集\",\"343\":\"v-0b6a5a10#s3dis\",\"344\":\"v-77fe2484\",\"345\":\"v-397edb05\",\"346\":\"v-397edb05#kl-散度\",\"347\":\"v-397edb05#信息熵\",\"348\":\"v-397edb05#交叉熵\",\"349\":\"v-397edb05#kl-散度-1\",\"350\":\"v-397edb05#基于-feature-的知识蒸馏\",\"351\":\"v-397edb05#基于-logits-的知识蒸馏\",\"352\":\"v-397edb05#decoupled-knolwdge-distillation-1\",\"353\":\"v-397edb05#notations\",\"354\":\"v-397edb05#reformulation\",\"355\":\"v-397edb05#ablation\",\"356\":\"v-397edb05#decoupled-knolwdge-distillation-2\",\"357\":\"v-397edb05#result\",\"358\":\"v-397edb05#limitations-and-future-work\",\"359\":\"v-644b9e46\",\"360\":\"v-255a46e6\",\"361\":\"v-255a46e6#deformable-convolutional-networks\",\"362\":\"v-255a46e6#deformable-convolution\",\"363\":\"v-255a46e6#regular-conv\",\"364\":\"v-255a46e6#deformable-conv\",\"365\":\"v-255a46e6#defomable-roi-pooling\",\"366\":\"v-255a46e6#roi-pooling-average\",\"367\":\"v-255a46e6#position-sensitive-roi-pooling\",\"368\":\"v-255a46e6#visualization\",\"369\":\"v-255a46e6#deformable-convnets-v2-more-deformable-better-results\",\"370\":\"v-255a46e6#dcn-v3\",\"371\":\"v-255a46e6#dcnv2\",\"372\":\"v-255a46e6#dcnv3\",\"373\":\"v-255a46e6#构建模型\",\"374\":\"v-255a46e6#stacking-rules\",\"375\":\"v-255a46e6#scaling-rules\",\"376\":\"v-255a46e6#result\",\"377\":\"v-9367dc94\",\"378\":\"v-2a359e60\",\"379\":\"v-2a359e60#abstract\",\"380\":\"v-2a359e60#method\",\"381\":\"v-2a359e60#patch-embedding\",\"382\":\"v-2a359e60#patch-merging\",\"383\":\"v-2a359e60#w-msa\",\"384\":\"v-2a359e60#masked-msa\",\"385\":\"v-3e903fd7\",\"386\":\"v-3e903fd7#intro\",\"387\":\"v-3e903fd7#related-work\",\"388\":\"v-3e903fd7#原始-vits\",\"389\":\"v-3e903fd7#混合-vits\",\"390\":\"v-3e903fd7#token裁剪\",\"391\":\"v-3e903fd7#method\",\"392\":\"v-3e903fd7#tps\",\"393\":\"v-3e903fd7#token-压缩\",\"394\":\"v-3e903fd7#匹配\",\"395\":\"v-3e903fd7#融合\",\"396\":\"v-3e903fd7#result\",\"397\":\"v-d0d8825a\",\"398\":\"v-d0d8825a#intro\",\"399\":\"v-d0d8825a#method\",\"400\":\"v-d0d8825a#result\",\"401\":\"v-d0d8825a#思考\",\"402\":\"v-5a3a12cf\",\"403\":\"v-5a3a12cf#r-cnn\",\"404\":\"v-5a3a12cf#流程\",\"405\":\"v-5a3a12cf#贡献\",\"406\":\"v-5a3a12cf#问题\",\"407\":\"v-5a3a12cf#fast-r-cnn\",\"408\":\"v-5a3a12cf#流程-1\",\"409\":\"v-5a3a12cf#贡献-1\",\"410\":\"v-5a3a12cf#faster-r-cnn\",\"411\":\"v-5a3a12cf#region-proposal-network\",\"412\":\"v-5a3a12cf#cls-layer\",\"413\":\"v-5a3a12cf#reg-layer\",\"414\":\"v-5a3a12cf#classifier\",\"415\":\"v-5a3a12cf#roi-pooling\",\"416\":\"v-5a3a12cf#分类和边框修正\",\"417\":\"v-5a3a12cf#推理\",\"418\":\"v-5a3a12cf#mask-r-cnn\",\"419\":\"v-5a3a12cf#问题-1\",\"420\":\"v-08ed2e79\",\"421\":\"v-0ab06607\",\"422\":\"v-0ab06607#coco-microsoft-common-objects-in-context\",\"423\":\"v-0ab06607#cityscapes\",\"424\":\"v-0ab06607#places\",\"425\":\"v-0ab06607#ade20k\",\"426\":\"v-0ab06607#nyuv2-nyu-depth-v2\",\"427\":\"v-0ab06607#bdd100k\",\"428\":\"v-0ab06607#crowdhuman\",\"429\":\"v-0ab06607#inaturalist\",\"430\":\"v-59d85132\",\"431\":\"v-59d85132#detr\",\"432\":\"v-59d85132#dino\",\"433\":\"v-59d85132#ddq\",\"434\":\"v-55e825d9\",\"435\":\"v-55e825d9#relu-rectified-linear-unit-修正线性单元\",\"436\":\"v-55e825d9#relu的稀疏性-2\",\"437\":\"v-55e825d9#relu-的缺点\",\"438\":\"v-55e825d9#relu变种\",\"439\":\"v-55e825d9#leaky-relu\",\"440\":\"v-55e825d9#指数线性单元elu\",\"441\":\"v-55e825d9#selu\",\"442\":\"v-55e825d9#swish\",\"443\":\"v-55e825d9#gelu\",\"444\":\"v-55e825d9#maxout\",\"445\":\"v-55e825d9#sigmoid-与-tanh\",\"446\":\"v-55e825d9#为什么tanh相比sigmoid收敛更快\",\"447\":\"v-55e825d9#激活函数作用\",\"448\":\"v-55e825d9#梯度消失与梯度爆炸\",\"449\":\"v-55e825d9#激活函数选择\",\"450\":\"v-97b1cd66\",\"451\":\"v-97b1cd66#生成模型的几种评价指标\",\"452\":\"v-77a999ac\",\"453\":\"v-77a999ac#扩散模型\",\"454\":\"v-77a999ac#对抗生成模型\",\"455\":\"v-770894a8\",\"456\":\"v-770894a8#_1-select-语句\",\"457\":\"v-770894a8#_2-检索单个列\",\"458\":\"v-770894a8#_3-检索多个列\",\"459\":\"v-770894a8#_4-检索所有列\",\"460\":\"v-770894a8#_5-检索不同的行\",\"461\":\"v-770894a8#_6-限制结果\",\"462\":\"v-770894a8#_7-使用完全限定的表名\",\"463\":\"v-060f238f\",\"464\":\"v-d2746d3a\",\"465\":\"v-d2746d3a#索引结构\",\"466\":\"v-1f66f968\",\"467\":\"v-1f66f968#_1-排序数据\",\"468\":\"v-1f66f968#_2-按多个列排序\",\"469\":\"v-1f66f968#_3-指定排序方向\",\"470\":\"v-2a8afbae\",\"471\":\"v-2a8afbae#_1-使用-where-子句\",\"472\":\"v-2a8afbae#where-子句操作符\",\"473\":\"v-4ec989d6\",\"474\":\"v-4ec989d6#http-基本概念\",\"475\":\"v-4ec989d6#http-是什么\",\"476\":\"v-4ec989d6#http-常见状态码\",\"477\":\"v-4ec989d6#get-与-post\",\"478\":\"v-4ec989d6#http-特性\",\"479\":\"v-4ec989d6#http-缓存技术\",\"480\":\"v-4ec989d6#http-缓存有哪些实现方式\",\"481\":\"v-4ec989d6#强制缓存\",\"482\":\"v-4ec989d6#协商缓存\",\"483\":\"v-4ec989d6#http-与-https\",\"484\":\"v-4ec989d6#http-与-https-有哪些区别\",\"485\":\"v-4ec989d6#https-解决了-http-的哪些问题\",\"486\":\"v-4ec989d6#http-演变\",\"487\":\"v-576fcae6\",\"488\":\"v-576fcae6#基础\",\"489\":\"v-576fcae6#http\",\"490\":\"v-576fcae6#tcp\",\"491\":\"v-576fcae6#ip\",\"492\":\"v-c2833200\",\"493\":\"v-c2833200#select\",\"494\":\"v-c2833200#poll\",\"495\":\"v-c2833200#epoll\",\"496\":\"v-149d6a44\",\"497\":\"v-149d6a44#reactor\",\"498\":\"v-149d6a44#proactor\",\"499\":\"v-6ffc2c86\",\"500\":\"v-3a3f0e28\",\"501\":\"v-738cf7e5\",\"502\":\"v-0afeaf27\",\"503\":\"v-3919290a\",\"504\":\"v-3919290a#数据类型\",\"505\":\"v-3919290a#运算及流程控制\",\"506\":\"v-3919290a#函数\",\"507\":\"v-3919290a#输入与输出\",\"508\":\"v-3919290a#类和面向对象\",\"509\":\"v-3919290a#数据共享与保护\",\"510\":\"v-3919290a#继承与派生\",\"511\":\"v-3919290a#多态与虚函数\",\"512\":\"v-3919290a#运算符重载\",\"513\":\"v-3919290a#stl\",\"514\":\"v-3919290a#c-11\",\"515\":\"v-230122d9\",\"516\":\"v-230122d9#_1-const指针\",\"517\":\"v-230122d9#_1-1-指向常量的指针变量\",\"518\":\"v-230122d9#_1-2-常指针\",\"519\":\"v-230122d9#_1-3-指向常量的常指针\",\"520\":\"v-230122d9#_2-常对象\",\"521\":\"v-230122d9#_3-常对象成员\",\"522\":\"v-230122d9#_4-指向对象的常指针\",\"523\":\"v-230122d9#_5-指向常对象的指针变量\",\"524\":\"v-230122d9#_6-对象的常引用\",\"525\":\"v-230122d9#_7-小结\",\"526\":\"v-66514b44\",\"527\":\"v-66514b44#_1-锁-mutex\",\"528\":\"v-66514b44#demo1——无锁的情况\",\"529\":\"v-66514b44#demo2——加锁的情况\",\"530\":\"v-66514b44#_2-lock-guard\",\"531\":\"v-66514b44#demo4——避免死锁-lock-guard\",\"532\":\"v-66514b44#_3-std-lock-guard的第二个构造函数\",\"533\":\"v-2e0b2498\",\"534\":\"v-2e0b2498#string\",\"535\":\"v-2e0b2498#字符串类型转换函数\",\"536\":\"v-2e0b2498#vector\",\"537\":\"v-2e0b2498#概念\",\"538\":\"v-2e0b2498#vector构造函数\",\"539\":\"v-2e0b2498#vector增加函数\",\"540\":\"v-2e0b2498#vector删除函数\",\"541\":\"v-2e0b2498#vector遍历函数\",\"542\":\"v-2e0b2498#vector关于元素数量函数\",\"543\":\"v-2e0b2498#vector其他函数\",\"544\":\"v-2e0b2498#map\",\"545\":\"v-2e0b2498#unordered-map\",\"546\":\"v-2e0b2498#unordered-set\",\"547\":\"v-2e0b2498#头文件\",\"548\":\"v-2e0b2498#初始化\",\"549\":\"v-2e0b2498#创建空的set\",\"550\":\"v-2e0b2498#拷贝构造\",\"551\":\"v-2e0b2498#使用迭代器构造\",\"552\":\"v-2e0b2498#使用数组作为初值构造\",\"553\":\"v-2e0b2498#移动构造\",\"554\":\"v-2e0b2498#使用待处置的列表构造\",\"555\":\"v-2e0b2498#unordered-set-常用函数\",\"556\":\"v-2e0b2498#empty\",\"557\":\"v-2e0b2498#find\",\"558\":\"v-2e0b2498#count\",\"559\":\"v-2e0b2498#insert\",\"560\":\"v-2e0b2498#emplace\",\"561\":\"v-2e0b2498#erase\",\"562\":\"v-2e0b2498#bucket-count\",\"563\":\"v-2e0b2498#stack-栈\",\"564\":\"v-2e0b2498#定义\",\"565\":\"v-2e0b2498#压入\",\"566\":\"v-2e0b2498#弹出\",\"567\":\"v-2e0b2498#栈顶元素\",\"568\":\"v-2e0b2498#是否为空\",\"569\":\"v-2e0b2498#队列\",\"570\":\"v-2e0b2498#queue\",\"571\":\"v-2e0b2498#queue-其他操作\",\"572\":\"v-2e0b2498#deque\",\"573\":\"v-2e0b2498#初始化-1\",\"574\":\"v-2e0b2498#操作函数\",\"575\":\"v-2e0b2498#迭代器算法\",\"576\":\"v-2e0b2498#算法\",\"577\":\"v-2e0b2498#总结\",\"578\":\"v-2e0b2498#priority-queue\",\"579\":\"v-69332779\",\"580\":\"v-60031cc2\",\"581\":\"v-60031cc2#c-的程序结构\",\"582\":\"v-60031cc2#函数-function\",\"583\":\"v-60031cc2#main-函数\",\"584\":\"v-60031cc2#函数分类\",\"585\":\"v-60031cc2#定义函数\",\"586\":\"v-60031cc2#函数参数\",\"587\":\"v-60031cc2#函数的返回值\",\"588\":\"v-60031cc2#函数调用\",\"589\":\"v-60031cc2#一般形式\",\"590\":\"v-60031cc2#函数声明\",\"591\":\"v-60031cc2#函数的嵌套调用\",\"592\":\"v-60031cc2#函数的递归调用\",\"593\":\"v-60031cc2#有默认参数的函数\",\"594\":\"v-60031cc2#一个参数\",\"595\":\"v-60031cc2#多个形参\",\"596\":\"v-60031cc2#内部函数和外部函数\",\"597\":\"v-60031cc2#内部函数\",\"598\":\"v-60031cc2#外部函数\",\"599\":\"v-60031cc2#内置函数\",\"600\":\"v-60031cc2#函数模版\",\"601\":\"v-60031cc2#函数重载\",\"602\":\"v-60031cc2#常用标准库函数\",\"603\":\"v-6d7355e6\",\"604\":\"v-6d7355e6#友元函数\",\"605\":\"v-6d7355e6#将普通函数声明为友元函数\",\"606\":\"v-6d7355e6#友元成员函数\",\"607\":\"v-6d7355e6#友元类\",\"608\":\"v-ffc4eb26\",\"609\":\"v-ffc4eb26#生存期\",\"610\":\"v-ffc4eb26#储存类别\",\"611\":\"v-ffc4eb26#自动变量-auto-variable-动态局部变量\",\"612\":\"v-ffc4eb26#静态局部变量-static-local-variable\",\"613\":\"v-ffc4eb26#用-register-声明寄存器变量-对编译系统来说是建议性的而不是强制\",\"614\":\"v-ffc4eb26#用-extern-声明外部变量-全局变量\",\"615\":\"v-ffc4eb26#在一个文件内声明全局变量\",\"616\":\"v-ffc4eb26#在多文件程序中声明外部变量\",\"617\":\"v-ffc4eb26#用-static-声明静态外部变量-全局变量\",\"618\":\"v-ffc4eb26#变量属性小结\",\"619\":\"v-ffc4eb26#局部变量和全局变量\",\"620\":\"v-ffc4eb26#局部变量-local-variable\",\"621\":\"v-ffc4eb26#全局变量\",\"622\":\"v-9a842ab8\",\"623\":\"v-9a842ab8#c-与-c\",\"624\":\"v-9a842ab8#第一行代码\",\"625\":\"v-9a842ab8#c-代码风格\",\"626\":\"v-9a842ab8#c-的编译与执行\",\"627\":\"v-1d5a3a71\",\"628\":\"v-08cbec2b\",\"629\":\"v-6ab8fc27\",\"630\":\"v-b3febe6e\",\"631\":\"v-b3febe6e#c-的数据类型\",\"632\":\"v-b3febe6e#分类\",\"633\":\"v-b3febe6e#大小\",\"634\":\"v-b3febe6e#用-typedef-声明新的类型名\",\"635\":\"v-b3febe6e#用法\",\"636\":\"v-b3febe6e#其他\",\"637\":\"v-b3febe6e#_1、对一个结构体类型声明一个新的名字\",\"638\":\"v-b3febe6e#_2、进一步用-typedef-声明新的类型名\",\"639\":\"v-b3febe6e#总结-声明一个新的类型名的方法\",\"640\":\"v-b3febe6e#c-常量\",\"641\":\"v-b3febe6e#数值常量\",\"642\":\"v-b3febe6e#整型\",\"643\":\"v-b3febe6e#浮点数\",\"644\":\"v-b3febe6e#十进制小数\",\"645\":\"v-b3febe6e#指数形式-浮点形式\",\"646\":\"v-b3febe6e#字符常量\",\"647\":\"v-b3febe6e#普通的字符常量\",\"648\":\"v-b3febe6e#转义字符型\",\"649\":\"v-b3febe6e#字符串常量\",\"650\":\"v-b3febe6e#符号常量\",\"651\":\"v-b3febe6e#宏定义\",\"652\":\"v-b3febe6e#作用\",\"653\":\"v-b3febe6e#形式\",\"654\":\"v-b3febe6e#分类-1\",\"655\":\"v-b3febe6e#c-变量\",\"656\":\"v-b3febe6e#概念\",\"657\":\"v-b3febe6e#变量名的名命规则-标识符名命\",\"658\":\"v-b3febe6e#定义和使用变量\",\"659\":\"v-b3febe6e#初始化变量\",\"660\":\"v-b3febe6e#常变量\",\"661\":\"v-b3febe6e#概念-1\",\"662\":\"v-b3febe6e#与-define-的比较\",\"663\":\"v-0a870819\",\"664\":\"v-0a870819#取地址运算符\",\"665\":\"v-0a870819#声明及初始化指针变量\",\"666\":\"v-0a870819#引用指针变量\",\"667\":\"v-0a870819#空指针-null-pointer\",\"668\":\"v-0a870819#void-指针\",\"669\":\"v-0a870819#const-指针\",\"670\":\"v-0a870819#指向常量的指针变量\",\"671\":\"v-0a870819#指向常变量的指针变量\",\"672\":\"v-0a870819#常指针\",\"673\":\"v-0a870819#指向常量的常指针\",\"674\":\"v-0a870819#指针小结\",\"675\":\"v-0a870819#有关指针的数据类型小结\",\"676\":\"v-0a870819#指针运算小结\",\"677\":\"v-0a870819#内存泄漏-memory-leak\",\"678\":\"v-378f0c04\",\"679\":\"v-378f0c04#字符数组与字符串\",\"680\":\"v-378f0c04#字符数组\",\"681\":\"v-378f0c04#定义\",\"682\":\"v-378f0c04#初始化\",\"683\":\"v-378f0c04#赋值与引用\",\"684\":\"v-378f0c04#字符串和字符串结束的标志\",\"685\":\"v-378f0c04#字符数组的输入和输出\",\"686\":\"v-378f0c04#字符串处理函数\",\"687\":\"v-378f0c04#字符串连接函数-stract\",\"688\":\"v-378f0c04#字符串赋值函数-strcpy\",\"689\":\"v-378f0c04#字符串比较函数-strcmp\",\"690\":\"v-378f0c04#字符串长度函数-strlen\",\"691\":\"v-378f0c04#字符串类-与-字符串变量\",\"692\":\"v-378f0c04#字符串变量的定义和引用\",\"693\":\"v-378f0c04#对字符串变量赋值\",\"694\":\"v-378f0c04#字符串变量的输入和输出\",\"695\":\"v-378f0c04#字符串变量的运算\",\"696\":\"v-378f0c04#字符串数组\",\"697\":\"v-378f0c04#字符串与指针\",\"698\":\"v-378f0c04#字符指针\",\"699\":\"v-31bbb166\",\"700\":\"v-02994507\",\"701\":\"v-02994507#对象、面向对象\",\"702\":\"v-02994507#类的声明、定义、引用\",\"703\":\"v-02994507#声明类类型\",\"704\":\"v-02994507#定义对象\",\"705\":\"v-02994507#类的成员函数\",\"706\":\"v-02994507#在类外定义成员函数\",\"707\":\"v-02994507#内置成员函数-inline-见内置函数\",\"708\":\"v-02994507#成员函数的储存\",\"709\":\"v-02994507#对象成员的引用\",\"710\":\"v-02994507#对象名作为函数参数\",\"711\":\"v-02994507#用new和delete运算符进行动态分配和撤销储存空间\",\"712\":\"v-02994507#new-分配空间\",\"713\":\"v-02994507#delete-撤销储存空间\",\"714\":\"v-02994507#对象的动态建立与释放\",\"715\":\"v-02994507#对象的初始化\",\"716\":\"v-02994507#构造函数\",\"717\":\"v-02994507#构造函数-constructor\",\"718\":\"v-02994507#带参数的构造函数\",\"719\":\"v-02994507#用参数初始化表对数据成员初始化\",\"720\":\"v-02994507#构造函数重载\",\"721\":\"v-02994507#默认参数的构造函数\",\"722\":\"v-02994507#析构函数-destructor\",\"723\":\"v-02994507#对象的赋值与复制\",\"724\":\"v-02994507#对象的赋值\",\"725\":\"v-02994507#对象的复制\",\"726\":\"v-02994507#复制构造函数\",\"727\":\"v-02994507#有关比较\",\"728\":\"v-02994507#对象的复制与赋值\",\"729\":\"v-02994507#普通构造函数和复制构造函数\",\"730\":\"v-02994507#对象数组\",\"731\":\"v-02994507#对象与指针\",\"732\":\"v-02994507#指向对象的指针-类比结构体指针\",\"733\":\"v-02994507#指向对象成员的指针\",\"734\":\"v-02994507#指向对象数据成员的指针\",\"735\":\"v-02994507#指向对象成员函数的指针\",\"736\":\"v-02994507#this-指针\",\"737\":\"v-02994507#类模板\",\"738\":\"v-02994507#声明\",\"739\":\"v-02994507#使用\",\"740\":\"v-02994507#在类模板外定义成员函数\",\"741\":\"v-02994507#总结\",\"742\":\"v-243b2b4f\",\"743\":\"v-243b2b4f#类的静态数据成员\",\"744\":\"v-243b2b4f#静态数据成员\",\"745\":\"v-243b2b4f#静态成员函数\",\"746\":\"v-33b71249\",\"747\":\"v-74b98ae3\",\"748\":\"v-74b98ae3#_1-继承与派生的概念\",\"749\":\"v-74b98ae3#_2-派生类的声明\",\"750\":\"v-74b98ae3#_3-派生类的构成\",\"751\":\"v-74b98ae3#_4-派生类成员的访问属性\",\"752\":\"v-74b98ae3#_5-区分-派生类对象-和-派生类-对基类成员的访问权限\",\"753\":\"v-c37a960e\",\"754\":\"v-7080cef4\",\"755\":\"v-7080cef4#枚举类型\",\"756\":\"v-7080cef4#结构体类型\",\"757\":\"v-7080cef4#定义\",\"758\":\"v-7080cef4#初始化\",\"759\":\"v-7080cef4#结构体数组\",\"760\":\"v-7080cef4#指向结构体变量的指针\",\"761\":\"v-7080cef4#链表\",\"762\":\"v-7080cef4#结构体变量型数据作为函数参数\",\"763\":\"v-08a65c0b\",\"764\":\"v-08a65c0b#利用虚函数实现动态多态性\",\"765\":\"v-08a65c0b#虚函数\",\"766\":\"v-08a65c0b#引入\",\"767\":\"v-08a65c0b#虚函数概念\",\"768\":\"v-08a65c0b#虚函数的作用\",\"769\":\"v-08a65c0b#举例\",\"770\":\"v-08a65c0b#静态关联与动态关联\",\"771\":\"v-13bf366e\",\"772\":\"v-49d2d06f\",\"773\":\"v-49d2d06f#标准输入输出流\",\"774\":\"v-49d2d06f#标准输出流\",\"775\":\"v-49d2d06f#cout流对象\",\"776\":\"v-49d2d06f#cerr流\",\"777\":\"v-49d2d06f#clog流对象\",\"778\":\"v-49d2d06f#标准类型数据的格式输出\",\"779\":\"v-49d2d06f#用流成员函数-put输出字符\",\"780\":\"v-49d2d06f#标准输入流\",\"781\":\"v-49d2d06f#对ascii文件的操作\",\"782\":\"v-49d2d06f#对二进制文件的操作\",\"783\":\"v-49d2d06f#文件与文件流\",\"784\":\"v-49d2d06f#概念\",\"785\":\"v-49d2d06f#分类\",\"786\":\"v-49d2d06f#i-o功能\",\"787\":\"v-49d2d06f#高级的i-o\",\"788\":\"v-49d2d06f#低级的i-o\",\"789\":\"v-49d2d06f#文件流与文件流对象\",\"790\":\"v-49d2d06f#文件流\",\"791\":\"v-49d2d06f#用于文件操作的文件类\",\"792\":\"v-49d2d06f#文件的打开与关闭\",\"793\":\"v-49d2d06f#打开磁盘文件\",\"794\":\"v-49d2d06f#关闭磁盘文件\",\"795\":\"v-26da8b01\",\"796\":\"v-26da8b01#表达式\",\"797\":\"v-26da8b01#算术运算与算术表达式\",\"798\":\"v-26da8b01#基本算术运算\",\"799\":\"v-26da8b01#不同数值类型的混合运算-隐式类型转换\",\"800\":\"v-26da8b01#自增自减运算符\",\"801\":\"v-26da8b01#强制类型转换运算符\",\"802\":\"v-26da8b01#赋值运算与赋值表达式\",\"803\":\"v-26da8b01#赋值运算符\",\"804\":\"v-26da8b01#复制过程中的类型转换\",\"805\":\"v-26da8b01#复合赋值运算符\",\"806\":\"v-26da8b01#赋值表达式\",\"807\":\"v-26da8b01#逗号运算符和逗号表达式\",\"808\":\"v-26da8b01#条件运算符与条件表达式\",\"809\":\"v-26da8b01#关系运算与关系表达式\",\"810\":\"v-26da8b01#逻辑运算与逻辑表达式\",\"811\":\"v-26da8b01#运算符\",\"812\":\"v-26da8b01#运算符的优先级、结合性与目数\",\"813\":\"v-26da8b01#优先级\",\"814\":\"v-26da8b01#目数\",\"815\":\"v-26da8b01#结合性\",\"816\":\"v-26da8b01#语句\",\"817\":\"v-26da8b01#选择控制语句\",\"818\":\"v-26da8b01#多分支选择结构与-switch-语句\",\"819\":\"v-26da8b01#循环结构和循环语句\",\"820\":\"v-599fb74d\",\"821\":\"v-d4846dc4\",\"822\":\"v-4d46c711\",\"823\":\"v-de0a6680\",\"824\":\"v-50fe2c92\",\"825\":\"v-50fe2c92#单向链表结构\",\"826\":\"v-50fe2c92#动态链表\",\"827\":\"v-50fe2c92#链表的遍历\",\"828\":\"v-50fe2c92#链表结点的删除\",\"829\":\"v-50fe2c92#链表结点的插入\",\"830\":\"v-50fe2c92#整合\",\"831\":\"v-dc194336\",\"832\":\"v-2b74c415\",\"833\":\"v-8a88ea92\",\"834\":\"v-5d2d926a\",\"835\":\"v-5aef9b28\",\"836\":\"v-6644083e\",\"837\":\"v-6644083e#参数\",\"838\":\"v-6644083e#例子\",\"839\":\"v-43879dfa\",\"840\":\"v-07f69e34\",\"841\":\"v-07f69e34#如何关闭tensorboard服务器\",\"842\":\"v-bb09af6e\",\"843\":\"v-bb09af6e#问题\",\"844\":\"v-bb09af6e#解决方案1\",\"845\":\"v-bb09af6e#解决方案2\",\"846\":\"v-3ef36ef2\",\"847\":\"v-51953a71\",\"848\":\"v-51953a71#torch-mean\",\"849\":\"v-51953a71#torch-split\",\"850\":\"v-51953a71#torch-sum\",\"851\":\"v-51953a71#torch-matmul\",\"852\":\"v-282cca41\",\"853\":\"v-548b668b\",\"854\":\"v-548b668b#_1-通过nn-module类来实现自定义的损失函数\",\"855\":\"v-548b668b#_2-通过直接定义函数来完成\",\"856\":\"v-59686f6e\",\"857\":\"v-59686f6e#出发点\",\"858\":\"v-59686f6e#成果\",\"859\":\"v-59686f6e#train\",\"860\":\"v-59686f6e#infer\",\"861\":\"v-59686f6e#结果\",\"862\":\"v-59686f6e#diffusioncllp\",\"863\":\"v-59686f6e#问题\",\"864\":\"v-59686f6e#方法\",\"865\":\"v-59686f6e#总结\",\"866\":\"v-e181fcf4\",\"867\":\"v-e181fcf4#_1-difussion\",\"868\":\"v-e181fcf4#_2-training\",\"869\":\"v-e181fcf4#_3-sampling\",\"870\":\"v-e181fcf4@0\",\"871\":\"v-c6912f30\",\"872\":\"v-c6912f30#related-work\",\"873\":\"v-c6912f30#method\",\"874\":\"v-c6912f30#网络架构\",\"875\":\"v-c6912f30#result\",\"876\":\"v-035ec0c2\",\"877\":\"v-035ec0c2#相关工作\",\"878\":\"v-035ec0c2#方法\",\"879\":\"v-035ec0c2#理论依据\",\"880\":\"v-035ec0c2#intra-attention-similarity\",\"881\":\"v-035ec0c2#inter-attention-similarity\",\"882\":\"v-035ec0c2#attention-map\",\"883\":\"v-035ec0c2#attention-aggregation\",\"884\":\"v-035ec0c2#iterative-attention-merging\",\"885\":\"v-035ec0c2#结果\",\"886\":\"v-035ec0c2#类似工作\",\"887\":\"v-035ec0c2#affinitynet\",\"888\":\"v-035ec0c2#diffumasks\",\"889\":\"v-035ec0c2#reco\",\"890\":\"v-035ec0c2#network-free\",\"891\":\"v-035ec0c2#toco\",\"892\":\"v-035ec0c2#ptc-patch-token-contrast\",\"893\":\"v-035ec0c2#ctc-classtokencontrast\",\"894\":\"v-aa1f950a\",\"895\":\"v-488176fb\",\"896\":\"v-488176fb#用-sde-描述扩散模型\",\"897\":\"v-488176fb#sde-based-diffusion-process\",\"898\":\"v-488176fb#与之前工作的联系\",\"899\":\"v-488176fb#ve-sde\",\"900\":\"v-488176fb#vp-sde\",\"901\":\"v-0e61795b\",\"902\":\"v-0e61795b#生成模型\",\"903\":\"v-0e61795b#概率密度函数\",\"904\":\"v-0e61795b#score-based-models\",\"905\":\"v-0e61795b#langevin-dynamics\",\"906\":\"v-0e61795b#ddpm\",\"907\":\"v-0e61795b#sr3\",\"908\":\"v-0e61795b#训练过程\",\"909\":\"v-0e61795b#推理过程\",\"910\":\"v-0e61795b#实验结果\",\"911\":\"v-261db443\",\"912\":\"v-261db443#生成模型分类\",\"913\":\"v-261db443#方法\",\"914\":\"v-261db443#问题\",\"915\":\"v-261db443#在数据密度较低的位置-score的估计往往是不准确的\",\"916\":\"v-261db443#要加少强度的噪声\",\"917\":\"v-261db443#求-score\",\"918\":\"v-261db443#目标函数\",\"919\":\"v-261db443#image-inpainting\",\"920\":\"v-261db443#总结\",\"921\":\"v-7910f925\",\"922\":\"v-7910f925#intro\",\"923\":\"v-7910f925#潜在空间-lantent-space\",\"924\":\"v-7910f925#latent-diffusion\",\"925\":\"v-7910f925#感知压缩\",\"926\":\"v-7910f925#语义压缩\",\"927\":\"v-7910f925#method\",\"928\":\"v-7910f925#autoencoder\",\"929\":\"v-7910f925#clip-text-encder\",\"930\":\"v-7910f925#unet\",\"931\":\"v-7910f925#应用\",\"932\":\"v-7910f925#text2image\",\"933\":\"v-7910f925#image2image\",\"934\":\"v-7910f925#image-inpainting\",\"935\":\"v-7910f925#总结\",\"936\":\"v-19cabfd0\",\"937\":\"v-19cabfd0#基于迭代去噪过程的图像编辑\",\"938\":\"v-19cabfd0#ivlr-conditioning-method-for-denoising-diffusion-probabilistic-models\",\"939\":\"v-19cabfd0#sdedit\",\"940\":\"v-19cabfd0#repaint-inpainting-using-denoising-diffusion-probabilistic-models\",\"941\":\"v-19cabfd0#基于显式分类器的图像引导生成\",\"942\":\"v-19cabfd0#diffusion-models-beat-gans-on-image-synthesis\",\"943\":\"v-19cabfd0#基于clip模型的多模态图像引导生成\",\"944\":\"v-19cabfd0#more-control-for-free-image-synthesis-with-semantic-diffusion-guidance\",\"945\":\"v-19cabfd0#blended-diffusion-for-text-driven-editing-of-natural-images\",\"946\":\"v-19cabfd0#基于隐式分类器的文生图大模型\",\"947\":\"v-19cabfd0#classifier-free-diffusion-guidance\",\"948\":\"v-0b6c9337\",\"949\":\"v-0b6c9337#unconditional-ddpm\",\"950\":\"v-0b6c9337#guided-diffusion-diffusion-models-beat-gans-on-image-synthesis\",\"951\":\"v-0b6c9337#ilvr-conditioning-method-for-denoising-diffusion-probabilistic-models\",\"952\":\"v-0b6c9337#创新点\",\"953\":\"v-0b6c9337#diffusion-probabilistic-models-for-3d-point-cloud-generation\",\"954\":\"v-e7ad3600\",\"955\":\"v-e7ad3600#motion-supervision\",\"956\":\"v-e7ad3600#point-tracking\",\"957\":\"v-90d472c0\",\"958\":\"v-77064f0f\",\"959\":\"v-77064f0f#mapping-network\",\"960\":\"v-77064f0f#latent-space-interpolations\",\"961\":\"v-77064f0f#style-mixing\",\"962\":\"v-77064f0f#stochastic-variation\",\"963\":\"v-77064f0f#perceptual-path-length\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[0,1],\"1\":[3,3],\"2\":[1],\"3\":[2,53],\"4\":[2,69],\"5\":[1,87],\"6\":[1],\"7\":[2],\"8\":[6,138],\"9\":[1],\"10\":[6,189],\"11\":[2,83],\"12\":[3],\"13\":[7,167],\"14\":[2],\"15\":[5,57],\"16\":[8,64],\"17\":[12,79],\"18\":[1],\"19\":[5,134],\"20\":[2,114],\"21\":[1],\"22\":[1,69],\"23\":[1,91],\"24\":[2,52],\"25\":[2,75],\"26\":[4,19],\"27\":[3,91],\"28\":[2,80],\"29\":[4,41],\"30\":[5,192],\"31\":[2,81],\"32\":[7,87],\"33\":[3,34],\"34\":[8,104],\"35\":[2,60],\"36\":[3,65],\"37\":[3,38],\"38\":[4,207],\"39\":[4,95],\"40\":[2,32],\"41\":[2,192],\"42\":[2,103],\"43\":[3,105],\"44\":[2,133],\"45\":[3,21],\"46\":[4,63],\"47\":[0,11],\"48\":[2,35],\"49\":[8,89],\"50\":[13,40],\"51\":[12,97],\"52\":[15,98],\"53\":[4,173],\"54\":[1,132],\"55\":[11,144],\"56\":[9,25],\"57\":[1],\"58\":[2,25],\"59\":[1],\"60\":[9,16],\"61\":[10,20],\"62\":[1,29],\"63\":[1,35],\"64\":[1,38],\"65\":[2,40],\"66\":[3,4],\"67\":[0,11],\"68\":[1],\"69\":[4,124],\"70\":[4,135],\"71\":[4,141],\"72\":[4,240],\"73\":[11,46],\"74\":[13,32],\"75\":[11,71],\"76\":[4,24],\"77\":[4,69],\"78\":[6,27],\"79\":[4],\"80\":[7,77],\"81\":[4,103],\"82\":[6,142],\"83\":[6,47],\"84\":[6,41],\"85\":[4,192],\"86\":[4,147],\"87\":[4,62],\"88\":[4,56],\"89\":[7,82],\"90\":[14,66],\"91\":[14,54],\"92\":[4],\"93\":[3,69],\"94\":[3,96],\"95\":[3,81],\"96\":[3,113],\"97\":[3,167],\"98\":[10,56],\"99\":[3,118],\"100\":[5,157],\"101\":[3],\"102\":[1,118],\"103\":[1,266],\"104\":[2,196],\"105\":[1,125],\"106\":[3,125],\"107\":[10,117],\"108\":[12],\"109\":[1],\"110\":[2,83],\"111\":[4],\"112\":[8,71],\"113\":[10,77],\"114\":[10,77],\"115\":[9,62],\"116\":[10,61],\"117\":[4],\"118\":[10,63],\"119\":[10,65],\"120\":[4],\"121\":[8,60],\"122\":[9,94],\"123\":[10,76],\"124\":[4],\"125\":[9,71],\"126\":[10,230],\"127\":[4],\"128\":[9,116],\"129\":[9],\"130\":[3],\"131\":[10],\"132\":[9],\"133\":[2],\"134\":[2,5],\"135\":[8],\"136\":[2],\"137\":[10,258],\"138\":[14,119],\"139\":[13,115],\"140\":[2],\"141\":[2,18],\"142\":[9,40],\"143\":[15,60],\"144\":[2],\"145\":[2],\"146\":[9,48],\"147\":[2],\"148\":[12,49],\"149\":[4],\"150\":[2],\"151\":[2],\"152\":[9,75],\"153\":[11,108],\"154\":[8],\"155\":[0,3],\"156\":[1],\"157\":[11],\"158\":[3],\"159\":[4],\"160\":[3,39],\"161\":[6],\"162\":[7],\"163\":[6,10],\"164\":[1,7],\"165\":[6,66],\"166\":[16,47],\"167\":[1],\"168\":[7,86],\"169\":[4,22],\"170\":[3,69],\"171\":[3,30],\"172\":[7,79],\"173\":[4],\"174\":[3,165],\"175\":[11,130],\"176\":[4],\"177\":[7,18],\"178\":[4,6],\"179\":[6,18],\"180\":[7,13],\"181\":[6,21],\"182\":[7,38],\"183\":[7],\"184\":[2,69],\"185\":[2,10],\"186\":[4,82],\"187\":[11],\"188\":[2,63],\"189\":[2,45],\"190\":[0],\"191\":[5,214],\"192\":[1,138],\"193\":[4,128],\"194\":[3,75],\"195\":[1,190],\"196\":[8,62],\"197\":[3,55],\"198\":[3,118],\"199\":[1,148],\"200\":[1,68],\"201\":[3,141],\"202\":[4,106],\"203\":[3,59],\"204\":[4,23],\"205\":[4,24],\"206\":[1],\"207\":[5],\"208\":[3,91],\"209\":[4,100],\"210\":[2,138],\"211\":[3,85],\"212\":[11,8],\"213\":[4],\"214\":[4,65],\"215\":[3],\"216\":[5,28],\"217\":[5,108],\"218\":[4,171],\"219\":[5,26],\"220\":[5,232],\"221\":[6,54],\"222\":[2,285],\"223\":[1,212],\"224\":[6,29],\"225\":[5,253],\"226\":[4,182],\"227\":[7,189],\"228\":[4,302],\"229\":[1,136],\"230\":[5],\"231\":[6],\"232\":[7,56],\"233\":[5,36],\"234\":[4,59],\"235\":[4,48],\"236\":[2],\"237\":[10,45],\"238\":[4],\"239\":[4],\"240\":[6],\"241\":[7],\"242\":[1,155],\"243\":[3,32],\"244\":[6,87],\"245\":[6,190],\"246\":[7,317],\"247\":[4,94],\"248\":[6,59],\"249\":[1,63],\"250\":[4,45],\"251\":[6],\"252\":[6],\"253\":[4],\"254\":[1,167],\"255\":[2,37],\"256\":[1,38],\"257\":[1,117],\"258\":[1],\"259\":[7,123],\"260\":[1,72],\"261\":[1,129],\"262\":[1,112],\"263\":[1,87],\"264\":[1,12],\"265\":[1,33],\"266\":[4,21],\"267\":[1],\"268\":[2,98],\"269\":[2,3],\"270\":[2,107],\"271\":[1,39],\"272\":[4,42],\"273\":[1,131],\"274\":[1],\"275\":[3,14],\"276\":[2,53],\"277\":[1,94],\"278\":[4,8],\"279\":[1],\"280\":[3,45],\"281\":[5,40],\"282\":[6,160],\"283\":[4,59],\"284\":[4,97],\"285\":[2,7],\"286\":[11,3],\"287\":[1],\"288\":[1,99],\"289\":[6],\"290\":[3,188],\"291\":[3,31],\"292\":[6,76],\"293\":[4,111],\"294\":[3,111],\"295\":[2,23],\"296\":[1],\"297\":[2,4],\"298\":[2,71],\"299\":[2,164],\"300\":[2,61],\"301\":[1,95],\"302\":[1],\"303\":[3,164],\"304\":[3,211],\"305\":[2,147],\"306\":[3,65],\"307\":[1,73],\"308\":[3,136],\"309\":[3,123],\"310\":[2,53],\"311\":[1,60],\"312\":[1,195],\"313\":[1,58],\"314\":[5,179],\"315\":[4,126],\"316\":[2,47],\"317\":[2,68],\"318\":[1,75],\"319\":[1,80],\"320\":[8,103],\"321\":[5,76],\"322\":[3,161],\"323\":[3,83],\"324\":[1],\"325\":[1,85],\"326\":[1],\"327\":[1,31],\"328\":[1],\"329\":[5,11],\"330\":[8],\"331\":[3,15],\"332\":[5,137],\"333\":[4],\"334\":[5,65],\"335\":[4],\"336\":[4],\"337\":[7,50],\"338\":[2,59],\"339\":[2],\"340\":[0,65],\"341\":[5],\"342\":[4,177],\"343\":[1,15],\"344\":[1,203],\"345\":[4],\"346\":[3],\"347\":[1,79],\"348\":[2,112],\"349\":[3,118],\"350\":[6,65],\"351\":[6,16],\"352\":[4],\"353\":[1,70],\"354\":[1,111],\"355\":[1,223],\"356\":[4,72],\"357\":[1,173],\"358\":[5,55],\"359\":[1,103],\"360\":[2,35],\"361\":[4,71],\"362\":[3],\"363\":[3,14],\"364\":[3,26],\"365\":[4],\"366\":[6,122],\"367\":[6,30],\"368\":[1],\"369\":[9,73],\"370\":[3,240],\"371\":[1,113],\"372\":[1,261],\"373\":[2,39],\"374\":[3,12],\"375\":[3,38],\"376\":[1],\"377\":[0,35],\"378\":[3],\"379\":[1,247],\"380\":[1,268],\"381\":[3],\"382\":[3],\"383\":[3,54],\"384\":[3,47],\"385\":[13,37],\"386\":[1,113],\"387\":[3],\"388\":[3,8],\"389\":[3,7],\"390\":[2,109],\"391\":[1,98],\"392\":[1,182],\"393\":[3,44],\"394\":[1,100],\"395\":[1,107],\"396\":[1,64],\"397\":[3,18],\"398\":[1,144],\"399\":[1,179],\"400\":[1,29],\"401\":[1,28],\"402\":[2,84],\"403\":[3],\"404\":[2,58],\"405\":[2,17],\"406\":[2,76],\"407\":[5],\"408\":[1,44],\"409\":[1,46],\"410\":[5,80],\"411\":[4,108],\"412\":[3,28],\"413\":[3,44],\"414\":[1],\"415\":[3,48],\"416\":[4,53],\"417\":[1,74],\"418\":[5],\"419\":[1,159],\"420\":[2],\"421\":[3,3],\"422\":[9,162],\"423\":[1,92],\"424\":[1,36],\"425\":[1,64],\"426\":[8,125],\"427\":[1,127],\"428\":[1,76],\"429\":[1,89],\"430\":[1],\"431\":[1],\"432\":[1],\"433\":[1],\"434\":[2],\"435\":[11,13],\"436\":[9,122],\"437\":[4,63],\"438\":[2],\"439\":[3],\"440\":[4],\"441\":[1],\"442\":[1],\"443\":[1],\"444\":[1],\"445\":[4],\"446\":[7,89],\"447\":[3],\"448\":[4],\"449\":[3,91],\"450\":[2],\"451\":[6,248],\"452\":[2],\"453\":[2,28],\"454\":[3,8],\"455\":[2],\"456\":[4,22],\"457\":[5,39],\"458\":[5,20],\"459\":[5,32],\"460\":[6,40],\"461\":[4,52],\"462\":[7,28],\"463\":[1,7],\"464\":[1,9],\"465\":[2,60],\"466\":[3],\"467\":[4,68],\"468\":[6,46],\"469\":[5,95],\"470\":[2],\"471\":[5,70],\"472\":[4],\"473\":[4,13],\"474\":[3],\"475\":[4,10],\"476\":[5,202],\"477\":[4],\"478\":[3],\"479\":[4],\"480\":[8,75],\"481\":[2],\"482\":[2],\"483\":[4],\"484\":[8,73],\"485\":[9,123],\"486\":[3],\"487\":[1],\"488\":[1],\"489\":[1,3],\"490\":[1],\"491\":[1],\"492\":[5,99],\"493\":[1],\"494\":[1],\"495\":[1],\"496\":[4],\"497\":[1],\"498\":[1],\"499\":[1,20],\"500\":[2,72],\"501\":[1,2],\"502\":[2,87],\"503\":[0,23],\"504\":[1,12],\"505\":[4],\"506\":[1],\"507\":[3],\"508\":[3],\"509\":[3,30],\"510\":[3,12],\"511\":[4,10],\"512\":[2,12],\"513\":[1],\"514\":[2,3],\"515\":[3],\"516\":[4],\"517\":[7],\"518\":[4],\"519\":[7],\"520\":[4],\"521\":[5],\"522\":[7,43],\"523\":[8,8],\"524\":[6,96],\"525\":[3,66],\"526\":[3],\"527\":[5,115],\"528\":[6,174],\"529\":[5,166],\"530\":[5,203],\"531\":[8,117],\"532\":[10,82],\"533\":[5],\"534\":[1,120],\"535\":[3,85],\"536\":[1,51],\"537\":[1,64],\"538\":[2,69],\"539\":[3,93],\"540\":[3,95],\"541\":[3,95],\"542\":[5,87],\"543\":[3,64],\"544\":[1,71],\"545\":[3,205],\"546\":[3,82],\"547\":[1,8],\"548\":[1,42],\"549\":[4,9],\"550\":[2,12],\"551\":[4,16],\"552\":[5,15],\"553\":[2,15],\"554\":[6,15],\"555\":[6],\"556\":[3,21],\"557\":[3,19],\"558\":[3,19],\"559\":[3,128],\"560\":[3,24],\"561\":[3,29],\"562\":[5,18],\"563\":[3,121],\"564\":[1,16],\"565\":[1,15],\"566\":[1,26],\"567\":[2,27],\"568\":[2,26],\"569\":[1],\"570\":[1,80],\"571\":[4,41],\"572\":[1,51],\"573\":[1,95],\"574\":[2,111],\"575\":[3,51],\"576\":[1,71],\"577\":[1,79],\"578\":[3,14],\"579\":[5],\"580\":[1],\"581\":[4,34],\"582\":[4,4],\"583\":[3,114],\"584\":[2,52],\"585\":[2,38],\"586\":[1,89],\"587\":[3,65],\"588\":[1],\"589\":[2,124],\"590\":[2,123],\"591\":[4,16],\"592\":[4,23],\"593\":[5],\"594\":[2,54],\"595\":[2,152],\"596\":[4,24],\"597\":[2,61],\"598\":[2,95],\"599\":[2,154],\"600\":[2,176],\"601\":[2,119],\"602\":[3,6],\"603\":[1,5],\"604\":[2,40],\"605\":[5,97],\"606\":[3,174],\"607\":[1,62],\"608\":[4],\"609\":[1,120],\"610\":[2,51],\"611\":[9,89],\"612\":[8,234],\"613\":[17,87],\"614\":[9,35],\"615\":[6,97],\"616\":[8,51],\"617\":[10,88],\"618\":[3,3],\"619\":[3,46],\"620\":[6,86],\"621\":[1,128],\"622\":[1],\"623\":[4,65],\"624\":[2,91],\"625\":[4,39],\"626\":[6,27],\"627\":[5],\"628\":[1],\"629\":[2],\"630\":[1],\"631\":[5],\"632\":[1,15],\"633\":[1,78],\"634\":[8,29],\"635\":[1,45],\"636\":[1],\"637\":[11,38],\"638\":[11,41],\"639\":[9,68],\"640\":[4,18],\"641\":[2],\"642\":[2,80],\"643\":[1],\"644\":[2,36],\"645\":[5,41],\"646\":[2],\"647\":[4,37],\"648\":[2,53],\"649\":[2,36],\"650\":[2,30],\"651\":[2,19],\"652\":[1,33],\"653\":[1,5],\"654\":[1,83],\"655\":[2,4],\"656\":[1,21],\"657\":[7,35],\"658\":[4,44],\"659\":[2,27],\"660\":[2],\"661\":[1,42],\"662\":[6,39],\"663\":[1,57],\"664\":[5,38],\"665\":[5,83],\"666\":[3,96],\"667\":[7,57],\"668\":[4,81],\"669\":[3,12],\"670\":[5,68],\"671\":[5,150],\"672\":[2,54],\"673\":[5,57],\"674\":[2],\"675\":[5,61],\"676\":[3,194],\"677\":[7,29],\"678\":[1],\"679\":[4],\"680\":[2,10],\"681\":[2,22],\"682\":[1,76],\"683\":[3,76],\"684\":[5,94],\"685\":[6,67],\"686\":[2,33],\"687\":[5,61],\"688\":[5,93],\"689\":[5,108],\"690\":[5,152],\"691\":[5,45],\"692\":[6,47],\"693\":[4,76],\"694\":[6,29],\"695\":[4,98],\"696\":[2,70],\"697\":[3,25],\"698\":[2,120],\"699\":[5],\"700\":[3],\"701\":[3,201],\"702\":[6,18],\"703\":[3,75],\"704\":[2,82],\"705\":[4,32],\"706\":[5,68],\"707\":[8,132],\"708\":[4,96],\"709\":[4,106],\"710\":[4,61],\"711\":[10],\"712\":[4,107],\"713\":[5,136],\"714\":[6,153],\"715\":[3,46],\"716\":[1,7],\"717\":[4,138],\"718\":[4,121],\"719\":[6,64],\"720\":[2,88],\"721\":[4,143],\"722\":[5,199],\"723\":[5],\"724\":[3,125],\"725\":[3,44],\"726\":[2,82],\"727\":[2],\"728\":[5,22],\"729\":[4,110],\"730\":[2,134],\"731\":[3],\"732\":[9,89],\"733\":[5,11],\"734\":[6,55],\"735\":[6,123],\"736\":[3,70],\"737\":[2,23],\"738\":[1,99],\"739\":[1,58],\"740\":[7,67],\"741\":[1,103],\"742\":[6],\"743\":[4,19],\"744\":[2,182],\"745\":[3,238],\"746\":[4],\"747\":[1,41],\"748\":[7,140],\"749\":[5,89],\"750\":[5,145],\"751\":[7,26],\"752\":[12,33],\"753\":[3],\"754\":[2],\"755\":[2,122],\"756\":[3,63],\"757\":[1,104],\"758\":[1,55],\"759\":[3,83],\"760\":[6,69],\"761\":[1,7],\"762\":[7,82],\"763\":[5],\"764\":[6],\"765\":[2],\"766\":[1,99],\"767\":[3,34],\"768\":[4,33],\"769\":[1,327],\"770\":[4,91],\"771\":[2],\"772\":[3],\"773\":[3],\"774\":[3,5],\"775\":[4,77],\"776\":[3,52],\"777\":[4,34],\"778\":[6,23],\"779\":[7,6],\"780\":[3,21],\"781\":[5,297],\"782\":[5,110],\"783\":[3],\"784\":[1,22],\"785\":[1,122],\"786\":[4,12],\"787\":[6,59],\"788\":[6,47],\"789\":[4,50],\"790\":[2,41],\"791\":[5,51],\"792\":[5],\"793\":[3,239],\"794\":[3,61],\"795\":[4],\"796\":[1],\"797\":[4],\"798\":[3,47],\"799\":[11,49],\"800\":[3,21],\"801\":[3,84],\"802\":[4],\"803\":[2,5],\"804\":[5,92],\"805\":[3,36],\"806\":[2,71],\"807\":[4,74],\"808\":[4,41],\"809\":[4,58],\"810\":[4,101],\"811\":[1,165],\"812\":[8],\"813\":[1,50],\"814\":[1,36],\"815\":[2,23],\"816\":[1,96],\"817\":[3,81],\"818\":[8,132],\"819\":[4,44],\"820\":[2],\"821\":[3],\"822\":[3],\"823\":[4],\"824\":[1,50],\"825\":[3,165],\"826\":[2,160],\"827\":[3,123],\"828\":[4,165],\"829\":[4,134],\"830\":[1,210],\"831\":[2],\"832\":[0,20],\"833\":[3,72],\"834\":[8,50],\"835\":[5,98],\"836\":[5,28],\"837\":[1,93],\"838\":[1,35],\"839\":[0,33],\"840\":[4,50],\"841\":[4,90],\"842\":[13],\"843\":[2,35],\"844\":[3,23],\"845\":[3,137],\"846\":[10,99],\"847\":[2],\"848\":[5,60],\"849\":[5,81],\"850\":[5],\"851\":[5],\"852\":[16,149],\"853\":[3],\"854\":[12,104],\"855\":[8,77],\"856\":[1,39],\"857\":[1,33],\"858\":[1,68],\"859\":[1,223],\"860\":[1,118],\"861\":[1],\"862\":[1,109],\"863\":[1,131],\"864\":[1,174],\"865\":[1,35],\"866\":[5],\"867\":[3,62],\"868\":[3,89],\"869\":[3,65],\"870\":[null,null,1],\"871\":[5,17],\"872\":[3,28],\"873\":[1,50],\"874\":[2,23],\"875\":[1,192],\"876\":[1,18],\"877\":[2,67],\"878\":[1],\"879\":[1],\"880\":[5,12],\"881\":[5,9],\"882\":[3,81],\"883\":[3,30],\"884\":[4,88],\"885\":[1],\"886\":[2],\"887\":[1,139],\"888\":[1,36],\"889\":[1,105],\"890\":[3,43],\"891\":[1,69],\"892\":[6,42],\"893\":[3,103],\"894\":[1,32],\"895\":[10,40],\"896\":[6,37],\"897\":[6,70],\"898\":[5],\"899\":[3,26],\"900\":[3,56],\"901\":[8,108],\"902\":[2,67],\"903\":[1,33],\"904\":[5,177],\"905\":[3,66],\"906\":[1,92],\"907\":[1,62],\"908\":[2,44],\"909\":[2,40],\"910\":[2,154],\"911\":[5,38],\"912\":[4,36],\"913\":[1,66],\"914\":[1],\"915\":[14,28],\"916\":[6,31],\"917\":[3,52],\"918\":[3,28],\"919\":[3],\"920\":[1,23],\"921\":[3,29],\"922\":[1,183],\"923\":[7,73],\"924\":[3,53],\"925\":[2,70],\"926\":[2,48],\"927\":[1,27],\"928\":[1,206],\"929\":[4,175],\"930\":[1,38],\"931\":[1],\"932\":[1],\"933\":[1],\"934\":[3],\"935\":[1,185],\"936\":[6,16],\"937\":[7],\"938\":[10,204],\"939\":[1,101],\"940\":[9,226],\"941\":[7,69],\"942\":[8,14],\"943\":[9],\"944\":[12,93],\"945\":[11,77],\"946\":[7],\"947\":[6,94],\"948\":[2],\"949\":[3,44],\"950\":[10,21],\"951\":[10,142],\"952\":[2,73],\"953\":[10,105],\"954\":[3],\"955\":[3,83],\"956\":[3,34],\"957\":[1,140],\"958\":[3,139],\"959\":[3,166],\"960\":[4,29],\"961\":[3,136],\"962\":[3,32],\"963\":[4,79]},\"averageFieldLength\":[3.769471073591837,79.28329093373756,0.001148105625717566],\"storedFields\":{\"0\":{\"h\":\"\",\"t\":[\"webserver\"]},\"1\":{\"h\":\"test 2\",\"t\":[\"TIP\",\"test\"]},\"2\":{\"h\":\"WebServer\"},\"3\":{\"h\":\"项目组成\",\"t\":[\"t\",\"⽹络模型是主从reactor加线程池的模式，IO处理使用了非阻塞IO和IO多路复用技术，具备处理多个客户端的http请求和ftp请求，以及对外提供轻量级储存的能力\",\"reactor + 线程池\",\"定时器处理非活动链接\",\"使用数据库连接池实现服务器访问数据库的功能，使用POST请求完成注册和登录的校验工作。\"]},\"4\":{\"h\":\"日志系统\",\"t\":[\"使用单例模式创建日志系统，对服务器运行状态、错误信息和访问数据进行记录，该系统可以实现按天分类，超行分类功能，可以根据实际情况分别使用同步和异步写入两种方式。\",\"其中异步写入方式，将生产者-消费者模型封装为阻塞队列，创建一个写线程，工作线程将要写的内容push进队列，写线程从队列中取出内容，写入日志文件。\",\"日志系统大致可以分成两部分，其一是单例模式与阻塞队列的定义，其二是日志类的定义与使用。\"]},\"5\":{\"h\":\"设计模式\",\"t\":[\"单例模式(Singleton)，保证一个类仅有一个实例，并提供一个访问它的全局访问点。\",\"单例模式可以分为懒汉式和饿汉式，两者之间的区别在于创建实例的时间不同：\",\"懒汉式：指系统运行中，实例并不存在，只有当需要使用该实例时，才会去创建并使用实例。（这种方式要考 虑线程安全）\",\"饿汉式：指系统⼀运行，就初始化创建实例，当需要时，直接调用即可。（本身就线程安全，没有多线程的问题）\",\"实现思路：私有化它的构造函数，以防止外界创建单例类的对象；使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例。\"]},\"6\":{\"h\":\"细节\"},\"7\":{\"h\":\"线程池\"},\"8\":{\"h\":\"为什么要使用线程池？\",\"t\":[\"空间换时间,浪费服务器的硬件资源,换取运行效率.\",\"池是一组资源的集合,这组资源在服务器启动之初就被完全创建好并初始化,这称为静态资源.\",\"当服务器进入正式运行阶段,开始处理客户请求的时候,如果它需要相关的资源,可以直接从池中获取,无需动态分配.\",\"当服务器处理完一个客户连接后,可以把相关的资源放回池中,无需执行系统调用释放资源.\",\"见线程池\",\"所谓线程池，就是一个pthread_t类型的普通数组，通过pthread_create()函数创建m_thread_number个线程，用来执行worker()函数以执行每个请求处理函数（HTTP请求的process函数），通过pthread_detach()将线程设置成脱离态（detached）后，当这一线程运行结束时，它的资源会被系统自动回收，而不再需要在其它线程中对其进行 pthread_join() 操作。\",\"操作工作队列一定要加锁（locker），因为它被所有线程共享。\",\"我们用信号量来标识请求队列中的请求数，通过m_queuestat.wait();来等待一个请求队列中待处理的HTTP请求，然后交给线程池中的空闲线程来处理。\"]},\"9\":{\"h\":\"数据库\"},\"10\":{\"h\":\"数据库连接池是如何运行的\",\"t\":[\"在处理用户注册，登录请求的时候，我们需要将这些用户的用户名和密码保存下来用于新用户的注册及老用户的登录校验，相信每个人都体验过，当你在一个网站上注册一个用户时，应该经常会遇到“您的用户名已被使用”，或者在登录的时候输错密码了网页会提示你“您输入的用户名或密码有误”等等类似情况，这种功能是服务器端通过用户键入的用户名密码和数据库中已记录下来的用户名密码数据进行校验实现的。若每次用户请求我们都需要新建一个数据库连接，请求结束后我们释放该数据库连接，当用户请求连接过多时，这种做法过于低效，所以类似线程池的做法，我们构建一个数据库连接池，预先生成一些数据库连接放在那里供用户请求使用。 (找不到mysql/mysql.h头文件的时候，需要安装一个库文件：sudo apt install libmysqlclient-dev) 我们首先看单个数据库连接是如何生成的：\",\"使用mysql_init()初始化连接\",\"使用mysql_real_connect()建立一个到mysql数据库的连接\",\"使用mysql_query()执行查询语句\",\"使用result = mysql_store_result(mysql)获取结果集\",\"使用mysql_num_fields(result)获取查询的列数，mysql_num_rows(result)获取结果集的行数\",\"通过mysql_fetch_row(result)不断获取下一行，然后循环输出\",\"使用mysql_free_result(result)释放结果集所占内存\",\"使用mysql_close(conn)关闭连接\",\"对于一个数据库连接池来讲，就是预先生成多个这样的数据库连接，然后放在一个链表中，同时维护最大连接数MAX_CONN，当前可用连接数FREE_CONN和当前已用连接数CUR_CONN这三个变量。同样注意在对连接池操作时（获取，释放），要用到锁机制，因为它被所有线程共享。\"]},\"11\":{\"h\":\"日志系统\",\"t\":[\"使用单例模式创建日志系统，对服务器运行状态、错误信息和访问数据进行记录，该系统可以实现按天分类，超行分类功能，可以根据实际情况分别使用同步和异步写入两种方式。\",\"其中异步写入方式，将生产者-消费者模型封装为阻塞队列，创建一个写线程，工作线程将要写的内容push进队列，写线程从队列中取出内容，写入日志文件。\",\"日志系统大致可以分成两部分，其一是单例模式与阻塞队列的定义，其二是日志类的定义与使用。\",\"最新版Web服务器项目详解 - 09 日志系统（上） (qq.com)\"]},\"12\":{\"h\":\"并发性问题\"},\"13\":{\"h\":\"reactor、proactor模型的区别？\",\"t\":[\"Reactor 是非阻塞同步网络模式，感知的是就绪可读写事件。在每次感知到有事件发生（比如可读就绪事 件）后，就需要应用进程主动调用 read 方法来完成数据的读取，也就是要应用进程主动将 socket 接收缓存 中的数据读到应用进程内存中，这个过程是同步的，读取完数据后应用进程才能处理数据。\",\"Proactor 是异步网络模式， 感知的是已完成的读写事件。在发起异步读写请求时，需要传入数据缓冲区的地 址（用来存放结果数据）等信息，这样系统内核才可以自动帮我们把数据的读写工作完成，这里的读写工作全 程由操作系统来做，并不需要像 Reactor 那样还需要应用进程主动发起 read/write 来读写数据，操作系统完 成读写工作后，就会通知应用进程直接处理数据。\",\"然而可惜的是，Linux下的异步 I/O 是不完善的，aio 系列函数是由 POSIX 定义的异步操作接口，不是真正的操作系统级别支持的，而是在用户空间模拟出来的异步，并且仅仅支持基于本地文件的 aio 异步操作，网络编程中的 socket 是不支持的，这也使得基于 Linux 的高性能网络程序都是使用 Reactor 方案。\",\"而 Windows 里实现了一套完整的支持 socket 的异步编程接口，这套接口就是 IOCP，是由操作系统级别实现的异步 I/O，真正意义上异步 I/O，因此在 Windows 里实现高性能网络程序可以使用效率更高的 Proactor 方案。\",\"优缺点\",\"优点\",\"性能确实是强大，效率也高\",\"缺点\",\"复杂。性能好，效率高，东西是好东西，但是使用起来就是复杂。 \",\"操作系统支持。上面提到过，Linux系统对异步IO支持不是很好，不是很完善\"]},\"14\":{\"h\":\"IO多路复用\"},\"15\":{\"h\":\"什么是ET，什么是LT\",\"t\":[\"LT：水平触发模式，只要内核缓冲区有数据就⼀直通知，只要socket处于可读状态或可写状态，就会⼀直返 回sockfd；是默认的工作模式，支持阻塞IO和非阻塞IO\",\"ET：边沿触发模式，只有状态发生变化才通知并且这个状态只会通知⼀次，只有当socket由不可写到可写或 由不可读到可读，才会返回其sockfd；只支持非阻塞IO\"]},\"16\":{\"h\":\"LT什么时候会触发？ET呢？\",\"t\":[\"LT模式\",\"对于读操作 \",\"只要内核读缓冲区不为空，LT模式返回读就绪。\",\"对于写操作 \",\"只要内核写缓冲区还不满，LT模式会返回写就绪。\",\"ET模式\",\"对于读操作 \",\"当缓冲区由不可读变为可读的时候，即缓冲区由空变为不空的时候。\",\"当有新数据到达时，即缓冲区中的待读数据变多的时候。\",\"当缓冲区有数据可读，且应用进程对相应的描述符进行EPOLL_CTL_MOD 修改EPOLLIN事件时。\",\"对于写操作 \",\"当缓冲区由不可写变为可写时。\",\"当有旧数据被发送走，即缓冲区中的内容变少的时候。\",\"当缓冲区有空间可写，且应用进程对相应的描述符进行EPOLL_CTL_MOD 修改EPOLLOUT事件时。\"]},\"17\":{\"h\":\"为什么ET模式不可以文件描述符阻塞，LT模式可以呢？\",\"t\":[\"因为ET模式是当fd有可读事件时，epoll_wait()只会通知⼀次，如果没有⼀次把数据读完，那么要到下⼀次fd 有可读事件epoll才会通知。而且在ET模式下，在触发可读事件后，需要循环读取信息，直到把数据读完。如 果把这个fd设置成阻塞，数据读完以后read()就阻塞在那了。无法进行后续请求的处理。\",\"LT模式不需要每次读完数据，只要有数据可读，epoll_wait()就会⼀直通知。所以 LT模式下去读的话，内核缓 冲区肯定是有数据可以读的，不会造成没有数据读而阻塞的情况。\"]},\"18\":{\"h\":\"优化\"},\"19\":{\"h\":\"定时器处理非活动链接\",\"t\":[\"项目中，我们预先分配了MAX_FD个http连接对象：\",\"// 预先为每个可能的客户连接分配一个http_conn对象 http_conn* users = new http_conn[MAX_FD]; \",\"如果某一用户connect()到服务器之后，长时间不交换数据，一直占用服务器端的文件描述符，导致连接资源的浪费。这时候就应该利用定时器把这些超时的非活动连接释放掉，关闭其占用的文件描述符。这种情况也很常见，当你登录一个网站后长时间没有操作该网站的网页，再次访问的时候你会发现需要重新登录。 项目中使用的是SIGALRM信号来实现定时器，利用alarm函数周期性的触发SIGALRM信号，信号处理函数利用管道通知主循环，主循环接收到该信号后对升序链表上所有定时器进行处理，若该段时间内没有交换数据，则将该连接关闭，释放所占用的资源。（具体请参考Linux高性能服务器编程 第11章 定时器和社长庖丁解牛：07定时器篇）\"]},\"20\":{\"h\":\"定时器优化\",\"t\":[\"这个基于升序双向链表实现的定时器存在着其固有缺点：\",\"每次遍历添加和修改定时器的效率偏低(O(n))，使用最小堆结构可以降低时间复杂度降至(O(logn))。\",\"每次以固定的时间间隔触发SIGALRM信号，调用tick函数处理超时连接会造成一定的触发浪费，举个例子，若当前的TIMESLOT=5，即每隔5ms触发一次SIGALRM，跳出循环执行tick函数，这时如果当前即将超时的任务距离现在还有20ms，那么在这个期间，SIGALRM信号被触发了4次，tick函数也被执行了4次，可是在这4次中，前三次触发都是无意义的。对此，我们可以动态的设置TIMESLOT的值，每次将其值设置为当前最先超时的定时器与当前时间的时间差，这样每次调用tick函数，超时时间最小的定时器必然到期，并被处理，然后在从时间堆中取一个最先超时的定时器的时间与当前时间做时间差，更新TIMESLOT的值。\"]},\"21\":{\"h\":\"基础知识\"},\"22\":{\"h\":\"RAII\",\"t\":[\"RAII全称是“Resource Acquisition is Initialization”，直译过来是“资源获取即初始化”.\",\"在构造函数中申请分配资源，在析构函数中释放资源。因为C++的语言机制保证了，当一个对象创建的时候，自动调用构造函数，当对象超出作用域的时候会自动调用析构函数。所以，在RAII的指导下，我们应该使用类来管理资源，将资源和对象的生命周期绑定\",\"RAII的核心思想是将资源或者状态与对象的生命周期绑定，通过C++的语言机制，实现资源和状态的安全管理,智能指针是RAII最好的例子\"]},\"23\":{\"h\":\"信号量\",\"t\":[\"信号量是一种特殊的变量，它只能取自然数值并且只支持两种操作：等待(P)和信号(V).假设有信号量SV，对其的P、V操作如下：\",\"P，如果SV的值大于0，则将其减一；若SV的值为0，则挂起执行\",\"V，如果有其他进行因为等待SV而挂起，则唤醒；若没有，则将SV值加一\",\"信号量的取值可以是任何自然数，最常用的，最简单的信号量是二进制信号量，只有0和1两个值.\",\"sem_init函数用于初始化一个未命名的信号量\",\"sem_destory函数用于销毁信号量\",\"sem_wait函数将以原子操作方式将信号量减一,信号量为0时,sem_wait阻塞\",\"sem_post函数以原子操作方式将信号量加一,信号量大于0时,唤醒调用sem_post的线程\",\"以上，成功返回0，失败返回errno\"]},\"24\":{\"h\":\"互斥量\",\"t\":[\"互斥锁,也成互斥量,可以保护关键代码段,以确保独占式访问.当进入关键代码段,获得互斥锁将其加锁;离开关键代码段,唤醒等待该互斥锁的线程.\",\"pthread_mutex_init函数用于初始化互斥锁\",\"pthread_mutex_destory函数用于销毁互斥锁\",\"pthread_mutex_lock函数以原子操作方式给互斥锁加锁\",\"pthread_mutex_unlock函数以原子操作方式给互斥锁解锁\",\"以上，成功返回0，失败返回errno\"]},\"25\":{\"h\":\"条件变量\",\"t\":[\"条件变量提供了一种线程间的通知机制,当某个共享数据达到某个值时,唤醒等待这个共享数据的线程.\",\"pthread_cond_init函数用于初始化条件变量\",\"pthread_cond_destory函数销毁条件变量\",\"pthread_cond_broadcast函数以广播的方式唤醒所有等待目标条件变量的线程\",\"pthread_cond_wait函数用于等待目标条件变量.该函数调用时需要传入 mutex参数(加锁的互斥锁) ,函数执行时,先把调用线程放入条件变量的请求队列,然后将互斥锁mutex解锁,当函数成功返回为0时,互斥锁会再次被锁上. 也就是说函数内部会有一次解锁和加锁操作.\"]},\"26\":{\"h\":\"锁机制的功能\",\"t\":[\"实现多线程同步，通过锁机制，确保任一时刻只能有一个线程能进入关键代码段.\"]},\"27\":{\"h\":\"封装的功能\",\"t\":[\"类中主要是Linux下三种锁进行封装，将锁的创建于销毁函数封装在类的构造与析构函数中，实现RAII机制\",\"class sem{ public: //构造函数 sem(){ //信号量初始化 if(sem_init(&m_sem,0,0)!=0){ throw std::exception(); } } //析构函数 ~sem(){ //信号量销毁 sem_destroy(&m_sem); } private: sem_t m_sem; }; \",\"将重复使用的代码封装为函数，减少代码的重复，使其更简洁\",\" //条件变量的使用机制需要配合锁来使用 //内部会有一次加锁和解锁 //封装起来会使得更加简洁 bool wait() { int ret=0; pthread_mutex_lock(&m_mutex); ret=pthread_cond_wait(&m_cond,&m_mutex); pthread_mutex_unlock(&m_mutex); return ret==0; } bool signal() { return pthread_cond_signal(&m_cond)==0; } \"]},\"28\":{\"h\":\"文件描述符\",\"t\":[\"（File descriptor）\",\"是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。在UNIX、Linux等操作系统中，文件描述符是一个非负整数，用于指代被打开的文件。每个进程都有一个文件描述符表，用于记录该进程打开的文件。\",\"在UNIX、Linux系统中，有三个标准的POSIX文件描述符¹：\",\"0：标准输入（STDIN_FILENO）\",\"1：标准输出（STDOUT_FILENO）\",\"2：标准错误（STDERR_FILENO）\",\"这些文件描述符在程序设计中经常被使用，例如，可以使用文件描述符来进行底层的I/O操作。不过需要注意的是，文件描述符这一概念主要适用于UNIX、Linux等操作系统，并不适用于所有操作系统。\"]},\"29\":{\"h\":\"服务器编程基本框架\",\"t\":[\"主要由I/O单元，逻辑单元和网络存储单元组成，其中每个单元之间通过请求队列进行通信，从而协同完成任务。\",\"其中I/O单元用于处理客户端连接，读写网络数据；逻辑单元用于处理业务逻辑的线程；网络存储单元指本地数据库和文件等。\"]},\"30\":{\"h\":\"五种I/O模型\",\"t\":[\"阻塞IO:调用者调用了某个函数，等待这个函数返回，期间什么也不做，不停的去检查这个函数有没有返回，必须等这个函数返回才能进行下一步动作\",\"非阻塞IO:非阻塞等待，每隔一段时间就去检测IO事件是否就绪。没有就绪就可以做其他事。非阻塞I/O执行系统调用总是立即返回，不管时间是否已经发生，若时间没有发生，则返回-1，此时可以根据errno区分这两种情况，对于accept，recv和send，事件未发生时，errno通常被设置成eagain\",\"信号驱动IO:linux用套接口进行信号驱动IO，安装一个信号处理函数，进程继续运行并不阻塞，当IO时间就绪，进程收到SIGIO信号。然后处理IO事件。\",\"IO复用:linux用select/poll函数实现IO复用模型，这两个函数也会使进程阻塞，但是和阻塞IO所不同的是这两个函数可以同时阻塞多个IO操作。而且可以同时对多个读操作、写操作的IO函数进行检测。知道有数据可读或可写时，才真正调用IO操作函数\",\"异步IO:linux中，可以调用aio_read函数告诉内核描述字缓冲区指针和缓冲区的大小、文件偏移及通知的方式，然后立即返回，当内核将数据拷贝到缓冲区后，再通知应用程序。\",\"注意\",\"阻塞I/O，非阻塞I/O，信号驱动I/O和I/O复用都是同步I/O。同步I/O指内核向应用程序通知的是就绪事件，比如只通知有客户端连接，要求用户代码自行执行I/O操作，\",\"异步I/O是指内核向应用程序通知的是完成事件，比如读取客户端的数据后才通知应用程序，由内核完成I/O操作。\",\"什么是同步I/O，什么是异步I/O呢？ 廖雪峰：异步IO一节给出解释\",\"同步（阻塞）I/O：在一个线程中，CPU执行代码的速度极快，然而，一旦遇到IO操作，如读写文件、发送网络数据时，就需要等待IO操作完成，才能继续进行下一步操作。这种情况称为同步IO。\",\"异步（非阻塞）I/O：当代码需要执行一个耗时的IO操作时，它只发出IO指令，并不等待IO结果，然后就去执行其他代码了。一段时间后，当IO返回结果时，再通知CPU进行处理。\"]},\"31\":{\"h\":\"事件处理模式\",\"t\":[\"reactor模式中，主线程(I/O处理单元)只负责监听文件描述符上是否有事件发生，有的话立即通知工作线程(逻辑单元 )，读写数据、接受新连接及处理客户请求均在工作线程中完成。通常由同步I/O实现。\",\"proactor模式中，主线程和内核负责处理读写数据、接受新连接等I/O操作，工作线程仅负责业务逻辑，如处理客户请求。通常由异步I/O实现。\",\"WARNING\",\"主从reactor就是将reactor分为主reactor和从reactor，主reactor中只负责连接的建立和分配，读取请求、 业务处理、返回响应等耗时的操作均在从reactor中处理，能够有效地应对高并发的场合。\"]},\"32\":{\"h\":\"同步I/O模拟proactor模式\",\"t\":[\"由于异步I/O并不成熟，实际中使用较少，这里将使用同步I/O模拟实现proactor模式。\",\"同步I/O模型的工作流程如下（epoll_wait为例）：\",\"主线程往epoll内核事件表注册socket上的读就绪事件。\",\"主线程调用epoll_wait等待socket上有数据可读\",\"当socket上有数据可读，epoll_wait通知主线程,主线程从socket循环读取数据，直到没有更多数据可读，然后将读取到的数据封装成一个请求对象并插入请求队列。\",\"睡眠在请求队列上某个工作线程被唤醒，它获得请求对象并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件\",\"主线程调用epoll_wait等待socket可写。\",\"当socket上有数据可写，epoll_wait通知主线程。主线程往socket上写入服务器处理客户请求的结果。\"]},\"33\":{\"h\":\"并发编程模式\",\"t\":[\"并发编程方法的实现有多线程和多进程两种，但这里涉及的并发模式指I/O处理单元与逻辑单元的协同完成任务的方法。\",\"半同步/半异步模式\",\"领导者/追随者模式\"]},\"34\":{\"h\":\"半同步/半反应堆 ## 没用这个\",\"t\":[\"半同步/半反应堆并发模式是半同步/半异步的变体，将半异步具体化为某种事件处理模式.\",\"并发模式中的同步和异步\",\"同步指的是程序完全按照代码序列的顺序执行\",\"异步指的是程序的执行需要由系统事件驱动\",\"半同步/半异步模式工作流程\",\"同步线程用于处理客户逻辑\",\"异步线程用于处理I/O事件\",\"异步线程监听到客户请求后，就将其封装成请求对象并插入请求队列中\",\"请求队列将通知某个工作在同步模式的工作线程来读取并处理该请求对象\",\"半同步/半反应堆工作流程（以Proactor模式为例）\",\"主线程充当异步线程，负责监听所有socket上的事件\",\"若有新请求到来，主线程接收之以得到新的连接socket，然后往epoll内核事件表中注册该socket上的读写事件\",\"如果连接socket上有读写事件发生，主线程从socket上接收数据，并将数据封装成请求对象插入到请求队列中\",\"所有工作线程睡眠在请求队列上，当有任务到来时，通过竞争（如互斥锁）获得任务的接管权\"]},\"35\":{\"h\":\"线程池\",\"t\":[\"空间换时间,浪费服务器的硬件资源,换取运行效率.\",\"池是一组资源的集合,这组资源在服务器启动之初就被完全创建好并初始化,这称为静态资源.\",\"当服务器进入正式运行阶段,开始处理客户请求的时候,如果它需要相关的资源,可以直接从池中获取,无需动态分配.\",\"当服务器处理完一个客户连接后,可以把相关的资源放回池中,无需执行系统调用释放资源.\"]},\"36\":{\"h\":\"静态成员变量\",\"t\":[\"将类成员变量声明为static，则为静态成员变量，与一般的成员变量不同，无论建立多少对象，都只有一个静态成员变量的拷贝，静态成员变量属于一个类，所有对象共享。\",\"静态变量在编译阶段就分配了空间，对象还没创建时就已经分配了空间，放到全局静态区。\",\"静态成员变量\",\"最好是类内声明，类外初始化（以免类名访问静态成员访问不到）。 \",\"无论公有，私有，静态成员都可以在类外定义，但私有成员仍有访问权限。\",\"非静态成员类外不能初始化。\",\"静态成员数据是共享的。\"]},\"37\":{\"h\":\"静态成员函数\",\"t\":[\"将类成员函数声明为static，则为静态成员函数。\",\"静态成员函数\",\"静态成员函数可以直接访问静态成员变量，不能直接访问普通成员变量，但可以通过参数传递的方式访问。 \",\"普通成员函数可以访问普通成员变量，也可以访问静态成员变量。\",\"静态成员函数没有this指针。非静态数据成员为对象单独维护，但静态成员函数为共享函数，无法区分是哪个对象，因此不能直接访问普通变量成员，也没有this指针。\"]},\"38\":{\"h\":\"select/poll/epoll\",\"t\":[\"调用函数\",\"select和poll都是一个函数，epoll是一组函数\",\"文件描述符数量\",\"select通过线性表描述文件描述符集合，文件描述符有上限，一般是1024，但可以修改源码，重新编译内核，不推荐 \",\"poll是链表描述，突破了文件描述符上限，最大可以打开文件的数目\",\"epoll通过红黑树描述，最大可以打开文件的数目，可以通过命令ulimit -n number修改，仅对当前终端有效\",\"将文件描述符从用户传给内核\",\"select和poll通过将所有文件描述符拷贝到内核态，每次调用都需要拷贝 \",\"epoll通过epoll_create建立一棵红黑树，通过epoll_ctl将要监听的文件描述符注册到红黑树上\",\"内核判断就绪的文件描述符\",\"select和poll通过遍历文件描述符集合，判断哪个文件描述符上有事件发生 \",\"epoll_create时，内核除了帮我们在epoll文件系统里建了个红黑树用于存储以后epoll_ctl传来的fd外，还会再建立一个list链表，用于存储准备就绪的事件，当epoll_wait调用时，仅仅观察这个list链表里有没有数据即可。\",\"epoll是根据每个fd上面的回调函数(中断函数)判断，只有发生了事件的socket才会主动的去调用 callback函数，其他空闲状态socket则不会，若是就绪事件，插入list\",\"应用程序索引就绪文件描述符\",\"select/poll只返回发生了事件的文件描述符的个数，若知道是哪个发生了事件，同样需要遍历 \",\"epoll返回的发生了事件的个数和结构体数组，结构体包含socket的信息，因此直接处理返回的数组即可\",\"工作模式\",\"select和poll都只能工作在相对低效的LT模式下 \",\"epoll则可以工作在ET高效模式，并且epoll还支持EPOLLONESHOT事件，该事件能进一步减少可读、可写和异常事件被触发的次数。\",\"应用场景\",\"当所有的fd都是活跃连接，使用epoll，需要建立文件系统，红黑书和链表对于此来说，效率反而不高，不如selece和poll \",\"当监测的fd数目较小，且各个fd都比较活跃，建议使用select或者poll\",\"当监测的fd数目非常大，成千上万，且单位时间只有其中的一部分fd处于就绪状态，这个时候使用epoll能够明显提升性能\"]},\"39\":{\"h\":\"ET、LT、EPOLLONESHOT\",\"t\":[\"LT水平触发模式\",\"epoll_wait检测到文件描述符有事件发生，则将其通知给应用程序，应用程序可以不立即处理该事件。 \",\"当下一次调用epoll_wait时，epoll_wait还会再次向应用程序报告此事件，直至被处理\",\"ET边缘触发模式\",\"epoll_wait检测到文件描述符有事件发生，则将其通知给应用程序，应用程序必须立即处理该事件 \",\"必须要一次性将数据读取完，使用非阻塞I/O，读取到出现eagain\",\"EPOLLONESHOT\",\"一个线程读取某个socket上的数据后开始处理数据，在处理过程中该socket上又有新数据可读，此时另一个线程被唤醒读取，此时出现两个线程处理同一个socket \",\"我们期望的是一个socket连接在任一时刻都只被一个线程处理，通过epoll_ctl对该文件描述符注册epolloneshot事件，一个线程处理socket时，其他线程将无法处理，当该线程处理完后，需要通过epoll_ctl重置epolloneshot事件\"]},\"40\":{\"h\":\"HTTP报文格式\",\"t\":[\"HTTP报文分为请求报文和响应报文两种，每种报文必须按照特有格式生成，才能被浏览器端识别。\",\"其中，浏览器端向服务器发送的为请求报文，服务器处理后返回给浏览器端的为响应报文。\"]},\"41\":{\"h\":\"请求报文\",\"t\":[\"HTTP请求报文由请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。\",\"其中，请求分为两种，GET和POST，具体的：\",\"GET\",\" 1 GET /562f25980001b1b106000338.jpg HTTP/1.1 2 Host:img.mukewang.com 3 User-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64) 4 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36 5 Accept:image/webp,image/*,*/*;q=0.8 6 Referer:http://www.imooc.com/ 7 Accept-Encoding:gzip, deflate, sdch 8 Accept-Language:zh-CN,zh;q=0.8 9 空行 10 请求数据为空 \",\"POST\",\"1 POST / HTTP1.1 2 Host:www.wrox.com 3 User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022) 4 Content-Type:application/x-www-form-urlencoded 5 Content-Length:40 6 Connection: Keep-Alive 7 空行 8 name=Professional%20Ajax&publisher=Wiley \",\"请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本。 GET说明请求类型为GET，/562f25980001b1b106000338.jpg(URL)为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。\",\"请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息。\",\"HOST，给出请求资源所在服务器的域名。 \",\"User-Agent，HTTP客户端程序的信息，该信息由你发出请求使用的浏览器来定义,并且在每个请求中自动发送等。\",\"Accept，说明用户代理可处理的媒体类型。\",\"Accept-Encoding，说明用户代理支持的内容编码。\",\"Accept-Language，说明用户代理能够处理的自然语言集。\",\"Content-Type，说明实现主体的媒体类型。\",\"Content-Length，说明实现主体的大小。\",\"Connection，连接管理，可以是Keep-Alive或close。\",\"空行，请求头部后面的空行是必须的即使第四部分的请求数据为空，也必须有空行。\",\"请求数据也叫主体，可以添加任意的其他数据。\"]},\"42\":{\"h\":\"响应报文\",\"t\":[\"HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。\",\" 1HTTP/1.1 200 OK 2Date: Fri, 22 May 2009 06:07:21 GMT 3Content-Type: text/html; charset=UTF-8 4空行 5<html> 6 <head></head> 7 <body> 8 <!--body goes here--> 9 </body> 10</html> \",\"状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。 第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为OK。\",\"消息报头，用来说明客户端要使用的一些附加信息。 第二行和第三行为消息报头，Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8。\",\"空行，消息报头后面的空行是必须的。\",\"响应正文，服务器返回给客户端的文本信息。空行后面的html部分为响应正文。\"]},\"43\":{\"h\":\"HTTP状态码\",\"t\":[\"HTTP有5种类型的状态码，具体的：\",\"1xx：指示信息--表示请求已接收，继续处理。\",\"2xx：成功--表示请求正常处理完毕。\",\"200 OK：客户端请求被正常处理。 \",\"206 Partial content：客户端进行了范围请求。\",\"3xx：重定向--要完成请求必须进行更进一步的操作。\",\"301 Moved Permanently：永久重定向，该资源已被永久移动到新位置，将来任何对该资源的访问都要使用本响应返回的若干个URI之一。 \",\"302 Found：临时重定向，请求的资源现在临时从不同的URI中获得。\",\"4xx：客户端错误--请求有语法错误，服务器无法处理请求。\",\"400 Bad Request：请求报文存在语法错误。 \",\"403 Forbidden：请求被服务器拒绝。\",\"404 Not Found：请求不存在，服务器上找不到请求的资源。\",\"5xx：服务器端错误--服务器处理请求出错。\",\"500 Internal Server Error：服务器在执行请求时出现错误。\"]},\"44\":{\"h\":\"有限状态机\",\"t\":[\"有限状态机，是一种抽象的理论模型，它能够把有限个变量描述的状态变化过程，以可构造可验证的方式呈现出来。比如，封闭的有向图。\",\"有限状态机可以通过if-else,switch-case和函数指针来实现，从软件工程的角度看，主要是为了封装逻辑。\",\"带有状态转移的有限状态机示例代码。\",\" 1STATE_MACHINE(){ 2 State cur_State = type_A; 3 while(cur_State != type_C){ 4 Package _pack = getNewPackage(); 5 switch(){ 6 case type_A: 7 process_pkg_state_A(_pack); 8 cur_State = type_B; 9 break; 10 case type_B: 11 process_pkg_state_B(_pack); 12 cur_State = type_C; 13 break; 14 } 15 } 16} \",\"该状态机包含三种状态：type_A，type_B和type_C。其中，type_A是初始状态，type_C是结束状态。\",\"状态机的当前状态记录在cur_State变量中，逻辑处理时，状态机先通过getNewPackage获取数据包，然后根据当前状态对数据进行处理，处理完后，状态机通过改变cur_State完成状态转移。\",\"有限状态机一种逻辑单元内部的一种高效编程方法，在服务器编程中，服务器可以根据不同状态或者消息类型进行相应的处理逻辑，使得程序逻辑清晰易懂。\"]},\"45\":{\"h\":\"http处理流程\",\"t\":[\"首先对http报文处理的流程进行简要介绍，然后具体介绍http类的定义和服务器接收http请求的具体过程。\"]},\"46\":{\"h\":\"http报文处理流程\",\"t\":[\"浏览器端发出http连接请求，主线程创建http对象接收请求并将所有数据读入对应buffer，将该对象插入任务队列，工作线程从任务队列中取出一个任务进行处理。(本篇讲)\",\"工作线程取出任务后，调用process_read函数，通过主、从状态机对请求报文进行解析。(中篇讲)\",\"解析完之后，跳转do_request函数生成响应报文，通过process_write写入buffer，返回给浏览器端。(下篇讲)\"]},\"47\":{\"h\":\"\",\"t\":[\"3d\",\"网络架构\",\"生成模型\",\"遥感\",\"交互式分割\",\"检测\"]},\"48\":{\"h\":\"交互式分割\",\"t\":[\"WARNING\",\"Segment Anything Model for Medical Image Analysis: an Experimental Study | Papers With Code\",\"SAM outperforms similar methods RITM, SimpleClick, and FocalClick in almost all single-point prompt settings.\"]},\"49\":{\"h\":\"Deep Interactive Object Selection. CVPR 2016\",\"t\":[\"Deep Interactive Object Selection 还用了 graph cut，处理FCN得到的概率图，得到最终的分割结果\",\"该篇为将深度学习引入交互式分割的开山之作，贡献在于搭建了点击式交互式分割的基本pipeline，以及train/val protocol, 这些规范都沿用至今, 对后面的文章产生了深远影响。 如下图，它将positive、negative点击用distance map进行表示，和原图concat成5-channel input送进分割模型，预测目标掩码。\",\"提出了为什么语义分割、检测为什么不能直接用于交互式分割的几个原因：\",\"模型泛化问题、没有见过的实例\"]},\"50\":{\"h\":\"Interactive image segmentation with first click attention. In CVPR, 2020.\",\"t\":[\"核心思想是：由于第一个点击一般都会点在目标物体的中心区域，所以第一个点击提供的信息应该比其他的点击多。于是该篇文章使用第一个点击生成attention对feature进行加权，也达到了更好的分割结果。\"]},\"51\":{\"h\":\"Interactive image segmentation via backpropagating refinement scheme. CVPR, 2019.\",\"t\":[\"Backpropagating Refinement Scheme for Interactive Segmentation 反向传播修正机制 (CVPR2019)_cvpr 2019\",\"传统的基于深度学习的交互式分割框架利用前向传播得到的结果，还是存在一定的偏差（比如交互部位在最后的分割结果中依然会被分割错）。因此提出 backpropagating refinement scheme 进行修正。\",\"Training phase 按照传统的基于深度学习的交互式分割框架训练模型。 Testing phase\",\"首先将待分割的图像和用户标注作为输入传入分割框架中进行前向传播得到初始分割结果。\",\"由于初始前向传播的分割结果可能存在于用户标注不匹配的部分，因此采用反向传播修正机制 修正 interaction map (而不是对模型进行 fine-tuning)，强制结果在用户交互的部分具有正确的结果。\",\"上述步骤1和步骤2交替进行，直到结果可以满意。 \"]},\"52\":{\"h\":\"f-brs: Rethinking backpropagating refinement for interactive segmentation. CVPR, 2020.\",\"t\":[\"这两篇文章的的探索方向相同，核心思想都是:\",\"用户施加的 postive/negative click都是有前景/背景label的，这些点击区域相当于有ground truth。\",\"所以这两篇文章利用点击点的label信息对模型参数进行在线微调。\",\"由此，模型对于特定的图片和特定的点击都会进行case by case的参数更新，从而达到更好的分割效果。\",\"Iteratively trained interactive segmentation\",\"[1805.04398] Iteratively Trained Interactive Segmentation (arxiv.org)\",\"新的迭代训练策略\",\"增加了一个mask作为每次迭代的输入\",\"Continuous Adaptation for Interactive Object Segmentation by Learning from Corrections. ECCV2020\",\"https://arxiv.org/abs/1911.12709\",\"非冻结的网络结构，每次推理都是对网络的微调\"]},\"53\":{\"h\":\"EdgeFlow. ICCV2021\",\"t\":[\"[2109.09406] EdgeFlow: Achieving Practical Interactive Segmentation with Edge-Guided Flow (arxiv.org)\",\"(13条消息) EdgeFlow(ICCV2021) 论文阅读笔记（理论篇）_QianZ423的博客-CSDN博客\",\"利用 HRNet-18 作为主干和 OCRNet 作为分割头\",\"早晚融合：\",\"在骨干网络之前融合了交互和图像特征，这就是所谓的早期融合。早期的融合方法普遍存在交互信息提取不正确的问题。交互特征比图像特征稀疏得多，并且包含高级信息，例如 位置信息。骨干网的早期层侧重于低层特征提取，因此交互特征会通过早期层被稀释，网络无法及时响应用户点击。\",\"为了防止特征稀释，作者提出了一种早晚融合策略来整合交互和图像特征。作者设计了多阶段特征融合，而不是仅在网络开始时融合特征\",\"边缘掩码方案，\",\"全掩码可能会使模型陷入局部最优\",\"该方案将前一次迭代估计的对象边缘作为先验信息，而不是直接掩码估计。边缘估计比输入的全掩码更稀疏且波动更小，因此可以提高分割的稳定性和效率。\",\"在交互式分割模型中，交互图像和边缘掩模特征是异构的，导致空间偏差很大。因此，有必要正确对齐这些。光流方法最初用于对齐视频中两个相邻帧的特征。在语义分割中，它对多尺度特征对齐同时融合不同层是有效的。受的启发，作者采用流模块来对齐图像和交互特征，以便可以精确表示空间信息。\"]},\"54\":{\"h\":\"RITM\",\"t\":[\"论文阅读 Reviving Iterative Training with Mask Guidance for Interactive Segmentation_络小绎的博客-CSDN博客_reviving iterative training with mask guidance for\",\"【论文阅读】Reviving Iterative Training with Mask Guidance for Interactive Segmentation-CSDN博客\",\"《Reviving Iterative Training with Mask Guidance for Interactive Segmentation》论文笔记_m_buddy的博客-CSDN博客](https://blog.csdn.net/m_buddy/article/details/115285213?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-115285213-blog-114885638.pc_relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-115285213-blog-114885638.pc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=6)\",\"核心思想：\",\"修修补补\",\"用户每一次点击，模型都会有一个mask预测的结果，它也可以提供很多信息。由此，该文章在每一次点击之后将上一次点击预测的mask和连同click map, image一起concat成6-channel input输入模型。同时该文章还在loss, 以及模型结构，训练数据等细节上进行了很多探究。 相比与前面的文章，该论文取得了较大的提升。\"]},\"55\":{\"h\":\"FocalClick: Towards Practical Interactive Image Segmentation (CVPR2022)\",\"t\":[\"核心思想：\",\"之前的方法太重了：轻量化的标注工具不希望用又慢又大的模型，如果标注人员达到一定规模。不可能给每个标注员配GPU。\",\"之前的方法没有兼容性：由于每次需要将所有的点击作为输入，对mask的每个像素进行新的预测，之前的方法根本不能和其他工具配合。举个例子，对人像进行精细分割标注时， 头发的细节需要用matting工具或者手工标注。当切换到别的工具标好了头发后，就无法切回交互式分割工具了。因为一旦用交互式分割工具打一个点，之前标好的头发区域也会被完全重新预测，相当于白标。同理，之前的方法也不能在已有的略带瑕疵的掩膜上进行修改。\",\"我们发现，问题就出在“每次点击后，模型会对所有像素全局重新预测”上。其实每一次点击都是有“小目标”的，如下图，这个点击在球拍上的new click的目标就是把球拍加入前景。由此，我们不需要对球员的区域进行重新预测和更改，只需要对球拍区域进行预测就好了，球员区域的预测保留。\",\"TIP\",\"新的子任务--interactive mask correction\",\"TIP\",\"EISeg正式开源-首个高性能交互式自动标注工具 (baidu.com)\",\"基于 EdgeFlow 和 RITM\"]},\"56\":{\"h\":\"Interactive Object Segmentation in 3D Point Clouds\",\"t\":[\"额外两个通道\",\"Tp​(p)={1,if∣xp​−xq​∣≤edgeand∣yp​−yq​∣≤edgeand∣zp​−zq​∣≤edge0,otherwise​\"]},\"57\":{\"h\":\"遥感\"},\"58\":{\"h\":\"主要方向\",\"t\":[\"面向港口、机场等复杂场景中的舰船、飞机、车辆实现高速、高精度的智能检测与识别 \",\"制导\",\"管理\",\"国土资源监测\"]},\"59\":{\"h\":\"现状\"},\"60\":{\"h\":\"基于手工特征的传统机器学习目标检测\",\"t\":[\"瓶颈：\",\"特征表达能力弱，难以适用于复杂场景， 易虚警和漏检\"]},\"61\":{\"h\":\"基于端到端自动提取特征的深度学习模型\",\"t\":[\"瓶颈：\",\"尺度、方向自适应 能力弱，易漏检\",\"模型计算复杂度高, 难部署\"]},\"62\":{\"h\":\"问题\",\"t\":[\"图像幅宽大、 目标密度低\",\"目标高长宽比， 且旋转多方向\",\"网络计算复杂度高， 平台计算资源有限\",\"网络分支与浮点运算 冗余，推理速度慢\"]},\"63\":{\"h\":\"需求\",\"t\":[\"遥感目标高精准快速检测，精度与速度的有效平衡\",\"目标形态：尺度多样、方向多样， 需要模型具有尺度、多方向自适应能力\",\"目标分布：位于机场、港口的目标常密集停放，需要模型具有密集抗干扰能力\"]},\"64\":{\"h\":\"难点\",\"t\":[\"现有检测架构处理遥感视场下的目标时， 存在区域、特征、标签三个方面的错位\",\"遥感图像幅宽大，有效密度低； 现有深度学习网络对每个切片精细处理，计算复杂度高\"]},\"65\":{\"h\":\"创新方向\",\"t\":[\"工程\",\"难点\",\"内容\",\"预期效果\",\"数据预处理\",\"图像幅宽大、 目标密度低\",\"网络设计\",\"目标高长宽比， 且旋转多方向\",\"网络压缩\",\"网络计算复杂度高， 平台计算资源有限\",\"硬件部署\",\"网络分支与浮点运算 冗余，推理速度慢\"]},\"66\":{\"h\":\"KMP 算法\",\"t\":[\"最长相等前后缀\"]},\"67\":{\"h\":\"\",\"t\":[\"代码随想录\",\"排序算法\",\"滑动窗口\",\"KMP算法\",\"二叉树\",\"回溯算法\",\"贪心算法\"]},\"68\":{\"h\":\"二叉树\"},\"69\":{\"h\":\"1. 理论基础\",\"t\":[\"链式储存二叉树\",\"struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; \",\"顺序储存\",\"01.树与二叉树的基础知识 | 算法通关手册 (itcharge.cn)\",\"从图中我们也可以看出节点之间的逻辑关系。\",\"如果某二叉树节点（非叶子节点）的下标为 i，那么其左孩子节点下标为 2∗i+1，右孩子节点下标为 2∗i+2。\",\"如果某二叉树节点（非根结点）的下标为$ i$，那么其根节点下标为 (i−1)//2。// 表示整除。\",\"对于完全二叉树（尤其是满二叉树）来说，采用顺序存储结构比较合适，它能充分利用存储空间；\",\"而对于一般二叉树，如果需要设置很多的「空节点」，则采用顺序存储结构就会浪费很多存储空间。并且，由于顺序存储结构固有的一些缺陷，会使得二叉树的插入、删除等操作不方便，效率也比较低。\",\"对于二叉树来说，当树的形态和大小经常发生动态变化时，更适合采用链式存储结构。\"]},\"70\":{\"h\":\"2. 递归遍历\",\"t\":[\"每次写递归，都按照这三要素来写\",\"确定递归函数的参数和返回值： 确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。\",\"确定终止条件： 写完了递归算法, 运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。\",\"确定单层递归的逻辑： 确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。\",\"144. 二叉树的前序遍历 - 力扣（LeetCode）\",\"94. 二叉树的中序遍历 - 力扣（LeetCode）\",\"145. 二叉树的后序遍历 - 力扣（LeetCode）\",\"举例：中序遍历\",\"/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: void traversal(TreeNode* cur, vector<int>& vec){ if(cur == nullptr) return; traversal(cur->left,vec); vec.push_back(cur->val); traversal(cur->right,vec); } vector<int> inorderTraversal(TreeNode* root) { vector<int> result; traversal(root, result); return result; } }; \"]},\"71\":{\"h\":\"3. 迭代遍历\",\"t\":[\"二叉树的前序遍历显式栈实现步骤如下：\",\"判断二叉树是否为空，为空则直接返回。\",\"初始化维护一个栈，将根节点入栈。\",\"当栈不为空时： \",\"弹出栈顶元素 node，并访问该元素。\",\"如果 node 的右子树不为空，则将 node 的右子树入栈。\",\"如果 node 的左子树不为空，则将 node 的左子树入栈。\",\"vector<int> preorderTraversal(TreeNode* root) { stack<TreeNode*> st; vector<int> result; if(root != nullptr) st.push(root); while(!st.empty()){ TreeNode* tmp = st.top(); st.pop(); result.push_back(tmp->val); if(tmp->right) st.push(tmp->right); if(tmp->left) st.push(tmp->left); } return result; } \",\"二叉树的中序遍历显式栈实现步骤如下：\",\"判断二叉树是否为空，为空则直接返回。\",\"初始化维护一个空栈。\",\"当根节点或者栈不为空时： \",\"如果当前节点不为空，则循环遍历左子树，并不断将当前子树的根节点入栈。\",\"如果当前节点为空，说明当前节点无左子树，则弹出栈顶元素 node，并访问该元素，然后尝试访问该节点的右子树。\",\"vector<int> inorderTraversal(TreeNode* root) { stack<TreeNode*> st; vector<int> result; TreeNode* cur = root; while(cur || !st.empty()){ if(cur){ st.push(cur); cur = cur->left; } else{ cur = st.top(); st.pop(); result.push_back(cur->val); cur = cur->right; } } return result; } \",\"二叉树的后序遍历显式栈实现步骤如下：\",\"判断二叉树是否为空，为空则直接返回。\",\"初始化维护一个空栈，使用 prev 保存前一个访问的节点，用于确定当前节点的右子树是否访问完毕。\",\"当根节点或者栈不为空时，从当前节点开始： \",\"如果当前节点有左子树，则不断遍历左子树，并将当前根节点压入栈中。\",\"如果当前节点无左子树，则弹出栈顶元素 node。\",\"如果栈顶元素 node 无右子树（即 not node.right）或者右子树已经访问完毕（即 node.right == prev），则访问该元素，然后记录前一节点，并将当前节点标记为空节点。\",\"如果栈顶元素有右子树，则将栈顶元素重新压入栈中，继续访问栈顶元素的右子树。\",\"// 或者改变前序入栈顺序，最后reverse数组 vector<int> postorderTraversal(TreeNode* root) { vector<int> result; stack<TreeNode*> st; if(root) st.push(root); while(!st.empty()){ TreeNode* tmp = st.top(); st.pop(); result.push_back(tmp->val); if(tmp->left) st.push(tmp->left); if(tmp->right) st.push(tmp->right); } reverse(result.begin(), result.end()); return result; } \",\"02.二叉树的遍历知识 | 算法通关手册 (itcharge.cn)\"]},\"72\":{\"h\":\"4. 层序遍历\",\"t\":[\"102. 二叉树的层序遍历 - 力扣（LeetCode）\",\"给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。\",\"输入：root = [3,9,20,null,null,15,7] 输出：[[3],[9,20],[15,7]] \",\"层序遍历一个二叉树。就是从左到右一层一层的去遍历二叉树。这种遍历的方式和我们之前讲过的都不太一样。\",\"需要借用一个辅助数据结构即队列来实现，队列先进先出，符合一层一层遍历的逻辑，而用栈先进后出适合模拟深度优先遍历也就是递归的逻辑。\",\"而这种层序遍历方式就是图论中的广度优先遍历，只不过我们应用在二叉树上。\",\"二叉树的层序遍历是通过队列来实现的。具体步骤如下：\",\"判断二叉树是否为空，为空则直接返回。\",\"令根节点入队。\",\"当队列不为空时，求出当前队列长度 Si​。\",\"依次从队列中取出这 Si​ 个元素，并对这 Si​ 个元素依次进行访问。然后将其左右孩子节点入队，然后继续遍历下一层节点。\",\"当队列为空时，结束遍历。\",\"vector<vector<int>> levelOrder(TreeNode* root) { queue<TreeNode*> que; if(root != nullptr) que.push(root); vector<vector<int>> result; while(!que.empty()){ int size = que.size(); vector<int> res; for(int i = 0; i < size; i++){ TreeNode* tmp = que.front(); res.push_back(tmp->val); if(tmp->left) que.push(tmp->left); if(tmp->right) que.push(tmp->right); que.pop(); } result.push_back(res); } return result; } \",\"递归法：\",\"class Solution { public: void order(TreeNode* cur, vector<vector<int>>& result, int depth){ // 确定参数和返回值 // 确定终止条件 if(cur == nullptr) return; // 确定单层递归条件 // 在二维容器中新建一个空行 if(result.size() == depth) result.push_back(vector<int>()); result[depth].push_back(cur->val); order(cur->left, result, depth+1); order(cur->right, result, depth+1); } vector<vector<int>> levelOrder(TreeNode* root) { vector<vector<int>> result; int depth = 0; order(root, result, depth); return result; } }; \",\"107. 二叉树的层序遍历 II - 力扣（LeetCode）\",\"和前面一样，最后翻转vector<vector<int>> result;\",\"199. 二叉树的右视图 - 力扣（LeetCode）\",\"使用递归，得到总的层序遍历，输出 每一行的 back()\",\"class Solution { public: void order(TreeNode* cur, vector<vector<int>>& result, int depth){ if(cur == nullptr) return; if(result.size() == depth) result.push_back(vector<int>()); result[depth].push_back(cur->val); order(cur->left, result,depth+1); order(cur->right,result,depth+1); } vector<int> rightSideView(TreeNode* root) { vector<vector<int>> tmp; int depth = 0; order(root, tmp, depth); vector<int> result; for(auto i = tmp.begin(); i != tmp.end(); i++){ result.push_back((*i).back()); } return result; } }; \",\"使用迭代法，输出每一层的最后一个节点到 result 中\",\"class Solution { public: vector<int> rightSideView(TreeNode* root) { vector<int> result; queue<TreeNode*> que; if(root != nullptr) que.push(root); while(!que.empty()){ int size = que.size(); for(int i = 0; i < size; i++){ TreeNode* tmp = que.front(); if(i == size-1) result.push_back(tmp->val); if(tmp->left) que.push(tmp->left); if(tmp->right) que.push(tmp->right); que.pop(); } } return result; } }; \",\"637. 二叉树的层平均值 - 力扣（LeetCode）\",\"对每一层求平均值\",\"vector<double> averageOfLevels(TreeNode* root) { vector<double> result; // vector<vector<int>> vec; queue<TreeNode*> que; if(root != nullptr) que.push(root); while(!que.empty()){ int size = que.size(); double cnt = 0; for(int i = 0; i < size; i++){ TreeNode* tmp = que.front(); que.pop(); cnt += tmp->val; if(tmp->left) que.push(tmp->left); if(tmp->right) que.push(tmp->right); } result.push_back(double(cnt/size)); } return result; } \",\"429. N 叉树的层序遍历 - 力扣（LeetCode）\",\"递归\",\"/* // Definition for a Node. class Node { public: int val; vector<Node*> children; Node() {} Node(int _val) { val = _val; } Node(int _val, vector<Node*> _children) { val = _val; children = _children; } }; */ class Solution { public: void order(Node* cur, vector<vector<int>>& result, int depth){ if(cur == nullptr) return; if(result.size() == depth) result.push_back(vector<int>()); result[depth].push_back(cur->val); for(auto i : cur->children){ order(i,result,depth+1); } } vector<vector<int>> levelOrder(Node* root) { vector<vector<int>> result; int depth = 0; order(root, result, depth); return result; } }; \",\"迭代\",\"vector<vector<int>> levelOrder(Node* root) { vector<vector<int>> result; queue<Node*> que; if(root != nullptr)que.push(root); while(!que.empty()){ int size = que.size(); vector<int> vec; for(int i = 0; i < size; i++){ Node* tmp = que.front(); que.pop(); vec.push_back(tmp->val); for(auto i:tmp->children){ if(i) que.push(i); } //for (int i = 0; i < node->children.size(); i++) { // 将节点孩子加入队列 // if (node->children[i]) que.push(node->children[i]); //} } result.push_back(vec); } return result; } \",\"515. 在每个树行中找最大值 - 力扣（LeetCode）\",\"vector<int> largestValues(TreeNode* root) { vector<int> result; queue<TreeNode*> que; if(root != nullptr) que.push(root); while(!que.empty()){ int size = que.size(); int index = INT_MIN; for(int i = 0; i < size; i++){ TreeNode* tmp = que.front(); que.pop(); // if(tmp->val > index) index = tmp->val; index = index > tmp->val ? index : tmp->val; if(tmp->left) que.push(tmp->left); if(tmp->right) que.push(tmp->right); } result.push_back(index); } return result; } \",\"116. 填充每个节点的下一个右侧节点指针 - 力扣（LeetCode）\",\"Node* connect(Node* root) { if(root == nullptr || root->left == nullptr) return root; root->left->next = root->right; if(root->next != nullptr){ root->right->next = root->next->left; } connect(root->left); connect(root->right); return root; } \",\"Node* connect(Node* root) { queue<Node*> que; if(root != nullptr) que.push(root); while(!que.empty()){ int size = que.size(); Node* pre; Node* cur; for(int i = 0; i < size; i++){ if(i == 0){ pre = que.front(); que.pop(); cur = pre; } else{ cur = que.front(); que.pop(); pre->next = cur; pre = pre->next; } if(cur->left) que.push(cur->left); if(cur->right) que.push(cur->right); } } return root; } \",\"117. 填充每个节点的下一个右侧节点指针 II - 力扣（LeetCode）\",\"Node* connect(Node* root) { queue<Node*> que; if(root != nullptr) que.push(root); while(!que.empty()){ int size = que.size(); Node* pre = nullptr; Node* cur = nullptr; for(int i = 0; i < size; i++){ if(i == 0){ pre = que.front(); que.pop(); cur = pre; } else{ cur = que.front(); que.pop(); pre->next = cur; pre = pre->next;; } if(cur->left) que.push(cur->left); if(cur->right) que.push(cur->right); } } return root; } \",\"怎么用递归写呢？\"]},\"73\":{\"h\":\"104. 二叉树的最大深度 - 力扣（LeetCode）\",\"t\":[\"根节点深度为 1\",\"深度优先搜索\",\"int maxDepth(TreeNode* root) { if( root == nullptr) return 0; return max(maxDepth(root->left), maxDepth(root->right)) + 1; } \",\"广度优先搜索\",\"int maxDepth(TreeNode* root) { queue<TreeNode*> que; if(root != nullptr) que.push(root); int cnt = 0; while(!que.empty()){ int size = que.size(); for(int i = 0; i < size; i++){ TreeNode* tmp = que.front(); que.pop(); if(tmp->left) que.push(tmp->left); if(tmp->right) que.push(tmp->right); } cnt++; } return cnt; } \"]},\"74\":{\"h\":\"559. N 叉树的最大深度 - 力扣（LeetCode）\",\"t\":[\"class Solution { public: int maxDepth(Node* root) { if(root == nullptr) return 0; int maxChilderndepth = 0; for(auto i : root->children){ int childDepth = maxDepth(i); maxChilderndepth = max(maxChilderndepth,childDepth); } return maxChilderndepth + 1; } }; \"]},\"75\":{\"h\":\"111. 二叉树的最小深度 - 力扣（LeetCode）\",\"t\":[\"深度优先搜索\",\"int minDepth(TreeNode* root) { if(root == nullptr) return 0; if(root->left == nullptr && root->right == nullptr) return 1; int min_depth = INT_MAX; if( root->left != nullptr){ min_depth = min(minDepth(root->left),min_depth); } if(root->right != nullptr){ min_depth = min(minDepth(root->right),min_depth); } return min_depth+1; } \",\"广度优先搜索\",\"需要注意的是，只有当左右孩子都为空的时候，才说明遍历的最低点了。如果其中一个孩子为空则不是最低点\",\"int minDepth(TreeNode* root) { queue<TreeNode*> que; if(root != nullptr) que.push(root); int depth = 0; while(!que.empty()){ int size = que.size(); depth++; for(int i = 0; i < size; i++){ TreeNode* tmp = que.front(); que.pop(); if(tmp->left) que.push(tmp->left); if(tmp->right) que.push(tmp->right); if(tmp->left == nullptr && tmp->right==nullptr) return depth; } } return depth; } \"]},\"76\":{\"h\":\"6. 翻转二叉树\",\"t\":[\"TreeNode* invertTree(TreeNode* root) { if (root == nullptr) return root; swap(root->left, root->right); // 中 invertTree(root->left); // 左 invertTree(root->right); // 右 return root; } \"]},\"77\":{\"h\":\"7. 对称二叉树\",\"t\":[\"不是层序遍历\",\"bool compare(TreeNode* left, TreeNode* right) { // 首先排除空节点的情况 if (left == NULL && right != NULL) return false; else if (left != NULL && right == NULL) return false; else if (left == NULL && right == NULL) return true; // 排除了空节点，再排除数值不相同的情况 else if (left->val != right->val) return false; // 此时就是：左右节点都不为空，且数值相同的情况 // 此时才做递归，做下一层的判断 bool outside = compare(left->left, right->right); // 左子树：左、 右子树：右 bool inside = compare(left->right, right->left); // 左子树：右、 右子树：左 bool isSame = outside && inside; // 左子树：中、 右子树：中 （逻辑处理） return isSame; } bool isSymmetric(TreeNode* root) { if (root == NULL) return true; return compare(root->left, root->right); } \"]},\"78\":{\"h\":\"相同的树 - 力扣\",\"t\":[\"bool isSameTree(TreeNode* left, TreeNode* right){ if(left == nullptr && right != nullptr) return false; else if(left != nullptr && right == nullptr) return false; else if(left == nullptr && right == nullptr) return true; else if(left->val != right->val) return false; bool a = isSameTree(left->left,right->left); bool b = isSameTree(left->right,right->right); return a&&b; } \"]},\"79\":{\"h\":\"另一棵树的子树\"},\"80\":{\"h\":\"8. 完全二叉树的节点个数\",\"t\":[\"按照普通二叉树遍历，时间复杂度为 n\",\"int countNodes(TreeNode* root) { if(root == nullptr) return 0; int left = countNodes(root->left); int right = countNodes(root->right); int sum = left + right + 1; return sum; } \",\"利用完全二叉树的性质\",\"时间复杂度：O(log n × log n)\",\"空间复杂度：O(log n)\",\"class Solution { public: int countNodes(TreeNode* root) { if (root == nullptr) return 0; TreeNode* left = root->left; TreeNode* right = root->right; int leftDepth = 0, rightDepth = 0; // 这里初始为0是有目的的，为了下面求指数方便 while (left) { // 求左子树深度 left = left->left; leftDepth++; } while (right) { // 求右子树深度 right = right->right; rightDepth++; } if (leftDepth == rightDepth) { // 2^n - 1 return (2 << leftDepth) - 1; // 注意(2<<1) 相当于2^2，所以leftDepth初始为0 } return countNodes(root->left) + countNodes(root->right) + 1; } }; \",\"后序排序\",\"int rightTreeNum = countNodes(root->right); // 右 int result = leftTreeNum + rightTreeNum + 1; // 中 return result; \"]},\"81\":{\"h\":\"9. 平衡二叉树\",\"t\":[\"二叉树的高度：\",\"二叉树的深度：\",\"https://leetcode.cn/problems/balanced-binary-tree/solutions/8737/balanced-binary-tree-di-gui-fang-fa-by-jin40789108/\",\"使用 -1 标记，剪枝已经不符合条件的子树\",\"class Solution { public: int recur(TreeNode* root){ if(root == nullptr) return 0; int left = recur(root->left); if(left == -1) return -1; int right = recur(root->right); if(right == -1) return -1; int relative = abs(left - right); if(relative < 2) return max(left,right)+1; else return -1; } bool isBalanced(TreeNode* root) { return recur(root) != -1; } }; \",\"单层递归的逻辑\",\"如何判断以当前传入节点为根节点的二叉树是否是平衡二叉树呢？当然是其左子树高度和其右子树高度的差值。\",\"分别求出其左右子树的高度，然后如果差值小于等于1，则返回当前二叉树的高度，否则返回-1，表示已经不是二叉平衡树了。\"]},\"82\":{\"h\":\"10. 二叉树的所有路径\",\"t\":[\"给你一个二叉树的根节点 root ，按 任意顺序 ，返回所有从根节点到叶子节点的路径。\",\"叶子节点 是指没有子节点的节点。\",\"示例 1：\",\"输入：root = [1,2,3,null,5] 输出：[\\\"1->2->5\\\",\\\"1->3\\\"] \",\"示例 2：\",\"输入：root = [1] 输出：[\\\"1\\\"] \",\"回溯\",\"https://leetcode.cn/problems/binary-tree-paths/solutions/400434/257-er-cha-shu-de-suo-you-lu-jing-tu-wen-jie-xi-by/\",\"class Solution { public: void preorder(TreeNode* cur, string path, vector<string>& result){ if(cur == nullptr) return; if(cur->left == nullptr && cur->right == nullptr){ result.push_back( path + to_string(cur->val)); // \\\"->\\\" 放在这里会导致第一个路径也有这个，所以放在后面 return; } preorder(cur->left, path + to_string(cur->val) + \\\"->\\\", result); preorder(cur->right, path + to_string(cur->val) + \\\"->\\\", result); } vector<string> binaryTreePaths(TreeNode* root) { // 使用前序遍历 vector<string> result; preorder(root, \\\"\\\", result); return result; } }; \",\"为什么这里用了回溯？\",\"preorder 的参数 path 不带引用和指针，是复制过来的，对上层没有影响\",\"递归：\",\"假设 root 的左右子树的 path 已经求出来了\",\"vector<string> binaryTreePaths(TreeNode* root) { vector<string> result; if(root == nullptr) return result; if(root->left == nullptr && root->right == nullptr) { result.push_back(to_string(root->val)); } for( auto path : binaryTreePaths(root->left)){ result.push_back(to_string(root->val) + \\\"->\\\" + path); } for( auto path : binaryTreePaths(root->right)){ result.push_back(to_string(root->val) + \\\"->\\\" + path); } return result; } \",\"迭代\",\"vector<string> binaryTreePaths(TreeNode* root) { vector<string> result; queue<TreeNode*> que; queue<string> path; if(root != nullptr){ que.push(root); path.push(to_string(root->val)); } while(!que.empty()){ TreeNode* cur = que.front(); string cur_path = path.front(); que.pop(); path.pop(); if(cur->left == nullptr && cur->right == nullptr){ result.push_back(cur_path); } if(cur->left){ que.push(cur->left); path.push(cur_path + \\\"->\\\" + to_string(cur->left->val)); } if(cur->right){ que.push(cur->right); path.push(cur_path + \\\"->\\\" + to_string(cur->right->val)); } } return result; } \"]},\"83\":{\"h\":\"11. 左叶子之和\",\"t\":[\"如何判断左叶子，不是二叉树的左侧节点\",\"class Solution { public: void order(TreeNode* cur, int& cnt){ if(cur == nullptr) return; // 如果判断左叶子 if(cur->left && cur->left->left == nullptr && cur->left->right == nullptr){ cnt += cur->left->val; } order(cur->left, cnt); order(cur->right, cnt); // cnt = order(cur->left, cnt) + order(cur->right, cnt); } int sumOfLeftLeaves(TreeNode* root) { int cnt = 0; order(root, cnt); return cnt; } }; \",\"更简单的写法\",\"int sumOfLeftLeaves(TreeNode* cur){ if(cur == nullptr) return 0; // 如果判断左叶子 int left = 0; if(cur->left && cur->left->left == nullptr && cur->left->right == nullptr){ left =cur->left->val; } return left + sumOfLeftLeaves(cur->left) + sumOfLeftLeaves(cur->right); } \"]},\"84\":{\"h\":\"12. 找树左下角的值\",\"t\":[\"层序遍历\",\"int findBottomLeftValue(TreeNode* root) { queue<TreeNode*> que; if(root != nullptr) que.push(root); int result; while(!que.empty()){ int size = que.size(); for(int i = 0; i < size; i++){ TreeNode* tmp = que.front(); if(i == 0) result = tmp->val; que.pop(); if(tmp->left) que.push(tmp->left); if(tmp->right) que.push(tmp->right); } } return result; } \",\"迭代\"]},\"85\":{\"h\":\"13. 路径总和\",\"t\":[\"递归\",\"bool hasPathSum(TreeNode* root, int targetSum) { if(root == nullptr) return false; if(root->left == nullptr && root->right == nullptr && root->val == targetSum){ return true; } return hasPathSum(root->left, targetSum - root->val) || hasPathSum(root->right, targetSum- root->val); } \",\"迭代（与 二叉树所有路径类似） \",\"bfs，层序遍历\",\"bool hasPathSum(TreeNode* root, int targetSum) { // 层序遍历 queue<TreeNode*> que; queue<int> cnt; if(root != nullptr){ que.push(root); cnt.push(root->val); } while(!que.empty()){ TreeNode* tmp_node = que.front(); int tmp_val = cnt.front(); que.pop(); cnt.pop(); if(tmp_node->left == nullptr && tmp_node->right == nullptr){ if(tmp_val == targetSum) return true; } if(tmp_node->left){ que.push(tmp_node->left); cnt.push(tmp_val + tmp_node->left->val); } if(tmp_node->right){ que.push(tmp_node->right); cnt.push(tmp_val + tmp_node->right->val); } } return false; } \",\"确定递归函数的参数和返回类型\",\"参数：需要二叉树的根节点，还需要一个计数器，这个计数器用来计算二叉树的一条边之和是否正好是目标和，计数器为int型。\",\"再来看返回值，递归函数什么时候需要返回值？什么时候不需要返回值？这里总结如下三点：\",\"如果需要搜索整棵二叉树且不用处理递归返回值，递归函数就不要返回值。（这种情况就是本文下半部分介绍的113.路径总和ii）\",\"如果需要搜索整棵二叉树且需要处理递归返回值，递归函数就需要返回值。 （这种情况我们在236. 二叉树的最近公共祖先 (opens new window)中介绍）\",\"如果要搜索其中一条符合条件的路径，那么递归一定需要返回值，因为遇到符合条件的路径了就要及时返回。（本题的情况）\",\"113. 路径总和 II - 力扣（LeetCode）\",\"把当前的结点（叫他N1吧）加入数组中，然后去遍历他的左孩子，左孩子的所有孩子结点都遍历完之后，又回到了N1，\",\"如果你这时候pop了，相当于把N1这个结点去掉了，而你这个时候还没有递归调用N1的右孩子结点，当你递归N1的右节点，数组里N1的值就已经被你pop了，就这出现问题了呀。\",\"只有当递归调用完N1的左右孩子才能pop当前这个N1的结点，这就是为什么只需要一次删除，况且你一个N1节点只加入了一次，当然是pop一次了。\",\"class Solution { public: vector<vector<int>> res; vector<int> path; void dfs(TreeNode* root, int targetSum){ if(root == nullptr) return; targetSum -= root->val; path.push_back(root->val); if(!root->left && !root->right && targetSum == 0){ res.push_back(path); } dfs(root->left, targetSum); dfs(root->right, targetSum); path.pop_back(); } vector<vector<int>> pathSum(TreeNode* root, int targetSum) { dfs(root,targetSum); return res; } }; \"]},\"86\":{\"h\":\"14.二叉树的还原\",\"t\":[\"WARNING\",\"已知二叉树的前序遍历序列和后序遍历序列，是不能唯一地确定一棵二叉树的。\",\"二叉树的还原：指的是通过二叉树的遍历序列，还原出对应的二叉树。\",\"我们先来回顾一下二叉树的前序遍历、中序遍历、后序遍历规则。\",\"非空二叉树的前序遍历规则： \",\"访问根节点。\",\"以前序遍历的方式遍历根节点的左子树。\",\"以前序遍历的方式遍历根节点的右子树。\",\"非空二叉树的中序遍历规则： \",\"以中序遍历的方式遍历根节点的左子树。\",\"访问根节点。\",\"以中序遍历的方式遍历根节点的右子树。\",\"非空二叉树的后序遍历规则： \",\"以后序遍历的方式遍历根节点的左子树。\",\"以后序遍历的方式遍历根节点的右子树。\",\"访问根节点。\",\"如果已知一棵二叉树的前序序列和中序序列，可以唯一地确定这棵二叉树。\",\"同理，如果已知一棵二叉树的中序序列和后序序列，也可以唯一地确定这棵二叉树。 方法和通过二叉树的前序序列和中序序列构造二叉树类似，唯一不同点在于二叉树的根节点是根据后序遍历序列的最后一个元素确定的。\",\"类似的，已知二叉树的「中序遍历序列」和「层序遍历序列」，也可以唯一地确定一棵二叉树。\",\"需要注意的是：如果已知二叉树的「前序遍历序列」和「后序遍历序列」，是不能唯一地确定一棵二叉树的。 这是因为没有中序遍历序列无法确定左右部分，也就无法进行子序列的分割。\",\"只有二叉树中每个节点度为 2 或者 0 的时候，已知前序遍历序列和后序遍历序列，才能唯一地确定一颗二叉树，如果二叉树中存在度为 1 的节点时是无法唯一地确定一棵二叉树的，这是因为我们无法判断该节点是左子树还是右子树。\",\"105. 从前序与中序遍历序列构造二叉树 - 力扣（LeetCode）\",\"106. 从中序与后序遍历序列构造二叉树 - 力扣（LeetCode）\",\"构建新的 vector\",\"TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) { if(preorder.empty() || inorder.empty()) return nullptr; int root_value = preorder[0]; vector<int> n_preorder(preorder.begin() + 1, preorder.end()); int index = 0; for(index; index < inorder.size(); index++){ if(inorder[index] == root_value) break; } vector<int> l_p(n_preorder.begin(), n_preorder.begin() + index); vector<int> l_i(inorder.begin(), inorder.begin() + index); vector<int> r_p(n_preorder.begin()+index, n_preorder.end()); vector<int> r_i(inorder.begin() + index + 1, inorder.end()); TreeNode* root = new TreeNode(root_value); root->left = buildTree(l_p, l_i); root->right = buildTree(r_p, r_i); return root; } \",\"在 vector 原地操作\"]},\"87\":{\"h\":\"15. 最大二叉树\",\"t\":[\"使用新的vector\",\"TreeNode* constructMaximumBinaryTree(vector<int>& nums) { if(nums.size() == 0) return nullptr; int max = 0; int index = 0; for(int i = 0; i < nums.size(); i++){ if(nums[i] > max) { max = nums[i]; index = i; } } TreeNode* root = new TreeNode(max); vector<int> n_l(nums.begin(),nums.begin()+index); vector<int> n_r(nums.begin()+index+1,nums.end()); root->left = constructMaximumBinaryTree(n_l); root->right = constructMaximumBinaryTree(n_r); return root; } \",\"在 vector 原地操作\",\"class Solution { public: TreeNode* order(vector<int>& nums, int left, int right){ if(right - left < 0) return nullptr; // 这里如果是闭区间的话，不能是 <= int max = 0; int index = left; for(int i = left; i <= right; i++){ if(nums[i] > max) { max = nums[i]; index = i; } } TreeNode* root = new TreeNode(max); root->left = order(nums, left, index - 1); root->right = order(nums, index + 1, right); return root; } TreeNode* constructMaximumBinaryTree(vector<int>& nums) { int size = nums.size()-1; TreeNode* root = order(nums, 0, size); return root; } }; \"]},\"88\":{\"h\":\"16. 合并二叉树\",\"t\":[\"确定终止条件：\",\"因为是传入了两个树，那么就有两个树遍历的节点t1 和 t2，如果t1 == NULL 了，两个树合并就应该是 t2 了（如果t2也为NULL也无所谓，合并之后就是NULL）。\",\"反过来如果t2 == NULL，那么两个数合并就是t1（如果t1也为NULL也无所谓，合并之后就是NULL）。\",\"TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) { if(root1 == nullptr) return root2; if(root2 == nullptr) return root1; root1->val += root2->val; root1->left = mergeTrees(root1->left, root2->left); root1->right = mergeTrees(root1->right, root2->right); return root1; } \"]},\"89\":{\"h\":\"17. 二叉树的最近公共祖先\",\"t\":[\"遇到这个题目首先想的是要是能自底向上查找就好了，这样就可以找到公共祖先了。\",\"那么二叉树如何可以自底向上查找呢？\",\"回溯啊，二叉树回溯的过程就是从低到上。\",\"后序遍历（左右中）就是天然的回溯过程，可以根据左右子树的返回值，来处理中节点的逻辑。\",\"如果left 和 right都不为空，说明此时root就是最近公共节点。\",\"TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) { if(root == nullptr) return nullptr; if(p == root || q == root) return root; TreeNode* left = lowestCommonAncestor(root->left, p, q); TreeNode* right = lowestCommonAncestor(root->right, p, q); if(left == nullptr && right == nullptr) return nullptr; else if(left != nullptr && right == nullptr) return left; else if(left == nullptr && right != nullptr) return right; else return root; } \"]},\"90\":{\"h\":\"1123. 最深叶节点的最近公共祖先 - 力扣（LeetCode）\",\"t\":[\"dfs\",\"// 返回int储存深度，返回最深的，同时返回公共祖先节点 // 后序遍历 pair<TreeNode*, int> dfs(TreeNode* root){ if(root == nullptr) return {nullptr, 0}; auto left = dfs(root->left); auto right = dfs(root->right); if(left.second > right.second) return {left.first, left.second+1}; if(left.second < right.second) return {right.first, right.second+1}; // 左右的深度相同，则root是最近公共祖先 return {root, left.second + 1}; } TreeNode* lcaDeepestLeaves(TreeNode* root) { return dfs(root).first; } \",\"分解：先求深度，再求深度下的公共祖先。\",\"class Solution { public: int maxDepth(TreeNode* root){ if(root == nullptr) return 0; return max(maxDepth(root->left), maxDepth(root->right)) + 1; } TreeNode* commonA(TreeNode* root, int curDepth, int maxDepth){ if(root == nullptr) return nullptr; if(curDepth == maxDepth) return root; auto left = commonA(root->left, curDepth+1, maxDepth); auto right = commonA(root->right, curDepth+1, maxDepth); if(left == nullptr && right == nullptr) return nullptr; else if(left == nullptr && right != nullptr) return right; else if(left != nullptr && right == nullptr) return left; else return root; } TreeNode* lcaDeepestLeaves(TreeNode* root) { int max = maxDepth(root); return commonA(root, 1, max); } }; \"]},\"91\":{\"h\":\"235. 二叉搜索树的最近公共祖先 - 力扣（LeetCode）\",\"t\":[\"直接用二叉树搜索公共祖先的方法\",\"利用二叉树的有序性质 \",\"如果 root 的值大于q 和 p，则必定在root 左边，只用在 root->left 递归\",\"如果……右边\",\"如果 q，p 分列两边，根据bst的性质，q，p的最近公共祖先必定是root\",\"TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) { if(root == nullptr) return nullptr; if(root->val > p->val && root->val > q->val){ TreeNode* left = lowestCommonAncestor(root->left,p,q); if(left) return left; } if(root->val < p->val && root->val < q->val){ TreeNode* right = lowestCommonAncestor(root->right,p,q); if(right) return right; } return root; } \"]},\"92\":{\"h\":\"18.二叉搜索树\"},\"93\":{\"h\":\"1. 性质\",\"t\":[\"二叉搜索树（Binary Search Tree）：也叫做二叉查找树、有序二叉树或者排序二叉树。是指一棵空树或者具有下列性质的二叉树：\",\"如果任意节点的左子树不为空，则左子树上所有节点的值均小于它的根节点的值。\",\"如果任意节点的右子树不为空，则右子树上所有节点的值均大于它的根节点的值。\",\"任意节点的左子树、右子树均为二叉搜索树。\",\"二叉树具有一个特性，即：左子树的节点值 < 根节点值 < 右子树的节点值。\",\"根据这个特性，如果我们以中序遍历的方式遍历整个二叉搜索树时，会得到一个递增序列。\",\"WARNING\",\"二叉搜索树也可以为空\"]},\"94\":{\"h\":\"2. 查找\",\"t\":[\"按照二叉搜索树的定义，在进行元素查找时，我们只需要根据情况判断需要往左还是往右走。这样，每次根据情况判断都会缩小查找范围，从而提高查找效率。二叉树的查找步骤如下：\",\"如果二叉搜索树为空，则查找失败，结束查找，并返回空指针节点 None。\",\"如果二叉搜索树不为空，则将要查找的值 val与二叉搜索树根节点的值 root.val 进行比较： \",\"如果 val == root.val，则查找成功，结束查找，返回被查找到的节点。\",\"如果 val < root.val，则递归查找左子树。\",\"如果 val > root.val，则递归查找右子树。\",\"700. 二叉搜索树中的搜索 - 力扣（LeetCode）\",\"利用搜索二叉树的性质，更像是一种二分法\",\"TreeNode* searchBST(TreeNode* root, int val) { if(root == nullptr) return root; if(root->val == val) return root; else if(root->val < val) return searchBST(root->right, val); else return searchBST(root->left, val); } \"]},\"95\":{\"h\":\"3. 插入\",\"t\":[\"二叉搜索树的插入操作与二叉树的查找操作过程类似，具体步骤如下：\",\"如果二叉搜索树为空，则创建一个值为 val 的节点，并将其作为二叉搜索树的根节点。\",\"如果二叉搜索树不为空，则将待插入的值val与二叉搜索树根节点的值root.val进行比较： \",\"如果 val < root.val，则递归将值为 val 的节点插入到左子树中。\",\"如果 val > root.val，则递归将值为 val 的节点插入到右子树中。\",\"递归\",\"701. 二叉搜索树中的插入操作 - 力扣（LeetCode）\",\"TreeNode* insertIntoBST(TreeNode* root, int val) { TreeNode* node = new TreeNode(val); if(root == nullptr) root = node; if(root->val > val) root->left = insertIntoBST(root->left, val); if(root->val < val) root->right = insertIntoBST(root->right, val); return root; } \",\"迭代\",\"采用pre，cur指针，记录处理位置的父节点\"]},\"96\":{\"h\":\"4. 创建\",\"t\":[\"二叉搜索树的创建：根据数组序列中的元素值，建立一棵二叉搜索树。\",\"二叉搜索树的创建操作是从空树开始，按照给定数组元素的值，依次进行二叉搜索树的插入操作，最终得到一棵二叉搜索树。具体算法步骤如下：\",\"初始化二叉搜索树为空树。\",\"遍历数组元素，将数组元素值 nums[i] 依次插入到二叉搜索树中。\",\"将数组中全部元素值插入到二叉搜索树中之后，返回二叉搜索树的根节点。\",\"使用类似二分法，构造一个平衡的二叉搜索树\",\"108. 将有序数组转换为二叉搜索树 - 力扣（LeetCode）\",\"确定递归终止条件\",\"这里定义的是左闭右闭的区间，所以当区间 left > right的时候，就是空节点了。\",\"class Solution { public: TreeNode* dfs(vector<int> nums, int left, int right){ if(left > right) return nullptr; int index = left + (right - left)/2; TreeNode* root = new TreeNode(nums[index]); root->left = dfs(nums, left, index-1); root->right = dfs(nums, index + 1, right); return root; } TreeNode* sortedArrayToBST(vector<int>& nums) { return dfs(nums, 0, nums.size() - 1); } }; \"]},\"97\":{\"h\":\"5. 删除\",\"t\":[\"二叉搜索树的删除：在二叉搜索树中删除值为 val 的节点。\",\"在二叉搜索树中删除元素，首先要找到待删除节点，然后执行删除操作。根据待删除节点所在位置的不同，可以分为 3 种情况：\",\"被删除节点的左子树为空。则令其右子树代替被删除节点的位置。\",\"被删除节点的右子树为空。则令其左子树代替被删除节点的位置。\",\"被删除节点的左右子树均不为空，则根据二叉搜索树的中序遍历有序性，删除该节点时，可以使用其直接前驱（或直接后继）代替被删除节点的位置。\",\"直接前驱：在中序遍历中，节点 p 的直接前驱为其左子树的最右侧的叶子节点。\",\"直接后继：在中序遍历中，节点 p 的直接后继为其右子树的最左侧的叶子节点。\",\"二叉搜索树的删除算法步骤如下：\",\"如果当前节点为空，则返回当前节点。\",\"如果当前节点值大于 val，则递归去左子树中搜索并删除，此时 root.left 也要跟着递归更新。\",\"如果当前节点值小于 val，则递归去右子树中搜索并删除，此时 root.right 也要跟着递归更新。\",\"如果当前节点值等于val，则该节点就是待删除节点。 \",\"如果当前节点的左子树为空，则删除该节点之后，则右子树代替当前节点位置，返回右子树。\",\"如果当前节点的右子树为空，则删除该节点之后，则左子树代替当前节点位置，返回左子树。\",\"如果当前节点的左右子树都有，则将左子树转移到右子树最左侧的叶子节点位置上，然后右子树代替当前节点位置。\",\"确定单层递归的逻辑\",\"这里就把二叉搜索树中删除节点遇到的情况都搞清楚。\",\"有以下五种情况：\",\"第一种情况：没找到删除的节点，遍历到空节点直接返回了\",\"找到删除的节点 \",\"第二种情况：左右孩子都为空（叶子节点），直接删除节点， 返回NULL为根节点\",\"第三种情况：删除节点的左孩子为空，右孩子不为空，删除节点，右孩子补位，返回右孩子为根节点\",\"第四种情况：删除节点的右孩子为空，左孩子不为空，删除节点，左孩子补位，返回左孩子为根节点\",\"第五种情况：左右孩子节点都不为空，则将删除节点的左子树头结点（左孩子）放到删除节点的右子树的最左面节点的左孩子上，返回删除节点右孩子为新的根节点。\",\"删除元素7， 那么删除节点（元素7）的左孩子就是5，删除节点（元素7）的右子树的最左面节点是元素8。\",\"将删除节点（元素7）的左孩子放到删除节点（元素7）的右子树的最左面节点（元素8）的左孩子上，就是把5为根节点的子树移到了8的左孩子的位置。\",\"要删除的节点（元素7）的右孩子（元素9）为新的根节点。.\",\"TreeNode* deleteNode(TreeNode* root, int key) { if(root == nullptr) return root; if(root->val > key) root->left = deleteNode(root->left, key); if(root->val < key) root->right = deleteNode(root->right, key); if(root->val == key){ if(root->left == nullptr && root->right == nullptr) { delete root; return nullptr; } else if(root->left && root->right == nullptr){ auto tmp = root; root = root->left; delete tmp; return root; } else if(root->right == nullptr && root->right){ auto tmp = root; root = root->right; delete tmp; return root; } // 左右两边都存在 else { auto tmp = root; auto cur = root->right; // while(cur->left && cur->right){ // 最左边的节点,而不一定是最左边的叶子节点 while(cur->left){ cur = cur->left; } cur->left = root->left; root = root->right; delete tmp; return root; } } return root; } \",\"450. 删除二叉搜索树中的节点 - 力扣（LeetCode）\"]},\"98\":{\"h\":\"修剪二叉搜索树 - 力扣（LeetCode）\",\"t\":[\"输入：root = [3,0,4,null,2,null,null,1], low = 1, high = 3 输出：[3,2,null,1]\",\"如上例所示，如果 root->val < low 这种情况的剪枝不能直接返回nullptr\",\"TreeNode* trimBST(TreeNode* root, int low, int high) { if (root == nullptr ) return nullptr; if (root->val < low) { TreeNode* right = trimBST(root->right, low, high); // 寻找符合区间[low, high]的节点 return right; } if (root->val > high) { TreeNode* left = trimBST(root->left, low, high); // 寻找符合区间[low, high]的节点 return left; } root->left = trimBST(root->left, low, high); // root->left接入符合条件的左孩子 root->right = trimBST(root->right, low, high); // root->right接入符合条件的右孩子 return root; } \"]},\"99\":{\"h\":\"6. 例子\",\"t\":[\"98. 验证二叉搜索树 - 力扣（LeetCode）\",\"中序遍历，检查是否递增（递归）\",\"class Solution { public: void inorder(TreeNode* root, vector<int>& res){ if(root == nullptr) return; inorder(root->left, res); res.push_back(root->val); inorder(root->right, res); } bool isValidBST(TreeNode* root) { vector<int> result; inorder(root, result); if(result.size() == 1) return true; int pre = result[0]; for(int i = 1; i < result.size(); i++){ if(pre < result[i]) pre = result[i]; else return false; } return true; } }; \",\"中序遍历，迭代\",\"bool isValidBST(TreeNode* root) { stack<TreeNode*> stack; TreeNode* pre = nullptr; TreeNode* cur = root; while(cur || !stack.empty()){ if(cur){ stack.push(cur); cur = cur->left; } else{ cur = stack.top(); stack.pop(); // 这里pre用指针比较，而不是记录pre的值，避免int越界 // 但是这里当 pre 为空指针的时候，需要考虑进来，用 || 熔断 if(pre == nullptr || pre->val < cur->val) pre = cur; else return false; cur = cur->right; } } return true; } \",\"可以把上面迭代写成递归的形式：\",\"确定终止条件\",\"如果是空节点 是不是二叉搜索树呢？\",\"是的，二叉搜索树也可以为空！\",\"class Solution { public: // 测试数据有 long long index = LONG_MIN; bool isValidBST(TreeNode* root) { if(root == nullptr) return true; bool left = isValidBST(root->left); if(root->val > index) index = root->val; else return false; bool right = isValidBST(root->right); return left && right; } }; \"]},\"100\":{\"h\":\"二叉树中的双指针\",\"t\":[\"530. 二叉搜索树的最小绝对差 - 力扣（LeetCode）\",\"直接中序遍历，得到数组再求\",\"在递归中如何记录前一个节点的指针\",\"class Solution { private: int result = INT_MAX; TreeNode* pre = NULL; void traversal(TreeNode* cur) { if (cur == NULL) return; traversal(cur->left); // 左 if (pre != NULL){ // 中 result = min(result, cur->val - pre->val); } pre = cur; // 记录前一个 traversal(cur->right); // 右 } public: int getMinimumDifference(TreeNode* root) { traversal(root); return result; } }; \",\"501. 二叉搜索树中的众数 - 力扣（LeetCode）\",\"按普通链表处理\",\"统计二叉树频率之后，排序，输出\",\"class Solution { public: bool static cmp (const pair<int, int>& a, const pair<int, int>& b) { return a.second > b.second; } vector<int> findMode(TreeNode* root) { stack<TreeNode*> stack; unordered_map<int, int> map; vector<int> result; TreeNode* cur = root; while( cur || !stack.empty()){ if(cur){ stack.push(cur); cur = cur->left; } else{ cur = stack.top(); stack.pop(); map[cur->val]++; cur = cur->right; } } vector<pair<int, int>> vec(map.begin(), map.end()); sort(vec.begin(), vec.end(), cmp); // 给频率排个序 result.push_back(vec[0].first); for (int i = 1; i < vec.size(); i++) { // 取最高的放到result数组中 if (vec[i].second == vec[0].second) result.push_back(vec[i].first); else break; } return result; } }; \",\"利用二叉树的性质\",\" */ class Solution { public: vector<int> result; int max_cnt; int cnt; TreeNode* pre = nullptr; void dfs(TreeNode* cur){ // 终止条件 if(cur == nullptr) return; // 前 dfs(cur->left); // 中 if(pre == nullptr) cnt = 1; else if(pre->val == cur->val) cnt++; else cnt = 1; pre = cur; if(cnt == max_cnt){ result.push_back(cur->val); } if(cnt > max_cnt){ result.clear(); result.push_back(cur->val); max_cnt = cnt; } // 后 dfs(cur->right); return; } vector<int> findMode(TreeNode* root) { dfs(root); return result; } }; \",\"使用 pre 和 cur 双指针，中序遍历二叉树，同时维持一个 count 最大的结果数组\",\"235. 二叉搜索树的最近公共祖先 - 力扣（LeetCode）\",\"见公共祖先，\",\"538. 把二叉搜索树转换为累加树 - 力扣（LeetCode）\",\"反中序遍历，右中左，从后往前累加\",\"class Solution { public: TreeNode* pre = nullptr; void reinorder(TreeNode* root){ if(root == nullptr) return; TreeNode* cur = root; if(root->right) reinorder(root->right); if(!pre) pre = cur; else cur->val += pre->val; pre = cur; if(root->left) reinorder(root->left); } TreeNode* convertBST(TreeNode* root) { reinorder(root); return root; } }; \"]},\"101\":{\"h\":\"代码随想录题解\"},\"102\":{\"h\":\"数组\",\"t\":[\"[双指针]\",\"二分\",\"704. 二分查找 - 力扣（LeetCode）\",\"35. 搜索插入位置 - 力扣（LeetCode）\",\"27. 移除元素 - 力扣（LeetCode）\",\"快慢指针\",\"26. 删除有序数组中的重复项 - 力扣（LeetCode）\",\"283. 移动零 - 力扣（LeetCode）\",\"844. 比较含退格的字符串 - 力扣（LeetCode）\",\"只用了栈的方法\",\"977. 有序数组的平方 - 力扣（LeetCode）\",\"滑动窗口\",\"209. 长度最小的子数组 - 力扣（LeetCode）\",\"904. 水果成篮 - 力扣（LeetCode）\",\"map erase find 函数\",\"76. 最小覆盖子串 - 力扣（LeetCode）\",\"滑动窗口\",\"模拟题\",\"59. 螺旋矩阵 II - 力扣（LeetCode）\",\"54. 螺旋矩阵 - 力扣（LeetCode）\",\"class Solution { public: vector<int> spiralOrder(vector<vector<int>>& matrix) { int top = 0; int bottom = matrix.size() - 1; int left = 0; int right = matrix[0].size() - 1; vector<int> res; int t = matrix.size()*matrix[0].size(); int cnt = 0; while(cnt < t ){ for(int i = left; i <= right && cnt < t; i++,cnt++){ res.push_back(matrix[top][i]); } top++; for(int i = top; i <= bottom && cnt < t; i++,cnt++){ res.push_back(matrix[i][right]); } right--; for(int i = right; i >= left && cnt < t; i--,cnt++){ res.push_back(matrix[bottom][i]); } bottom--; for(int i = bottom; i >= top && cnt < t; i--,cnt++){ res.push_back(matrix[i][left]); } left++; } return res; } }; \",\"vector创建数组（一维、二维）的超详细总结_vector定义二维数组_半路杀出来的小黑同学的博客-CSDN博客\"]},\"103\":{\"h\":\"链表\",\"t\":[\"203. 移除链表元素 - 力扣（LeetCode）\",\"ListNode* removeElements(ListNode* head, int val) { // 使用一个虚拟头节点，避免单独处理头节点 // 根据给出的定义，初始化虚拟头节点 ListNode* dummyHead = new ListNode(0, head); // dummyHead->next = head; ListNode *cur = dummyHead; while(cur->next != NULL){ if(cur->next->val == val){ ListNode *tmp = cur->next; cur->next = cur->next->next; delete tmp; } else{ cur = cur->next; } } // 原来的头节点有可能被删除，需要重新赋值指针 head = dummyHead->next; delete dummyHead; return head; } \",\"707. 设计链表 - 力扣（LeetCode）\",\"class MyLinkedList { private: struct ListNode{ int val; ListNode* next; ListNode():val(0),next(nullptr){} ListNode(int v):val(v),next(nullptr){} ListNode(int v,ListNode* n):val(v),next(n){} }; int _size; ListNode* _dummyHead; public: MyLinkedList() { _size = 0; _dummyHead=new ListNode(); } int get(int index) { if(index < 0 || index > _size-1) return -1; ListNode* cur = _dummyHead->next; while(index--){ cur=cur->next; } return cur->val; } void addAtHead(int val) { ListNode*cur = _dummyHead->next; ListNode*tmp = new ListNode(val,cur); _dummyHead->next = tmp; _size++; } void addAtTail(int val) { ListNode*cur = _dummyHead; while(cur->next != nullptr){ cur = cur->next; } ListNode*tmp = new ListNode(val); cur->next = tmp; _size++; } void addAtIndex(int index, int val) { ListNode*cur = _dummyHead; if(index > _size) return; if(index < 0) index = 0; while(index--){ cur = cur->next; } ListNode*tmp = new ListNode(val); tmp->next = cur->next; cur->next = tmp; _size++; } void deleteAtIndex(int index) { if(index < 0 || index > _size-1)return; ListNode* cur = _dummyHead; while(index--){ cur = cur->next; } ListNode* tmp = cur->next; cur->next = tmp->next; delete tmp; tmp = nullptr; _size--; } }; \",\"206. 反转链表 - 力扣（LeetCode）\",\"双指针\",\"class Solution { public: ListNode* reverseList(ListNode* head) { ListNode* pre = nullptr; ListNode* cur = head; while(cur){ ListNode* tmp = cur->next; cur->next = pre; pre=cur; cur=tmp; } return pre; } }; \",\"递归\",\"class Solution { public: ListNode* reverseList(ListNode* head) { // 边缘条件判断 if(head == NULL) return NULL; if (head->next == NULL) return head; // 递归调用，翻转第二个节点开始往后的链表 ListNode *last = reverseList(head->next); // 翻转头节点与第二个节点的指向 head->next->next = head; // 此时的 head 节点为尾节点，next 需要指向 NULL head->next = NULL; return last; } }; \",\"24. 两两交换链表中的节点\",\"模拟\",\"class Solution { public: ListNode* swapPairs(ListNode* head) { if(!head || !head->next) return head; ListNode* dummyHead = new ListNode(0,head); ListNode* tmp1 = dummyHead; while(tmp1->next != nullptr && tmp1->next->next != nullptr ){ ListNode* tmp2 = tmp1->next; ListNode* tmp3 = tmp2->next; tmp1->next = tmp3; tmp2->next = tmp3->next; tmp3->next = tmp2; tmp1=tmp2; } return dummyHead->next; } }; \",\"递归\",\"递归的终止条件是链表中没有节点，或者链表中只有一个节点，此时无法进行交换。\",\"如果链表中至少有两个节点，则在两两交换链表中的节点之后，原始链表的头节点变成新的链表的第二个节点，原始链表的第二个节点变成新的链表的头节点。链表中的其余节点的两两交换可以递归地实现。在对链表中的其余节点递归地两两交换之后，更新节点之间的指针关系，即可完成整个链表的两两交换。\",\"用 head 表示原始链表的头节点，新的链表的第二个节点，用 newHead表示新的链表的头节点，原始链表的第二个节点，\",\"则原始链表中的其余节点的头节点是 newHead->next。令 head->next = swapPairs(newHead->next)，表示将其余节点进行两两交换，交换后的新的头节点为 head 的下一个节点。\",\"然后令 newHead->next = head，即完成了所有节点的交换。最后返回新的链表的头节点 newHead。\",\"class Solution { public: ListNode* swapPairs(ListNode* head) { if(!head || !head->next) return head; ListNode* new_head = head->next; head->next = swapPairs(new_head->next); new_head->next = head; return new_head; } }; \",\"和上一题的递归不同，但是相似，都是相同的子问题。\",\"进一步，每隔K个节点翻转\",\"/** 反转区间 [a, b) 的元素，注意是左闭右开 */ ListNode* reverse(ListNode* a, ListNode* b) { ListNode *pre, *cur, *nxt; pre = null; cur = a; nxt = a; // while 终⽌的条件改⼀下就⾏了 while (cur != b) { nxt = cur->next; cur->next = pre; pre = cur; cur = nxt; } // 返回反转后的头结点 return pre; } ListNode reverseKGroup(ListNode *head, int k) { if (head == null) return null; // 区间 [a, b) 包含 k 个待反转元素 ListNode *a, *b; a = b = head; for (int i = 0; i < k; i++) { // 不⾜ k 个，不需要反转，base case if (b == null) return head; b = b->next; // b 指向了k+1个j } // 反转前 k 个元素 ListNode *newHead = reverse(a, b); // 递归反转后续链表并连接起来 a->next = reverseKGroup(b, k); return newHead; } \",\"19. 删除链表的倒数第 N 个结点 - 力扣（LeetCode）\",\"两次遍历\",\"ListNode* removeNthFromEnd(ListNode* head, int n) { ListNode* dummyHead = new ListNode(0,head); ListNode* cur = dummyHead; int cnt = 0; while( cur->next ){ cur = cur->next; cnt++; } cur = dummyHead; int index = cnt - n; while( index--){ cur = cur->next; } ListNode*tmp = cur->next; cur->next = tmp->next; delete tmp; head = dummyHead->next; delete dummyHead; return head; } \",\"一次遍历的话构造一个类似窗口的n长度，两个指针向后\",\"ListNode* removeNthFromEnd(ListNode* head, int n) { ListNode* dummyHead = new ListNode(0,head); ListNode* left = dummyHead; ListNode* right = dummyHead; while( n-- ){ right = right->next; } while( right->next ){ left = left->next; right = right->next; } ListNode*tmp = left->next; left->next = tmp->next; delete tmp; head = dummyHead->next; delete dummyHead; return head; } \",\"面试题 02.07. 链表相交 - 力扣（LeetCode）\",\"即使不相交，在各自遍历的AB链表之后，路程也是一样的，同时指向 nullptr\",\"ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) { ListNode* tmp1 = headA; ListNode* tmp2 = headB; while(tmp1 != tmp2){ // 这里不能用 tmp1->next 判断，否则会陷入死循环? if(tmp1 == nullptr) tmp1 = headB; else tmp1 = tmp1->next; if(tmp2 == nullptr) tmp2 = headA; else tmp2 = tmp2->next; } return tmp1; } \",\"142. 环形链表 II - 力扣（LeetCode）\",\"数学推导\",\"代码随想录 (programmercarl.com)\",\"ListNode *detectCycle(ListNode *head) { ListNode* fast = head; ListNode* slow = head; while(fast != nullptr && fast->next != nullptr){ // 为什么这里要用 && ？ // 逆反命题，保证 fast->next->next 有意义 slow = slow->next; fast = fast->next->next; if(slow == fast){ ListNode* x = slow; ListNode* index = head; while( x != index){ x = x->next; index = index->next; } return index; } } return nullptr; } \",\"使用 set\",\"class Solution { public: ListNode *detectCycle(ListNode *head) { unordered_set<ListNode*> a; ListNode* cur = head; while(cur){ if(a.count(cur)) return cur; else { a.insert(cur); cur = cur->next; } } return nullptr; } }; \"]},\"104\":{\"h\":\"哈希表\",\"t\":[\"242. 有效的字母异位词 - 力扣（LeetCode）\",\"bool isAnagram(string s, string t) { if(s.size() != t.size()) return false; int a[30]={0}; for( int i = 0; i < s.size(); i++){ a[s[i]-'a']++; } for(int i = 0; i < t.size(); i++){ a[t[i]-'a']--; } for(auto i : a){ if(i != 0) return false; } return true; } \",\"383. 赎金信 - 力扣（LeetCode）\",\"class Solution { public: bool canConstruct(string ransomNote, string magazine) { unordered_map<char, int> needs; unordered_map<char, int> have; for(auto i : ransomNote) needs[i]++; for(auto i : magazine) have[i]++; for(auto i = needs.begin(); i != needs.end(); i++){ if(i->second > have[i->first]) return false; } return true; } }; \",\"直接用26大小的数组当哈希表更简单。\",\"349. 两个数组的交集 - 力扣（LeetCode）\",\"WARNING\",\"find() 函数没有找到返回 .end() 指针\",\"vector<int> intersection(vector<int>& nums1, vector<int>& nums2) { unordered_set<int> nums1_set(nums1.begin(),nums1.end()); unordered_set<int> nums2_set; for(auto i : nums2){ if(nums1_set.find(i) != nums1_set.end()){ nums2_set.insert(i); } } return vector<int>(nums2_set.begin(),nums2_set.end()); } \",\"202. 快乐数 - 力扣（LeetCode）\",\"class Solution { public: int getSum(int n){ int sum = 0; while(n){ sum += (n%10)*(n%10); n = n /10; } return sum; } bool isHappy(int n) { unordered_set<int> happy; while(true){ int sum = getSum(n); if(sum == 1) return true; if(happy.find(sum) != happy.end()) return false; else happy.insert(sum); n = sum; } } }; \",\"1. 两数之和 - 力扣（LeetCode）\",\"暴力解法\",\"寻找 target - nums[i] （哈希）\",\"class Solution { public: vector<int> twoSum(vector<int>& nums, int target) { unordered_map<int, int> maps; for(int i = 0; i < nums.size(); i++){ auto it = maps.find(target-nums[i]); if(it != maps.end()) return {it->second, i}; maps[nums[i]] = i; } return {}; } }; \",\"为什么 map 拆开写不能ac？ 51/60 测试用例\",\" class Solution { public: vector<int> twoSum(vector<int>& nums, int target) { unordered_map<int,int> maps; for(int i = 0; i < nums.size(); i++){ maps[nums[i]] = i; } for(auto i = maps.begin(); i != maps.end(); i++){ auto t = maps.find(target - i->first); if(t != maps.end()) return {t->second, i->second}; } return {}; } }; \",\"454. 四数相加 II - 力扣（LeetCode）\",\"class Solution { public: int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) { unordered_map<int,int> map12; for(auto i : nums1){ for(auto j : nums2){ map12[i + j]++; } } int cnt = 0; for(auto i : nums3){ for(auto j : nums4){ if(map12.find(0 - i - j) != map12.end()){ // cnt++; // 这里不能只加一，可能不止一个加起来为0 cnt = cnt + map12[0-i-j]; } } } return cnt; } }; \",\"15. 三数之和 - 力扣（LeetCode）\",\"代码随想录 (programmercarl.com)\",\"去重的逻辑\",\"对 a 的去重：\",\"对 b，c 的去重：\",\"class Solution { // 排序后，双指针 // 难点去重 public: vector<vector<int>> threeSum(vector<int>& nums) { sort(nums.begin(),nums.end()); vector<vector<int>> result; if(nums[0] > 0) return result; for(int i = 0; i < nums.size(); i++){ if( i > 0 && nums[i] == nums[i-1]){ continue; } int left = i+1; int right = nums.size() - 1; while(right > left){ if(nums[left] + nums[right] == -nums[i]){ result.push_back({nums[i],nums[left],nums[right]}); while(left < right && nums[left]==nums[left+1]) left++; while(left < right && nums[right]==nums[right-1]) right--; left++; right--; } else if(nums[left] + nums[right] > -nums[i]){ right--; } else left++; } } return result; } }; \",\"18. 四数之和 - 力扣（LeetCode）\",\"vector<vector<int>> fourSum(vector<int>& nums, int target) { sort(nums.begin(),nums.end()); vector<vector<int>> result; // if(nums[i] > target) return result; // 这样不对，考虑 target < 0 for(int i = 0; i < nums.size(); i++){ if(nums[i] > target && nums[i] > 0) break; // 这里如果不用break，用return 会报错? if(i > 0 && nums[i] == nums[i-1]) continue; for(int j = i + 1; j < nums.size(); j++ ){ // if(nums[j] > target && nums[j] > 0) break; // 和三数和类似，但是这里多了个循环，判断条件不同 if(nums[i] + nums[j] > target && nums[i] + nums[j] >= 0) break; if(j > i + 1 && nums[j] == nums[j-1]) continue; int left = j + 1; int right = nums.size() - 1; while( left < right ){ // 注意nums溢出 if((long)nums[i] + nums[j] + nums[right] + nums[left] == target){ result.push_back({nums[i],nums[j],nums[right],nums[left]}); while(left < right && nums[left] == nums[left+1]) left++; while(left < right && nums[right] == nums[right-1]) right--; left++; right--; } else if((long)nums[i] + nums[j] + nums[right] + nums[left] > target) right--; else left++; } } } return result; } \"]},\"105\":{\"h\":\"字符串\",\"t\":[\"344. 反转字符串 - 力扣（LeetCode）\",\"class Solution { public: void reverseString(vector<char>& s) { int i = 0; int j = s.size() - 1; while( i <= j){ char tmp = s[i]; s[i] = s[j]; s[j] = tmp; i++; j--; } } }; \",\"541. 反转字符串 II - 力扣（LeetCode）\",\"翻转 2k 中的前 k 个字符，可以在 for 函数上做文章\",\"class Solution { public: string reverseStr(string s, int k) { for(int i = 0; i < s.size(); i = i + 2*k){ if(i + k <= s.size()){ reverse(s.begin() + i,s.begin()+i+k); } else reverse(s.begin()+i,s.end()); } return s; } }; \",\"剑指 Offer 05. 替换空格 - 力扣（LeetCode）\",\"class Solution { public: string replaceSpace(string s) { int new_length = s.size(); int old_length = s.size(); for(int i = 0; i < s.size(); i++){ if(s[i] == ' ') new_length += 2; } s.resize(new_length); for(int i = new_length-1, j = old_length - 1; i > 0; i--,j-- ){ // 为什么这里要写在if前面，写在后面要加else? s[i] = s[j]; if(s[j] == ' '){ s[i] = '0'; s[i-1] = '2'; s[i-2] = '%'; i -= 2; } } return s; } }; \",\"151. 反转字符串中的单词 - 力扣（LeetCode）\",\"class Solution { public: vector<string> splitString(string sen){ vector<string> vec; while (sen.find(\\\" \\\") != sen.npos) { if(sen.find(\\\" \\\") == 0 ){ sen = sen.substr(sen.find(\\\" \\\") + 1, sen.length()); continue; }else{ vec.push_back(sen.substr(0, sen.find(\\\" \\\"))); sen = sen.substr(sen.find(\\\" \\\") + 1, sen.length()); } } if(sen == \\\"\\\")return vec; else { vec.push_back(sen); return vec; } } string reverseWords(string s) { char delimiter = ' '; // vector<string> tmp = split(s,delimiter); vector<string> tmp = splitString(s); string result; for(int i = tmp.size() -1; i >=0; i--){ // reverse(tmp[i].begin(),tmp[i].end()); result.append(tmp[i]); if(i != 0) result += ' '; } return result; } }; \",\"剑指 Offer 58 - II. 左旋转字符串 - 力扣（LeetCode）\",\"用额外的空间；\",\"class Solution { public: string reverseLeftWords(string s, int n) { string tmp = s.substr(0,n); s = s.substr(n) + tmp; return s; } }; \",\"原地：\",\"class Solution { public: string reverseLeftWords(string s, int n) { reverse(s.begin(),s.end()); reverse(s.begin(),s.begin() + s.size()-n); reverse(s.begin() + s.size() -n,s.end()); return s; } }; \",\"28. 找出字符串中第一个匹配项的下标 - 力扣（LeetCode）\",\"KMP算法\"]},\"106\":{\"h\":\"栈和队列\",\"t\":[\"20. 有效的括号 - 力扣（LeetCode）\",\"分几种情况：\",\"如果是左括号，则压入\",\"如果不是左括号： \",\"如果是空的（直接输入右括号的情况），返回 false\",\"如果是右括号，和栈顶比较，匹配则弹出栈顶\",\"不是左括号且不匹配则返回 fasle\",\"bool isValid(string a) { stack<char> s; for(int i = 0; i < a.size(); i++){ if( a[i] == '(' || a[i] == '[' || a[i] == '{') s.push(a[i]); else{ // 保证在 top 之前栈不是空的，例如输入 \\\"]\\\"，在下一步top报错 if(s.empty()){ return false; } else if((a[i] == ')' && s.top() == '(') || (a[i] == ']' && s.top() == '[') || (a[i]=='}' && s.top() == '{') ) { s.pop(); } else { return false; } } } // 如果是不是空的，返回false(不是空的empty()就返回0) return s.empty(); } \",\"1047. 删除字符串中的所有相邻重复项 - 力扣（LeetCode）\",\"消消乐\",\"class Solution { public: string removeDuplicates(string s) { stack<char> tmp; for(auto c : s){ if(tmp.empty()) tmp.push(c); else if(tmp.top() != c) tmp.push(c); else tmp.pop(); } string result = \\\"\\\"; while(!tmp.empty()){ result += tmp.top(); tmp.pop(); } reverse(result.begin(),result.end()); return result; } }; \",\"150. 逆波兰表达式求值 - 力扣（LeetCode）\",\"中缀表达式：常见的\",\"后缀表达式：\",\"class Solution { public: int evalRPN(vector<string>& tokens) { stack<long long> tmp; for(int i = 0; i < tokens.size(); i++){ if(tokens[i] == \\\"+\\\" || tokens[i] == \\\"-\\\" || tokens[i] == \\\"*\\\" || tokens[i] == \\\"/\\\"){ long long index1 = tmp.top(); tmp.pop(); long long index2 = tmp.top(); tmp.pop(); if(tokens[i] == \\\"+\\\") tmp.push(index2 + index1); if(tokens[i] == \\\"-\\\") tmp.push(index2 - index1); if(tokens[i] == \\\"*\\\") tmp.push(index2 * index1); if(tokens[i] == \\\"/\\\") tmp.push(index2 / index1); } else { tmp.push(stoll(tokens[i])); } } return tmp.top(); } }; \"]},\"107\":{\"h\":\"239. 滑动窗口最大值 - 力扣（LeetCode）\",\"t\":[\"class Solution { private: class MyQueue { //单调队列（从大到小） public: deque<int> que; // 使用deque来实现单调队列 // 每次弹出的时候，比较当前要弹出的数值是否等于队列出口元素的数值，如果相等则弹出。 // 同时pop之前判断队列当前是否为空。 void pop(int value) { if (!que.empty() && value == que.front()) { que.pop_front(); } } // 如果push的数值大于入口元素的数值，那么就将队列后端的数值弹出，直到push的数值小于等于队列入口元素的数值为止。 // 这样就保持了队列里的数值是单调从大到小的了。 void push(int value) { while (!que.empty() && value > que.back()) { que.pop_back(); } que.push_back(value); } // 查询当前队列里的最大值 直接返回队列前端也就是front就可以了。 int front() { return que.front(); } }; public: vector<int> maxSlidingWindow(vector<int>& nums, int k) { MyQueue que; vector<int> result; for (int i = 0; i < k; i++) { // 先将前k的元素放进队列 que.push(nums[i]); } result.push_back(que.front()); // result 记录前k的元素的最大值 for (int i = k; i < nums.size(); i++) { que.pop(nums[i - k]); // 滑动窗口移除最前面元素 que.push(nums[i]); // 滑动窗口前加入最后面的元素 result.push_back(que.front()); // 记录对应的最大值 } return result; } }; \"]},\"108\":{\"h\":\"347. 前 K 个高频元素 - 力扣（LeetCode）\"},\"109\":{\"h\":\"二叉树\"},\"110\":{\"h\":\"回溯算法\",\"t\":[\"回溯是递归的副产品，只要有递归就会有回溯。\",\"回溯算法理论基础\",\"void backtracking(参数) { if (终止条件) { 存放结果; return; } for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) { 处理节点; backtracking(路径，选择列表); // 递归 回溯，撤销处理结果 } } \",\"回溯法解决的问题\",\"回溯法，一般可以解决如下几种问题：\",\"组合问题：N个数里面按一定规则找出k个数的集合\",\"切割问题：一个字符串按一定规则有几种切割方式\",\"子集问题：一个N个数的集合里有多少符合条件的子集\",\"排列问题：N个数按一定规则全排列，有几种排列方式\",\"棋盘问题：N皇后，解数独等等\"]},\"111\":{\"h\":\"1. 组合问题\"},\"112\":{\"h\":\"77. 组合 - 力扣（LeetCode）\",\"t\":[\"class Solution { public: vector<vector<int>> result; vector<int> path; void backtracking(int n, int k, int startIndex){ if(path.size() == k){ result.push_back(path); return; } // for(startIndex; startIndex <= n; startIndex++){ // 剪枝优化,这里k个数里已经有了path.size()个了,不需要把n遍历完, // 要算上从 starindex开始的自己,闭区间 // for(startIndex; startIndex <= n - (k - path.size() - 1); startIndex++){ // 这样写更容易理解,已经加入path的数量和n中剩余的数量要大于k for(startIndex; n - (startIndex - 1) + path.size() >= k; startIndex++){ path.push_back(startIndex); backtracking(n, k, startIndex+1); path.pop_back(); } } vector<vector<int>> combine(int n, int k) { backtracking(n,k,1); return result; } }; \"]},\"113\":{\"h\":\"216. 组合总和 III - 力扣（LeetCode）\",\"t\":[\"找出所有相加之和为 n 的 k 个数的组合，且满足下列条件：\",\"只使用数字1到9\",\"每个数字 最多使用一次\",\"返回 所有可能的有效组合的列表 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。\",\"class Solution { public: vector<vector<int>> result; vector<int> path; void backtrack(int k, int n, int starIndex){ // 剪枝 if(n < 0) return; if(n == 0 && path.size() == k){ result.push_back(path); return; } for(starIndex; starIndex <= 9; starIndex++){ path.push_back(starIndex); backtrack(k, n - starIndex, starIndex + 1); path.pop_back(); } } vector<vector<int>> combinationSum3(int k, int n) { backtrack(k,n,1); return result; } }; \"]},\"114\":{\"h\":\"17. 电话号码的字母组合 - 力扣（LeetCode）\",\"t\":[\"class Solution { public: vector<string> result; string path; unordered_map<char, string> map; void backtrack(string digits, int depth){ int length = digits.size(); if(length == depth-2){ result.push_back(path); return; } string cur = map[digits[depth-2]]; for(int i = 0; i < cur.size(); i++){ path.push_back(cur[i]); backtrack(digits, depth+1); path.pop_back(); } } vector<string> letterCombinations(string digits) { map['2'] = \\\"abc\\\"; map['3'] = \\\"def\\\"; map['4'] = \\\"ghi\\\"; map['5'] = \\\"jkl\\\"; map['6'] = \\\"mno\\\"; map['7'] = \\\"pqrs\\\"; map['8'] = \\\"tuv\\\"; map['9'] = \\\"wxyz\\\"; if(digits.size() == 0) return result; backtrack(digits, 2); return result; } }; \",\"可以简化，使用字符串数组，这样 depth 也不用-2了\",\"const string letterMap[10] = { \\\"\\\", // 0 \\\"\\\", // 1 \\\"abc\\\", // 2 \\\"def\\\", // 3 \\\"ghi\\\", // 4 \\\"jkl\\\", // 5 \\\"mno\\\", // 6 \\\"pqrs\\\", // 7 \\\"tuv\\\", // 8 \\\"wxyz\\\", // 9 }; \"]},\"115\":{\"h\":\"39. 组合总和 - 力扣（LeetCode）\",\"t\":[\"和前面组合总和的区别是可以重复取数\",\"class Solution { public: vector<vector<int>> result; vector<int> path; void backtrack(vector<int>& candidates, int target, int startIndex){ if(target < 0) return; if(target == 0){ result.push_back(path); return; } for(startIndex; startIndex < candidates.size(); startIndex++){ path.push_back(candidates[startIndex]); // backtrack(candidates, target- candidates[startIndex], startIndex+1); // 如何重复取数 // 这里 startIndex 不+1了表示不跳过自己遍历，可以取自己 backtrack(candidates, target- candidates[startIndex], startIndex); path.pop_back(); } } vector<vector<int>> combinationSum(vector<int>& candidates, int target) { backtrack(candidates, target, 0); return result; } }; \"]},\"116\":{\"h\":\"40. 组合总和 II - 力扣（LeetCode）\",\"t\":[\"class Solution { public: vector<vector<int>> result; vector<int> path; void backtrack(vector<int>& candidates, int target, int startIndex){ if(target < 0) return; if(target == 0){ result.push_back(path); return; } // for(startIndex; startIndex < candidates.size(); startIndex++){ // if(startIndex > 0 && candidates[startIndex] == candidates[startIndex-1]){ // continue; // } // 1,1,2,5,6,7,10 // 使用上面这种写法把1,1,6过滤掉了 for(int i = startIndex; i < candidates.size(); i++){ if(i > startIndex && candidates[i] == candidates[i-1]){ continue; } path.push_back(candidates[i]); backtrack(candidates, target - candidates[i], i+1); path.pop_back(); } } vector<vector<int>> combinationSum2(vector<int>& candidates, int target) { sort(candidates.begin(), candidates.end()); backtrack(candidates, target, 0); return result; } }; \",\"使用used数组\"]},\"117\":{\"h\":\"2. 分割问题\"},\"118\":{\"h\":\"131. 分割回文串 - 力扣（LeetCode）\",\"t\":[\"为什么切出的子串不是回文序列要跳过/剪枝？\",\"class Solution { public: vector<vector<string>> result; vector<string> path; bool is(string s){ int i = 0; int j = s.size() - 1; while(i < j){ if(s[i] == s[j]) { i++; j--; } else return false; } return true; } void backtrack(string s, int startIndex){ if(startIndex >= s.size() ){ result.push_back(path); return; } for(int i = startIndex; i< s.size(); i++){ string sub = s.substr(startIndex, i-startIndex+1); if(is(sub)) { path.push_back(sub); backtrack(s, i + 1); path.pop_back(); } // else continue; // backtrack(s, i + 1); // path.pop_back(); } } vector<vector<string>> partition(string s) { backtrack(s,0); return result; } }; \"]},\"119\":{\"h\":\"93. 复原 IP 地址 - 力扣（LeetCode）\",\"t\":[\"class Solution { public: vector<string> result; vector<string> path; bool is_valid(string s){ if(s.size() > 1 && s[0] == '0') return false; if(s.size() > 3) return false; int index = stoi(s); if(index <= 255) return true; else return false; } void back(string s, int startIndex, int left_to_split){ // left_to_split 保证完整分割 if(path.size() == 4 && left_to_split == 0){ result.push_back(path[0] + \\\".\\\" + path[1] + \\\".\\\" + path[2] + \\\".\\\" + path[3]); return; } for(int i = startIndex; i < s.size(); i++){ string sub = s.substr(startIndex, i - startIndex + 1); if(is_valid(sub) ){ path.push_back(sub); back(s, i+1, left_to_split-sub.size()); path.pop_back(); } else break; } } vector<string> restoreIpAddresses(string s) { int remain = s.size(); back(s, 0, remain); return result; } }; \"]},\"120\":{\"h\":\"3. 子集问题\"},\"121\":{\"h\":\"78. 子集 - 力扣（LeetCode）\",\"t\":[\"class Solution { public: vector<vector<int>> result; vector<int> path; void back(vector<int>& nums, int startIndex){ result.push_back(path); // 终止条件也可以不要 // if(startIndex >= nums.size()){ // 为什么要放在外面：放在里面会漏掉自己 // result.push_back(path); // return; // } for(int i = startIndex; i < nums.size(); i++){ path.push_back(nums[i]); back(nums, i+1); path.pop_back(); } } vector<vector<int>> subsets(vector<int>& nums) { back(nums, 0); return result; } }; \",\"放在里面会漏掉自己\",\"输入 nums = [1,2,3,4] 输出 [[1,2,3,4],[1,2,4],[1,3,4],[1,4],[2,3,4],[2,4],[3,4],[4]] 预期结果 [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4]] \"]},\"122\":{\"h\":\"90. 子集 II - 力扣（LeetCode）\",\"t\":[\"class Solution { public: vector<vector<int>> result; vector<int> path; void back(vector<int>& nums, int startIndex){ result.push_back(path); if(startIndex >= nums.size()){ // 为什么要放在外面：放在里面会漏掉自己 // 这里也可以不用返回条件 return; } for(int i = startIndex; i < nums.size(); i++){ if(i > startIndex && nums[i] == nums[i-1]) continue; else{ path.push_back(nums[i]); back(nums, i+1); path.pop_back(); } } } vector<vector<int>> subsetsWithDup(vector<int>& nums) { sort(nums.begin(), nums.end()); back(nums, 0); return result; } }; \",\"关于回溯算法中的去重问题，在40.组合总和II (opens new window)中已经详细讲解过了，和本题是一个套路。\",\"先排序，再去重\",\"使用used数组\"]},\"123\":{\"h\":\"491. 递增子序列 - 力扣（LeetCode）\",\"t\":[\"在图中可以看出，同一父节点下的同层上使用过的元素就不能再使用了\",\"class Solution { public: vector<vector<int>> result; vector<int> path; void back(vector<int>& nums, int startIndex){ if(path.size() >= 2) result.push_back(path); if(startIndex >= nums.size()){ return; } // 每一层的set都会重新声明，使用set去重 unordered_set<int> set; for(int i = startIndex; i < nums.size(); i++){ if(path.size() != 0 && nums[i] < path.back() || set.find(nums[i]) != set.end()) continue; set.insert(nums[i]); path.push_back(nums[i]); back(nums, i+1); path.pop_back(); } } vector<vector<int>> findSubsequences(vector<int>& nums) { back(nums, 0); return result; } }; \"]},\"124\":{\"h\":\"4. 排列问题\"},\"125\":{\"h\":\"46. 全排列 - 力扣（LeetCode）\",\"t\":[\"class Solution { public: vector<vector<int>> result; vector<int> path; void backTracking(vector<int>& nums, vector<bool>& used){ if(path.size() == nums.size()){ result.push_back(path); return; } for(int i = 0; i < nums.size(); i++){ if(used[i] == true) continue; path.push_back(nums[i]); used[i] = true; backTracking(nums, used); path.pop_back(); used[i] = false; } } vector<vector<int>> permute(vector<int>& nums) { vector<bool> used(6, false); backTracking(nums, used); return result; } }; \",\"时间复杂度: O(n!)\",\"空间复杂度: O(n)\",\"总结\",\"排列问题的不同：\",\"每层都是从0开始搜索而不是startIndex\",\"需要used数组记录path里都放了哪些元素了\"]},\"126\":{\"h\":\"47. 全排列 II - 力扣（LeetCode）\",\"t\":[\"一个比较容易想到的办法是在结果集中去重。但是问题来了，这些结果集的元素是一个又一个列表，对列表去重不像用哈希表对基本元素去重那样容易。\",\"如果要比较两个列表是否一样，一个容易想到的办法是对列表分别排序，然后逐个比对。既然要排序，我们就可以 在搜索之前就对候选数组排序，一旦发现某个分支搜索下去可能搜索到重复的元素就停止搜索，这样结果集中不会包含重复列表。\",\"画出树形结构如下：重点想象深度优先遍历在这棵树上执行的过程，哪些地方遍历下去一定会产生重复，这些地方的状态的特点是什么？ 对比图中标注 ① 和 ② 的地方。相同点是：这一次搜索的起点和上一次搜索的起点一样。不同点是：\",\"标注 ① 的地方上一次搜索的相同的数刚刚被撤销； 标注 ② 的地方上一次搜索的相同的数刚刚被使用。\",\"产生重复结点的地方，正是图中标注了「剪刀」，且被绿色框框住的地方。\",\"大家也可以把第 2 个 1 加上 ' ，即 [1, 1', 2] 去想象这个搜索的过程。只要遇到起点一样，就有可能产生重复。这里还有一个很细节的地方：\",\"在图中 ② 处，搜索的数也和上一次一样，但是上一次的 1 还在使用中； 在图中 ① 处，搜索的数也和上一次一样，但是上一次的 1 刚刚被撤销，正是因为刚被撤销，下面的搜索中还会使用到，因此会产生重复，剪掉的就应该是这样的分支。\",\"作者：liweiwei1419 链接：https://leetcode.cn/problems/permutations-ii/solutions/9917/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liwe-2/ 来源：力扣（LeetCode） 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\",\"class Solution { public: vector<vector<int>> result; vector<int> path; void backTracking(vector<int>& nums, vector<bool>& used){ if(path.size() == nums.size()) { result.push_back(path); return; } for(int i = 0; i < nums.size(); i++){ if(used[i] == true || i > 0 && nums[i] == nums[i-1] && used[i-1] == false)continue; // if(i > 0 && nums[i] == nums[i-1] && used[i-1] == true)continue; // if(used[i] == false){ path.push_back(nums[i]); used[i] = true; backTracking(nums, used); path.pop_back(); used[i] = false; // } } } vector<vector<int>> permuteUnique(vector<int>& nums) { vector<bool> used(nums.size(), false); sort(nums.begin(), nums.end()); backTracking(nums, used); return result; } }; \",\"结论：used[i-1] == false 剪枝更彻底\",\"https://leetcode.cn/problems/permutations-ii/solutions/9917/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liwe-2/\"]},\"127\":{\"h\":\"5. 棋盘问题\"},\"128\":{\"h\":\"51. N 皇后 - 力扣（LeetCode）\",\"t\":[\"按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。\",\"n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。\",\"给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。\",\"每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。\",\"class Solution { public: vector<vector<string>> result; // 回溯算法框架 // 对每一行进行遍历 void backTracking(int n, int row, vector<string>& chessboard){ if(row == n){ result.push_back(chessboard); return; } for(int col = 0; col < n; col++){ if(isvalid(n, row, col, chessboard)){ chessboard[row][col] = 'Q'; backTracking(n, row + 1, chessboard); chessboard[row][col] = '.'; // 回溯，撤回皇后 } } } // 判断遍历到的这个位置是否合法 bool isvalid(int n, int row, int col, vector<string>& chessboard){ for(int i = 0; i < row; i++){ if(chessboard[i][col] == 'Q') return false; } for(int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++){ if(chessboard[i][j] == 'Q') return false; } for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--){ if(chessboard[i][j] == 'Q') return false; } return true; } vector<vector<string>> solveNQueens(int n) { vector<string> chessboard(n, string(n, '.')); backTracking(n, 0, chessboard); return result;; } }; \"]},\"129\":{\"h\":\"37. 解数独 - 力扣（LeetCode）\"},\"130\":{\"h\":\"6. 其他\"},\"131\":{\"h\":\"491. 递增子序列 - 力扣（LeetCode）\"},\"132\":{\"h\":\"332. 重新安排行程 - 力扣（LeetCode）\"},\"133\":{\"h\":\"排序算法\"},\"134\":{\"h\":\"拓扑排序\",\"t\":[\"判断图无环\",\"邻接表\"]},\"135\":{\"h\":\"207. 课程表 - 力扣（LeetCode）\"},\"136\":{\"h\":\"滑动窗口\"},\"137\":{\"h\":\"76. 最小覆盖子串 - 力扣（LeetCode）\",\"t\":[\"给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 \\\"\\\" 。\",\"注意：\",\"对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。\",\"如果 s 中存在这样的子串，我们保证它是唯一的答案。\",\"示例 1：\",\"输入：s = \\\"ADOBECODEBANC\\\", t = \\\"ABC\\\" 输出：\\\"BANC\\\" 解释：最小覆盖子串 \\\"BANC\\\" 包含来自字符串 t 的 'A'、'B' 和 'C'。 \",\"示例 2：\",\"输入：s = \\\"a\\\", t = \\\"a\\\" 输出：\\\"a\\\" 解释：整个字符串 s 是最小覆盖子串。 \",\"示例 3:\",\"输入: s = \\\"a\\\", t = \\\"aa\\\" 输出: \\\"\\\" 解释: t 中两个字符 'a' 均应包含在 s 的子串中， 因此没有符合条件的子字符串，返回空字符串。 \",\"提示：\",\"m == s.length\",\"n == t.length\",\"1 <= m, n <= 105\",\"s 和 t 由英文字母组成\",\"滑动窗口算法的思路是这样：\",\"我们在字符串 S 中使⽤双指针中的左右指针技巧，初始化 left = right = 0，把索引闭区间 [left, right] 称为⼀个「窗口」。\",\"我们先不断地增加 right 指针扩大窗口 [left, right]，直到窗口中的字符串 符合要求（包含了 T 中的所有字符）。\",\"此时，我们停止增加 right，转而不断增加 left 指针缩小窗口 [left, right]，直到窗口中的字符串不再符合要求（不包含 T 中的所有字符了）。 同时，每次增加 left，我们都要更新⼀轮结果。\",\"重复第 2 和第 3 步，直到 right到达字符串 S 的尽头\",\"下面画图理解⼀下，needs 和 window 相当于计数器，分别记录 T 中字符出 现次数和窗口中的相应字符的出现次数。\",\"基本框架\",\"string s, t; // 在 s 中寻找 t 的「最⼩覆盖⼦串」 int left = 0, right = 0; string res = s; while(right < s.size()) { window.add(s[right]); right++; // 如果符合要求，移动 left 缩⼩窗⼝ while (window 符合要求) { // 如果这个窗⼝的⼦串更短，则更新 res res = minLen(res, window); window.remove(s[left]); left++; } } return res; \",\"如何判断 window 即子串 s[left...right] 是否符合要求，是否 包含 t 的所有字符呢？ 可以用两个哈希表当作计数器解决。用一个哈希表 needs 记录字符串 t 中包 含的字符及出现次数，用另⼀个哈希表 window 记录当前「窗口」中包含的 字符及出现的次数，如果 window 包含所有 needs 中的键，且这些键对应的 值都大于等于 needs 中的值，那么就可以知道当前「窗口」符合要求了，可 以开始移动 left 指针了。\",\"string s, t; // 在 s 中寻找 t 的「最⼩覆盖⼦串」 int left = 0, right = 0; string res = s; // 相当于两个计数器 unordered_map<char, int> window; unordered_map<char, int> needs; for (char c : t) needs[c]++; // 记录 window 中已经有多少字符符合要求了 int match = 0; while (right < s.size()) { char c1 = s[right]; if (needs.count(c1)) { window[c1]++; // 加⼊ window if (window[c1] == needs[c1]) // 字符 c1 的出现次数符合要求了 match++; } right++; // window 中的字符串已符合 needs 的要求了 while (match == needs.size()) { // 更新结果 res res = minLen(res, window); char c2 = s[left]; if (needs.count(c2)) { window[c2]--; // 移出 window if (window[c2] < needs[c2]) // 字符 c2 出现次数不再符合要求 match--; } left++; } } return res; \",\"加上更新 res 的方法:\",\"string minWindow(string s, string t) { // 记录最短⼦串的开始位置和⻓度 int start = 0, minLen = INT_MAX; int left = 0, right = 0; unordered_map<char, int> window; unordered_map<char, int> needs; for (char c : t) needs[c]++; int match = 0; while (right < s.size()) { char c1 = s[right]; if (needs.count(c1)) { window[c1]++; if (window[c1] == needs[c1]) match++; } right++; while (match == needs.size()) { if (right - left < minLen) { // 更新最⼩⼦串的位置和⻓度 start = left; minLen = right - left; } char c2 = s[left]; if (needs.count(c2)) { window[c2]--; if (window[c2] < needs[c2]) match--; } left++; } } return minLen == INT_MAX ? \\\"\\\" : s.substr(start, minLen); } \",\"这个算法的时间复杂度是 O(M + N)，M 和 N 分别是字符串 S 和 T 的长度。 因为我们先⽤ for 循环遍历了字符串 T 来初始化 needs，时间 O(N)，之后的 两个 while 循环最多执行 2M 次，时间 O(M)。\"]},\"138\":{\"h\":\"438. 找到字符串中所有字母异位词 - 力扣（LeetCode）\",\"t\":[\"给定两个字符串 s 和 p，找到 s 中所有 p 的 异位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。\",\"异位词 指由相同字母重排列形成的字符串（包括相同的字符串）。\",\"示例 1:\",\"输入: s = \\\"cbaebabacd\\\", p = \\\"abc\\\" 输出: [0,6] 解释: 起始索引等于 0 的子串是 \\\"cba\\\", 它是 \\\"abc\\\" 的异位词。 起始索引等于 6 的子串是 \\\"bac\\\", 它是 \\\"abc\\\" 的异位词。 \",\"示例 2:\",\"输入: s = \\\"abab\\\", p = \\\"ab\\\" 输出: [0,1,2] 解释: 起始索引等于 0 的子串是 \\\"ab\\\", 它是 \\\"ab\\\" 的异位词。 起始索引等于 1 的子串是 \\\"ba\\\", 它是 \\\"ab\\\" 的异位词。 起始索引等于 2 的子串是 \\\"ab\\\", 它是 \\\"ab\\\" 的异位词。 \",\"提示:\",\"1 <= s.length, p.length <= 3 * 104\",\"s 和 p 仅包含小写字母\",\"class Solution { public: vector<int> findAnagrams(string s, string p) { // 记录异位词的开始位置 vector<int> result; int left = 0, right = 0; unordered_map<char, int> window; unordered_map<char, int> needs; for (char c : p) needs[c]++; int match = 0; while (right < s.size()) { char c1 = s[right]; if (needs.count(c1)) { window[c1]++; if (window[c1] == needs[c1]) match++; } right++; while (match == needs.size()) { // while 里面的判断是否含有各个字母， // 所以还要判断一遍字符串的总长度 if (right - left == p.size()) { // 更新异位词的位置 result.push_back(left); // start = left; // minLen = right - left; } char c2 = s[left]; if (needs.count(c2)) { window[c2]--; if (window[c2] < needs[c2]) match--; } left++; } } return result; } }; \"]},\"139\":{\"h\":\"3. 无重复字符的最长子串 - 力扣（LeetCode）\",\"t\":[\"给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。\",\"示例 1:\",\"输入: s = \\\"abcabcbb\\\" 输出: 3 解释: 因为无重复字符的最长子串是 \\\"abc\\\"，所以其长度为 3。 \",\"示例 2:\",\"输入: s = \\\"bbbbb\\\" 输出: 1 解释: 因为无重复字符的最长子串是 \\\"b\\\"，所以其长度为 1。 \",\"示例 3:\",\"输入: s = \\\"pwwkew\\\" 输出: 3 解释: 因为无重复字符的最长子串是 \\\"wke\\\"，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，\\\"pwke\\\" 是一个子序列，不是子串。 \",\"提示：\",\"0 <= s.length <= 5 * 104\",\"s 由英文字母、数字、符号和空格组成\",\"class Solution { public: int lengthOfLongestSubstring(string s) { int left = 0, right = 0; unordered_map<char, int> window; int res = 0; // 记录最⻓⻓度 while (right < s.size()) { char c1 = s[right]; window[c1]++; right++; // 如果 window 中出现重复字符 // 开始移动 left 缩⼩窗⼝ while (window[c1] > 1) { char c2 = s[left]; window[c2]--; left++; } // 更新长度 res = max(res, right - left); } return res; } }; \",\"int lengthOfLongestSubstring(string s) { int l = 0; int res = 0; unordered_map<char, int> tmp; for(int r = 0; r < s.size(); r++){ char c1 = s[r]; tmp[c1]++; while( tmp[c1] > 1 ){ char c2 = s[l]; tmp[c2]--; l++; } res = max(res, r - l+1); } return res; } \"]},\"140\":{\"h\":\"贪心算法\"},\"141\":{\"h\":\"简单题目\",\"t\":[\"想清楚局部最优，想清楚全局最优，感觉局部最优是可以推出全局最优，并想不出反例，那么就试一试贪心。\"]},\"142\":{\"h\":\"455. 分发饼干 - 力扣（LeetCode）\",\"t\":[\"小饼干先给小孩\",\"class Solution { public: int findContentChildren(vector<int>& g, vector<int>& s) { sort(g.begin(), g.end()); sort(s.begin(), s.end()); int index = 0; int i = 0,j = 0; while(i < g.size() && j < s.size()){ if(g[i] <= s[j]){ index++; i++; j++; } else j++; } return index; } }; \"]},\"143\":{\"h\":\"1005. K 次取反后最大化的数组和 - 力扣（LeetCode）\",\"t\":[\"先翻转绝对值最大的而且是负的，如果k还有富余，再翻转绝对值最小的\",\"class Solution { public: static bool cmp(int a, int b){ return abs(a) > abs(b); } int largestSumAfterKNegations(vector<int>& nums, int k) { sort(nums.begin(), nums.end(), cmp); for(int i = 0; i < nums.size(); i++){ if(nums[i] < 0 && k > 0){ nums[i] *= -1; k--; } } if( k % 2 == 1) nums[nums.size() - 1] *= -1; int result = 0; for(auto i : nums){ result += i; } return result; } }; \"]},\"144\":{\"h\":\"中等题目\"},\"145\":{\"h\":\"序列问题\"},\"146\":{\"h\":\"376. 摆动序列 - 力扣（LeetCode）\",\"t\":[\"int wiggleMaxLength(vector<int>& nums) { // 使用贪心算法，出现峰值的时候增加摆动序列长度 if(nums.size() <= 1) return nums.size(); int result = 1; int pre = 0; int cur = 0; for(int i = 1; i < nums.size(); i++){ cur = nums[i] - nums[i-1]; // 注意这里为什么要取 = 0？ if(pre <= 0 && cur > 0 || pre >= 0 && cur < 0){ result++; pre = cur; } } return result; } \"]},\"147\":{\"h\":\"股票问题\"},\"148\":{\"h\":\"122. 买卖股票的最佳时机 II - 力扣（LeetCode）\",\"t\":[\"class Solution { public: int maxProfit(vector<int>& prices) { // 把整体利润拆分成每天的利润 int result = 0; for(int i = 1; i < prices.size(); i++){ result += max(prices[i] - prices[i-1], 0); } return result; } }; \",\"只收集每天的正利润，最后稳稳的就是最大利润了\"]},\"149\":{\"h\":\"两个维度权衡问题\"},\"150\":{\"h\":\"有点难度\"},\"151\":{\"h\":\"区间问题\"},\"152\":{\"h\":\"55. 跳跃游戏 - 力扣（LeetCode）\",\"t\":[\"bool canJump(vector<int>& nums) { int k = 0; for(int i = 0; i < nums.size(); i++){ if(i > k) return false; k = max(k, i + nums[i]); } return true; } \",\"用一个K当作覆盖范围，不断更新覆盖范围，如果最大的覆盖范围不能cover掉i，则返回false\",\"45. 跳跃游戏 II - 力扣（LeetCode）\",\"int jump(vector<int>& nums) { int jump_cnt = 0; int start = 0; int end = 1; while(end < nums.size()){ int maxPos = 0; for(int i = start; i < end; i++){ // 能跳到最远的距离 maxPos = max(maxPos, i + nums[i]); } // 下一次起跳点范围开始的格子 start = end; // 下一次起跳点范围结束的格子 end = maxPos + 1; jump_cnt++; } return jump_cnt; } \"]},\"153\":{\"h\":\"53. 最大子数组和 - 力扣（LeetCode）\",\"t\":[\"如果 -2 1 在一起，计算起点的时候，一定是从 1 开始计算，因为负数只会拉低总和，这就是贪心贪的地方！\",\"局部最优：当前“连续和”为负数的时候立刻放弃，从下一个元素重新计算“连续和”，因为负数加上下一个元素 “连续和”只会越来越小。\",\"全局最优：选取最大“连续和”\",\"局部最优的情况下，并记录最大的“连续和”，可以推出全局最优。\",\"从代码角度上来讲：遍历 nums，从头开始用 count 累积，如果 count 一旦加上 nums[i]变为负数，那么就应该从 nums[i+1]开始从 0 累积 count 了，因为已经变为负数的 count，只会拖累总和。\",\"int maxSubArray(vector<int>& nums) { int result = INT_MIN; int sum = 0; for(auto i : nums){ sum += i; if(sum > result) result = sum; if(sum < 0) sum = 0; } return result; } \",\"不能让“连续和”为负数的时候加上下一个元素，而不是 不让“连续和”加上一个负数。\"]},\"154\":{\"h\":\"134. 加油站 - 力扣（LeetCode）\"},\"155\":{\"h\":\"\",\"t\":[\"bash脚本问题\"]},\"156\":{\"h\":\"Ubuntu\"},\"157\":{\"h\":\"解决qt-qpa-xcb-could-not-connect-to-display问题\"},\"158\":{\"h\":\"Ubuntu设置虚拟内存\"},\"159\":{\"h\":\"screen安装与使用\"},\"160\":{\"h\":\"修改文件夹权限\",\"t\":[\"sudo chmod 777 /media/john/diskname \",\"777 代表 修改，读取，执行\",\"一般用 chown ，那个是更改所有者，添加权限就行了\",\"Linux chmod 命令 | 菜鸟教程 (runoob.com)\",\"Ubuntu下重命名硬盘以及修改权限\"]},\"161\":{\"h\":\"重装Ubuntu-的-Nvidia-驱动\"},\"162\":{\"h\":\"Ubuntu挂载多个硬盘并赋予权限\"},\"163\":{\"h\":\"批量修改 JPEG 文件后缀\",\"t\":[\"rename 's/\\\\.JPG/.jpg/' *.JPG \"]},\"164\":{\"h\":\"Docker\",\"t\":[\"使用-MobaXterm-连接-Docker-内环境\"]},\"165\":{\"h\":\"使用 Docker 创建 conda 环境\",\"t\":[\"WARNING\",\"直接从在线的容器列表中找别人配好的容器吧，别浪费自己的时间了！\",\"搜索镜像 ：\",\"docker search anaconda \",\"拉取镜像 ：\",\"docker pull continuumio/anaconda3 \",\"运行镜像 ：\",\"docker run -i -t -p 8888:8888 continuumio/anaconda3 /bin/bash # 上面把宿主的 8888 绑定到容器的8888 端口，jupyter notebook 一般用 8888 端口 docker run -i -t -p 50022:22 continuumio/anaconda3 /bin/bash # ssh 端口默认是 22 \",\"运行完会直接进入容器\",\"docker安装anaconda3_docker anaconda3_felix小康的博客-CSDN博客\"]},\"166\":{\"h\":\"ImportError: libGL.so.1: cannot open shared object file: No such file or directory\",\"t\":[\"【转载】 ImportError: libGL.so.1: cannot open shared object file: No such file or directory——docker容器内问题报错 - 走看看 (zoukankan.com)\",\"sudo apt update sudo apt install libgl1-mesa-glx \",\"如果容器内没有 sudo 指令，可以：\",\"apt-get update apt-get install sudo \"]},\"167\":{\"h\":\"GIT\"},\"168\":{\"h\":\"Git 强制更新覆盖本地代码\",\"t\":[\"当从git上下拉了代码，做了一些测试修改，远程分支有更新时，又不想提交本地代码到远程仓库，只想以最新的代码覆盖本地修改的代码。可以这样做\",\"提醒，此方法任何本地修改都将会丢失\",\"git fetch --all # 然后，你有两个选择： git reset --hard origin/main # 或者如果你在其他分支上： git reset --hard origin/<branch_name> \",\"说明： git fetch从远程下载最新的，不会合并或rebase任何代码。\",\"然后git reset将主分支重置为您刚刚获取的内容。 --hard选项更改工作树中的所有文件以匹配origin/main中的文件\"]},\"169\":{\"h\":\"Ubuntu 设置虚拟内存\",\"t\":[\"什么是swap？\",\"swap 简单的说就是将硬盘当内存用，用于解决内存容量不足的情况。\"]},\"170\":{\"h\":\"设置 swap\",\"t\":[\"查看当前系统是否设置了swap\",\"free -m #swap栏都是 0 0 0 表示没有设置 \",\"创建 swap 文件\",\"使用下面命令创建交换文件。因为要分配硬盘空间，需要一点时间。count=4096 表示创建 4GB 的虚拟内存，单位是 M\",\"sudo dd if=/dev/zero of=/swapfile count=4096 bs=1M #查看swap文件是否创建好了 ls / | grep swapfile \",\"激活 Swap 文件\",\"sudo chmod 600 /swapfile # 获得文件权限 sudo mkswap /swapfile # 设置为 swapfile \",\"挂载 swapfile\",\"sudo swapon /swapfile \",\"设置开机自启\",\" \"]},\"171\":{\"h\":\"删除 swap\",\"t\":[\"#首先输入以下命令停用 SWAP 空间： sudo swapoff -v /swapfile #在 /etc/fstab 文件中删除有效 swap 的行 #最后执行以下命令删除 swapfile 文件： sudo rm /swapfil \"]},\"172\":{\"h\":\"Ubuntu挂载多个硬盘并赋予权限\",\"t\":[\"查看自己的硬盘信息\",\"sudo fdisk -l \",\"创建挂载的目录\",\"其实就是一个文件夹\",\"格式化需要挂载的硬盘\",\"sudo mkfs.ext4 /dev/sdb \",\"记录需要挂载硬盘的 UUID\",\"sudo blkid \",\"编辑/etc/fstab文件\",\"sudo vim /etc/fstab \",\"重启\",\"reboot \",\"查看是否挂载成果\",\"df -h \",\"在挂载成功以后，发现没有权限操作硬盘\",\"无法直接通过右键中的Copy、Move等操作硬盘。只能通过命令行中的sudo move等命令来操作。\",\"进入硬盘，右键，打开终端，可以看见硬盘的名字。\",\"sudo chown -R 用户名 硬盘名字 \",\"修改名字\",\"sudo e2label /dev/sdb(位置) 新名字1 \"]},\"173\":{\"h\":\"Shell 脚本问题\"},\"174\":{\"h\":\"bad interpreter\",\"t\":[\"在我看来，您的文件副本有DOS/Windows风格的行尾(回车符后跟换行符)，而不是unix风格的行尾(仅仅是换行符)；这让shell非常困惑，因为它认为回车符是命令的一部分(导致命令找不到错误)，还会给出乱码错误消息。\",\"您可以通过打印脚本文件来检查，例如cat -vet /usr/local/app2/aaa.sh --如果行以^M$ 结束，则以DOS/Windows结束，如果它们仅以$结束，则以unix结束。\",\"您到底是如何复制脚本的？\",\"一 概述 今天我在执行shell脚本 ./xx.sh 的时候提示了/bin/bash^M: bad interpreter；\",\"二 解决过程\",\"通过vim编辑工具打开文件：\",\"然后输入：set ff? 显示为：fileformat＝dos\",\"最后输入：set ff = unix即可\",\"我的大概理解为文件在Windows上编辑过，倒是文档字符与Linux文档字符不匹配导致。\",\"具体原因后续学习相关知识再来补充。。。\",\"————————————————\",\"版权声明：本文为CSDN博主「至学者」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/calm_encode/article/details/122294045\"]},\"175\":{\"h\":\"“-usr-bin-env-bashr-没有那个文件或目录\",\"t\":[\"用 ./ 运行bash脚本文件出现 报错信息 /usr/bin/env: \\\"bash\\\\r\\\": 没有那个文件或目录\",\"错误原因：这主要是因为bash后面多了\\\\r这个字符的原因。\",\"在linux终端下，输出\\\\r会什么都不显示，只是把光标移到行首。于是终端虽然输出了/usr/bin/env bash，但是碰到\\\\r后，光标会被移到行首，接着输出了:No such file or directory把前面的覆盖掉了。于是出现了那个莫名其妙的出错信息了\",\"解决办法：\",\"用vim打开sh脚本文件， 重新设置文件的格式\",\":set ff #然后回车 再重新设置下文件格式： :set ff=unix #然后保存退出 :wq! #回车 \",\"———————————————— 版权声明：本文为CSDN博主「程序员小熊」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/xiongchun11/article/details/78832947\",\"shell/sh脚本里的$1是什么意思\"]},\"176\":{\"h\":\"screen安装与使用\"},\"177\":{\"h\":\"1.检查是否已安装 screen\",\"t\":[\"screen -ls \",\"输出显示\",\"bash: screen: command not found \",\"说明容器内没有安装 screen。\"]},\"178\":{\"h\":\"2.安装 screen\",\"t\":[\"apt-get install screen \"]},\"179\":{\"h\":\"3.创建一个 screen 会话\",\"t\":[\"screen -S your_screen_name \",\"此时可以输入命令，列出所有的 screen：\",\"screen -ls \"]},\"180\":{\"h\":\"4.断开与当前 screen 连接\",\"t\":[\"断开连接，让服务器端继续运行任务：ctrl + a + d\"]},\"181\":{\"h\":\"5.恢复某 screen 会话\",\"t\":[\"输入命令回到 screen 会话\",\"screen -r [会话ID|会话名称] \",\"回到指定会话，可以是会话名称，也可以是会话ID\"]},\"182\":{\"h\":\"6.删除不需要的 screen\",\"t\":[\"查看所有的 screen：screen -ls\",\"现在想要删除名叫 invalid_screen 的 screen 会话\",\"输入命令：\",\"screen -S invalid_screen -X quit \",\"主要参考： 学习记录：Screen的安装与使用方法（Ubuntu）_linbai_6.6的博客-CSDN博客_screen ubuntu\"]},\"183\":{\"h\":\"使用 MobaXterm 连接 Docker 内环境\"},\"184\":{\"h\":\"创建容器\",\"t\":[\"SSH 默认端口是22，将宿主机器的空闲端口映射到容器端口 22，比如 50022\",\"此时在外部访问宿主机 50022 端口就相当于在访问容器的 22 端口\",\"docker pull ubuntu:latest docker run -it --privileged=true -p 50022:22 --name ubuntu ubuntu bash # 在容器中安装某些大型软件，如matlab时可能需要让--privileged=true, # -p后跟端口映射，--name后跟你喜欢的容器名，-v后跟地址映射，根据你的需求来指定文件夹 # -v /d/docker/ubuntu_fsl_disp:/shared_data \"]},\"185\":{\"h\":\"安装常用软件\",\"t\":[\"apt-get update apt-get install vim apt-get install git apt-get install net-tools \"]},\"186\":{\"h\":\"配置 SSH 链接\",\"t\":[\"容器中安装 SSH Server\",\"apt-get install openssh-server \",\"修改sshd_config，开放22端口，并允许密码登录\",\"echo \\\"Port 22\\\">>/etc/ssh/sshd_config echo \\\"PermitRootLogin yes\\\">>/etc/ssh/sshd_config \",\"启动ssh服务\",\"service ssh start \",\"查看ssh状态\",\"service ssh status \",\"先设置容器root用户密码，没有密码外部无法登陆。\",\"passwd \",\"查看22端口是否处于监听状态。\",\"netstat -ap | grep ssh \",\"若不是，service ssh restart重启一下SSH\",\"设置 MobaXterm，Host 地址是 WSL 的 IPV4 地址，需要上面设置的账号和密码\",\"Docker容器使用MobaXterm连接_wooyang2018的博客-CSDN博客_docker mobaxterm\"]},\"187\":{\"h\":\"解决qt-qpa-xcb-could-not-connect-to-display问题\"},\"188\":{\"h\":\"出现原因\",\"t\":[\"远程调用 Linux GUI 时报错：\",\"qt.qpa.xcb: could not connect to display qt.qpa.plugin: Could not load the Qt platform plugin \\\"xcb\\\" in \\\"/root/anaconda3/lib/python3.8/site-packages/cv2/qt/plugins\\\" even though it was found. This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem. Available platform plugins are: xcb, eglfs, minimal, minimalegl, offscreen, vnc \"]},\"189\":{\"h\":\"解决方法\",\"t\":[\"安装 Xorg\",\"Xorg是X11的实现，负责连接到Xserver进行输入和输出。\",\"sudo apt-get install xorg \",\"重启 ssh 服务\",\"service ssh restart \",\"解决qt.qpa.xcb: could not connect to display问题_pycharm中qt.qpa.xcb: could not connect to display 1_\"]},\"190\":{\"h\":\"\"},\"191\":{\"h\":\"安装自定义显卡驱动版本号\",\"t\":[\"官方驱动 | NVIDIA\",\"在英伟达官网找到合适的驱动版本\",\"禁用系统自带的 nouveau 驱动：\",\"sudo vim /etc/modprobe.d/blacklist-nouveau.conf \",\"添加黑名单：写上 blacklist nouveau\",\"然后更新\",\"sudo update-initramfs -u \",\"但是有些人禁用后，输入\",\"lsmod | grep nouveau\",\"检查，还是有输出 那就改写成下面这样：\",\"blacklist nouveau blacklist lbm-nouveau options nouveau modeset=0 alias nouveau off alias lbm-nouveau off \",\"重启后ctrl + alt + F1进入命令行，开始操作\",\"$sudo service lightdm stop # 进入驱动目录 ---- 第三步的作用 # username是你自己的用户名/down是上面建立的，放我们下载的驱动文件 $cd /home/username/down # 更改权限，tab补全名字 $sudo chmod a+x NVIDIA-Linux-x86_64-430.34.run ''' 安装 非常重要*****''' ||||||||||||||||||||||||||||||||||||||||||||||||||||| $sudo ./NVIDIA-Linux-x86_64-390.77.run '''这里开始就很骚了,大概率会提示你''' the distribution-provided pre-install scipt failed，是否继续安装？ '''如果你从来没有安装过nvidia驱动，甚至方法一都没有安装过，就走如下流程：''' # 1.按“continue”； # 2.问你装32-bit库吗？按'NO' ，如果没问就是‘Warning...’无视它，点`OK` # 3.问你“would you like to run the nvidia-xconfig ...” 按'NO' # 4.一般会让你确认细节，点`ok` |||BUT||BUT|||||BUT|||||BUT||||BUT||||BUT||||||BUT|||| '''如果你安装过驱动，请按'取消安装'，按以下流程走：''' $sudo apt-get remove --purge nvidia* # 1.删除以前安装的文件 $sudo ./Nvidiaxxxx你下载的驱动具体名字.run -uninstall # 2.卸载文件内容 ''' 3. 回到上面的第六步和第七步，重新弄一遍''' $sudo reboot # 重启 $sudo ./NVIDIA-Linux-x86_64-390.77.run # 4. 再安装 # 还是会提醒的，遇到警告也不怕 # 5.按“continue”； # 6.问你装32-bit库吗？按'NO' # 7.问你“would you like to run the nvidia-xconfig .......” 按'NO' # 开机～ $sudo service lightdm start \"]},\"192\":{\"h\":\"OneFormer3D\",\"t\":[\"CVPR 2023\",\"LargeKernel3D: Scaling up Kernels in 3D Sparse CNNs | Papers With Code\",\"摘要：对于3D点云的语义分割、实例分割和全景分割已经分别使用了特定设计的任务模型进行了研究。因此，所有分割任务的相似性和它们之间的隐含关系并未得到有效利用。本文提出了一个统一、简单而有效的模型，共同解决了所有这些任务。该模型被命名为OneFormer3D，使用一组可学习的核心一致地执行实例和语义分割，其中每个核心负责为实例或语义类别生成掩码。这些核心通过一个基于transformer的解码器进行训练，其中统一的实例和语义查询作为输入传递。这样的设计使得能够在单次运行中端到端地训练模型，从而在同时实现所有三个分割任务的最佳性能。具体而言，我们的OneFormer3D在ScanNet测试排行榜中获得了第一名，并取得了新的最先进水平（+2.1 mAP50）。我们还展示了在ScanNet（+21 PQ）、ScanNet200（+3.8 mAP50）和S3DIS（+0.8 mIoU）数据集的语义分割、实例分割和全景分割方面的最先进结果。\"]},\"193\":{\"h\":\"解决的问题：\",\"t\":[\"该论文要解决的问题是点云分割的问题，即如何将三维点云中的每个点分配到不同的语义或实例类别，从而实现对点云的理解和分析。点云分割是三维计算机视觉中的一个重要和具有挑战性的任务，它有着广泛的应用，如机器人导航、自动驾驶、增强现实等。点云分割的难点主要有以下几个方面：\",\"点云的表示方式多样，如稀疏体素、八叉树和点云，每种表示方式都有其优缺点，如何设计一个通用的模型，可以适应不同的点云表示，是一个关键的问题。\",\"点云的数据量大，且具有不规则和无序的特点，如何有效地处理点云的数据结构，提取点云的特征，是一个核心的问题。\",\"点云的分辨率和密度不均匀，且受到噪声和遮挡的影响，如何提高点云分割的鲁棒性和精度，是一个实际的问题。\",\"该论文的目标是提出一个基于Transformer的模型，可以统一处理不同的点云表示，利用自注意力机制和跨注意力机制，捕捉点云的局部和全局上下文信息，同时引入一个动态的点云采样模块，可以根据点云的密度和复杂度，自适应地调整采样率，从而解决点云分割的问题。\"]},\"194\":{\"h\":\"主要贡献：\",\"t\":[\"它设计了一个通用的点云编码器，可以将不同的点云表示转换为一致的特征向量，从而实现跨表示的点云分割。\",\"它提出了一个基于Transformer的点云解码器，可以利用自注意力机制和跨注意力机制，有效地捕捉点云的局部和全局上下文信息。\",\"它引入了一个动态的点云采样模块，可以根据点云的密度和复杂度，自适应地调整采样率，从而提高模型的效率和鲁棒性。\",\"它在多个点云分割的数据集上进行了实验，包括S3DIS、ScanNetv2、ShapeNetPart和PartNet，并在所有数据集上取得了最先进的性能，证明了其模型的优越性和通用性。\"]},\"195\":{\"h\":\"架构\",\"t\":[\"OneFormer3D 框架基于 SPFormer（蓝色），但具有许多改进（红色）。一旦获得 3D 点云作为输入，我们训练的模型就可以解决 3D 实例、3D 语义和 3D 全景分割任务。虚线描绘了仅在训练期间应用的组件。\",\"First, a sparse 3D U-net extracts point-wise features\",\"Then, these features pass through a flexible pooling, that obtains superpoint features through simply averaging features of points in a superpoint. Superpoint features serve as keys and values for a transformer decoder (Sec. 3.2), that also accepts learnable semantic and instance queries as inputs.\",\"The decoder captures superpoints information via a cross-attention mechanism, and outputs a set of learned kernels, each representing a single object mask of an instance identity (from an instance query) or a semantic region (from a semantic query.\",\"A disentangled matching strategy is adopted to train instance kernels in an end-to-end manner (Sec. 3.3). As a result, a trained OneFormer3D can seamlessly solve semantic, instance, and panoptic segmentation (Sec. 3.4).\",\"然后，这些特征通过flexible pooling灵活的池化，通过简单地平均超点中点的特征来获得Superpoint feature超点特征。 Superpoint 特征充当transformer解码器的key和value（第 3.2 节），它也接受可学习的语义和实例queries作为输入。\",\"解码器通过交叉注意机制捕获超点信息，并输出一组学习内核，每个内核代表实例身份（来自实例查询）或语义区域（来自语义查询）的单个对象掩码。\",\"解缠结匹配策略采用端到端的方式训练实例内核（第 3.3 节）。因此，经过训练的 OneFormer3D 可以无缝解决语义、实例和全景分割问题（第 3.4 节）。\"]},\"196\":{\"h\":\"Sparse 3D U-Net.\",\"t\":[\"假设输入点云包含N个点，则输入可以表示为P∈RN×6。每个 3D 点都用三种颜色 r、g、b 和三个坐标 x、y、z 进行参数化。按照[6]，我们对点云进行体素化，并使用由稀疏 3D 卷积组成的类似 U-Net 的主干来提取逐点特征\"]},\"197\":{\"h\":\"Query Decoder\",\"t\":[\"查询解码器将 $K_{ins} + K_{sem} $查询作为输入，并将其转换为 Kins​+Ksem​ 内核。然后，超点特征与这些内核进行卷积，分别生成 Kins​ 实例和 Ksem​ 语义掩码。\",\"Semantic queries语义查询是随机初始化的，与现有的 3D 实例分割方法相同?\",\"通过交叉注意力学习\"]},\"198\":{\"h\":\"Query selection\",\"t\":[\"最先进的 2D 对象检测和 2D 实例分割方法 [19,45,50] 使用高级策略初始化查询，通常称为查询选择。具体来说，输入查询使用来自转换器编码器的特征进行初始化，并根据对象分数进行采样。该分数是由同一模型估计的，该模型由训练期间额外的客观性损失引导。事实证明，所描述的技术可以加快训练速度，同时共同提高整体准确性。然而，据我们所知，类似的方法从未应用于 3D 对象检测或 3D 分割。\",\"因此，我们的目标是通过适用于 3D 数据的查询选择的简化版本和非变换器编码器来缩小这一差距。特别是，我们在灵活池化后使用骨干特征初始化查询。通过查询选择，我们仅随机选择一半的初始化查询，以在训练期间进行额外的增强。在推理过程中，我们类似地初始化查询，但不过滤查询以保留所有输入信息。\",\"Superpoint Transformer for 3D Scene Instance Segmentation | Papers With Code\",\"Superpoint Transformer for 3D Scene Instance Segmentation\",\"AAAI 2023\"]},\"199\":{\"h\":\"摘要\",\"t\":[\"大多数现有方法通过扩展用于 3D 对象检测或 3D 语义分割的模型来实现 3D 实例分割。然而，这些非直接方法有两个缺点：\",\"1）不精确的边界框或不令人满意的语义预测限制了整个 3D 实例分割框架的性能。\",\"2）现有方法需要耗时的聚合中间步骤。\",\"为了解决这些问题，本文提出了一种基于 Superpoint Transformer的新颖的端到端3D实例分割方法，命名为SPFormer。它将点云中的潜在特征分组为 Superpoint，并通过查询向量直接预测实例，而不依赖于对象检测或语义分割的结果。该框架的关键步骤是一种带有 Transformer 的新型查询解码器，它可以通过 superpoint 交叉注意机制捕获实例信息并生成实例的 Superpoint 掩码。通过基于 superpoint 掩码的二分匹配，SPFormer 可以实现无需中间聚合步骤的网络训练，从而加速网络。 ScanNetv2 和 S3DIS 基准的大量实验验证了我们的方法简洁而高效。值得注意的是，SPFormer 在 ScanNetv2 隐藏测试集上的 mAP 超过了最先进的方法 4.3%，同时保持了快速的推理速度（每帧 247 毫秒）\",\"提出一个混合框架，避免缺点并同时从两种类型的方法中受益。两阶段端到端的 3D 实例分割方法：SPFormer。 SPFormer 将点云中自下而上的潜在特征分组为超级点，并通过查询向量作为自上而下的管道提出实例。\"]},\"200\":{\"h\":\"Method\",\"t\":[\"SPFormer的整体架构，包含两个阶段。在自下而上的分组阶段，稀疏3D U-net从输入点云P中提取逐点特征，然后超点池化层将同质相邻点分组为超点特征S。在自上而下的提议阶段，查询解码器为分为两个分支。实例分支通过 Transformer Decoder 获取查询向量特征 Z’。 mask 分支提取 mask-aware 特征 Smask。最后，预测头生成实例预测，并在训练/推理期间将它们输入到二分匹配或排名中。\"]},\"201\":{\"h\":\"Query Decoder\",\"t\":[\"查询解码器由实例分支和掩码分支组成。\",\"在掩模分支中，一个简单的多层感知器（MLP）旨在提取掩模感知特征Smask​。\",\"实例分支由一系列 Transformer 解码器层组成。通过超点交叉注意力来解码可学习的查询向量。假设有 K 个可学习的查询向量。我们将每个 Transformer 解码器层的查询向量的特征预定义为 D 是嵌入维数\",\"考虑到 Superpoint 的无序性和数量的不确定性，引入 Transformer 结构来处理变长输入。Superpoint 的潜在特征和可学习的查询向量被用作变压器解码器的输入。我们修改后的 Transformer 解码器层的详细架构如下图所示：\",\"WARNING\",\"In addition, because the input is the potential features of superpoints, we empirically remove position embedding.\",\"《Masked-attention mask transformer for universal image segmentation》CVPR2022\",\"查询向量在训练前随机初始化，每个点云的实例信息只能通过超点交叉注意力获得，因此，与标准解码器层相比，我们的 Transformer 解码器层交换了自注意力层和交叉注意力层的顺序\",\"经过线性投影后的 Superpoint 特征S′ ，来自上一层的查询向量 Zl−1​ 通过 Superpoint 交叉注意机制捕获上下文信息，可以表示为：\"]},\"202\":{\"h\":\"Shared Prediction Head\",\"t\":[\"使用来自实例分支的查询向量 Z′，我们使用两个独立的 MLP 来预测每个查询向量的分类 ，并使用 IoU 感知分数分别。\",\"此外，提案的排名深刻地影响实例分割结果，\",\"而在实践中，由于一对一的匹配方式，大多数提案会被视为背景，这导致提案质量排名的错位。\",\"因此，我们设计了一个分数分支来估计预测的超点mask和gt-mask的 IoU，以补偿未对准misalignment.。\",\"mask-aware features S​, directly multiply it by query vectors Z‘ followed a sigmoid function to generate superpoint masks prediction M‘\",\"构建一个稀疏卷积需要满足哪些要求:\",\"减少不必要的运算量。\",\"满足特征的稀疏性，并且在保证稀疏性的同时维护特征的空间不变性。\"]},\"203\":{\"h\":\"1. MinkEngine\",\"t\":[\"C=​x1​xN​​y1​:yN​​z1​:zN​​b1​bN​​​,F=​f1T​:fNT​​​\",\"其中 (x,y,z) 表示点云的坐标， b 表示 属于batch中的哪个点云 (MinkowskiEngine也是把点云组织成batch进行训练)， N 表示1个batch中所有点的数量， fni​ 表示第 i 个点的特征，可以是1维或者3维或者其它维度的。\"]},\"204\":{\"h\":\"Sparse Tensor Quantization\",\"t\":[\"数据处理以生成稀疏张量\",\"将所有坐标转换为哈希键，并找到所有唯一的哈希键标签对以消除冲突。\"]},\"205\":{\"h\":\"Generalized Sparse Convolution\",\"t\":[\"根据输入坐标 Cin（Eq.3）生成输出坐标 Cout。\",\"使用指定的内核映射将输入与内核进行卷积\"]},\"206\":{\"h\":\"Pooling\"},\"207\":{\"h\":\"Non-spatial Funtions\"},\"208\":{\"h\":\"2. SpConv\",\"t\":[\"traveller59/spconv: Spatial Sparse Convolution Library (github.com)\",\"spConv稀疏卷积 - 知乎 (zhihu.com)\",\"什么是（submanifold）子流形？\",\"We use the term 'submanifold' to refer to input data that is sparse because it has a lower effective dimension than the space in which it lives, for example a one-dimensional curve in 2+ dimensional space, or a two-dimensional surface in 3+ dimensional space.\",\"我们使用术语“子流形”来表示输入数据是稀疏的，因为它的有效维数低于它所在的空间，例如二维空间中的一维曲线，或三维空间中的二维曲面。\"]},\"209\":{\"h\":\"建立输入哈希表\",\"t\":[\"首先，稀疏卷积操作会将输入转化为Hash_in这张输入哈希表，hash_in表示着activate输入的标志（也就是说对应的这个稀疏输入是需要被计算的）。\",\"对于P1点而言，在hash_in中对应了v=0 key=(2,1)。其对应的输出tensor中与P1有关的像素点为A1的六个位置那么将这些点视作作为P_out。以此类推P2也会拥有一系列P2_out的点。将这些Pout点合并后可以获得Hash_out表。\",\"构建hash表的最重要原因是我们在前面提到的在完成稀疏卷积后为了防止稀疏特征的塌缩失去几何特征的表示能力，这里将Tensor的坐标与序号进行对应，方便卷积计算好数值之后将其放回原本tensor的位置。\"]},\"210\":{\"h\":\"建立RuleBook\",\"t\":[\"在第一步中，我们成功的建立了输入和输出的哈希表。这两个表分别将输入和输出的Tensor坐标映射到了序号，但是这两张表之间的序号是不统一的现在需要额外构建一张rulebook表将输入和输出这两张表对应起来。\",\"上图显示了构建Rulebook的整体流程，其中分为两个主要部分。\",\"第一，将Pout转化到GetOffset(Pin, P)；\",\"第二，从GetOffSet(Pin, P)转化到Rulebook。\",\"首先来看如何构建GetOffset（Pin, P）这个函数。假如以Pout(0,0)为例，在这个橙色的窗口中只有右侧P1位置非零，其余位置均为零。那么这次卷积操作只需要通过这个位置的卷积权重和输入值计算得到。P1位置对应到卷积核中的位置就是（1，0）。我们把这个（1，0）放入GetOffset()结果中。\",\"将GetOffset()进一步得到Rulebook\",\"在上一步中我们根据Pin与Pout获得GetOffset()，那么这个获得的方法就可以总结成Rulebook。我们可以看到Rulebook中第一列为上一步记录的卷积核权重位置，第三列为输入像素值的输入序号，第四列为卷积结果对应的输出序号,count为各个卷积权重的数量统计。\",\"稀疏卷积在GPU中的运算是通过查询Rulebook实现的，以Rulebook第一行红色方框为例，首先通过（-1，-1）找到卷积核权重F0；其次，根据输入像素序号，查找输入哈希表找到对应的tensor向量（0.1，0.1，0.1）\"]},\"211\":{\"h\":\"3. TorchSparse\",\"t\":[\"TorchSparse: Efficient Point Cloud Inference Engine | Papers With Code\",\"TorchSparse++: Efficient Training and Inference Framework for Sparse Convolution on GPUs | Papers With Code\",\"TorchSparse的优化策略包括：\",\"采用自适应的矩阵乘法分组，提高计算的规则性；\",\"采用量化，向量化和局部性感知的内存访问，减少数据移动的开销；\",\"采用内核融合，减少映射操作的延迟\",\"TorchSparse++:\",\"提出了一个稀疏核生成器，可以快速生成高性能的稀疏卷积核，降低了工程复杂度；\",\"设计了一个稀疏自动调优器，可以在扩大的设计空间中搜索最佳的数据流配置，适应不同的训练和推理工作负载。\"]},\"212\":{\"h\":\"Deep Learning for 3D Point Clouds: A Survey\",\"t\":[\"https://arxiv.org/abs/1912.12033\"]},\"213\":{\"h\":\"1. 数据集\"},\"214\":{\"h\":\"2. 评价指标\",\"t\":[\"3D 形状分类，总体精度 (OA) 和平均类别精度 (mAcc) 是最常用的性能标准。\",\"“OA”代表所有测试实例的平均准确度，“mAcc”代表所有形状类别的平均准确度。\",\"3D 目标检测，平均精度 (AP) 是最常用的标准。它的计算方式是精确率-召回率曲线下的面积。\",\"精度和成功度通常用于评估 3D 单目标跟踪器的整体性能。\",\"平均多目标跟踪精度 (AMOTA) 和平均多目标跟踪精度 (AMOTP) 是评估 3D 多目标跟踪最常用的标准。\",\"3D 点云分割，OA、平均交并集 (mIoU) 和平均类精度 (mAcc) 是最常用的性能评估标准。\",\"平均精度（mAP）也用于 3D 点云的实例分割。\"]},\"215\":{\"h\":\"3. 分类\"},\"216\":{\"h\":\"3.1基于投影的网络\",\"t\":[\"这些方法将三维点云投影到不同的表示方式（如多视图、体素表示）中，用于特征学习和形状分类。\"]},\"217\":{\"h\":\"3.1.1 多视图表示\",\"t\":[\"这些方法将3D点云投影到多个视图当中，并提取不同视图方向的特征，然后混合这些特征来以进行准确的形状分类。如何将多个基于视图的特征聚合到一个可区分的全局表示中是一个关键挑战。\",\"MVCNN是一项开创性的工作，它将多视图特征简单地聚合到一个全局描述符中。但是，最大池仅保留特定视图中的最大元素，从而导致信息丢失。MHBN通过协调双线性池来集成局部卷积特征，从而产生一个紧凑的全局描述符。Yang等人[17]首先利用一组视图上的相互关系（如区域-区域关系，视图-视图关系）来提出一个关系网络，然后聚合这些视图以获得有判别性的三维对象表示。此外，为了提高识别精度，还提出了其他几种方法[18][19][20][21]。\"]},\"218\":{\"h\":\"3.1.2 体素化表示\",\"t\":[\"早期的方法通常将三维卷积神经网络（CNN）运用于三维点云的体素表示上。Daniel等人[22]介绍了一个称为VoxNet的体素占据网络，以实现稳健的三维物体识别。Wu等人[6]提出了一种基于卷积深度信念的三维形状网络，用于从各种三维形状中学习点的分布。三维形状通常用体素网格上二元变量的概率分布来表示。尽管该方法已经取得了令人鼓舞的性能，但由于计算和内存占用随着分辨率呈指数增长，这些方法无法很好地扩展到密集的三维数据。为此，提出了一种层次化、紧凑的图结构（如八叉树）来降低这些方法的计算和存储开销。OctNet [23]首先使用混合网格八叉树结构分层地划分点云，该结构利用几个浅八叉树结构来表示三维场景，利用bit来对八叉树结构进行有效编码，并用简单的算法对每个体素的特征向量进行索引。Wang [24]等人提出了一种基于八叉树的CNN用于三维形状分类方法，将叶子节点八分角点采样的法向量作为该三维模型的平均法向量输入到网络中，并将3D-CNN应用到三维形状曲面所占用的八分角点上。与基于密集输入网络的网络相比，OctNet对高分辨率点云的内存和运行时间要求要少得多。Le [25]提出了一种称为点网格的混合网络，它集成了点和网格的表示，以实现高效的点云处理。在每个嵌入的体素网格内采样固定数量的点，这使得网络可以通过使用三维卷积来提取几何细节。\"]},\"219\":{\"h\":\"3.2基于点的网络\",\"t\":[\"根据用于每个点特征学习的网络结构，该类方法可分为点式MLP、卷积式、图式、数据索引式等其他典型网络。\"]},\"220\":{\"h\":\"3.2.1 点式MLP网络\",\"t\":[\"该方法使用多个多层感知机（MLP）独立地对每个点建模，然后使用对称函数聚合全局特征，如图3所示。这些网络可以实现三维无序点云的置换不变性。然而，三维点之间的几何关系并没有得到充分的考虑。\",\"作为一个开创性的工作，PointNet [5]使用多个MLP学习点特征，用Max pooling层提取全局形状特征，并使用多个MLP层获得分类分数。Zaheer等人[26]从理论上证明了实现置换不变性的关键是总结所有表示并应用非线性变换。他们还设计了一个基础架构DeepSets，用于各种应用，包括形状分类。\",\"由于PointNet中每个点的特征都是独立学习的，因此无法捕获点之间的局部结构信息。因此，Qi等人[27]提出了一种层次网络PointNet++来从每个点的领域捕获精细的几何结构。作为PointNet++层次结构的核心，其提取层由三层组成：采样层、分组层和PointNet层。通过叠加多个提取层，PointNet++可以从局部几何结构中学习特征，并逐层提取局部特征。\",\"因为其简单性和很强的表示能力，许多网络均基于PointNet。Achlioptas等人[28]引入了一个深度自动编码器网络来学习点云表示。它的编码器遵循PointNet的设计，通过五个一维卷积层、一个ReLU非线性激活层、batch normalization和max-pooling操作来独立地学习点特征。在Point Attention Transformers (PATs)中，每个点由其自身的绝对位置和相对于其相邻点的相对位置表示。然后，Group Shuffle Attention (GSA)被用于捕获点之间的关系，建立一个置换不变、可微、可训练的端到端的Gumbel Subset Sampling (GSS)层来学习层次特征。Mo-Net的结构与PointNet类似，但是它需要一组有限的时间作为其网络的输入。PointWeb建立在PointNet++基础之上，并使用Adaptive Feature Adjustment (AFA)来获取局部领域的上下文信息来改进点特征。Duan等人[32]提出了一个结构关系网络Structural Relational Network (SRN)，利用MLP学习不同局部结构之间的关系特征。Lin等人[33]通过为PointNet学习的输入空间和函数空间构建一个查找表，加速推理过程。其在ModelNet和ShapeNet数据集上的推理时间超过PointNet 32倍。SRINet [34]首先投影一个点云以获得旋转不变的表示，然后利用基于PointNet提取全局特征，并利用基于图的聚集来提取局部特征。\"]},\"221\":{\"h\":\"3.2.2 基于卷积的网络\",\"t\":[\"与二维网格结构（如图像）中定义的核相比，三维点云的卷积核由于点云的不规则性而难以设计。根据卷积核的类型，目前的三维卷积网络可以分为连续卷积网络和离散卷积网络。\",\"点的局部邻居的连续和离散卷积的图示。 (a) 表示以点 p 为中心的局部邻域 qi； (b)和(c)分别表示3D连续和离散卷积\"]},\"222\":{\"h\":\"连续卷积\",\"t\":[\"这些方法在连续空间上定义卷积核，其中相邻点的权重与相对于中心点的空间分布相关。\",\"3D 卷积可以解释为给定子集的加权和。作为 RS-CNN [62] 的核心层，RSConv 将某个点周围的点的局部子集作为输入，并使用 MLP 通过学习低级关系（例如欧几里德距离和相对位置）到局部子集中点之间的高级关系。在[63]中，核元素是在单位球体中随机选择的。然后使用基于 MLP 的连续函数来建立核元素位置和点云之间的关系。在 DensePoint [64] 中，卷积被定义为具有非线性激活器的单层感知器（SLP）。通过连接所有先前层的特征来学习特征，以充分利用上下文信息。\",\"Thomas 等人 [65] 提出了使用一组可学习核点的 3D 点云的刚性和可变形核点卷积 (KPConv) 算子。 ConvPoint [66]将卷积核分为空间部分和特征部分。空间部分的位置是从单位球体中随机选择的，权重函数是通过简单的 MLP 学习的\",\"有些方法还使用现有的算法来执行卷积。在 PointConv [67] 中，卷积被定义为关于重要性采样的连续 3D 卷积的蒙特卡洛估计。卷积核由加权函数（通过 MLP 层学习）和密度函数（通过核化密度估计和 MLP 层学习）组成。\",\"为了提高内存和计算效率，3D卷积进一步简化为两个运算：矩阵乘法和2D卷积。在相同的参数设置下，其内存消耗可减少约64倍。在 MCCNN [68] 中，卷积被认为是依赖于样本密度函数（用 MLP 实现）的蒙特卡罗估计过程。然后使用泊松盘采样来构建点云层次结构。该卷积算子可用于在两种或多种采样方法之间执行卷积，并且可以处理不同的采样密度。在 SpiderCNN [69] 中，SpiderConv 被提出将卷积定义为阶跃函数和在 k 个最近邻上定义的泰勒展开式的乘积。阶跃函数通过对局部测地距离进行编码来捕获粗略几何形状，泰勒展开式通过在立方体顶点处插值任意值来捕获固有的局部几何变化。此外，还提出了基于径向基函数的用于 3D 点云的卷积网络 PCNN [70]。\",\"针对三维卷积网络面临的旋转不变问题，提出了几种解决方法。Esteves等人[43]提出了一种以多值球面函数为输入的三维球面卷积神经网络（spheral CNN）来学习三维形状的旋转不变表示，局部卷积滤波器是通过在球面调和域中参数化带锚定点的谱得到的。张量场网络[44]将点卷积运算定义为可学习的径向函数和球谐函数的乘积，球谐函数局部等价于点的三维旋转、平移和置换。文献[45]中的卷积是基于球面互相关定义的，并用广义快速傅立叶变换（FFT）算法实现。SPHNet [46]以PCNN为基础，在体函数卷积过程中引入球谐核，实现了旋转不变性。ConvPoint [47]将卷积核分为空间和特征部分，空间部分的位置是从一个单位球体中随机选择的，权重函数是通过一个简单的MLP来学习的。 为了加快计算速度，Flex-Convolution [48]将卷积核的权值定义为k个最近邻上的标准标量积，使用CUDA可以加快计算速度。实验结果表明，该算法在参数少、内存消耗低的小数据集上具有较好的性能。\"]},\"223\":{\"h\":\"离散卷积\",\"t\":[\"这些方法在规则网格上定义卷积核，其相邻点的权重以其相对于中心点的偏移量有关。\",\"Hua等人[49]提将非均匀三维点云转化为均匀网格，并在每个网格上定义卷积核。与二维卷积（为每个像素分配一个权重）不同，所提出的三维核为落入同一个网格的所有点分配相同的权重。对于给定的点，位于同一网格上的所有相邻点的平均特征都是从上一层计算出来的。然后，对所有网格的平均特征进行加权求和，得到当前层的输出。Lei等人[50]定义了一个球面卷积核，将一个三维球面邻域划分为多个，并将每个体积箱与一个可学习的加权矩阵相关联。一个点的球面卷积核的输出是由其相邻点的加权激活值均值的非线性激活决定的。在 GeoConv [51]中，点与其相邻点之间的几何关系是基于六个基显式建模的。边缘特征沿基的每个方向由可学习矩阵根据相邻点的基独立加权。然后，根据给定点及其相邻点形成的角度聚集这些方向的相关特征。对于给定点，其在当前层的特征被定义为给定点的特征与其在上一层的相邻边缘特征之和。PointCNN [52]通过一个X-conv实现置换不变性转换（通过MLP实现）。Mao等人[53]将点特征插值到相邻的离散卷积核权坐标，提出了一种插值卷积算子InterpConv来度量输入点云与核权坐标之间的几何关系。Zhang等人[54]提出了一种利用RIConv算子实现旋转不变性的方法，该方法以低阶旋转不变性的几何特征作为输入，通过简单的二值化方法将卷积变换为1D。\",\"A-CNN [55]通过循环查询点的每个环上的核大小的邻域数组来定义环形卷积。A-CNN学习局部子集中邻域点之间的关系。为了降低3D CNNs的计算和存储成本，Kumawat等人[56]提出了一种基于三维短时傅里叶变换（STFT）的校正局部相体积（ReLPV）块来提取三维局部邻域中的相位，大大减少了参数的数目。在SFCNN [57]中，点云被投影到具有对齐球坐标的规则二十面晶格上，然后通过卷积maxpooling卷积结构对球面格顶点及其领域连接的特征进行卷积。SFCNN能够抵抗旋转和扰动。\"]},\"224\":{\"h\":\"3.2.3 基于图的网络\",\"t\":[\"基于图的网络将点云中的每个点视为图的顶点，并基于每个点的领域为图生成有向边。然后在空间域或者谱域中执行特征学习。\"]},\"225\":{\"h\":\"基于图的空间域\",\"t\":[\"这些方法定义了空间域中的操作（如卷积和池）。具体来说，卷积通常是通过空间邻域上MLP来实现的，而池则是通过聚合每个点邻域的信息来产生一个新的粗略图。每个顶点的特征通常被赋予坐标、激光强度和颜色，而每个边的特征通常被赋予两个连接点之间的几何属性。\",\"作为一个开创新的工作，Simonovsky等人[58]将每个点看作图的一个顶点，并通过有向边将每个顶点连接到其所有领域。然后，利用滤波器生成网络（如MLP）提出了边缘条件卷积（ECC），采用Max-pooling算法对邻域信息进行聚合，基于体素网格算法实现图形粗化。对于形状分类，卷积和池首先交错进行，然后根据全局平均池和完全连接层生成分类分数。在DGCNN [60]中，在特征空间中构造一个图，并在网络的每一层之后动态更新。作为EdgeConv的核心层，MLP被用作每个边缘的特征学习函数，信道对称聚集也被应用于每个点的邻域相关的边缘特征上。此外，LDGCNN [61]移除了变换网络，并将DGCNN [60]中不同层的分层特征连接起来，以提高其性能并减小模型大小。本文还提出了一种端到端无监督的深度自编码网络（FoldingNet [62]），它使用矢量化的局部协方差矩阵和点坐标的级联作为输入。\",\"来源于 Inception [63]和DGCNN [60]灵感，Hassani等人[64]提出了一种无监督的多任务自动编码器来学习点和形状特征。编码器是基于多尺度图构造的，译码器则由聚类、自监督分类和重构三个无监督任务组成，这些任务与多任务损失联合训练。Liu等人[65]提出了一种基于图卷积的动态点聚模块（DPAM），将点聚过程（采样、分组和池化）简化为一个简单的步骤，通过将聚矩阵和点矩阵相乘来实现。在PointNet基础上，通过叠加多个DPAMs构造一个分层学习结构，与PointNet++的层次化策略相比，DPAM在语义空间中动态地挖掘点之间的关系并聚集点。\",\"为了充分利用局部几何结构，KCNet [66]提出了一种基于核相关的特征学习方法。具体来说，一组描述局部结构几何类型的可学习的点被定义为核，然后计算核与给定点邻域间的亲和力。在G3D[67]中，卷积被定义为邻接矩阵多项式的一种变体，池化被定义为拉普拉斯矩阵和粗化矩阵的顶点矩阵相乘。ClusterNet[68]利用严格的旋转不变（RRI）模块提取每个点的旋转不变特征，并基于ward-linkage准则的无监督凝聚层次聚类方法构造点云的层次结构。每个子集群中的特征首先通过EdgeConv模块学习，然后通过max-pooling聚合。\"]},\"226\":{\"h\":\"基于图的谱域\",\"t\":[\"这些方法将卷积定义为谱滤波，其实现方式是图上信号与图的拉普拉斯矩阵的特征向量相乘。\",\"为了应对高计算和非本地化的挑战，Defferrard等人[71]提出了一种利用截断切比雪夫多项式逼近谱滤波。他们学习的特征图位于每个点的k-hops邻域内。注意，特征向量是从[70][71]中的固定图拉普拉斯矩阵计算出来的。相反，RGCNN [72]通过将每个点与点云中所有其他点连接来构造图，并更新每个层中的图拉普拉斯矩阵。为了使相邻顶点的特征更加相似，在损失函数中加入图信号的平滑先验。为了解决由数据的不同的图形拓扑所带来的挑战，AGCN [73]中的SGC-LL层利用一个可学习的距离度量来参数化图上两个顶点之间的相似性。利用高斯核和学习的距离对图的邻接矩阵进行归一化。Feng等人[74]提出了一种超图神经网络（HGNN），并在超图上应用谱卷积建立了超边缘卷积层。\",\"上述方法均在全图上操作，为了利用局部结构信息，Wang等人[75]提出了一种端到端的谱卷积网络LocalSpecGCN，用于处理局部图（由k个最近邻构成）。该方法不需要离线计算图的拉普拉斯矩阵和图的粗化层次。在PointGCN [76]中，基于点云的k个最近邻构造一个图，并使用高斯核对每个边进行加权。卷积滤波器被定义为图谱域中的切比雪夫多项式，全局池和多分辨率池用于捕获点云的全局和局部特征。Pan等人[77]提出了3DTI-Net，通过学习相对欧几里德距离和方向距离来实现对几何变换的不变性。\"]},\"227\":{\"h\":\"3.2.4 基于数据索引的网络\",\"t\":[\"这些网络是基于不同的数据索引结构（如八叉树和kd树）构建的，在这些方法中，点特征是沿着树从叶节点到根节点分层学习的。Lei等人[50]提出了一种使用球形卷积核的八叉树导向CNN（如2.2.2节所述），网络的每一层对应一层八叉树，每一层应用一个球面卷积核，当前层神经元的值被确定为前一层所有相关子节点的平均值。与OctNet [23]（基于八叉树）不同，Kd-Net [78]是使用在每次迭代中具有不同分割方向的多个k-d树来构建。采用自下而上的方法，非叶节点的表示是使用MLP从其子节点的表示中计算出来的，根节点（描述整个点云）的特征最终被反馈到全连接层以预测分类得分。请注意，Kd-Net根据节点的分割类型在每个级别共享参数。\",\"3DContextNet [79]使用标准的平衡K-d树来实现特征学习和聚集，在每个层次上，首先基于局部线索（模拟局部区域内各点之间的相互依赖关系）和全局上下文线索（模拟一个位置相对于所有其他位置）。然后，使用MLP从非叶节点的子节点计算非叶节点的特征，并通过最大池进行聚合。对于分类，重复上述过程，直到获得根节点。SO-Net网络[80]的层次结构是通过执行点到点k近邻搜索来构建的。具体来说，采用一种改进的置换不变自组织映射（SOM）来模拟点云的空间分布，通过一系列全连接层从标准化的点到节点的坐标学习单个点的特征。SOM中每个节点的特征是使用通道最大池从与该节点相关联的点特征中提取，使用类似于PointNet的方法从节点特征中学习最终特征。与PointNet++相比，SOM具有更高的层次性，充分挖掘了点云的空间分布。\"]},\"228\":{\"h\":\"3.2.5 其他模型\",\"t\":[\"除了上述方法外，还提出了许多其他方案。在 3DmFV [82]，将点云体素化为均匀的三维网格，根据网格上定义的一组高斯混合模型的似然性提取fisher矢量。由于fisher向量的分量为在所有点上求和，因此得到的表示对点云顺序、结构和大小具有不变性。RBFNet [86] 网络通过从稀疏分布径向基函数（RBF）核聚集特征来显式地建模点的空间分布。RBF特征提取层计算每个点的所有核响应，然后优化核位置和核大小，以获取训练过程中点的空间分布。与全连接层相比，RBF特征提取层在减少参数个数数量级的同时，产生了更多的判别特征。Zhao等人[85]提出了一种用于三维点云通用学习表示的无监督自动编码器3DPointCapsNet，在编码阶段，首先对点云应用MLP来去提取点独立性特征，然后将这些特征进一步输入到多个独立的卷积层中。然后，通过连接多个max-pooled学习特征映射，提取出一个全局潜在的表示。在无监督动态路由的基础上，学习具有代表性的强潜在胶囊。受形状上下文描述符结构的启发，Xie等人[81]提出了一种新的ShapeContextNet体系结构，它将亲和点选择和紧凑的特征聚合结合到使用点积自关注的软对齐操作中。为了解决三维点云中的噪声和遮挡问题，Bobkov等人[91]将手工制作的基于点对函数的４D旋转不变描述子输入到４D卷积神经网络中。Prokudin等人[92]首先从单位球随机采样均匀分布的基点集，然后编码点云作为到基点集的最小距离，将点云旋转为具有相对较小固定长度的向量。编码后的表示可以用现有的机器学习方法进行处理。\",\"RCNet [88]利用标准RNN和2DCNN构造一个置换不变的三维点云处理网络。首先将点云划分为平行的波束，并按照特定的维度进行排序，然后将每个波束反馈到共享的RNN中。学习到的特征被进一步输入到一个有效的2DCNN中，用于分层特征聚合。为了提高它的描述能力，RCNet-E提出了在不同的划分和排序方向上集成多个RCNet。Point2Sequences[87]是另一个基于RNN的模型，它捕获点云局部区域中不同区域之间的相关性，将多尺度局部区域学习到的特征作为序列，并将这些序列从所有局部区域反馈到基于RNN的编解码结构中，以聚集局部区域特征。Qin等人[93]提出了一种端到端无监督域自适应的三维点云表示网络PointDAN。为了获取点云的语义特征，文献[94]提出了一种自监督的点云重构方法，该方法对点云的各个部分进行了随机重组。\",\"一些方法中也提出结合三维点云和二维图像来进行学习。在PVNet [83]中，从多视图中提取的高层次全局特征通过嵌入网络投影到点云的子空间中，并通过软注意力mask与点云特征融合。最后，对融合特征和多视图特征采用残差连接进行形状识别。随后，PVRNet [84]进一步提出利用关系评分模块学习三维点云与其多视图之间的关系。基于关联度评分，对原始的二维全局视图特征进行增强，实现了单视点融合和多视点融合。\"]},\"229\":{\"h\":\"小结\",\"t\":[\"ModelNet10/40 基准上的 3D 形状分类结果比较。在这里，我们只关注基于点的网络。 “#params”表示模型的参数数量，“OA”表示所有测试实例的平均准确度，“mAcc”表示表中所有形状类别的平均准确度。符号“-”表示没有结果。\",\"ModelNet10/40数据集是形状分类最常用的数据集，表１显示了不同基于点的网络所取得的结果，可以得出以下几个结果：\",\"点式MLP网络通常用作其他类型学习点特征的基本构建块\",\"卷积网络作为一种标准的深度学习结构，可以在不规则的三维点云上获得优异的性能。不规则数据的离散卷积网络和连续卷积网络应引起足够的重视\",\"基于图的网络因其固有的处理不规则数据的能力，近年来受到越来越多的关注。然而，将谱域中基于图的网络扩展到不同的图结构仍然具有挑战\",\"大多数网络需要将点云采样降为固定的小尺寸。此采样过程中将丢弃形状的详细信息。开发能够处理大规模点云的网络仍处于初级阶段\",\"WARNING\",\"CGuangyan-BIT/PointGPT (github.com)\"]},\"230\":{\"h\":\"4. 检测/跟踪\"},\"231\":{\"h\":\"4.1 3D 目标检测\"},\"232\":{\"h\":\"4.1.1 基于区域建议的方法\",\"t\":[\"这些方法首先提出几个可能包含对象的区域（也成为建议），然后提取区域特征来确定每个建议的类别标签。根据它们的对象建议生成方法，可以分为三类：基于多视图的方法，基于分割的方法和基于视锥的方法。\",\"图7. (a) multi-view based, (b) segmentation-based and (c) frustum-based methods.\"]},\"233\":{\"h\":\"基于多视图的方法\",\"t\":[\"这些方法融合了来自不同视图地图的建议性特征（例如，激光雷达前视图、鸟瞰图（BEV）和图像），以获得三维旋转框，如图7（a）所示。这些方法的计算成本通常很高。\"]},\"234\":{\"h\":\"基于分割的方法\",\"t\":[\"这些方法首先利用现有的语义分割技术去除大部分背景点，然后在前景点上生成大量高质量的建议以节省计算量，如图8（b）所示。与多视图方法[4]、[126]、[131]相比，这些方法实现了更高的对象召回率，并且更适合对象高度遮挡和拥挤的复杂场景。\"]},\"235\":{\"h\":\"基于视锥的方法\",\"t\":[\"这些方法首先利用现有的2D对象检测器生成对象的2D候选区域，然后为每个2D候选区域提取3D视锥，如图7（c）所示。虽然这些方法可以有效地提取三维物体的可能位置，但是，step-by-step的流水线流程使得它们的性能受到二维图像检测器的限制。\"]},\"236\":{\"h\":\"其他方法\"},\"237\":{\"h\":\"4.1.2 Single-Shot 方法（end-to-end）\",\"t\":[\"这些方法直接预测类概率，并使用单级网络回归物体的三维包围盒。这些方法不需要区域建议生成和后处理。因为，它们可以高速运行，非常适合实时应用。根据输入数据的类型，single-shot方法可以分为两类：基于BEV的方法和基于点云的方法。\"]},\"238\":{\"h\":\"基于BEV的方法\"},\"239\":{\"h\":\"基于点云的方法\"},\"240\":{\"h\":\"4.2 3D目标跟踪\"},\"241\":{\"h\":\"4.3 3D场景流估计\"},\"242\":{\"h\":\"小结\",\"t\":[\"KITTI [10]基准是自动驾驶领域最具影响力的数据集之一，在学术界和工业界都得到了广泛的应用。表2和表3分别显示了不同检测器在KITTI测试3D和BEV基准上取得的结果，可以得到以下观察：\",\"基于区域建议的方法是这两类方法中最常被研究的方法，并且在KITTI 3D和BEV基准上都有很大的优势。\",\"现有的三维物体检测器有两个局限性。首先，现有方法的长距离检测能力相对较差。其次，如何充分利用图像中的纹理信息仍是一个有待解决的问题。\",\"多任务学习是三维目标检测的一个发展方向。例如，MMF [99]通过合并多个任务来学习交叉模态表示以获得最新的检测性能。\",\"三维目标跟踪和场景流估计是新兴的研究课题，自2019年以来逐渐受到重视。\",\"表 3：KITTI 测试 3D 检测基准的 3D 对象检测结果对比。 3D 边界框 IoU 阈值对于汽车为 0.7，对于行人和骑自行车者为 0.5。模态是 LiDAR (L) 和图像 (I)。 “E”、“M”和“H”分别代表简单、中等和困难类别的对象。为了简单起见，我们省略了值后面的“%”。符号“-”表示没有结果。\"]},\"243\":{\"h\":\"5. 分割\",\"t\":[\"三维点云分割需要了解全局几何结构和每个点的细粒度细节。根据分割粒度的不同，三维点云的分割方法可以分为三类：语义分割（场景级），实例分割（对象级）和部件分割（部件级）。\"]},\"244\":{\"h\":\"5.1 3D 场景分割\",\"t\":[\"给定一个点云，语义分割的目标是根据点的语义将其分成几个子集。与 3D 形状分类的分类法（第 3 节）类似，语义分割有四种范式：基于投影的方法、基于离散化的方法、基于点的方法和混合方法。\",\"基于投影和离散化的方法的第一步是将点云转换为中间正则表示，例如多视图[181]、[182]、球形[183]、[184]、[185]、体积[ 166]、[186]、[187]、置换面晶格[188]、[189]和混合表示[190]、[191]，如图11所示。然后将中间分割结果投影回原始图像点云。相比之下，基于点的方法直接作用于不规则点云。几种有代表性的方法如图10所示。\"]},\"245\":{\"h\":\"5.1.1 基于投影的网络\",\"t\":[\"这些方法通常将 3D 点云投影为 2D 图像，包括多视图和球形图像。\",\"多视图表示\",\"Lawin 等人 [181] 首先将 3D 点云从多个虚拟摄像机视图投影到 2D 平面上。然后，使用多流 FCN 来预测合成图像上的像素分数。每个点的最终语义标签是通过融合不同视图上的重新投影分数来获得的。类似地，Boulch 等人 [182] 首先使用多个相机位置生成点云的多个 RGB 和深度快照。然后，他们使用 2D 分割网络对这些快照进行像素级标记。使用残差校正进一步融合从 RGB 和深度图像预测的分数[192]。基于点云是从局部欧几里得表面采样的假设，Tatarchenko 等人[193]引入了切线卷积来进行密集点云分割。该方法首先将每个点周围的局部表面几何形状投影到虚拟切平面。然后直接在表面几何上操作切线卷积。该方法具有很强的可扩展性，能够处理具有数百万个点的大规模点云。总体而言，多视图分割方法的性能对视点选择和遮挡敏感。此外，这些方法没有充分利用底层的几何和结构信息，因为投影步骤不可避免地会引入信息丢失。\",\"球面表示\",\"为了实现3D点云的快速准确分割，Wu等人[183]提出了一种基于SqueezeNet[194]和条件随机场（CRF）的端到端网络。为了进一步提高分割精度，引入了 SqueezeSegV2 [184]，通过利用无监督域适应管道来解决域移位问题。 Milioto 等人[185]提出了 RangeNet++ 用于 LiDAR 点云的实时语义分割。2D 范围图像的语义标签首先转移到 3D 点云，进一步使用基于 GPU 的高效 KNN 后处理步骤来缓解离散化错误和模糊推理输出的问题。与单视图投影相比，球面投影保留了更多信息，适合激光雷达点云的标注。然而，这个中间表示不可避免地带来离散化误差、遮挡等问题。\"]},\"246\":{\"h\":\"5.1.2 基于离散化的方法\",\"t\":[\"这些方法通常将点云转换为密集/稀疏离散表示，例如体积和稀疏置换面格。\",\"密集离散化表示\",\"早期的方法通常将点云体素化为密集网格，然后利用标准 3D 卷积。 Huang等人[195]首先将点云划分为一组占用体素，然后将这些中间数据馈送到全3D CNN以进行体素分割。最后，体素内的所有点都被分配与该体素相同的语义标签。\",\"该方法的性能受到体素的粒度和点云划分引起的边界伪影的严重限制。此外，Tchapmi等人[196]提出了SEGCloud来实现细粒度和全局一致的语义分割。该方法引入了确定性三线性插值，将 3D-FCNN [197] 生成的粗体素预测映射回点云，然后使用全连接 CRF (FCCRF) 来强制这些推断的每点标签的空间一致性。 Ming等人[186]引入了基于内核的插值变分自动编码器架构来编码每个体素内的局部几何结构。代替二进制占用表示，每个体素采用 RBF 来获得连续表示并捕获每个体素中点的分布。 V AE 进一步用于将每个体素内的点分布映射到紧凑的潜在空间。然后，使用对称群和等价 CNN 来实现鲁棒的特征学习。\",\"得益于 3D CNN 良好的可扩展性，基于体积的网络可以在不同空间大小的点云上自由地进行训练和测试。在全卷积点网络（FCPN）[187]中，首先从点云中分层抽象出不同级别的几何关系，然后使用3D卷积和加权平均池来提取特征并合并长程依赖性。该方法可以处理大规模点云，并且在推理过程中具有良好的可扩展性。戴等\",\"[198]提出了 ScanComplete 来实现 3D 扫描完成和每体素语义标记。该方法利用全卷积神经网络的可扩展性，可以在训练和测试过程中适应不同的输入数据大小。采用从粗到细的策略来分层提高预测结果的分辨率。\",\"总体而言，体积表示自然地保留了 3D 点云的邻域结构。其常规数据格式还允许直接应用标准 3D 卷积。这些因素导致该领域的性能稳步提高。然而，体素化步骤本质上会引入离散化伪影和信息丢失。通常，高分辨率会导致较高的内存和计算成本，而低分辨率会导致细节丢失。在实践中选择合适的网格分辨率并非易事。\",\"稀疏离散化表示\",\"体积表示自然是稀疏的，因为非零值的数量只占很小的百分比。因此，在空间稀疏数据上应用密集卷积神经网络效率很低。为此，格雷厄姆等人[166]提出了基于索引结构的子流形稀疏卷积网络。该方法通过限制卷积的输出仅与占用的体素相关，显着降低了内存和计算成本。同时，其稀疏卷积还可以控制提取特征的稀疏性。这种子流形稀疏卷积适用于高维和空间稀疏数据的高效处理。此外，Choy 等人[199]提出了一种称为 MinkowskiNet 的 4D 时空卷积神经网络，用于 3D 视频感知。提出了广义稀疏卷积来有效处理高维数据。进一步应用三边平稳条件随机场来强制一致性。\",\"另一方面，Su等人[188]提出了基于双边卷积层（BCL）的稀疏格子网络（SPLATNet）。该方法首先将原始点云插值到全面体稀疏晶格，然后应用 BCL 对稀疏晶格的占用部分进行卷积。然后将过滤后的输出插值回原始点云。此外，该方法还可以灵活地联合处理多视点图像和点云。\",\"此外，Rosu等人[189]提出了LatticeNet来实现大型点云的高效处理。还引入了一个名为 DeformsSlice 的数据相关插值模块，将晶格特征反投影到点云。\"]},\"247\":{\"h\":\"5.1.3 混合方法\",\"t\":[\"为了进一步利用所有可用信息，人们提出了多种方法来从 3D 扫描中学习多模态特征。 Dai 和 Nießner [190] 提出了一个联合 3D 多视图网络来结合 RGB 特征和几何特征。使用 3D CNN 流和多个 2D 流来提取特征，并提出可微分反投影层来联合融合学习到的 2D 嵌入和 3D 几何特征。此外，Chiang等人[200]提出了一个统一的基于点的框架来从点云中学习2D纹理外观、3D结构和全局上下文特征。该方法直接应用基于点的网络从稀疏采样的点集中提取局部几何特征和全局上下文，无需任何体素化。 Jaritz等人[191]提出了多视图PointNet（MVPNet）来聚合来自2D多视图图像的外观特征和规范点云空间中的空间几何特征。\"]},\"248\":{\"h\":\"5.1.4 基于点的方法\",\"t\":[\"基于点的网络直接在不规则点云上工作。然而，点云是无序且非结构化的，使得直接应用标准 CNN 是不可行的。\",\"为此，提出了开创性的工作 PointNet [5]，使用共享 MLP 学习每点特征，并使用对称池化函数学习全局特征。基于PointNet，最近提出了一系列基于点的网络。总的来说，这些方法可以大致分为逐点MLP方法、点卷积方法、基于RNN的方法和基于图的方法。\"]},\"249\":{\"h\":\"小结\",\"t\":[\"Table.5 S3DIS（包括 Area5 和 6 倍交叉验证）[10]、Semantic3D（包括语义 8 和简化 8 子集）[12]、ScanNet [11] 和 SemanticKITTI [15] 数据集上的语义分割结果比较。总体准确率（OA）、并集平均交集（mIoU）是主要评价指标。为了简单起见，我们省略了值后面的“%”。符号“-”表示没有结果。\"]},\"250\":{\"h\":\"5.2 实例分割\",\"t\":[\"与语义分割相比，实例分割更具挑战性，因为它需要对点进行更精确、更精细的推理。特别是，它不仅需要区分语义不同的点，而且还需要区分语义相同的实例。总的来说，现有的方法可以分为两类：基于建议的方法和无建议的方法。一些里程碑的方法如图11所示：\"]},\"251\":{\"h\":\"5.2.1 基于proposal的方法\"},\"252\":{\"h\":\"5.2.2 Proposal-free Methods\"},\"253\":{\"h\":\"5.3 部件分割\"},\"254\":{\"h\":\"小结\",\"t\":[\"表4显示了现有方法在公开基准上取得的结果，包括S3DIS [176]，Semantic3D [9]，ScanNet [102]，和SemanticKITTI [177]。以下问题需要进一步研究：\",\"基于点的网络是最常用的研究方法。然而，点的表示自然没有明确的邻域信息，现有的基于点的方法大多采用昂贵的邻域搜索机制（如KNN [52]或ball查询[27]）。这内在地限制了这些方法的效率，因为邻域搜索机制既需要较高的计算成本，又需要不规则的内存访问[214]。\",\"从不平衡的数据集中学习仍然是点云分割中的一个具有挑战性的问题。尽管一些方法[42]、[170]、[182]取得了显著的整体性能，但是它们在少数类别上的性能依然有限。例如，RandLA-Net [95]在Semantic3D的reduced- 8子集中实现了76.0%的IoU，但是在硬景观类别上只有41.1%的IoU。\",\"现有的大多数方法[5]、[27]、[52]、[170]、[171]都是在小点云上工作的（例如1m×1m，4096个点）。在实际应用中，深度传感器获取的点云通常是巨大的、大尺度的。因此，有必要进一步研究大规模点云的有效分割问题。\",\"一些文献[145]、[146]、[167]已经开始从动态点云中学习时空信息。语义时空信息有助于提高三维目标识别、分割和完成等任务。\"]},\"255\":{\"h\":\"点云自监督\",\"t\":[\"InfoNCE Loss\",\"10.文本相似度/语义相似度/文本匹配之对比学习和SimCSE以及InfoNCE loss - 知乎 (zhihu.com)\",\"InfoNCE loss与交叉熵损失的联系，以及温度系数的作用-CSDN博客\"]},\"256\":{\"h\":\"PointContrast\",\"t\":[\"ECCV 2020\",\"PointContrast: Unsupervised Pre-training for 3D Point Cloud Understanding | Papers With Code\",\"FCGF-基于稀疏全卷积网络的点云特征描述子提取(ICCV2019) - 知乎 (zhihu.com)\"]},\"257\":{\"h\":\"Motivation\",\"t\":[\"目前点云领域的自监督学习并没有取得很好的成果。作者认为原因可能是以下几点：\",\"1、相较于2D领域，3D领域缺少高质量、大规模的数据集，这是由于收集3D数据的成本更高\",\"2、缺乏统一的Backbone，目前点云特征提取的框架仍在快速发展\",\"3、缺乏高层次的评价方式\",\"基于以上几个问题，作者的研究主要涵盖了以下几个重要因素：\",\"1、选择了一个大型数据集用于预训练\",\"2、选用了一个可以用于多种下游任务的backbone\",\"3、评估预训练效果的方法\",\"4、定义了一组用于不同下游任务的评估办法\",\"总的来说，作者认为这篇工作的贡献可以被总结为以下几点：\",\"1、首次评估了3D点云的高级表达在不同场景中的转移性\",\"2、实验结果表明，无监督预训练可以有效提高不同下游任务、数据集的性能\",\"3、在无监督学习的加持下，在6种不同的评价基准上取得了最佳效果\",\"4、本文的成功可以推动更多在相关方面的研究\"]},\"258\":{\"h\":\"方法\"},\"259\":{\"h\":\"shapenet 有监督预训练测试\",\"t\":[\"预训练几乎没有给下游任务带来任何收益，反倒看上去有一定的反作用。\",\"源数据与目标数据之间的域差距(Domain gap)。预训练是在ShapNet上进行的，这个数据集本身是经过了归一化，对齐的干净数据集，并且缺乏场景信息。这导致了预训练数据集和微调数据集在数据分布上有较大的差距。\",\"点级别(Point-level)的表示很重要。在3D点云的深度学习中，局部的特征表示是非常重要。所以直接进行instance level的全局级别的表示是不够的。(这里额外提一下，DepthContrast同样认为局部特征的学习比较重要，选择使用了随机丢弃的方式来强迫网络学习到局部特征)\",\"基于以上的思考，以下两个点将是预训练过程中需要着重考虑的。\",\"针对Domain gap，可以在具有复杂场景的数据集中训练，而不是ShapeNet那样的\\\"干净\\\"的数据集\",\"为了捕获点级别的信息，需要相应的任务和框架，这个框架不仅仅是基于实例/全局表示的，而且可以在点级别捕获密集/局部的特征\"]},\"260\":{\"h\":\"算法\",\"t\":[\"对一个点云进行两种变换（旋转、平移和尺度缩放），然后使用contrastive loss对两种视角下点云的点进行对比学习，最小化匹配的点对之间的距离，同时最大化不匹配的点之间的距离，网络需要学习到几何变换下的不变性。\",\"算法流程如下:\",\"对一个点云x，从两个不同的相机视角生成两个视角下的点云x1和x2（这一步是算法有效的关键），\",\"然后分别对x1和x2进行随机刚体变换T1和T2，进一步将两个点云变成不同的视角加大任务的难度，\",\"然后分别对两个点云进行编码，进行对比学习训练。\"]},\"261\":{\"h\":\"结果\",\"t\":[\"关于监督预训练？\",\"We deem this a very encouraging signal that suggests that the gap between supervised and unsupervised representation learning in 3D has been mostly closed (cf. years of effort in 2D).\",\"预训练是否可以被拉长训练回合替代？\",\"在迭代次数分别为20K和30K的时候，分割任务的mIoU分别为66.7%和66.1%。\",\"This suggests that potentially many of the 3D datasets could fall into the “breakdown regime”[24] where network pre-training is essential for good performance.\",\"单视角设定下PointContrast是否也可以发挥作用？\",\"单视角+数据增强：在S3DIS上最好的mIoU为68.35%，仅仅比不进行预训练的68.17%\",\"作者认为，这可能是因为multi-view可以让训练样本更多样，相机不稳定而产生的自然噪声让模型变得更加鲁棒。\"]},\"262\":{\"h\":\"DepthContrast\",\"t\":[\"ICCV 2021\",\"Self-Supervised Pretraining of 3D Features on any Point-Cloud | Papers With Code\",\"四个贡献点：\",\"1、该方法证明了，仅仅使用单视图的三维深度扫描信息就足以使用自监督学习获得有效的特征表示了(因为前面性能最好的算法是PointContrast，其使用了Mutil View的视图)\",\"2、发现使用不同的输入表示，比如点云和体素，进行联合训练会有一个比较好的结果，远优于使用单个输入表示。\",\"3、该算法适用于不同的模型框架，室内/室外的3D数据，单视角/多视角的3D数据。同时该算法可以用于预训练高容量的3D框架，并应用于检测、分割等下游任务。\",\"4、该算法在多个下游任务上取得了最佳的表现效果\"]},\"263\":{\"h\":\"方法\",\"t\":[\"获取单帧深度图 ，转换为点云信息，使用数据增强获得两个增强视图\",\"分别使用Voxel-based的网络和Point-based的网络为两个增强视图提取特征，得到4个特征\",\"将这4个特征互相之间视为Positive pair，两两取出来使用Info-nce loss计算损失。\",\"TIP\",\"Point-based的方法下作者选用了PointNet++\",\"Voxel-based的方法下作者选用了U-Net\",\"新的增强方法\",\"random crop\",\"random drop patches 。\",\"这两个方法灵感来源于图像领域。其中random crop指随机从视图中挖出一块作为正样本，rondom drop paches指随机丢弃视图中的一部分(这样可以强迫网络关注局部形状特征)。\"]},\"264\":{\"h\":\"结果\",\"t\":[\"略，取得了sota\",\"无分割任务，本文针对检测\"]},\"265\":{\"h\":\"总结\",\"t\":[\"未考虑分割任务。\",\"与 pointcontrast 相比，无需多视图信息，(无需相机位置)\",\"跨输入格式，将Voxel-based额 Point-based的方法结合了起来。\"]},\"266\":{\"h\":\"Masked Scene Contrast\",\"t\":[\"A Scalable Framework for Unsupervised 3D Representation Learning\",\"CVPR 2023\",\"Masked Scene Contrast: A Scalable Framework for Unsupervised 3D Representation Learning | Papers With Code\"]},\"267\":{\"h\":\"Approch\"},\"268\":{\"h\":\"对比学习\",\"t\":[\"我们的对比学习框架直接对点云数据进行操作。给定一个点云，对比学习框架可以总结如下：\",\"视图生成。对于给定的点云 X，我们使用一系列随机数据增强（包括光度、空间和采样增强）生成原始点云的查询视图 Xr 和关键视图 Xk。\",\"特征提取。使用 U-Net 风格的主干 ζ(·) 将点云特征 Fr 和 Fk 分别编码为 ˆFr 和 ˆFk。\",\"点匹配。对比学习的正样本是两个视图中空间位置接近的点对。对于属于查询视图的每个点，我们计算到关键视图的点的对应映射 P，如果 (i, j) ∈ P 则点 (pi, ci) 和点 (pj, cj) 在两个视图上构造一对。\",\"损失计算。计算两个视图 ^Fr 和 ^Fk 的表示以及对应映射 P 的对比学习损失。编码的查询视图应该与其关键视图相似。\"]},\"269\":{\"h\":\"数据增强\",\"t\":[\"详见论文，\"]},\"270\":{\"h\":\"重建学习\",\"t\":[\"点云的特征由两部分组成，决定几何结构的坐标和表示纹理特征的颜色。我们分别为这两组特征建立重建目标。点云纹理的重建很直接，我们用线性投影预测每个点的光度值。我们计算重建的颜色和原始颜色之间的均方误差（MSE）作为颜色重建损失\",\"点坐标在描述点云的几何结构中起着重要的作用，值得注意的是，直接重建掩蔽点的坐标是不合理的，因为掩蔽点只是从3D物体表面而不是连续表面本身采样的。重建点坐标会导致过拟合的表示。为了克服这个挑战，我们引入了surfel重建的概念。Surfel？？？是离散拓扑文献[26]和基元渲染[36]中的表面元素或表面体素的缩写。对于每个掩蔽点，我们重建相应surfel的法向量，并计算估计值和surfel法向量之间的平均余弦相似性作为对比损失\"]},\"271\":{\"h\":\"MACARONS\",\"t\":[\"CVPR 2023\",\"Mapping And Coverage Anticipation with RGB Online Self-Supervision\",\"MACARONS: Mapping And Coverage Anticipation with RGB Online Self-Supervision | Papers With Code\",\"未开源\",\"NBV 问题，有点不相关\",\"学习如何有效地探索场景并仅使用 RGB 传感器重建\"]},\"272\":{\"h\":\"Point-M2AE:\",\"t\":[\"NeurIPS 2022\",\"Multi-scale Masked Autoencoders for Hierarchical Point Cloud Pre-training\",\"Point-M2AE: Multi-scale Masked Autoencoders for Hierarchical Point Cloud Pre-training | Papers With Code\",\"一种用于对 3D 点云进行自监督预训练的多尺度掩码自编码器\",\"token emebeding：pointnet++\"]},\"273\":{\"h\":\"GeoMAE\",\"t\":[\"CVPR 2023\",\"Masked Geometric Target Prediction for Self-supervised Point Cloud Pre-Training\",\"GeoMAE: Masked Geometric Target Prediction for Self-supervised Point Cloud Pre-Training | Papers With Code\",\"引入点统计和表面属性预测目标来指导模型学习点云的几何特征。\",\"我们应该利用什么好的信号来从没有注释的点云中学习特征？为了回答这个问题，我们引入了基于几何特征重建的点云表示学习框架。与最近直接采用掩模自动编码器（MAE）并仅从掩模点云预测原始坐标或占用率的论文相比，我们的方法重新审视图像和点云之间的差异，并识别点云特有的三个自监督学习目标，即质心预测、法线估计和曲率预测。这三个目标相结合，产生了一项重要的自监督学习任务，并相互促进模型更好地推理点云的细粒度几何形状。\",\"Embracing Single Stride 3D Object Detector with Sparse Transformer | Papers With Code\",\"SST：单步长稀疏Transformer 3D物体检测器 - 知乎 (zhihu.com)\",\"fix\"]},\"274\":{\"h\":\"返回\"},\"275\":{\"h\":\"DGCNN/EdgeConv\",\"t\":[\"（Dynamic Graph CNN for Learning on Point Clouds），2018 CVPR\"]},\"276\":{\"h\":\"创新点\",\"t\":[\"针对之前工作只关注点特征，忽略点之间关系的问题。提出了EdgeConv，将点之间的关系融入到点云处理中\",\"引入动态更新的图模型，能够有效的提升模型效果\",\"论文阅读 点云动态图卷积(DGCNN)_sunny_ckyh的博客-CSDN博客\",\"动态图边卷积网络DGCNN(EdgeConv) - 知乎 (zhihu.com)\"]},\"277\":{\"h\":\"DMTet\",\"t\":[\"Deep Marching Tetrahedra: a Hybrid Representation for High-Resolution 3D Shape Synthesis (nv-tlabs.github.io)\",\"深度3D条件生成模型\",\"使用简单的用户指导生成精细的3d形状\",\"结合隐式和显式3d呈现方法\",\"与训练有符号距离值回归的当前隐式方法相比，DMTET 直接优化重建表面，这使我们能够以更少的伪影合成更精细的几何细节。\",\"与直接生成网格等显式表示的深度 3D 生成模型不同，我们的模型可以合成具有任意拓扑结构的形状。\",\"核心构成：\",\"可形变的四面体网格： \",\"顶点由 SDF 编码\",\"可微的 marching tetrahedra layer ： \",\"将隐式的 SDF 编码转换成显式的mesh\"]},\"278\":{\"h\":\"3D Representation\",\"t\":[\"​ \",\"SDF：符号距离场\"]},\"279\":{\"h\":\"Model\"},\"280\":{\"h\":\"Input encoder\",\"t\":[\"使用PVCNN作为输入编码器，从点云中提取一个三维特征体Fvol​(x)。当输入是一个粗体素形状时，我们对其表面的点进行采样。我们通过三线插值为一个网格顶点v∈R3计算一个特征向量Fvol​(v,x)。\"]},\"281\":{\"h\":\"Initial Prediction of SDF\",\"t\":[\"使用一个全连接的网络s(v)=MLP(Fvol​(v,x),v)来预测初始可变形四面体网格中每个顶点的SDF值。\",\"全连接网络另外输出一个特征向量f(v)，用于体积细分阶段的表面细化。\"]},\"282\":{\"h\":\"Surface Refinement with Volume Subdivision\",\"t\":[\"在获得初始SDF后，迭代细化表面，并对四面体网格进行细分。 \",\"首先根据当前的s(v)值来识别表面四面体Tsurf​。\",\"然后我们建立一个图 G=(Vsurf​,Esurf​)，其中Vsurf​,Esurf​对应于Tsurf​的顶点和边。\",\"然后使用图形卷积网络（GCN）预测Vsurf​中每个顶点 i 的位置偏移量 Δvi 和 SDF 残差值 Δs(vi)\",\"fvi​′​(Δvi​,Δs(vi​),f(vi​)​)i=1,...Nsurf​​​=concat(vi​,s(vi​),Fvol​(vi​,x),f(vi​))=GCN((fvi​′​)i=1,...Nsurf​​,G)​​\",\"其中 Nsurf​ 是 Vsurf​ 中顶点的总数，f(vi) 是更新的每个顶点特征。\",\"顶点位置 $v_i $和顶点 的SDF值被更新为 vi′​=vi​+Δvi​，s(vi′​)=s(vi​)+Δs(vi​)。\",\"这个细化步骤有可能翻转SDF值的符号以细化局部类型学，也可以移动顶点从而改善局部几何。\",\"在表面 refinement 之后，我们进行体积细分步骤，然后再进行额外的表面细化步骤。\",\"特别是，我们重新识别 Tsurf​ 并对 Tsurf​ 和它们的近邻进行细分。\",\"在这两个步骤中，我们将未细分的四面体从完整的四面体网格中删除，这样可以节省内存和计算量\",\"因为Tsurf​ 的大小与物体的表面积成正比，并且随着网格分辨率的提高，其大小呈四次方而非三次方扩展。\",\"请注意，顶点的SDF值和位置是继承自细分前的层次，因此，在最终表面计算的损失可以反向传播到所有层次的所有顶点。因此，我们的DMTET自动学习细分四面体，不需要像先前的工作那样在中间步骤中增加损失项来监督八叉树层次结构的学习。\"]},\"283\":{\"h\":\"Learnable Surface Subdivision\",\"t\":[\"在使用MT提取表面网格后，我们可以进一步应用可学习的表面细分。具体来说，我们在提取的网格上建立一个新的图形，并使用GCN来预测每个顶点 vi′​ 的更新位置，以及用于Loop Subvidision的 αi​。这一步消除了量化误差，并通过调整 αi​ 减轻了经典环形细分法的近似误差，这些误差在经典方法中是固定的。??\"]},\"284\":{\"h\":\"3D discriminator\",\"t\":[\"我们在从生成器预测的最终表面上应用一个三维判别器 D。我们根据经验发现，使用DECOR-GAN中的一个三维CNN作为从预测的网格中计算出来的有符号距离场的判别器，可以有效地捕捉局部细节。\",\"具体来说，我们首先从目标网格中随机选择一个高曲率的顶点 v，并在 v 周围的体素化区域计算出 ground truth 的符号距离场 Sreal​∈RN×N×N。同样，我们在同一位置计算出预测表面网格 M 的符号距离场，得到 Spred​∈RN×N×N。\",\"注意，Spred​是网格 M 的解析函数，因此 Spred​ 的梯度可以反向传播到M中的顶点位置。我们将Sreal​或Spred​与位置 v 的特征向量 Fvol​(v,x)一起输入判别器。判别器然后预测指示输入是来自真实形状还是生成形状的概率。\"]},\"285\":{\"h\":\"损失函数\",\"t\":[\"表面对齐损失\",\"对抗损失\",\"正则化损失\"]},\"286\":{\"h\":\"MVSNet: Depth Inference for Unstructured Multi-view Stereo\",\"t\":[\"ECCV 2018\"]},\"287\":{\"h\":\"训练\"},\"288\":{\"h\":\"特征提取\",\"t\":[\"与传统三维重建方法类似，第一步是提取图像特征（SIFT等特征子），不同点在于本文使用8层的卷积网络从图像当中提取更深层的图像特征表示，网络结构如下图所示：\",\"输入：N张3通道的图像，宽高为W,H 输出：N组32通道图，每通道尺度为,H/4,W/4\",\"目标：提取每幅输入图像的特征，输入1个参考图像+N个原图像，输出N+1个32通道的特征图。 1.参数共享：与常见的匹配任务类似，参数在所有特征图间共享，即对所有视角的输入图像，用同一网络提取特征。 2.每个输入图像输出一个1/4原尺寸，32通道的特征图：将每个剩余像素的原始邻域信息编码到32通道的像素描述符中，与直接对原始图像稠密匹配相比，在特征空间中进行稠密匹配提高了重建质量。\"]},\"289\":{\"h\":\"构建特征体 Feature Volume\"},\"290\":{\"h\":\"Differentiable Homography\",\"t\":[\"两个平面的变换矩阵，可以由两个视角的相机参数，深度d计算得到 H\",\"目标：将所有特征图变换到参考相机的锥形立体空间，形成 N+1 个特征体Vi​。\",\"单应性变换简单来说，对于3D空间的点X，我们通过相机1拍照，得到照片1上的对应二维像素点P（x,y）；\",\"在另一个位置用相机2拍照，得到照片2上的对应二维像素点P’（x’,y’）——通过一个正确的单应矩阵H（包含相机1,2的位置转换参数R,T、相机1到点X的距离d），可以实现P’ = HP。\",\"即在已经提前获取相机的内外参数前提下，因此只需要一个深度值变量，就可以找到ref图像上点P对应在src图像上点P’的位置。\",\"若我们已知两个位姿的相机参数（相机1,2的位置转换参数），现在设置一个深度区间[d1​,d2​]，并设置分辨率为Δd，由此得到D=(d2​−d1​)/Δd个平面，那么每个d都对应了一个单应变换矩阵h。 如果对一张图片上每个像素点，使用 di​ 对应的矩阵 hi 进行变换可以得到一张变换后的图片，意义为假设各个像素点真实深度都为 d 时，在另一位姿下各像素点的应有的对应特征值。 而我们假设了 D 个深度，也即将得到D幅变换后的图像，各图代表了其像素点真实深度为当前深度时变换对应的特征值，即可理解为上图中各层蓝色由深变浅的图层。\",\"为什么是“锥形视锥”，因为当单应矩阵对应的真实深度不同时，由近大远小原理可知能被当前位置的相机看到的特征点数量随着深度减小而减小，因而出现锥形。（在下一步构建特征体时使用了双线性插值来保证所有深度的特征图尺寸一致）\"]},\"291\":{\"h\":\"特征体构建\",\"t\":[\"N,32,H,W -> N,D,32,H,W\",\"Ref的特征图则是直接在每个深度下复制，因为多个Src都是要变换到这个参考图下的\"]},\"292\":{\"h\":\"生成代价体 cost volume\",\"t\":[\"N,D,32,H,W -> D,32,H,W\",\"假设深度为 d1​ 时，各特征图上各像素经过变换后的特征值——若某个像素真实深度接近 d1​ 的话，那变换后该列该处的特征值应该是近似的。 基于这样的想法，对每一列书的每一页上的每个像素计算方差，代表了假设深度为 $d_i $时，各图像特征图的各通道各特征点的差异情况，方差越小，越相似，该特征点真实深度就越可能是 di​。\",\"采用方差的方法，解决了任意输入N个输入的问题\"]},\"293\":{\"h\":\"代价体正则化\",\"t\":[\"D,32,H,W -> D,H,W\",\"第3步中得到了代价体，但论文说 “The raw cost volume computed from image features could be noise-contaminated” ，即这个代价体由于非朗伯面、遮挡等原因是包含噪声的，要通过正则化来得到一个概率体P（probability volume）\",\"具体采用了一个类似UNet(3D CNN)的网络结构，对原 代价体 进行编码和解码，并最终将各通道数压缩为1，即将一摞书变成了一本书\",\"网络:类似于3D-UNet，使用编码器-解码器结构，以相对较低的内存和计算成本，从一个大的感受野聚集相邻的信息。\",\"把深度的取值集中起来\"]},\"294\":{\"h\":\"深度图初始估计\",\"t\":[\"D,H,W -> H,W\",\"利用上一步的概率体，沿深度d方向求期望，就得到对应像素点的初始深度值； 对每个像素点求期望，即将概率体变成了一张概率图。\",\"soft argmin\",\"使用期望的优势： 1.相比于argmax，过程可微 2.可以产生连续的深度估计\",\"### 深度图优化\",\"将参考图像缩小1/4，使其和初始深度图尺寸相同\",\"将深度图 H,W,1 归一化\",\"两图通道拼接 H,W,3+1 输入四层残差卷积网络进行信息融合\",\"输出单通道特征图 H,W,1，并还原到深度加深区间（逆归一化），与初始深度图逐元素相加，得到优化的深度图\",\"目的：利用ref图的边界信息优化深度图\",\"初始深度图由于正则化，感受野变大，重建的边界可能过度平滑\",\"自然场景的ref图包含边界信息\"]},\"295\":{\"h\":\"损失计算\",\"t\":[\"使用 L1 损失，分别对init 和 refined 进行损失计算，加权相加\",\"只考虑GT中有深度信息的像素点\"]},\"296\":{\"h\":\"后处理\"},\"297\":{\"h\":\"深度图滤波\",\"t\":[\"depth map fliter\"]},\"298\":{\"h\":\"几何约束\",\"t\":[\"几何约束测量多个视图之间的深度一致性。类似于立体的左右视差检查\",\"将参考像素 p1 通过其深度 d1 投影到另一个视图中的像素 pi，\",\"然后通过 pi 的深度估计 di 将 pi 重新投影回参考图像。\",\"如果重投影坐标 $p_{reproj} $和重投影深度 $d_{reproj} $满足 ∣preproj​−p1​∣<1 和 ∣dreproj​−d1​∣/d1​<0.01，我们说 p1 的深度估计 d1 是双视图一致的。\",\"在实验中，所有深度至少应在三个视图中保持一致。\"]},\"299\":{\"h\":\"光度约束\",\"t\":[\"光度约束，其实是在通过概率体得到初始深度图的同时计算了一个概率图\",\"D,H,W -> H,W\",\"内点像素(上)和离群点像素(下)的概率分布，其中x轴为深度指数假设，y轴为概率，红线为软边界结果;(d)概率图。如(c)所示，离群值分布分散，导致(d)的概率估计较低\",\"对 H,W 平面的每个点沿 d 方向计算四个邻域的概率和，再沿 d 方向取最大的概率和\",\"各像素点的深度越集中在某个深度附近，则该点深度判断的准确概率越高，最后过滤掉概率小于0.8的点。\",\"虽然多尺度 3D CNN 具有很强的将概率正则化为单一模态分布的能力，但我们注意到对于那些错误匹配的像素，它们的概率分布是分散的并且不能集中到一个峰值（见图 2（c）） ).基于这一观察，我们将深度估计的质量定义为地面真实深度在估计附近的一个小范围内的概率。由于深度假设是沿着相机平截头体离散采样的，我们简单地对四个最近的深度假设进行概率和来衡量估计质量。请注意，此处也可以使用标准偏差或熵等其他统计测量值，但在我们的实验中，我们观察到这些测量值对深度图过滤没有显着改善。此外，我们的概率和公式可以更好地控制异常值过滤的阈值参数。\"]},\"300\":{\"h\":\"深度图融合\",\"t\":[\"将不同视点的深度图融合到统一的点云表示中，使用基于可见性的融合算法，把遮挡，光照等影响降到了最低，使得不同视点之间的深度遮挡和冲突最小化。\",\"为了进一步抑制重建噪声，在滤波步骤中确定每个像素的可见视图，\",\"并将所有重投影深度的平均值作为像素的最终深度估计。\",\"融合后的深度图直接投影到空间，生成三维点云。\",\"[TOC]\"]},\"301\":{\"h\":\"MeshCNN\",\"t\":[\"MeshCNN (ranahanocka.github.io) Siggraph 2019\",\"等变卷积运算、不变的输入特征和学习到的网格池化运算使MeshCNN成为一个特别有趣的模型，它有以下几个主要优点:\",\"比旧方法更高效，参数更少；\",\"利用网格的拓扑结构(即顶点和面信息)，而不是将其视为点云；\",\"网格卷积保留了卷积的便利性质，但允许应用于图形数据。三维网格的5个输入特征类似于输入图像的RGB特征；\",\"对旋转、平移和缩放不变性；\",\"网格池化(即学习到的边折叠)允许网络通过将5条边折叠成2条边并同时分解两个面来学习特定任务的池化。\"]},\"302\":{\"h\":\"Overview\"},\"303\":{\"h\":\"Invariant convolution\",\"t\":[\"在我们的设置中，假设所有形状都表示为流形网格，可能具有边界边缘。这样的假设保证每条边最多与两个面（三角形）相关，因此与两个或四个其他边相邻。面的顶点按逆时针顺序排序，为每条边的四个邻居定义两种可能的排序。例如，请参见图 4，其中 e 的 1 环邻居可以排序为 (a,b,c,d) 或 (c,d,a,b)，具体取决于哪个面定义第一个邻居。这使得卷积感受野变得模糊，阻碍了不变特征的形成。\",\"我们采取两项措施来解决这个问题，并保证网络内相似变换（旋转、平移和缩放）的不变性。\",\"首先，我们仔细设计边缘的输入描述符，使其仅包含对相似变换本质上不变的相对几何特征。\",\"其次，我们将四个 1 环边聚合成两对具有模糊性的边（例如，a 和 c，以及 b 和 d），并通过在每对上应用简单的对称函数来生成新特征（例如，sum(a,c)）。\",\"卷积应用于新的对称特征，从而消除任何顺序模糊性。\",\"manifold meshes: 流形网络：\",\"流形学习（Manifold Learning） - 知乎 (zhihu.com)\",\"什么是流形（manifold）、流形学习_Rolandxxx的博客-CSDN博客\",\"对流形（Manifold）的最简单快速的理解_梧桐雪的博客-CSDN博客\",\"2 曲面表示法 - 孙小鸟 - 博客园 (cnblogs.com)\",\"群，李群\"]},\"304\":{\"h\":\"Mesh convolution\",\"t\":[\"(e1,e2,e3,e4)=(∣a−c∣,a+c,∣b−d∣,b+d)\",\"特征提取不用 conv？\",\"如何构建特征？本文为什么这样构建\",\"点边结合（面）\",\"# Simplified from models/layers/mesh_conv.py in ranahanocka/MeshCNN class MeshCov(nn.Module): def __init__(self, in_c, out_c, k=5, bias=True): super(MeshConv, self).__init__() self.conv = nn.Conv2d(in_channels=in_c, out_channels=out_c, kernel_size=(1, k), bias=bias) ######## self.transformer = nn.transformer( )?????????? def forward(self, x) \\\"\\\"\\\" Forward pass given a feature tensor x with shape (N, C, E, 5): N - batch C - # features E - # edges in mesh 5 - edges in neighborhood (0 is central edge) \\\"\\\"\\\" x_1 = x[:, :, :, 1] + x[:, :, :, 3] x_2 = x[:, :, :, 2] + x[:, :, :, 4] x_3 = torch.abs(x[:, :, :, 1] - x[:, :, :, 3]) x_4 = torch.abs(x[:, :, :, 2] - x[:, :, :, 4]) x = torch.stack([x[:, :, :, 0], x_1, x_2, x_3, x_4], dim=3) x = self.conv(x) return x \",\"torch.cat()\",\"函数目的： 在给定维度上对输入的张量序列seq 进行连接操作。\",\"torch.stack() 官方解释：沿着一个新维度对输入张量序列进行连接。 序列中所有的张量都应该为相同形状。\",\"浅显说法：把多个2维的张量凑成一个3维的张量；多个3维的凑成一个4维的张量…以此类推，也就是在增加新的维度进行堆叠。\",\"outputs = torch.stack(inputs, dim=?) → Tensor 参数\",\"inputs : 待连接的张量序列。 注：python的序列数据只有list和tuple。\",\"dim : 新的维度， 必须在0到len(outputs)之间。 注：len(outputs) 是生成数据的维度大小，也就是outputs的维度值。\",\"重点 函数中的输入inputs只允许是序列；且序列内部的张量元素，必须shape相等 ----举例：[tensor_1, tensor_2,..] 或者 (tensor_1, tensor_2,..)，且必须tensor_1.shape == tensor_2.shape\",\"dim 是选择生成的维度，必须满足0<=dim<len(outputs)；len(outputs)是输出后的 tensor 的维度大小 ———————————————— 版权声明：本文为CSDN博主「模糊包」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/xinjieyuan/article/details/105205326\"]},\"305\":{\"h\":\"输入特征\",\"t\":[\"在应用第一次卷积之前，我们必须创建一个类似于二维图像中的RGB通道的输入特征表示。为此，作者简单地为每个面定义了二面角(两个相邻面之间的角)、对称对顶角(相对角的角，排序以保持顺序不变性)和两个边长比(每个三角形的高/基比，也排序)，总共为5个输入特征。\",\"We sort each of the two face-based features (inner angles and edge-length ratios), thereby resolving the ordering ambiguity and guaranteeing invariance. Observe that these features are all relative, making them invariant to translation, rotation and uniform scale.\",\"# From models/layers/mesh_conv.py in ranahanocka/MeshCNN def dihedral_angle(mesh, edge_points): \\\"\\\"\\\" Angle between two faces connected to edge. \\\"\\\"\\\" normals_a = get_normals(mesh, edge_points, 0) normals_b = get_normals(mesh, edge_points, 3) dot = np.sum(normals_a * normals_b, axis=1).clip(-1, 1) angles = np.expand_dims(np.pi - np.arccos(dot), axis=0) return angles def symmetric_opposite_angles(mesh, edge_points): \\\"\\\"\\\" Angles of opposite corners across edge. \\\"\\\"\\\" angles_a = get_opposite_angles(mesh, edge_points, 0) angles_b = get_opposite_angles(mesh, edge_points, 3) angles = np.concatenate((np.expand_dims(angles_a, 0), np.expand_dims(angles_b, 0)), axis=0) angles = np.sort(angles, axis=0) return angles def symmetric_ratios(mesh, edge_points): \\\"\\\"\\\" Height/base ratios of the triangles adjacent to edge. \\\"\\\"\\\" ratios_a = get_ratios(mesh, edge_points, 0) ratios_b = get_ratios(mesh, edge_points, 3) ratios = np.concatenate((np.expand_dims(ratios_a, 0), np.expand_dims(ratios_b, 0)), axis=0) return np.sort(ratios, axis=0) \"]},\"306\":{\"h\":\"Global ordering\",\"t\":[\"数据是按一个特定顺序输入网络的，但因为卷积作用于邻域输入顺序在卷积阶段不产生影响。进一步说，分割任务也不受它的影响。对于需要全局特征聚合的任务，例如分类，作者遵循Qi 等人在PointNet中提出的常用做法，并在卷积部分和网络的全连接部分之间放置一个全局平均池化层。这样做保证了结果与输入顺序无关，也保证了转换不变性。\"]},\"307\":{\"h\":\"Pooling\",\"t\":[\"网格池是通过边缘折叠过程完成的，如图 2 (b) 和 (c) 所示。在 (b) 中，虚线边缘折叠成一个点，随后，四个入射边缘（蓝色）合并为 (c) 中的两个（蓝色）边缘。\",\"请注意，在此边缘折叠操作中，五个边缘转换为两个。算子按（最小范数）边缘特征确定优先级，从而允许网络选择网格的哪些部分要简化，哪些部分保持不变。这创建了一个任务感知过程，其中网络学习确定对象部分相对于其任务的重要性（见图 1）。\"]},\"308\":{\"h\":\"Mesh Pooling\",\"t\":[\"1)定义给定邻接的池化区域 2)合并每个池化区域中的特征 3)重新定义合并特征的邻接关系\",\"网格池化是广义池化的另一种特殊情况，其中邻接关系由拓扑结构决定。作者将网格池化定义为一系列的边折叠操作，其中每个边折叠将5条边转换为2条边。因此，可以通过添加一个超参数来定义池化网格中目标边缘的数量，从而在每个池化操作之后控制网格的期望分辨率。 根据边缘特征的大小对边折叠顺序(使用优先队列)进行优先级排序，允许网络选择网格的哪些部分与解决任务相关。这使得网络能够非均匀地折叠某些对损失影响最小的区域。通过对每个特征通道取平均值，每个面三个边缘的每个特征被合并为一个新的边缘特征。 根据边的特征强度对边折叠进行优先级排序，该特征强度作为边折叠的L2范数。如图5所示，特征被聚合，其中有两个合并操作，一个针对最小边特征e的每个关联三角形，产生两个新的特征向量(表示为p和q)。边在每个i通道中的特征p由以下公式给出 \",\"并不是所有的边都可以折叠。在作者的设置中，不允许产生非流形面的边缘折叠，因为它违反了四个卷积邻居的假设。\"]},\"309\":{\"h\":\"Mesh UnPooling\",\"t\":[\"Unpooling is the (partial) inverse of the pooling operation. While pooling layers reduce the resolution of the feature activations (encoding or compressing information), unpooling layers increase the resolution of the feature activations (decoding or uncompressing information). The pooling operation records the history from the merge operations (e.g., max locations), and uses them to expand the feature activation. Thus, unpooling does not have learnable parameters, and it is typically combined with convolutions to recover the original resolution lost in the pooling operation. The combination with the convolution effectively makes the unpooling a learnable operation.\",\"Each mesh unpooling layer is paired with a mesh pooling layer, to upsample the mesh topology and the edge features. The unpooling layer reinstates the upsampled topology (prior to mesh pooling), by storing the connectivity prior to pooling. Note that upsampling the connectivity is a reversible operation (just as in images). For unpooled edge feature computation, we retain a graph which stores the adjacencies from the original edges (prior to pooling) to the new edges (after pooling). Each unpooled edge feature is then a weighted combination of the pooled edge features. The case of average unpooling is demonstrated in Figure 5.\",\"反池化（反卷积）是一个可学习的过程吗？\",\" 反卷积详解_bestrivern的博客-CSDN博客\"]},\"310\":{\"h\":\"网络设置\",\"t\":[\"网络结构由MResConv层组成，每个层由一个初始网格卷积(MeshConv)、几个连续的ReLU+BatchNorm+MeshConv层和一个残差连接和另一个ReLU组成。在任务层结束之前，网络遵循多次MResConv+Norm+MeshPool的模式。对于分类，任务层是简单的全局平均池化，然后是两个完全连接的层。分割网络是一个U-Net风格的编码器-解码器。\"]},\"311\":{\"h\":\"Result\",\"t\":[\"（保留的）测试形状的语义分割结果。每个边缘的分割预测显示在左侧，后面是每个池化层之后的中间简化网格。出于可视化目的，中间网格中的边缘使用最终分割预测进行着色。 MeshCNN 使用网格池来学习折叠来自相同片段的边缘，这些边缘通过网格反池化层展开回原始输入网格分辨率（例如，请参见顶行，其中整个花瓶手柄已折叠为单个边缘）。\"]},\"312\":{\"h\":\"总结\",\"t\":[\"本文提出了一种直接在不规则三角网格上使用神经网络的通用方法MeshCNN。本文工作的关键贡献是针对不规则和非均匀结构定制的卷积和池化操作的定义和应用。作者通过利用三角网格特有的对称性，消除邻居排序对偶的歧义，以实现变换的不变性的构思很巧妙。作者通过边折叠的方式来进行池化，通过池化聚合了局部特征信息，也通过边折叠的方式在最小化损失信息的基础上，将卷积的邻域扩大了，在更大的尺度上聚合特征信息。\",\"MeshCNN与PointNet++的一些差别：\",\"MeshCNN的下采样与task的相关性更高：PointNet++在下卷积时通过FPS（farthest point sampling）的方式选择下一层的中心点，因此点的选择基本只依赖于mesh本身的结构，与task的关系不大，也就是说无论mesh被用于什么task，下卷积的采样中心是基本一致的。但MeshCNN的下采样是与具体task密切相关的，它能够在下采样的时候，更多地保留与task密切相关的边，这一点与图像中的max pooling具有更相似的内在含义。\",\"MeshCNN的上采样与下采样的结构一致性更强：MeshCNN和PointNet都采用了类似UNet的结构。但相比MeshCNN直接用下采样的mesh结构来进行上采样，PointNet++中的上采样和下采样的感知域是不一样的，以scannet数据集为例，下采样是邻域32个点，上采样是邻域3个点。\",\"MeshCNN的感知域在模型表面空间：PointNet++使用knn挑选空间距离上的领域点，这种方式有可能采样到测地距离远但空间距离近的点。而MeshCNN根据边进行上下采样，更接近于挑选测地距离上的领域，感知域在模型表面空间。\",\"稀疏卷积：稀疏卷积 Sparse Convolution Net - 知乎 (zhihu.com)\",\"Minkowski Convolutional Neural Networks：NVIDIA/MinkowskiEngine: Minkowski Engine is an auto-diff neural network library for high-dimensional sparse tensors (github.com)\"]},\"313\":{\"h\":\"PointGPT\",\"t\":[\"PointGPT: Auto-regressively Generative Pre-training from Point Clouds | Papers With Code\",\"CGuangyan-BIT/PointGPT (github.com)\",\"一种将GPT概念扩展到点云的方法，在多个3D点云下有任务中（点云分类，part分割等）上实现了最先进的性能。\"]},\"314\":{\"h\":\"PointGPT 的整体架构\",\"t\":[\"Fig.2. Overall architecture of our PointGPT. (a) The input point cloud is divided into multiple point patches, which are then sorted and arranged in an ordered sequence. (b) An extractor-generator based transformer decoder is employed along with a dual masking strategy for the auto-regressively prediction of the point patches. In this example, the additional mask of the dual masking strategy is applied to the same group of random tokens for better illustration purposes.\",\"(a) 将输入点云分为多个点patches，然后将这些点patches按顺序排序和排列。 (b) 采用基于提取器-生成器的变换器解码器以及用于点patches的自回归预测的双掩蔽策略。在此示例中，为了更好地说明目的，将双重掩码策略的附加掩码应用于同一组随机token。\",\"点云序列模块（Point Cloud Sequencer Module）：这个模块用于构建点块的有序序列。它将点云分割成不规则的点块，并按照 Morton 排序将它们排列起来，形成一个有序序列。\",\"提取器（Extractor）：这是一个用于学习潜在表示的模块。有序的点块序列被输入到提取器中，通过自回归的方式学习点块的潜在表示。提取器的目标是从前面的点块中预测下一个点块。\",\"生成器（Generator）：这是一个用于自回归生成点块的模块。在预训练阶段，生成器根据前面的点块生成下一个点块，以自回归的方式逐步生成点块序列。在预训练结束后，生成器被丢弃，不再使用。\",\"预训练后的阶段（Post-Pre-training Stage）：在预训练阶段结束后，生成器被舍弃，而提取器则利用学习到的潜在表示进行下游任务。此时，不再使用双重掩码策略\"]},\"315\":{\"h\":\"Point Cloud Sequencer\",\"t\":[\"在点云领域，与自然语言处理（NLP）领域不同，点云缺乏预定义的词汇表，并且点云是一种稀疏结构，具有无序性的特点。为了克服这些挑战并获得一个有序的点云序列，其中每个组成单元捕捉到丰富的几何信息，论文中采用了一个三阶段的过程，包括点块划分、排序和嵌入。\",\"点块划分（Point Patch Partitioning）：该阶段将点云划分为不规则的点块。通过将点云分割成块状的子集，可以将点云的结构分解成更小的部分，以便更好地进行处理。\",\"排序（Sorting）：划分的点块按照 Morton 排序进行排序。Morton 排序是一种用于多维数据的排序方法，通过将多维数据转换成一维的比特串，实现了对多维数据的排序。通过 Morton 排序，点块的顺序得到了定义，形成了有序的点块序列。\",\"嵌入（Embedding）：排序后的点块序列被嵌入到模型中，用于后续的预训练和任务学习。嵌入可以将点块的几何信息转化为模型能够理解和处理的向量表示。\",\"通过这个三阶段的过程，点云被划分为有序的点块序列，并经过嵌入转换为模型可处理的表示形式。这样做的目的是克服点云领域缺乏预定义词汇表和无序性的问题，为后续的预训练和任务学习提供有序的输入。\"]},\"316\":{\"h\":\"点云序列\",\"t\":[\"PointGPT 的预训练流程包括使用点云序列模块构建有序的点块序列，提取器学习点块的潜在表示，生成器自回归生成点块序列。在预训练后阶段，生成器被舍弃，提取器利用学习到的表示进行下游任务。这个流程旨在通过自回归生成任务来学习点云数据的特征表示，并为后续任务提供更好的表示能力。\"]},\"317\":{\"h\":\"点块分割\",\"t\":[\"考虑到点云的固有稀疏性和无序性，输入点云通过最远点采样（FPS）和K近邻（KNN）算法处理，以获取中心点和点块。给定一个包含M个点的点云X，我们使用FPS初始采样n个中心点C。然后，利用KNN算法从X中选择k个最近的点构建n个点块P。\",\"TIP\",\"稀疏数据中的均匀采样方法\",\"最远点采样(Farthest Point Sampling,FPS)算法详解_生信小兔的博客-CSDN博客\"]},\"318\":{\"h\":\"排序\",\"t\":[\"为了解决点云的固有无序性，获得的点块根据它们的中心点被组织成一个连贯的序列。具体而言，使用Morton编码[34]将中心点的坐标编码到一维空间中，然后进行排序以确定这些中心点的顺序O。然后，将点块按照相同的顺序排列。\",\"TIP\",\"莫顿码是将多维数据转化为一维数据的编码。 莫顿编码定义了一条 Z 形的空间填充曲线\",\"类似（希尔伯特曲线）\",\"莫顿码（Morton code）介绍_点云渣的博客-CSDN博客\"]},\"319\":{\"h\":\"嵌入\",\"t\":[\"在 PointGPT 中，采用了嵌入（Embedding）步骤来提取每个点块的丰富几何信息。与论文中引用的 Point-MAE 和 PointNet 方法类似，这里使用了 PointNet 网络来进行几何信息的提取。\",\"具体而言，对于每个点块，使用 PointNet 网络对其进行处理，以提取其中的几何信息。PointNet 是一种常用的点云处理网络，能够对点云数据进行特征提取和学习。通过应用 PointNet 网络，可以从每个点块中提取丰富的几何特征。\",\"为了促进训练的收敛性，对每个点的坐标进行了归一化处理，相对于其所在点块的中心点进行归一化。这样做可以减小数据的尺度差异，帮助模型更好地进行训练。在嵌入步骤中，使用 PointNet 网络对每个点块进行处理，提取其中的几何信息，并对点的坐标进行归一化处理，以促进训练的收敛性。\"]},\"320\":{\"h\":\"Transformer Decoder with a Dual Masking Strategy\",\"t\":[\"论文中提到，将 GPT 直接应用到点云数据的方法是利用基本的 Transformer 解码器来自回归地预测点块，并对所有预训练参数进行微调以进行下游任务。然而，由于点云数据的信息密度有限以及生成和下游任务之间存在差距，这种方法在低级语义方面存在问题。\",\"为了解决这个问题，论文提出了一种双重掩码策略，以促进对点云的全面理解。这个策略能够帮助模型更好地处理点云数据，提高语义的表达能力。\",\"此外，论文还引入了提取器-生成器 Transformer 架构，其中生成器更专注于生成任务，并在预训练后被丢弃，从而增强了提取器学习到的潜在表示的语义水平。这种架构设计使得提取器能够更好地学习点云的语义信息，提高模型的表示能力。\",\"为了应对点云数据的低级语义和生成任务与下游任务之间的差距，论文提出了双重掩码策略和提取器-生成器 Transformer 架构。这些方法能够提高模型对点云数据的理解能力，并增强潜在表示的语义水平。\"]},\"321\":{\"h\":\"Dual masking strategy?????\",\"t\":[\"The vanilla masking strategy in the transformer decoder enables each token to receive information from all the preceding point tokens. To further encourage the learning of useful representations, the dual masking strategy is proposed, which additionally masks a proportion of the attending preceding tokens of each token during pre-training. The resulting dual mask M d is illustrated in Fig. 2(b),\",\"双重屏蔽策略，该策略在预训练期间另外屏蔽了每个标记的一部分先前标记。得到的双掩码M d 如图2（b）所示\"]},\"322\":{\"h\":\"Extractor-generator\",\"t\":[\"Extractor\",\"提取器完全由 Transformer 解码器块组成，并采用双重掩码策略，得到潜在表示 T。在这里，每个点的令牌只与前面未被掩码的令牌相互关联。\",\"考虑到点块是用归一化坐标表示的，并且全局结构对于点云的理解至关重要，论文中采用正弦位置编码（Sinusoidal Positional Encodings）将排序后的中心点的坐标映射到绝对位置编码（Absolute Positional Encoding）。\",\"在每个 Transformer 块中添加位置编码，以提供位置信息和整合全局结构信息。\",\"Generator\",\"生成器的架构与提取器类似，但包含较少的 Transformer 块。它以提取的令牌 T 作为输入，并生成用于后续预测头的点令牌 Tg。\",\"然而，由于中心点采样过程可能会影响点块的顺序，这在预测后续点块时会引入不确定性。这使得模型难以有效地学习有意义的点云表示。 \",\"为了解决这个问题，在生成器中提供了相对于后续点块的方向信息（RDP， relative direction prompts ），作为提示而不暴露被掩码的点块的位置和整体点云对象的形状。\",\"Prediction head\",\"预测头用于在坐标空间中预测后续的点块。它由一个两层的多层感知机（MLP）组成，包含两个全连接（FC）层和修正线性单元（ReLU）激活函数。预测头将令牌 Tg 投影到向量空间，其中输出通道的数量等于一个点块中的坐标总数。然后，这些向量被重新组织成预测的点块 。\"]},\"323\":{\"h\":\"Generation Target\",\"t\":[\"在每个点patch的生成目标是预测后续点patch内点的坐标。\",\"给定预测的点patch Ppd​ 和与排序后的点patch序列中最后 n0 个点patch对应的真实点patch Pg​t，生成损失 Lg 使用 Chamfer 距离（CD）的 L1 形式和 L2 形式进行定义，分别记为 Lg1 和 Lg2。\",\"生成损失：Lg=L1g​+L2g​\",\"TIP\",\"Chamfer 距离（倒角距离）\",\"是一种衡量两个点云之间距离的指标，用于评估生成的点块与真实点块之间的差异。Lg1 表示使用 L1 形式计算的 Chamfer 距离，而 Lg2 表示使用 L2 形式计算的 Chamfer 距离。\",\"具体而言，生成损失 Lg1 和 Lg2 可以通过计算预测的点块 Ppd 与真实点块 Pgt 之间的 Chamfer 距离来获得。这些损失函数用于衡量生成结果与真实结果之间的差异，以指导生成器的训练。\"]},\"324\":{\"h\":\"Experiment\"},\"325\":{\"h\":\"结论\",\"t\":[\"本文介绍了PointGPT，这是一种将GPT概念扩展到点云领域的新方法，解决了点云的无序性、信息密度差异和生成任务与下游任务之间的差距等挑战。\",\"在各种任务上验证了其有效性和强大的泛化能力，表明我们的PointGPT在模型容量相似的单模态方法中表现优异。此外，我们的大规模模型在各种下游任务上取得了SOTA的性能，无需跨模态信息和教师模型的参与。\",\"尽管PointGPT表现出了良好的性能，但其探索的数据和模型规模仍然比NLP [5; 10]和图像处理 [65; 27] 领域小几个数量级。\"]},\"326\":{\"h\":\"PointMVS\"},\"327\":{\"h\":\"Abstract\",\"t\":[\"将深度图转换为点云来进行场景优化。\",\"采用了由粗糙到精细的深度图生成策略。\",\"将三维几何先验知识和纹理信息融入到点云中生成增强点云。\"]},\"328\":{\"h\":\"方法\"},\"329\":{\"h\":\"1. 初始深度图生成\",\"t\":[\"使用预训练好的MVSNet生成低分辨率的初始深度图。\"]},\"330\":{\"h\":\"2. 2D-3D 特征融合\"},\"331\":{\"h\":\"2.1 特征提取\",\"t\":[\"使用步幅为 2 的二维卷积网络对特征图进行下采样\"]},\"332\":{\"h\":\"2.1 动态特征融合\",\"t\":[\"源视图表示为 {Ii​}i=1N​\",\"参考视图表示为 I0​\",\"经过特征提取网络获取得多尺度深度特征表示为 {Fi​}=[Fi1​,Fi2​,Fi3​]\",\"其中 1,2,3 表示不同尺度，i 表示不同视图。 参照MVSNet，将源视图的特征图经过相机参数warp到参考视图，然后基于方差求匹配代价：\",\"Cj=N∑i=1N​(Fij​−Fˉj)2​,(j=1,2,3)(1)\",\"其中 $j $ 表示不同尺度，i 表示不同视图。\",\"将图像特征和3D点云坐标进行拼接得到增广点云特征点如式2所示：\",\"Cp​= concat [Cpj​,Xp​],(j=1,2,3)(2)\",\"正如在下一节中看到的那样，由于我们是迭代地预测深度残差，因此我们在每次迭代后更新点位置 Xp​ 并从图像特征金字塔中获取点特征 Cpk​，我们将此操作称为动态特征获取。请注意，此步骤不同于基于成本体积的方法，后者在每个体素处获取的特征由场景的固定空间分区确定。相比之下，我们的方法可以根据更新的点位置动态地从图像的不同区域获取特征。因此，我们可以专注于特征图中感兴趣的区域，而不是统一对待它们。\"]},\"333\":{\"h\":\"3. 点云优化\"},\"334\":{\"h\":\"3.1 假设点生成\",\"t\":[\"将初始深度图经过相机参数映射到点云空间中，因为在图像空间中像素点间的邻近信息不能很好地反应三维欧几里得空间中的邻近关系。\",\"对于每一个点云，沿着参考相机的方向生成 2m+1 个假设点：\",\"p~​k​=p+kst,k=−m,…,m(3)\",\"其中 t 表示参考相机的法线方向， s 表示单位距离。\"]},\"335\":{\"h\":\"3.2 边缘卷积\"},\"336\":{\"h\":\"3.3 残差生成\"},\"337\":{\"h\":\"4. 上采样与迭代优化\",\"t\":[\"由于网络结构的巧妙，可以使用迭代优化的思想来继续优化点云的精度。相比于使用3D代价体的重建方法而言，这种点云优化的方法更加灵活。PointFlow中可以对其上采样，然后进行流预测得到优化后的深度图。在此过程中可以减小深度单位间隔 s ，得到更加精细的深度图。\"]},\"338\":{\"h\":\"损失函数\",\"t\":[\"采用L1损失，并将所有迭代过程中的深度预测图都考虑进去：\",\"Loss=i=0∑l​​s(i)λ(i)​p∈Pvalid​∑​​DGT​(p)−D(i)(p)​1​​(6)\",\"其中$P_{valid} $表示有效的标签像素点集， l 表示迭代的轮次，λ(i)在训练过程中设置为1，i 表示不同的尺度；\"]},\"339\":{\"h\":\"实验结果\"},\"340\":{\"h\":\"\",\"t\":[\"3D点云学习综述\",\"MVSNet\",\"DGCNN\",\"PointMVS\",\"MeshCNN: 对流形网络的边进行卷积\",\"DMTet\",\"Extracting Triangular 3D Models, Materials, and Lighting From Images\",\"NVlabs/nvdiffrec: Official code for the CVPR 2022 (oral) paper \\\"Extracting Triangular 3D Models, Materials, and Lighting From Images\\\". (github.com)\",\"建模采用神经SDF网络，渲染采用 迪士尼的 PBR 材料，采用光栅渲染而不是光线追踪\",\"MeshDiffusion\",\"PointGPT\",\"3d自监督\",\"1.3\"]},\"341\":{\"h\":\"3D 数据集\"},\"342\":{\"h\":\"DTU 数据集\",\"t\":[\"MVS Data Set – 2014 | DTU Robot Image Data Sets\",\"DTU数据集点云matlab评估\",\"DTU Benchmark (3D Reconstruction) | Papers With Code\",\"基于平面扫描的多视角立体（MVS）深度学习综述-北大Zhu Qingtian 2021 \",\"DTU数据集的官网，包含了全部数据和评估代码。\",\"SampleSet (6.3 GB) 是基础文件，它包括readme文件、校准数据、相机投影矩阵、可见性掩码、评估代码以及包括所有可用数据的scan1和scan6。\",\"Points (6.3 GB)为所有场景的STL参考点云。\",\"Points_MVS (45 GB) 包含参考MVS方法产生的所有点云。\",\"Surfaces (28 GB) 包含MVS点云的泊松曲面重建。\",\"Cleaned (136 GB)包含在不同光线设置下拍摄的所有图像，这些图像已被清洗以消除传感器噪声。\",\"Rectified (123 GB) 与上面相同，但纠正消除径向失真。\",\"准确度\",\"Accuracy 精度/准确度是对地面真实点云中预测点的匹配百分比的度量。正确匹配的定义如下，其中Pp​预测点云，Pg​ 为真实点云：\",\"对于每个估计出来的3D点寻找在一定阈值内的真值3D点，最终可以匹配上的比例即为精度。需要注意的是，由于点云真值本身不完整，需要先估计出真值空间中不可观测的部分，估计精度时忽略掉。\",\"完整性\",\"Completeness 衡量在预测点云中可以匹配的地面真实点的百分比。相对准确度，简单交换Pp​Pg​ 即可。\",\"将每个真值的3D点寻找在一定阈值内最近的估计出来的3D点，最终可以匹配上的比例即为完整度。\"]},\"343\":{\"h\":\"S3DIS\",\"t\":[\"Stanford 3D Indoor Scene Dataset (S3DIS)\",\"S3DIS Dataset | Papers With Code\"]},\"344\":{\"h\":\"DETR\",\"t\":[\"DETR的思路和传统的目标检测的本质思路有相似之处，但表现方式很不一样。传统的方法比如Anchor-based方法本质上是对预定义的密集anchors进行类别的分类和边框系数的回归。DETR则是将目标检测视为一个集合预测问题（集合和anchors的作用类似）。由于Transformer本质上是一个序列转换的作用，因此，可以将DETR视为一个从图像序列到一个集合序列的转换过程。该集合实际上就是一个可学习的位置编码（文章中也称为object queries或者output positional encoding，代码中叫作query_embed）。\",\"import torch from torch import nn from torchvision.models import resnet50 class DETR(nn.Module): def __init__(self, num_classes, hidden_dim, nheads,num_encoder_layers, num_decoder_layers): super().__init__() # We take only convolutional layers from ResNet-50 model self.backbone = nn.Sequential(*list(resnet50(pretrained=True).children())[:-2]) self.conv = nn.Conv2d(2048, hidden_dim, 1) self.transformer = nn.Transformer(hidden_dim, nheads, num_encoder_layers, num_decoder_layers) self.linear_class = nn.Linear(hidden_dim, num_classes + 1) self.linear_bbox = nn.Linear(hidden_dim, 4) self.query_pos = nn.Parameter(torch.rand(100, hidden_dim)) self.row_embed = nn.Parameter(torch.rand(50, hidden_dim // 2)) self.col_embed = nn.Parameter(torch.rand(50, hidden_dim // 2)) def forward(self, inputs): x = self.backbone(inputs) h = self.conv(x) H, W = h.shape[-2:] pos = torch.cat([ self.col_embed[:W].unsqueeze(0).repeat(H, 1, 1), self.row_embed[:H].unsqueeze(1).repeat(1, W, 1), ], dim=-1).flatten(0, 1).unsqueeze(1) h = self.transformer(pos + h.flatten(2).permute(2, 0, 1), self.query_pos.unsqueeze(1)) return self.linear_class(h), self.linear_bbox(h).sigmoid() detr = DETR(num_classes=91, hidden_dim=256, nheads=8, num_encoder_layers=6, num_decoder_layers=6) detr.eval() inputs = torch.randn(1, 3, 800, 1200) logits, bboxes = detr(inputs) \",\"For clarity it uses learnt positional encodings in the encoder instead of fixed, and positional encodings are added to the input only instead of at each transformer layer. Making these changes requires going beyond PyTorch implementation of transformers, which hampers readability.\",\"DETR（整合了Transformer的目标检测框架）\"]},\"345\":{\"h\":\"Decoupled Knolwdge Distillation\"},\"346\":{\"h\":\"KL 散度\"},\"347\":{\"h\":\"信息熵\",\"t\":[\"一个离散随机变量 X的可能取值为 X=x1​,x2​,…,xn​，对应概率为 pi​=p(X=xi​)\",\"则随机变量的熵的定义为：\",\"H(p)=EX∼p(x)​[−logp(x)]\",\"若 x 为离散变量：\",\"H(x)=−i=1∑n​p(xi​)logp(xi​)\",\"熵代表随机变量的平均信息量\",\"“熵代表随机变量的平均信息量” 这个说法还是过于抽象了。\",\"我们引入熵的一个更加数学化的理解，即，\",\"熵代表编码随机变量所需的最短平均编码长度。\",\"换句话说，一个随机变量的平均信息量，等价于编码这个随机变量所需的最短平均编码长度。\",\"给定随机变量 X 我们能否预先求得其最短的平均编码长度？\",\"答案就是利用随机变量 X∼p(x) 的熵 H(p)\"]},\"348\":{\"h\":\"交叉熵\",\"t\":[\"离散变量的概率分布P、Q而言(p为真实分布，q为p的近似），其交叉熵定义为：\",\"H(p,q)=EX∼p(x)​[−logq(x)],H(p,q)=x∑​p(x)logq(x)1​=−x∑​p(x)logq(x)\",\"回顾一下熵的定义：H(p)=EX∼p(x)​[−logp(x)]\",\"交叉熵和熵的定义长的很像，它们之间的区别可以这样理解：\",\"因为 X 的实际分布为 p 所以计算期望编码长度时，尽管我们可能并不知道 p 但理论上总是基于真实分布 X∼p(x) 计算期望。\",\"当我们利用正确的分布 p(x) 进行编码时，log⁡⁡ 里面的真数是 p(x) 最终算出来的就是随机变量 X 的最优期望编码长度，即熵。\",\"当我们利用错误的分布 q(x) 进行编码时，log⁡ 里面的真数是 q(x) 最终算出来的自然不再是熵，而是我们用错误的分布 q(x) 进行编码后，算出来的随机变量 X 的期望编码长度。\",\"从信息论的角度理解，为什么交叉熵可以在机器学习中作为损失函数。\",\"我们在最小化交叉熵的时候，事实上是在逼近最优期望编码长度，\",\"即利用 q(x) 逼近 p(x) 使得交叉熵尽可能的小，以接近熵的值。\"]},\"349\":{\"h\":\"KL 散度\",\"t\":[\"KL散度（Kullback-Leibler Divergence）一般用于度量两个概率分布函数之间的“距离”，\",\"其定义如下：\",\"DKL​(P∣∣Q)=∑p(x)logQ(x)P(x)​DKL​(P∣∣Q)=∫p(x)logQ(x)P(x)​dx\",\"H(x)=−∑x​p(x)logp(x)\",\"H(p,q)=∑x​logq(x)1​=−∑x​p(x)logq(x)\",\"因此，KL散度或相对熵可通过下式得出：\",\"DKL​(p∣∣q)​=H(p,q)−H(p)=−x∑​p(x)logq(x)−x∑​−p(x)log(x)=−x∑​p(x)[logq(x)−logp(x)]=−x∑​p(x)logp(x)q(x)​​​\",\"KL散度 = 交叉熵 - 真实概率分布式的熵\",\"倘若我们优化KL散度，即是希望减小所需的额外编码数，使得分布 p 和 q 变得接近。这里有两种情况： \",\"若真实分布 p 恒定，那么优化KL散度等价于优化交叉熵，其目的是令交叉熵逼近最优期望编码长度，使得 q 尽可能接近 p 。在训练辨别模型时，往往是这种情况。为了简化计算，人们往往直接对交叉熵进行优化。\",\"若真实分布 p 不恒定，那么优化 KL 散度会同时改变交叉熵和熵的值，使得 q与 p 相互接近。在训练生成模型时，往往是这种情况，为了使分布 p 与 q 相互接近，我们必须直接对KL散度进行优化。\"]},\"350\":{\"h\":\"基于 Feature 的知识蒸馏\",\"t\":[\"具体步骤如下：\",\"选择teacher模型特征提取器的第N 层输出作为hint，从第一层到第N 层的参数对应图(a)中的 Whint​\",\"选择student模型特征提取器的第M 层输出作为 guided，从第一层到第M 层的参数对应图(a)中的 Wguided​\",\"步骤一与步骤二的特征图维度可能不匹配，因此引入卷积层调整器，记为Wr​，对guided 的维度进行调整\",\"（知识蒸馏）—— FitNets: Hints for Thin Deep Nets_\"]},\"351\":{\"h\":\"基于 Logits 的知识蒸馏\",\"t\":[\"logits 是未进入softmax的概率，\",\"一般是全连接层的输出，softmax的输入\"]},\"352\":{\"h\":\"Decoupled Knolwdge Distillation\"},\"353\":{\"h\":\"Notations\",\"t\":[\"对于第 t 类的训练样本，分类概率可以表示为:\",\"pi​=∑j=1C​exp(zj​)exp(zi​)​,zi​表示第i类的logit\",\"为了区分与目标类相关和不相关的预测，我们定义了以下符号：\",\"b=[pt​,p∖t​]∈R1×2 表示目标类 (pt​) 和所有其他非目标类 (p∖t​) 的二元概率，其计算公式为：\",\"表示非目标类之间的概率（即，不考虑第 t 类）。每个元素通过以下方式计算：\"]},\"354\":{\"h\":\"Reformulation\",\"t\":[\"尝试用二元概率 b 和非目标类之间的概率 ^p 重新表述 KD。 T 和 S 分别表示教师和学生。\",\"经典的KD使用KL-Divergence作为损失函数\",\"p^​i​=pi​/p∖t​\",\"最后可以写成：\",\"KD 损失被重新表述为两项的加权和。 KL(bT∣∣bS)表示教师和学生对目标类的二元概率之间的相似度。因此，我们将其命名为目标类知识蒸馏（TCKD）。\",\"target class knowledge distillation（TCKD），负责表述是否为top-1的分布\",\"同时，KL(pT∣∣pS) 表示教师和学生在非目标类中的概率之间的相似性，称为非目标类知识蒸馏（NCKD）\",\"non-target class knowledge distillation （NCKD），负责表述除top-1外，其他dark knowledge的分布\",\"KD=TCKD+(1−ptτ​)NCKD\",\"显然，NCKD 的权重与 ptτ​ 相耦合。\",\"直观地说，TCKD 专注于与目标类相关的知识，因为相应的损失函数只考虑二进制概率。相反，NCKD 侧重于非目标类别的知识。\"]},\"355\":{\"h\":\"Ablation\",\"t\":[\"TCKD 可能对student没有帮助（例如，在 ShuffleNet-V1 上增加 0.02% 和 0.12%）甚至有害（例如，在 WRN-16-2 上下降 2.30% 和在 ResNet8×4 上下降 3.87%）。\",\"然而，NCKD 的蒸馏性能与经典 KD 相当，甚至更好（例如，在 ResNet8×4 上为 1.76% 对 1.13%）。\",\"消融结果表明，目标类相关知识不如非目标类中的知识重要。\",\"我们假设教师对训练样本越有信心，它可以提供的知识就越可靠和有价值。然而，这种自信的预测高度抑制了损失权重。\",\"NCKD 是 logit 蒸馏有效但被大大抑制的突出原因。\",\"有趣的是，我们在表 1 中注意到，当仅应用 NCKD 时，其性能与经典 KD 相当甚至更好。这表明非目标类之间的知识对logit蒸馏至关重要，可以成为突出的“暗知识”。\",\"然而当回顾 KD 的新表达式时，发现 NCKD 对应的 loss 是和权重 (1−ptτ​) 耦合在一起的。换言之，如果 teacher 网络的预测越置信，NCKD 的 loss 权重就更低，其作用就会越小。\",\"而本文认为，teacher 更置信的样本能够提供更有益的 dark knowledge，和 NCKD 耦合的(1−ptτ​)权重会严重抑制高置信度样本的知识迁移，使得知识蒸馏的效率大幅降低。\",\"依据 teacher 模型的置信度，该研究对训练集上的样本做了排序，并将排序后的样本分成置信（置信度 top-50%）和非置信 (剩余) 两个批次：\",\"在前 50% 的样本上使用 NCKD 可以获得更好的性能，\",\"这表明预测良好的样本的知识比其他样本更丰富。\",\"然而，良好预测样本的损失权重被teacher的高置信度抑制。\",\"TCKD 传递有关训练样本“难度”的知识。\",\"TCKD 通过二元分类任务传递“暗知识”，这可能与样本“难度”有关。\",\"例如，与 ptτ​=0.75 的另一个训练样本相比， ptτ​=0.99 的训练样本对于学生来说可能“更容易”学习。\",\"由于 TCKD 传达了训练样本的“难度”，我们假设当训练数据变得具有挑战性时，有效性就会显现出来。\",\"但是，CIFAR-100 训练集很容易拟合 。因此，教师提供的“难点”知识并不能提供信息。\",\"在这一部分，设计三个角度进行实验来验证：训练数据越困难，TCKD 可以提供的好处越多。\",\"更强的数据增广：\",\"更难的数据集：\",\"更 Noisy 的标签\"]},\"356\":{\"h\":\"Decoupled Knolwdge Distillation\",\"t\":[\"TCKD 和 NCKD 都有自己的重要作用，然而，研究注意到了在原始的 KD Loss 中，TCKD 和 NCKD 是存在不合理的耦合的：\",\"​ KD=TCKD+(1−ptτ​)NCKD\",\"一方面，NCKD 和 $(1−𝑝_𝑡^\\\\tau) $耦合，会导致高置信度样本的蒸馏效果大打折扣；\",\"另一方面，TCKD 和 NCKD 是耦合的。然而这两个部分传递的知识是不同的，这样的耦合导致了他们各自的重要性没有办法灵活调整。\",\"DKD=αTCKD+βNCKD\"]},\"357\":{\"h\":\"Result\",\"t\":[\"ResNet32×4 和 ResNet8×4 分别设置为teacher和student\",\"解耦 (1−ptτ​) 和 NCKD，也就是把 β 设置为 1.0，可以将 top-1 accuracy 从 73.6% 提升至 74.8%；\",\"解耦 NCKD 和 TCKD 的权重，即进一步调节 β 的数值，可以将 top-1 accuracy 从 74.8% 进一步提升至 76.3%；\",\"结果说明 DKD 的解耦确实能带来显著的性能增益，这一方面证明了 KD 确实存在刚才提到的两个问题，另一方面也证明了 DKD 的有效性。\",\"此外，这个表格也证明了 α 对超参数是不敏感的，把 α 设置为 1.0 就可以取得令人满意的效果，所以在实际应用中只需要调节 β 即可。\",\"同时， β 也不是一个敏感的超参数，在 4.0-10.0 的范围内，都可以取得令人满意的蒸馏效果。\",\"表 6～9 中提供了 DKD 在 CIFAR-100 和 ImageNet-1K 两个分类数据集上的蒸馏效果。和 KD 相比，DKD 在所有数据集和网络结构上都有明显的性能提升。\",\"此外，与过去最好的特征蒸馏方法（ReviewKD）相比，DKD 也取得了接近甚至更好的结果。\",\"DKD 成功使得 logits 蒸馏方法重新回到了 SOTA 的阵营中。\",\"DKD 的结果虽不如特征蒸馏的 SOTA 性能，但是依然稳定地超过了 KD 的性能。而将 DKD 和特征蒸馏方法组合起来，也可以进一步提高 SOTA 结果。\",\"过去的一些工作证明了，Detection 任务非常依赖特征的定位能力，这在 Detector 蒸馏中也是成立的。而 logits 并不能提供 location 相关的信息，无法对 Student 的定位能力产生帮助，因此在 Detection 任务中，特征蒸馏相比 logits 蒸馏存在机制上的优势，这也是 DKD 无法超过特征蒸馏 SOTA 的原因。\"]},\"358\":{\"h\":\"Limitations and future work\",\"t\":[\"DKD 在对象检测任务上无法胜过最先进的基于特征的方法（例如 ReviewKD），因为基于 logits 的方法无法传递有关定位的知识。\",\"蒸馏性能与 β 之间的严格相关性尚未得到充分研究\",\"2203.08679\\\\ Decoupled Knowledge Distillation (arxiv.org)\",\"CVPR 2022\",\"进阶详解KL散度\",\"KL散度 \"]},\"359\":{\"h\":\"GCN\",\"t\":[\"A Gentle Introduction to Graph Neural Networks (distill.pub)\",\"Understanding Convolutions on Graphs (distill.pub)\",\"TNNLS | GNN综述：A Comprehensive Survey on Graph Neural Networks - 知乎 (zhihu.com)\",\"1901.00596.pdf (arxiv.org)\",\"这篇综述的应用部分没有提到在分类分割等传统2Dcv应用\",\"使用图卷积网络（GCN）做图像分割 - 知乎 (zhihu.com)\",\"Graph-FCN for image semantic segmentation\",\"未开源\",\"将图像分割问题转化为graph node分类问题，将FCN学习到的feature map作为GCN输入的node的feature vector；\",\"图卷积神经网络GCN：整图分类（含示例及代码） - Picassooo - 博客园 (cnblogs.com)\",\" DLG:图分类_dlg图_今晚打佬虎的博客-CSDN博客\",\"Multi-Label Image Recognition with Graph Convolutional Networks\",\"多标签分类(三): Multi-Label Image Recognition with Graph Convolutional Networks\"]},\"360\":{\"h\":\"InternImage:\",\"t\":[\"InternImage: Exploring Large-Scale Vision Foundation Models with Deformable Convolutions\",\"单位：上海AI Lab, 清华, 南大, 港中文\",\"代码：https://github.com/OpenGVLab/InternImage\",\"论文：https://arxiv.org/abs/2211.05778\"]},\"361\":{\"h\":\"Deformable Convolutional Networks\",\"t\":[\"[论文速览]Deformable Convolutional Networks; DCN[1703.06211]\",\"可变形卷积 DCN\",\"ICCV 2017 Microsoft Research Asia; DCN\",\"Illustration of the fixed receptive field in standard convolution (a) and the adaptive receptive field in deformable convolution (b), using two layers. Top: two activation units on the top feature map, on two objects of different scales and shapes. The activation is from a 3 × 3 filter. Middle: the sampling locations of the 3 × 3 filter on the preceding feature map. Another two activation units are highlighted. Bottom: the sampling locations of two levels of 3 × 3 filters on the preceding feature map. The highlighted locations correspond to the highlighted units above.\"]},\"362\":{\"h\":\"Deformable Convolution\"},\"363\":{\"h\":\"Regular conv\",\"t\":[\"y(p0​)=pn​∈R∑​p⋅x(p0​+pn​)\"]},\"364\":{\"h\":\"Deformable conv\",\"t\":[\"y(p0​)=pn​∈R∑​p⋅x(p0​+pn​+Δpn​)\",\"双线性插值\",\"通过一个 conv 层计算如何 offset\"]},\"365\":{\"h\":\"Defomable RoI Pooling\"},\"366\":{\"h\":\"RoI Pooling （average）\",\"t\":[\"首先第一个问题是为什么需要RoI Pooling？答案是在Fast R-CNN中，特征被共享卷积层一次性提取。因此，对于每个RoI而言，需要从共享卷积层上摘取对应的特征，并且送入全连接层进行分类。因此，RoI Pooling主要做了两件事，第一件是为每个RoI选取对应的特征，第二件事是为了满足全连接层的输入需求，将每个RoI对应的特征的维度转化成某个定值。RoI Pooling示意图如下所示：\",\" 实例分割模型Mask R-CNN详解：从R-CNN，Fast R-CNN，Faster R-CNN再到Mask R-CNN_\",\"Given the input feature map x and a RoI of size w×h and top-left corner p0​, RoI pooling divides the RoI into k×k (k is a free parameter) bins and outputs a k×k feature map y.\",\"For (i,j)-th bin (0≤i,j<k),\",\"y(i,j)=p∈bin(i,j)∑​x(p0​+p)/nij​,\",\"其中 nij​ 是 bin 中像素的数量\"]},\"367\":{\"h\":\"Position-Sensitive Roi Pooling\",\"t\":[\"详解R-FCN - 知乎 (zhihu.com)\",\"R-FCN:Object Detection via Region-based Fully Convolutional Networks\",\"NIPS 2016;\",\"基于区域的全卷积神经网络\"]},\"368\":{\"h\":\"Visualization\"},\"369\":{\"h\":\"Deformable ConvNets v2: More Deformable, Better Results\",\"t\":[\"论文阅读-可变形卷积v2: More Deformable, Better Results - 知乎 (zhihu.com)\",\"可变形卷积能够很好地学习到发生形变的物体，但是论文观察到当尽管比普通卷积网络能够更适应物体形变，可变形卷积网络却可能扩展到感兴趣区域之外从而使得不相关的区域影响网络的性能。\",\"更多的可变形卷积层 \",\"V1 仅在最后一个stage加入可变卷积\",\"调节能力，即学习偏移的同时还会加入每一个采样点的权重\"]},\"370\":{\"h\":\"DCN v3\",\"t\":[\"COCO新纪录65.4mAP！InternImage：注入新机制，扩展DCNv3，探索视觉大模型 - 知乎 (zhihu.com)\",\"提出一种新的大尺度CNN基础模型InternImage，也是首个参数达1B、训练数据达400M并取得与ViT相当、甚至更优的CNN方案。这说明：对于大尺度模型研究，卷积模型同样是一个值得探索的方向。\",\"通过将长程依赖、自适应空域聚合引入到DCNv3，作者成功的对CNN进行了大尺度扩展，同时还对模块定制化、堆叠规则以及缩放策略进行了探索。\",\"图像分类、目标检测、语义分割以及实例分割等任务实验结果验证了所提方案的有效性。值得一提的是：InternImage-B仅需ImageNet-1K训练即可取得84.9%的精度(比其他CNN方案至少高出1.1%)；当引入大尺度参数(1B)、大训练数据(427M)后，InternImage-H取得了89.2% ；在COCO任务上，InternImage-H以2.18B参数量取得了65.4%mAP指标，比SwinV2-G高出2.3%，同时参数量少27% 。\",\"(a) 显示了多头自注意力 (MHSA) [1] 的全局聚合，其计算和内存成本在需要高分辨率输入的下游任务中非常昂贵。 (b) 将 MHSA 的范围限制在本地窗口以降低成本。 (c) 是具有非常大的内核的深度卷积，用于模拟长程依赖关系。 (d) 是可变形卷积，它与 MHSA 具有相似的有利特性，并且对于大规模模型来说足够有效。我们从它开始构建一个大规模的CNN。\",\"当前主流的 Transformer 系列模型主要依靠多头自注意力机制实现大模型构建，其算子具有长距离依赖性，足以构建远距离特征间的连接关系，还具有空间的自适应聚合能力以实现构建像素级别的关系。\",\"但这种全局的注意力机制其计算和存储需求量巨大，很难实现高效训练和快速收敛。\",\"同样的，局部注意力机制缺乏远距离特征依赖。大核密集卷积由于没有空间聚合能力，而难以克服卷积天然的归纳偏置，不利于扩大模型。\",\"因此，InternImage 通过设计动态稀疏卷积算子，达到实现全局注意力效果的同时不过多浪费计算和存储资源，实现高效训练。\",\"研究者基于 DCNv2 算子，重新设计调整并提出 DCNv3 算子\"]},\"371\":{\"h\":\"DCNv2\",\"t\":[\"y(p0​)=k=1∑K​wk​mk​x(p0​+pk​+Δpk​)\",\"其中 K 表示采样点总数，k 枚举采样点。 wk​∈RC×C 表示第 k 个采样点的投影权重，mk​∈R 表示第$ k$ 个采样点的调制标量，通过 sigmoid 函数进行归一化。 pk​ 表示预定义网格采样的第 k 个位置 {(−1,−1),(−1,0),...,(0,+1),...,(+1,+1)} 与常规卷积中一样，$\\\\Delta p_k $ 是对应于第 k 个网格采样位置的偏移量。从方程中我们可以看出，\",\"对于长程依赖，采样偏移 Δpk​ 是灵活的，能够与短程或长程特征交互；\",\"对于自适应空间聚合，采样偏移 Δpk​ 和调制标量 mk​ 都是可学习的并且由输入 x 调节。由此可见，DCNv2 与 MHSA 具有相似的有利特性，这促使我们在此算子的基础上开发基于 CNN 的大规模基础模型。\"]},\"372\":{\"h\":\"DCNv3\",\"t\":[\"在已有的实践中，DCNv2往往作为常规卷积的扩展，加载常规卷积的预训练权值后进行微调以达成更优性能。这种使用方式不适用于需要从头开始训练的大尺度视觉基础模型。为解决上述问题，作者对DCNv2进行了如下扩展改进：\",\"Sharing weights among convolutional neurons. 类似常规卷积, DCNv2的不同卷积单元具有独立的线性投影权值, 其参数量与内存复杂度与采样点成线性关系, 这无疑会大幅限制其在大尺度模 型方面的高效性。针对于此, 受启发于分离卷积, 作者将原始的卷积权值 wk​ 调整为depthwise(对应位置感知调制因子 mk​ )与 point-wise（对应采样点间共享投影权值 w) 两部分。\",\"Introducing multi-group mechanism. 多组/头设计源于组卷积, 但在MHSA中得到广泛应用, 可用于在不同位置从不同表达子空间学习更丰富的信息。受此启发, 作者将空域聚合过程拆分为 G 组, 每组具有独立的采样偏移 Δpgk​ 、调制因子 mgk​ , 促使不同组具有不同的空域聚合模式, 进而产生更强的特征表达能力。\",\"Normalizing modulation scalars along sampling points. DCNv2的调制因子通过Sigmoid进行归一化处理，尽管每个调制因子均在[0,1]范围内，但其和并不稳定，从0到K之间变化，这会导致不稳定的梯度。为消除该不稳定问题，作者将元素级的Sigmoid归一化调整为沿采样点的Softmax归一化。此时，调制因子的综合为1，这使得整个训练过程更为稳定。\",\"y(p0​)=g=1∑G​k=1∑K​wg​mgk​xg​(p0​+pk​+Δpgk​)\",\"G 表示聚合组的数量，对于第 g 个组，wg​∈RC×C′，mgk​∈R 表示该组的位置无关投影权重，其中 C′=C/G 表示组维度。 mgk​∈R 表示第 g 组中第 k 个采样点的调制标量，通过 softmax 函数沿维度 K 进行归一化。\",\"xg​∈RC′×H×W 表示切片的输入特征图。 Δpgk​是第g组中网格采样位置 pk​ 对应的偏移量。\",\"总而言之, DCNv3 作为 DCN系列的扩展具有以下几个特性：\",\"该算子弥补了常规卷积在长程依赖与自适应空域聚合方面的不足；\",\"相比MHSA与形变注意力，该算子集成了CNN的归纳偏置；\",\"相比MHSA与重参数大核，受益于稀疏采样，该算子在计算量与内存方面更为高效。\"]},\"373\":{\"h\":\"构建模型\",\"t\":[\"Basic Block 在模块层面，不同于传统CNN常用的BottleNeck，作者采用了ViT的基本模块：加持了更鲜艳的成分(如LN、FFN、GELU)，见上图的基本模块示意图，即将ViT模块中的MHSA替换为了DCNv3。\"]},\"374\":{\"h\":\"Stacking Rules\",\"t\":[\"规定了一个堆叠规则，由四个超参控制搜索空间，\"]},\"375\":{\"h\":\"Scaling Rules\",\"t\":[\"根据搜索到的最佳超参配置，由缩放规则对模型扩展\",\"缩放规则由 Efficientnet 启发\",\"Efficientnet: Rethinking model scaling for convolutional neural networks.\",\"Google\",\"EfficientNet网络详解_太阳花的小绿豆的博客-CSDN博客\"]},\"376\":{\"h\":\"Result\"},\"377\":{\"h\":\"\",\"t\":[\"图像数据集\",\"3D数据集\",\"损失函数\",\"评价指标\",\"Swin Transformer\",\"TPS联合剪枝压缩\",\"实例分割_mask_rcnn\",\"InternImage\",\"GCN 图神经网络\",\"Vison GNN\",\"DETR\",\"知识蒸馏\",\"Decoupled Knolwdge Distillation\",\"检测\"]},\"378\":{\"h\":\"Swin Transformer\"},\"379\":{\"h\":\"Abstract\",\"t\":[\"这篇论文提出了一个新的 Vision Transformer 叫做 Swin Transformer，它可以被用来作为一个计算机视觉领域一个通用的骨干网络\",\"之所以这么说，是因为ViT 在结论的部分指出他们只是做了分类任务，把下游任务比如说检测和分割留给以后的人去探索，所以说在 ViT 出来之后，大家虽然看到了Transformer在视觉领域的强大潜力，但是并不确定Transformer能不能把所有视觉的任务都做掉，所以 Swin Transformer这篇论文的研究动机就是想告诉大家用 Transformer没毛病，绝对能在方方面面上取代卷积神经网络，接下来大家都上 Transformer 就好了\",\"但是直接把Transformer从 NLP 用到 Vision 是有一些挑战的，这个挑战主要来自于两个方面\",\"一个就是尺度上的问题。因为比如说现在有一张街景的图片，里面有很多车和行人，里面的物体都大大小小，那这时候代表同样一个语义的词，比如说行人或者汽车就有非常不同的尺寸，这种现象在 NLP 中就没有\",\"另外一个挑战是图像的 resolution太大了，如果要以像素点作为基本单位的话，序列的长度就变得高不可攀，所以说之前的工作要么就是用后续的特征图来当做Transformer的输入，要么就是把图片打成 patch 减少这个图片的 resolution，要么就是把图片画成一个一个的小窗口，然后在窗口里面去做自注意力，所有的这些方法都是为了减少序列长度\",\"基于这两个挑战，本文的作者就提出了 hierarchical Transformer，它的特征是通过一种叫做移动窗口的方式学来的\",\"移动窗口的好处：不仅带来了更大的效率，因为跟之前的工作一样，现在自注意力是在窗口内算的，所以这个序列的长度大大的降低了；同时通过 shifting 移动的这个操作，能够让相邻的两个窗口之间有了交互，所以上下层之间就可以有 cross-window connection，从而变相的达到了一种全局建模的能力\",\"然后作者说这种层级式的结构不仅非常灵活，可以提供各个尺度的特征信息，同时因为自注意力是在小窗口之内算的，所以说它的计算复杂度是随着图像大小而线性增长，而不是平方级增长\",\"这其实也为作者之后提出 Swin V2 铺平了道路，从而让他们可以在特别大的分辨率上去预训练模型\",\"因为 Swin Transformer 拥有了像卷积神经网络一样分层的结构，有了这种多尺度的特征，所以它很容易使用到下游任务里\",\"在密集预测型的任务上\"]},\"380\":{\"h\":\"Method\",\"t\":[\"Figure 1. (a) The proposed Swin Transformer builds hierarchical feature maps by merging image patches (shown in gray) in deeper layers and has linear computation complexity to input image size due to computation of self-attention only within each local window (shown in red). It can thus serve as a general-purpose backbone for both image classification and dense recognition tasks.\",\"(b) In contrast, previous vision Transformers [20] produce feature maps of a single low resolution and have quadratic computation complexity to input image size due to computation of selfattention globally.\",\"首先将图片输入到Patch Partition模块中进行分块，即每4x4相邻的像素为一个Patch，然后在channel方向展平（flatten）。假设输入的是RGB三通道图片，那么每个patch就有4x4=16个像素，然后每个像素有R、G、B三个值所以展平后是16x3=48，所以通过Patch Partition后图像shape由 [H, W, 3]变成了 [H/4, W/4, 48]。然后在通过Linear Embeding层对每个像素的channel数据做线性变换，由48变成C，即图像shape再由 [H/4, W/4, 48]变成了 [H/4, W/4, C]。其实在源码中Patch Partition和Linear Embeding就是直接通过一个卷积层实现的，和之前Vision Transformer中讲的 Embedding层结构一模一样。\",\"然后就是通过四个Stage构建不同大小的特征图，除了Stage1中先通过一个Linear Embeding层外，剩下三个stage都是先通过一个Patch Merging层进行下采样（后面会细讲）。然后都是重复堆叠Swin Transformer Block注意这里的Block其实有两种结构，如图(b)中所示，这两种结构的不同之处仅在于一个使用了W-MSA结构，一个使用了SW-MSA结构。而且这两个结构是成对使用的，先使用一个W-MSA结构再使用一个SW-MSA结构。所以你会发现堆叠Swin Transformer Block的次数都是偶数（因为成对使用）。\",\"最后对于分类网络，后面还会接上一个Layer Norm层、全局池化层以及全连接层得到最终输出。图中没有画，但源码中是这样做的。\",\"究动机就是想要有一个层级式的 Transformer，为了这个层级式，所以介绍了 Patch Merging 的操作，从而能像卷积神经网络一样把 Transformer 分成几个阶段，为了减少计算复杂度，争取能做视觉里密集预测的任务，所以又提出了基于窗口和移动窗口的自注意力方式，也就是连在一起的两个Transformer block，最后把这些部分加在一起，就是 Swin Transformer 的结构\"]},\"381\":{\"h\":\"Patch Embedding\"},\"382\":{\"h\":\"Patch Merging\"},\"383\":{\"h\":\"W-MSA\",\"t\":[\"Figure 2. An illustration of the shifted window approach for computing self-attention in the proposed Swin Transformer architecture. In layer l (left), a regular window partitioning scheme is adopted, and self-attention is computed within each window. In the next layer l + 1 (right), the window partitioning is shifted, resulting in new windows. The self-attention computation in the new windows crosses the boundaries of the previous windows in layer l, providing connections among them.\"]},\"384\":{\"h\":\"Masked MSA\",\"t\":[\"作者通过这种巧妙的循环位移的方式和巧妙设计的掩码模板，从而实现了只需要一次前向过程，就能把所有需要的自注意力值都算出来，而且只需要计算4个窗口，也就是说窗口的数量没有增加，计算复杂度也没有增加，非常高效的完成了这个任务\"]},\"385\":{\"h\":\"Joint Token Pruning and Squeezing Towards More Aggressive Compression of Vision Transformers\",\"t\":[\"论文名称：Joint Token Pruning and Squeezing Towards More Aggressive Compression of Vision Transformers 论文地址：https://arxiv.org/abs/2304.10716 代码地址：https://github.com/megvii-research/tps-cvpr2023\",\"旷视，清华\"]},\"386\":{\"h\":\"Intro\",\"t\":[\"Transformers 模型仍然需要相当高的计算预算，主要在于计算和内存成本随 tokens 长度呈平方关系。一些方法提出裁剪 tokens 策略来平衡成本与性能，此外类似知识蒸馏等技术则进一步降低了性能代沟。但随着裁剪比例增加，性能下降无可避免，因为丢掉了一些关键信息和辅助的上下文，特别是当保留下来的 tokens 数量低于 10 时。此外，一些激进的裁剪策略可能会导致目标不完整或者背景上下文信息丢失，如下图所示：\",\"本文认为被裁剪的 tokens 信息值得更好的利用。解决 由修剪策略引起的错误可能导致重大的信息丢失 的问题。\",\"首先，TPS通过剪枝得到保留子集和剪枝子集。\",\"其次，TPS通过单向最近邻匹配和基于相似性的融合步骤，将被修剪的令牌信息压缩为部分保留token。\"]},\"387\":{\"h\":\"Related Work\"},\"388\":{\"h\":\"原始 ViTs\",\"t\":[\"DeiT、LV-ViT、T2T-ViT、PS-ViT。\"]},\"389\":{\"h\":\"混合 ViTs\",\"t\":[\"Swin Transformer、CVT、PVT。\"]},\"390\":{\"h\":\"Token裁剪\",\"t\":[\"虽有 DynamicViT、AdaViT、A-ViT、ATS，但主流的深度学习框架并不太能支持这些推理时会发生 token 长度变化的模型。且最大的缺点在于裁剪的信息损失会使得精度下降，并且限制更激进的 token 裁剪。于是 Evo-ViT、EViT、SPViT 将裁剪的 tokens 塌缩进一个 token 来重新组织数量，这一操作记为 token 重组。尽管 token 重组缓解了一部分信息损失，但还是导致性能下降。\",\"EViT、Evo-ViT 提出将这些裁剪掉的 tokens 聚合为一个 token，但忽略了这些被裁剪 tokens 的不一致性，从而导致特征的坍缩或者更加激进的 token 裁剪。\",\"SPViT、IA-RED2 在训练计划上下功夫，但引入了太多的超参数且优化困难。而本文引入一种新的方法 joint token Pruning & Squeezing，仅需要简单地微调预训练模型。\"]},\"391\":{\"h\":\"Method\",\"t\":[\"令牌剪枝丢弃被剪枝的令牌；令牌重组将修剪后的令牌聚合为一个，而不考虑它们之间的差异。为了更有效地缩小令牌，我们的TPS挖掘隐藏在保留子集中的主机令牌，并将相似的修剪令牌压缩到相应的主机令牌中。\",\"图（a）表示令牌修剪的方法，通过计算各个 token 的重要性，选择其中最为重要的 k kk 个进行保留，删除余下的 token ；图（b）表示令牌重组的方法，在计算各个 token 的重要性后，将最重要的 k 个进行保留的同时，将需要删除的 token 合并成第 k + 1 个 token 进行保存；图（c）表示 TPS 方法，TPS 采用令牌修剪和压缩两步来压缩 ViTs。在TPS 方法中，在计算各个 token 的重要性后，将需要删除的 token 与保留的 token 计算相似性，将需要删除的 token 中存在的信息压缩到最相似的保留的 token 中。 因此，从上述介绍中可知：TPS 方法可以与任意 令牌修剪 的方法相合并，从而得到保留子集 Sr 和修剪子集 Sp\"]},\"392\":{\"h\":\"TPS\",\"t\":[\"本文引入两种变体：dTPS、eTPS，使得 TPS 能够和任意的裁剪技术相融合。\",\"dTPS 采用 dynamicViT 中可学习的 token 得分预测头，并通过直通式 Gumbel-Softmax 对二值化掩码进行采样来达到可微分的目的，而 eTPS 采用 EViT 中的类别 token 注意力值来衡量 token 的重要性。\",\"在推理阶段，采用固定比例 ρ 的 Top-K 操作来实施 token 选择策略，同时确保 token 的尺寸不变以完成并行推理。用 Sr 表示保留下来的 tokens，用 Sp 表示将被裁剪的 tokens。\",\"具体而言：\",\"dTPS 采用dynamicViT 中的可学习令牌分数预测头，通过直通Gumbel Softmax对二值决策掩码进行可微性采样（ 利用Gumbel Softmax,可以使目标函数对于该mask参数可微）;\",\"eTPS使用 cls token关注值来衡量令牌作为EViT的重要性；\",\"在两种变体的推理阶段，基于token分数，使用给定固定token压缩比 ρ 的 Top-k 操作设计token选择策略；\",\"这两种变体都保证了恒定的形状，从而从计算图的推理优化中获益。\",\"重参数化技巧（Gumbel-Softmax） - 知乎 (zhihu.com)\",\"离散采样，解决离散 token 选择问题\",\"在神经网络架构搜索或强化学习中，通常涉及离散的选择问题，例如以架构搜索为例，某一个网络层有3个候选操作，需要选择其中最优的一个。\",\"【简读】EViT: Expediting Vision Transformers Via Token Reorganizations - 知乎 (zhihu.com)\",\"EViT：利用[cls] token来决定每个Patch Token对于分类任务的重要性，仅保留一定比率的有价值的Patch Token，对于剩下的token采用简单的fusion操作保留，而不是直接丢弃。\"]},\"393\":{\"h\":\"Token 压缩\",\"t\":[\"为避免生成额外的 token，将裁剪的 tokens 注入相似的保留 tokens 内。方法：应用一种无向的最近邻匹配算法：以多对一的方式将 Sp 映射到 Sr ，之后利用一种基于相似度的融合方式来同化这些新信息。\"]},\"394\":{\"h\":\"匹配\",\"t\":[\"给定两个 token 子集：Sp 、Sr ，相应的 tokens 索引分别为 Ir、$ I^p$ 。用 ci,j​ 表示所有 i∈Ip ， j∈Ir的相似度矩阵。对于每一个裁剪的 token xi​∈Sp，从 Sr 中找到其最近邻 token x∗host​∈Sr作为主 token：\",\"x∗host ​=xj​∈Srargmax​ci,j​\",\"注意 token 匹配步骤是无向的，即 Sp 和 Sr 之间无向匹配，同时多个裁剪的 token 也能共享主 token，每个保留下来的 token 也能作为主 token。之后在矩阵 M∈RNp×Nr 中记录每个匹配值：\",\"其中 Np 和 Nr 分别表示两个子集的 tokens 数量。 一种高效计算相似度矩阵的方式是采用 Sp 和 Sr 之间的余弦相似度：\",\"ci,j​=∥xi​∥∥xj​∥xiT​xj​​, for i∈Ip,j∈Ir\",\"在匹配步骤中，相似度矩阵ci,j​ 可以直接生成，因此不需要额外的参数。\"]},\"395\":{\"h\":\"融合\",\"t\":[\"EViT 采用 tokens 重要性得分来对聚合的 tokens 重新加权，而本文采用基于相似度的加权计划。通过 mask M 来控制两个子集中所有 tokens 的融合步骤，来确保仅有主 tokens 和裁剪的 tokens 混合。具体来说，通过融合原始特征和裁剪的 tokens 特征来更新保留的 tokens xj​ ：\",\"yj​=wj​xj​+xi​∈Sp∑​wi​xi​\",\"其中 wi​为每个被裁减 xi​∈Sp的权重，wj​ 为保留的 token 权重，yj​ 为更新的 token 权重。融合的权重 wi​ 取决于 mask 值 mi,j​ 和相似度矩阵ci,j​：\",\"wi​=∑xi​∈Sp​exp(ci,j​)mi,j​+eexp(ci,j​)mi,j​​\",\"保留下来的 token 总是有着最大的融合权重 wj​，因为 xj​ 与其自身的相似度才等于 1：\",\"wj​=∑xi​∈Sp​exp(ci,j​)mi,j​+ee​\",\"于是未成为主 token 的那部分的保留 token 保持不变，而那些裁剪的 tokens 将被压缩进入主 tokens 来代替原有的 tokens。 由于匹配和融合策略确保了被处理的 tokens 数量等于保留下来的 tokens 数量，于是推理过程能够维持并行处理。\"]},\"396\":{\"h\":\"Result\",\"t\":[\"应用于多个普通视觉转换器的不同标记修剪方法的比较。 “*”表示我们的方法微调了 100 个 epoch。标有“†”的方法不支持常量形状推理。除非另有说明，上述先前方法默认训练 30 个 epoch。 “Re-impl”是指我们按照官方代码实现该方法。为了与之前的方法进行公平比较，我们利用计算上可比较的修剪设置来通过 TPS 微调主干网。\"]},\"397\":{\"h\":\"Vision GNN\",\"t\":[\"Vision GNN: An Image is Worth Graph of Nodes | Papers With Code\",\"Jun, 2022\"]},\"398\":{\"h\":\"intro\",\"t\":[\"本文提出以一种更加灵活的方式来处理图片：计算机视觉的一个基本任务是识别图像中的物体。由于图片中的物体通常不是形状规则的方形，所以经典的网格表示或者序列表示在处理图片时显得冗余且不够灵活。比如一个对象可以被视为由很多部分的组合：例如，一个人可以粗略地分为头部、上身、手臂和腿，这些由关节连接的部分自然形成一个图结构。\",\"在网格表示中，像素或小块仅仅通过空间位置排序。在序列表示中，2D 图像被切分成为一系列小块。在图表示中，节点通过其内容链接起来，不受本地位置的约束。网格表示和序列表示都可以视为是图表示的特例。因此，将一张图片视为图是相对于前二者更加灵活且有效。\",\"本文基于把图片视为图表示的观点，本文提出一种基于图表示的新型通用视觉架构 ViG。将输入图像分成许多小块，并将每个小块视为图中的一个节点。在构建好了输入图片的图表征之后，作者使用 ViG 模型在所有节点之间交换信息。ViG 的基本组成单元包括两部分：用于图形信息处理的 GCN (图形卷积网络) 模块和用于节点特征变换的 FFN (前馈网络) 模块。\"]},\"399\":{\"h\":\"Method\",\"t\":[\"在本文中，图网络的前向传播如下：\",\"G′=F(G,W)= Update ( Aggregate (G,Wagg ​),Wupdate ​)\",\"这里的 G 是图网络的节点， Wagg​ 是聚合步骤的网络参数， $W_{update} $ 是聚合后更新步骤的网络参数。上式的聚合函数 Aggregate(G,Wupdate​) 其实包括了转换、聚合、激活3个步骤。而更新函数是额外的，相对于传统卷积。\",\"对于图网络中的一个节点 xi​ 的更新，可以把上式子改写成：\",\"xi′​=h(xi​,g(xi​,N(xi​),Wagg​),Wupdate ​)\",\"N(xi​) 代表了中心节点 xi​ 相邻节点集合， g(⋅) 是聚合函数， h(⋅) 是更新函数。\",\"其中，聚合函数 $g(⋅) $ 有很多种，本文采用了一个较为简单的函数，叫 max-relative graph convolution： g(⋅)=xi′′​=[xi​,max({xj​−xi​∣j∈N(xi​)}] 。也就是计算中心节点 xi​ 与相邻所有节点的差，取最大值，再与中心节点 xi​ 结合。\",\"更新函数 ℎ(⋅) 比较简单，就是 h(⋅)=xi′​=x′′Wupdate​ 。值得一提的是，作者借鉴了 Transformer 多头注意力机制，用了多头更新机制：\",\"xi′​=[ head 1Wupdate1​, head 2Wupdate2​,⋯, head hWupdateh​]\",\"GNN 过度平滑：过度平滑是 GNN 网络的设计的内生问题，因为每个节点的更新都依赖于其相邻的节点，随着网络层数的增加和迭代次数的增加，临近节点的特征会趋向于收敛到同一个值。\",\"本文作者在设计 ViG Block 时通过更多的特征转化与非线性激活函数来减轻这个现象\",\"Y=σ(GraphConv(XWin​))Wout​+X\",\"为每个更新后的特征加回原来的特征，可以突出原来特征的值，也就是节点本身的特性，从而减轻了相邻节点的影响。\",\"W 全连接权重\",\"Z=σ(YW1​)W2​+Y\"]},\"400\":{\"h\":\"Result\",\"t\":[\"在浅层中，邻居节点往往根据低层和局部特征（例如颜色和纹理）来选择。在深层，中心节点的邻居更加语义化，属于同一类别。\"]},\"401\":{\"h\":\"思考\",\"t\":[\"edge conv 在图像上能用吗？\",\"DGCNN\",\"论文阅读 点云动态图卷积(DGCNN)_sunny_ckyh的博客-CSDN博客\",\"边缘卷积 与 GCN 的差异\"]},\"402\":{\"h\":\"实例分割\",\"t\":[\"一种分类方法：\",\"Top-Down\",\"首先通过目标检测的方法找出实例所在的区域（bounding box），再在检测框内进行语义分割，每个分割结果都作为一个不同的实例输出**。这类方法的代表作就是大名鼎鼎的Mask R-CNN**了。\",\"Bottom-Up\",\"自下而上的实例分割方法的思路是：首先进行像素级别的语义分割，再通过聚类、度量学习等手段区分不同的实例。\",\"One stage\",\"有两种思路：\",\"一种是受one-stage, anchot-based 检测模型如YOLO，RetinaNet启发，代表作有YOLACT和SOLO；\",\"一种是受anchor-free检测模型如 FCOS 启发，代表作有PolarMask和AdaptIS。\",\"进展综述\"]},\"403\":{\"h\":\"R-CNN\"},\"404\":{\"h\":\"流程：\",\"t\":[\"首先模型输入为一张图片，然后在图片上提出了约2000个待检测区域（SS算法），\",\"然后这2000个待检测区域一个一个地(串联方式)通过卷积神经网络提取特征，\",\"这些被提取的特征通过一个支持向量机(SVM)进行分类，得到物体的类别，并通过一个bounding box regression调整目标包围框的大小。\"]},\"405\":{\"h\":\"贡献：\",\"t\":[\"使用了卷积神经网络进行特征提取。\",\"使用bounding box regression进行目标包围框的修正。\"]},\"406\":{\"h\":\"问题：\",\"t\":[\"耗时的 selective search，对一帧图像，需要花费2s。\",\"耗时的串行式CNN前向传播，对于每一个RoI，都需要经过一个AlexNet提特征，为所有的RoI提特征大约花费47s。\",\"三个模块是分别训练的，并且在训练的时候，对于存储空间的消耗很大。\",\"Selective Search\",\"选择性搜索算法(Selective Search)超详解（通俗易懂版）_迪菲赫尔曼的博客-CSDN博客\",\"第三十三节，目标检测之选择性搜索-Selective Search - 大奥特曼打小怪兽 - 博客园 (cnblogs.com)\"]},\"407\":{\"h\":\"Fast R-CNN\"},\"408\":{\"h\":\"流程\",\"t\":[\"首先还是采用selective search提取2000个候选框，\",\"然后，使用一个神经网络对全图进行特征提取。\",\"使用一个RoI Pooling Layer在全图特征上摘取每一个RoI对应的特征，再通过全连接层(FC Layer)进行分类与包围框的修正。\"]},\"409\":{\"h\":\"贡献\",\"t\":[\"Fast R-CNN的贡献可以主要分为两个方面：\",\"取代R-CNN的串行特征提取方式，直接采用一个神经网络对全图提取特征(这也是为什么需要RoI Pooling的原因)。\",\"除了selective search，其他部分都可以合在一起训练。\"]},\"410\":{\"h\":\"Faster R-CNN\",\"t\":[\"首先使用共享的卷积层为全图提取特征，\",\"然后将得到的feature maps送入RPN，RPN生成待检测框(指定RoI的位置)并对RoI的包围框进行第一次修正。\",\"之后就是Fast R-CNN的架构了\",\"RoI Pooling Layer 根据 RPN 的输出在feature map上面选取每个 RoI 对应的特征，并将维度置为定值。最后，使用全连接层(FC Layer)对框进行分类，并且进行目标包围框的第二次修正。\",\"尤其注意的是，Faster R-CNN真正实现了端到端的训练(end-to-end training)。\"]},\"411\":{\"h\":\"Region Proposal Network\",\"t\":[\"RPN依靠一个在共享特征图上滑动的窗口，为每个位置生成9种预先设置好长宽比与面积的目标框(文中叫做anchor)。这9种初始anchor包含三种面积(128×128，256×256，512×512)，每种面积又包含三种长宽比(1:1，1:2，2:1)。\",\"anchor：实际上就是一组由rpn/generate_anchors.py生成的矩形\",\"每个点上有k个anchor（默认k=9），而每个anhcor要分positive和negative，所以每个点由256d feature转化为cls=2•k scores；而每个anchor都有(x, y, w, h)对应4个偏移量，所以reg=4•k coordinates\",\"全部anchors拿去训练太多了，训练程序会在合适的anchors中随机选取128个postive anchors+128个negative anchors进行训练\"]},\"412\":{\"h\":\"cls layer\",\"t\":[\"如果一个anchor与ground truth的IoU在0.7以上，那这个anchor就算前景(positive)。类似地，如果这个anchor与ground truth的IoU在0.3以下，那么这个anchor就算背景(negative)。\"]},\"413\":{\"h\":\"reg layer\",\"t\":[\"边框修正主要由4个值完成，tx,ty,th,tw。这四个值的意思是修正后的框在anchor的x和y方向上做出平移(由tx和ty决定)，并且长宽各自放大一定的倍数(由th和ty决定)。\",\"Smooth L1 loss\"]},\"414\":{\"h\":\"Classifier\"},\"415\":{\"h\":\"RoI Pooling\",\"t\":[\"特征被共享卷积层一次性提取。因此，对于每个RoI而言，需要从共享卷积层上摘取对应的特征，并且送入全连接层进行分类。因此，RoI Pooling主要做了两件事，\",\"第一件是为每个RoI选取对应的特征，\",\"第二件事是为了满足全连接层的输入需求，将每个RoI对应的特征的维度转化成某个定值。\"]},\"416\":{\"h\":\"分类和边框修正\",\"t\":[\"在 RoI Pooling 后，分类器主要是分这个提取的RoI具体是什么类别(人，车，马等等)，一共C+1类(包含一类背景)。RoI边框修正和RPN中的anchor边框修正原理一样，同样也是SmoothL1 Loss，\",\"RoI边框修正也是对于非背景的RoI进行修正，对于类别标签为背景的RoI，则不进行RoI边框修正的参数训练。\"]},\"417\":{\"h\":\"推理\",\"t\":[\"推理和训练过程类似\",\"首先通过RPN生成约20000个anchor(40×60×9)通过RPN。\",\"对20000个anchor进行第一次边框修正，得到修订边框后的proposal。\",\"对超过图像边界的proposal的边进行clip，使得该proposal不超过图像范围。\",\"忽略掉长或者宽太小的proposal。\",\"将所有proposal按照前景分数从高到低排序，选取前6000个proposal。\",\"使用阈值为0.7的NMS算法排除掉重叠的proposal。\",\"针对上一步剩下的proposal,选取前300个proposal进行分类和第二次边框修正\"]},\"418\":{\"h\":\"Mask R-CNN\"},\"419\":{\"h\":\"问题\",\"t\":[\"问题1：从输入图上的RoI到特征图上的RoI feature，RoI Pooling是直接通过四舍五入取整得到的结果。\",\"RoI Pooling过后的得到的输出可能和原图像上的RoI对不上，如下图所示：\",\"右图中蓝色部分表示包含了轿车主体的的信息的方格，RoI Pooling Layer的四舍五入取整操作导致其进行了偏移。\",\"问题2：再将每个RoI对应的特征转化为固定大小的维度时，又采用了取整操作。在这里笔者举例讲解一下RoI Pooling的操作：\",\"在从RoI得到对应的特征图时，进行了问题1描述的取整，在得到特征图后，如何得到一个6×6的全连接层的输入呢？RoI Pooling这样做：将RoI对应的特征图分成6×6块，然后直接从每块中找到最大值。在上图中的例子中，比如原图上的的RoI大小是280×480，得到对应的特征图是18×30。将特征图分成6块，每块大小是3×5，然后在每一块中分别选择最大值放入6×6的对应区域中。在将特征图分块的时候，又用到了取整\",\"这种取整操作(在Mask R-CNN中被称为quantization)对RoI分类影响不大，可是对逐像素的预测目标是有害的，因为对每个RoI取得的特征并没有与RoI对齐。因此，Mask R-CNN对RoI Pooling做了改进并提出了RoI Align。\",\"RoI Align的主要创新点是，针对问题1，不再进行取整操作。针对问题2，使用双线性插值来更精确地找到每个块对应的特征。\",\"总的来说，RoI Align的作用主要就是剔除了RoI Pooling的取整操作，并且使得为每个RoI取得的特征能够更好地对齐原图上的RoI区域。\"]},\"420\":{\"h\":\"损失函数\"},\"421\":{\"h\":\"图像数据集\",\"t\":[\"test change\"]},\"422\":{\"h\":\"COCO (Microsoft Common Objects in Context)\",\"t\":[\"COCO - Common Objects in Context (cocodataset.org)\",\"The MS COCO (Microsoft Common Objects in Context) dataset is a large-scale object detection, segmentation, key-point detection, and captioning dataset. The dataset consists of 328K images.\",\"Splits: The first version of MS COCO dataset was released in 2014. It contains 164K images split into training (83K), validation (41K) and test (41K) sets. In 2015 additional test set of 81K images was released, including all the previous test images and 40K new images.\",\"Based on community feedback, in 2017 the training/validation split was changed from 83K/41K to 118K/5K. The new split uses the same images and annotations. The 2017 test set is a subset of 41K images of the 2015 test set. Additionally, the 2017 release contains a new unannotated dataset of 123K images.\",\"Annotations: The dataset has annotations for\",\"object detection: bounding boxes and per-instance segmentation masks with 80 object categories,\",\"captioning: natural language descriptions of the images (see MS COCO Captions),\",\"keypoints detection: containing more than 200,000 images and 250,000 person instances labeled with keypoints (17 possible keypoints, such as left eye, nose, right hip, right ankle),\",\"stuff image segmentation – per-pixel segmentation masks with 91 stuff categories, such as grass, wall, sky (see MS COCO Stuff),\",\"panoptic: full scene segmentation, with 80 thing categories (such as person, bicycle, elephant) and a subset of 91 stuff categories (grass, sky, road),\",\"dense pose: more than 39,000 images and 56,000 person instances labeled with DensePose annotations – each labeled person is annotated with an instance id and a mapping between image pixels that belong to that person body and a template 3D model. The annotations are publicly available only for training and validation images.\",\"检测，分割，文本图像生成\"]},\"423\":{\"h\":\"Cityscapes\",\"t\":[\"Dataset Overview – Cityscapes Dataset (cityscapes-dataset.com)\",\"专注于对城市街景的语义理解。它为 30 个类提供语义、实例和密集像素注释，这些类分为 8 个类别（平面、人类、车辆、结构、对象、自然、天空和虚空）。该数据集由大约 5000 张精细注释图像和 20000 张粗略注释图像组成。在几个月、白天和良好的天气条件下，在 50 个城市捕获了数据。它最初被录制为视频，因此手动选择帧以具有以下功能：大量动态对象、不同的场景布局和不同的背景。\",\"分割\"]},\"424\":{\"h\":\"Places\",\"t\":[\"places.csail.mit.edu/browser.html\",\"The Places dataset is proposed for scene recognition and contains more than 2.5 million images covering more than 205 scene categories with more than 5,000 images per category.\",\"分类，补全\"]},\"425\":{\"h\":\"ADE20K\",\"t\":[\"ADE20K dataset (mit.edu)\",\"ADE20K语义分割数据集包含超过20K个以场景为中心的图像，这些图像使用像素级对象和对象部件标签进行了详尽的注释。总共有150个语义类别，包括天空，道路，草和离散对象，如人，汽车，床。\",\"分割：语义分割、实例分割、全景分割（增加对背景的分割和检测）\",\"semantic segmentation、instance segmentation、panopticsegmentation\"]},\"426\":{\"h\":\"NYUv2 （NYU-Depth V2）\",\"t\":[\"NYU Depth V2 « Nathan Silberman\",\"RGB camera (left), preprocessed depth (center) and a set of labels (right) for the image.\",\"The NYU-Depth V2 data set is comprised of video sequences from a variety of indoor scenes as recorded by both the RGB and Depth cameras from the Microsoft Kinect. It features:\",\"1449 densely labeled pairs of aligned RGB and depth images\",\"464 new scenes taken from 3 cities\",\"407,024 new unlabeled frames\",\"Each object is labeled with a class and an instance number. The dataset has several components:\",\"Labeled: A subset of the video data accompanied by dense multi-class labels. This data has also been preprocessed to fill in missing depth labels.\",\"Raw: The raw RGB, depth and accelerometer data as provided by the Kinect.\",\"Toolbox: Useful functions for manipulating the data and labels.\",\"分割，深度估计，\",\"3D Semantic Scene Completion：目标是从未完成的 3D 输入（例如点云、深度图）和可选的 RGB 图像推断密集的 3D 体素化语义场景。\"]},\"427\":{\"h\":\"BDD100K\",\"t\":[\"https://www.bdd100k.com/\",\"Datasets drive vision progress, yet existing driving datasets are impoverished in terms of visual content and supported tasks to study multitask learning for autonomous driving. Researchers are usually constrained to study a small set of problems on one dataset, while real-world computer vision applications require performing tasks of various complexities. We construct BDD100K, the largest driving video dataset with 100K videos and 10 tasks to evaluate the exciting progress of image recognition algorithms on autonomous driving. The dataset possesses geographic, environmental, and weather diversity, which is useful for training models that are less likely to be surprised by new conditions. Based on this diverse dataset, we build a benchmark for heterogeneous multitask learning and study how to solve the tasks together. Our experiments show that special training strategies are needed for existing models to perform such heterogeneous tasks. BDD100K opens the door for future studies in this important venue. More detail is at the dataset home page.\",\"多目标追踪、分割、检测\",\"车道检测、可驾驶区域检测\"]},\"428\":{\"h\":\"CrowdHuman\",\"t\":[\"http://www.crowdhuman.org/\",\"CrowdHuman is a large and rich-annotated human detection dataset, which contains 15,000, 4,370 and 5,000 images collected from the Internet for training, validation and testing respectively. The number is more than 10× boosted compared with previous challenging pedestrian detection dataset like CityPersons. The total number of persons is also noticeably larger than the others with ∼340k person and ∼99k ignore region annotations in the CrowdHuman training subset.\",\"很多人的数据集、目标检测\"]},\"429\":{\"h\":\"INaturalist\",\"t\":[\"https://github.com/visipedia/inat_comp/tree/master/2017\",\"The iNaturalist 2017 dataset (iNat) contains 675,170 training and validation images from 5,089 natural fine-grained categories. Those categories belong to 13 super-categories including Plantae (Plant), Insecta (Insect), Aves (Bird), Mammalia (Mammal), and so on. The iNat dataset is highly imbalanced with dramatically different number of images per category. For example, the largest super-category “Plantae (Plant)” has 196,613 images from 2,101 categories; whereas the smallest super-category “Protozoa” only has 381 images from 4 categories.\",\"特点：各个类的数量不平衡\",\"分类\"]},\"430\":{\"h\":\"检测\"},\"431\":{\"h\":\"DETR\"},\"432\":{\"h\":\"DINO\"},\"433\":{\"h\":\"DDQ\"},\"434\":{\"h\":\"激活函数\"},\"435\":{\"h\":\"ReLU(Rectified Linear Unit,修正线性单元)\",\"t\":[\"形式：\",\"f(x)={0,x,​x≤0x>0​\"]},\"436\":{\"h\":\"ReLU的稀疏性 [^2]\",\"t\":[\"当前，深度学习一个明确的目标是从数据变量中解离出关键因子。原始数据（以自然数据为主）中通常缠绕着高度密集的特征。然而，如果能够解开特征间缠绕的复杂关系，转换为稀疏特征，那么特征就有了鲁棒性（去掉了无关的噪声）。稀疏特征并不需要网络具有很强的处理线性不可分机制。那么在深度网络中，对非线性的依赖程度就可以缩一缩。一旦神经元与神经元之间改为线性激活，网络的非线性部分仅仅来自于神经元部分选择性激活。 对比大脑工作的95%稀疏性来看，现有的计算神经网络和生物神经网络还是有很大差距的。庆幸的是，ReLu只有负值才会被稀疏掉，即引入的稀疏性是可以训练调节的，是动态变化的。只要进行梯度训练，网络可以向误差减少的方向，自动调控稀疏比率，保证激活链上存在着合理数量的非零值。\"]},\"437\":{\"h\":\"ReLU 的缺点\",\"t\":[\"坏死: ReLU 强制的稀疏处理会减少模型的有效容量（即特征屏蔽太多，导致模型无法学习到有效特征）。由于ReLU在x < 0时梯度为0，这样就导致负的梯度在这个ReLU被置零，而且这个神经元有可能再也不会被任何数据激活，称为神经元“坏死”。\",\"无负值: ReLU和sigmoid的一个相同点是结果是正值，没有负值.\"]},\"438\":{\"h\":\"ReLU变种\"},\"439\":{\"h\":\"Leaky ReLU\"},\"440\":{\"h\":\"指数线性单元ELU\"},\"441\":{\"h\":\"SELU\"},\"442\":{\"h\":\"Swish\"},\"443\":{\"h\":\"GELU\"},\"444\":{\"h\":\"Maxout\"},\"445\":{\"h\":\"sigmoid 与 tanh\"},\"446\":{\"h\":\"为什么tanh相比sigmoid收敛更快:\",\"t\":[\"梯度消失问题\",\"tanh′(x)=1−tanh(x)2∈(0,1)\",\"sigmoid: s′(x)=s(x)×(1−s(x))∈(0,1/4)\",\"可以看出tanh(x)的梯度消失问题比sigmoid要轻.梯度如果过早消失,收敛速度较慢.\",\"以零为中心的影响 如果当前参数(w0,w1)的最佳优化方向是(+d0, -d1),则根据反向传播计算公式,我们希望 x0 和 x1 符号相反。但是如果上一级神经元采用 Sigmoid 函数作为激活函数，sigmoid不以0为中心，输出值恒为正，那么我们无法进行最快的参数更新，而是走 Z 字形逼近最优解。^1\"]},\"447\":{\"h\":\"激活函数作用\"},\"448\":{\"h\":\"梯度消失与梯度爆炸\"},\"449\":{\"h\":\"激活函数选择\",\"t\":[\"首先尝试ReLU,速度快,但要注意训练的状态.\",\"如果ReLU效果欠佳,尝试Leaky ReLU或Maxout等变种。\",\"尝试tanh正切函数(以零点为中心,零点处梯度为1)\",\"sigmoid/tanh在RNN（LSTM、注意力机制等）结构中有所应用，作为门控或者概率值。\",\"在浅层神经网络中，如不超过4层的，可选择使用多种激励函数，没有太大的影响。\",\"主要参考：激活函数(ReLU, Swish, Maxout) - 康行天下 - 博客园 (cnblogs.com)\",\"[^2]: ReLu(Rectified Linear Units)激活函数 - Physcal - 博客园 (cnblogs.com)\"]},\"450\":{\"h\":\"评价指标\"},\"451\":{\"h\":\"生成模型的几种评价指标\",\"t\":[\"PSNR (Peak Signal-to-Noise Ratio) 峰值信噪比。\",\"给定一个大小为 m×n 的干净图像 I 和噪声图像 K，均方误差（MSE）定义为：\",\"MSE=mn1​i=0∑m−1​j=0∑n−1​[I(i,j)−K(i,j)]2\",\"然后 PSNR(dB) 就定义为：\",\"PSNR=10⋅log10​(MSEMAXI2​​)\",\"其中MAXI2​为图片可能的最大像素值\",\"SSIM (Structural SIMilarity) 结构相似性。\",\"基于样本 x 和 y 之间的三个比较衡量：亮度 (luminance)、对比度 (contrast) 和结构 (structure)。\",\"l(x,y)c(x,y)s(x,y)​=μx2​+μy2​+c1​2μx​μy​+c1​​=σx2​+σy2​+c2​2σx​σy​+c2​​=σx​σy​+c3​σxy​+c3​​​​​\",\"一般取 c3​=c2​/2\",\"μx​ 为 x 的均值\",\"μy​ 为 y 的均值\",\"σx2​ 为 x 的方差\",\"σy2​ 为 y 的方差\",\"σxy​ 为 x 和 y 的协方差\",\"c1​=(k1​L)2,c2​=(k2​L)2 为两个常数，避免除零\",\"L 为像素值的范围，2B−1\",\"k1​=0.01,k2​=0.03 为默认值\",\"SSIM(x,y)=[l(x,y)α⋅c(x,y)β⋅s(x,y)γ]\",\"Inception Score使用图片类别分类器来评估生成图片的质量。其中使用的图片类别分类器为Inception Net-V3。\",\"直观感受，IS是对生成图片清晰度和多样性的衡量，IS值越大越好。具体公式如下：\",\"IS(G)=exp(Ex∼pg​​DKL​(p(y∣x)∣∣p(y)))\",\"Ex∼pg​​：遍历所有的生成样本，求平均值。\",\"DKL​：KL散度，DKL​(P∣∣Q)用于衡量分布 P 和 Q 之间的近似程度。\",\"p(y∣x)：对于图片x，属于所有类别的概率分布。对于给定图片x，表示为一个1000维数向量。\",\"p(y)：边缘概率，具体实现为对所有的验证图片x，计算得到p(y∣x)，再求所有向量平均值。\",\"Inception Score的问题 （1）数据集问题 （2）Inception Score敏感性问题 （3）Inception Score高的图片不一定真实 （4）Inception Score低的图片不一定差 （6）Inception Score的多样性检验有局限性 （6）Inception Score不能反映过拟合\",\"总结：Inception Score得分过于依赖分类器，是一种间接的对图片质量评估的方法，没有考虑真实数据与生成数据的具体差异。Inception Score是基于ImageNet得到的，在IS看来，凡是不像ImageNet的数据，都是不真实的。\",\"直接考虑生成数据和真实数据在feature层次的距离，不再额外的借助分类器。因此来衡量生成图片和真实图片的距离。\",\"FID=∣∣μr​−μg​∣∣2+Tr​(Σr​+Σg​−2(Σr​Σg​)1/2)\",\"μr​：真实图片的特征均值\",\"μg​：生成图片的特征均值\",\"Σr​：真实图片的协方差矩阵\",\"Σg​：生成图片的协方差矩阵\",\"Tr​：迹\",\"优点：\",\"生成模型的训练集可以和 Inception Net-V3 不同\",\"刷分不会导致生成图片的质量变差\",\"缺点：\",\"FID是衡量多元正态分布，直接按的距离。但是提取的图片特征不一定是符合多元正态分布的。\",\"无法解决过拟合问题，如果生成模型只能生成和训练集一模一样的数据无法检测。\"]},\"452\":{\"h\":\"生成模型\"},\"453\":{\"h\":\"扩散模型\",\"t\":[\"DDPM\",\"DDIM\",\"Score-based-Diffusion-model\",\"SDE\",\"SR3.md\",\"Deblurring-via-Stochastic-Refinement\",\"条件扩散\",\"扩散模型与受控图像生成\",\"CLIP引导生成\",\"StableDiffusion\",\"PoseDiffusion\",\"DiffSeg\"]},\"454\":{\"h\":\"对抗生成模型\",\"t\":[\"GAN 对抗生成模型\",\"StyleGAN\",\"DragGan\"]},\"455\":{\"h\":\"检索数据\"},\"456\":{\"h\":\"1. SELECT 语句\",\"t\":[\"Mysql检索：为了使用SELECT检索表数据，必须至少给出两条信息-\",\"想选择什么，\",\"从什么地方选择。\"]},\"457\":{\"h\":\"2. 检索单个列\",\"t\":[\"从 product 表中选择3列\",\"select prode_name from products; \",\"未排序数据：如果没有明确排序查询结果，返回的数据顺序不定？\",\"多条SQL语句以分号间隔\",\"SQL语句不区分大小写\"]},\"458\":{\"h\":\"3. 检索多个列\",\"t\":[\"select 关键字后给出多个列名，以逗号分隔\",\"select prod_id, prod_name, prod_price from products; \"]},\"459\":{\"h\":\"4. 检索所有列\",\"t\":[\"使用通配符 *，返回表中所有列，顺序一般是列在表定义中出现的顺序\",\"使用通配符可以检索出名字未知的列，但是慎用，降低性能\",\"select * from products; \"]},\"460\":{\"h\":\"5. 检索不同的行\",\"t\":[\"select 返回所有匹配的行，如何检索不同的值\",\"解决办法是使用DISTINCT关键字，顾名思义，此关键字指示MySQL只返回不同的值。\",\"select DISTINCT vend_id from products; \",\"不能部分使用distinct\",\"DISTINCT关键字应用于所有列而不仅是前置它的列\"]},\"461\":{\"h\":\"6. 限制结果\",\"t\":[\"select 返回所有匹配的行，如何返回第一行或前几行，用 LIMIT\",\"select prod_name from products LIMIT 5; \",\"此语句使用SELECT语句检索单个列。LIMIT 5指示MySQL返回不多于5行。\",\"得到下一个5行：\",\"select prod_name from products LIMIT 5,5; \",\"从行5开始的5行，第一个参数为开始的位置\",\"行0\",\"第一行为行0而不是行1，从0开始计数。\"]},\"462\":{\"h\":\"7. 使用完全限定的表名\",\"t\":[\"上面使用列名引用列，也可以用完全限定的名字引用列\",\"完全限定的名字：同时使用表名和列字\",\"select products.prod_name from products; \"]},\"463\":{\"h\":\"数据库\",\"t\":[\"Mysql检索\",\"排序检索数据\",\"过滤数据\",\"回表\"]},\"464\":{\"h\":\"回表\",\"t\":[\"数据库中什么是回表，为什么需要回表？\"]},\"465\":{\"h\":\"索引结构\",\"t\":[\"B-Tree 中，所有节点都会带有指向具体记录的指针；B+Tree 中只有叶子结点会带有指向具体记录的指针。\",\"B-Tree 中不同的叶子之间没有连在一起；B+Tree 中所有的叶子结点通过指针连接在一起。\",\"B-Tree 中可能在非叶子结点就拿到了指向具体记录的指针，搜索效率不稳定；B+Tree 中，一定要到叶子结点中才可以获取到具体记录的指针，搜索效率稳定。\",\"什么是 MySQL 的“回表”？ - 知乎 (zhihu.com)\"]},\"466\":{\"h\":\"排序检索数据\"},\"467\":{\"h\":\"1. 排序数据\",\"t\":[\"关系数据库设计理论认为如果不明确规定排序顺序，则检索出的数据顺序无意义\",\"子句\",\"子句(clause) SQL语句由子句构成， 有些子句是必需的，而有的是可选的。一个子句通常由一个关键字和所提供的数据组成。子句的例子有SELECT语句的FROM子句，我们在前一章看到过这个子句。\",\"order by 子句。\",\"select prod_name from products order by prod_name; \",\"TIP\",\"使用非选择的列进行排序是合法的\"]},\"468\":{\"h\":\"2. 按多个列排序\",\"t\":[\"例如按姓和名排序，在有多个相同姓的时候\",\"指定列名，使用逗号分割\",\"例：检索三个列，并按其中两个列对结果排序，先按价格，再按名称\",\"select prod_id, prod_price, prod_name from products order by prod_price, prod_name; \"]},\"469\":{\"h\":\"3. 指定排序方向\",\"t\":[\"DESC 关键字： (ASC 关键字是默认的)\",\"数据排序不限于升序排序(从A到Z)。这只是默认的排序顺序，还可以使用ORDER BY 子句以降序(从Z到A)顺序排序。为了进行降序排序，必须指定DESC关键字。\",\"select prod_id, prod_price, prod_name from products order by prod_price desc; \",\"对多个列降序排序\",\"DESC关键字只应用到直接位于前面的那一个列\",\"如果想对多个列进行降序排序，必须对每个列都指定 DESC 关键字\",\"使用ORDER BY和LIMIT的组合，能够找出一个列中最高或最低的值 下面的例子演示如何找出最昂贵物品的值:\",\"select prod_price from products order by prod_price DESC LIMIT 1; \",\"prod_priceDESC保证行是按照由最昂贵到最便宜检索的，而LIMIT 1告诉MySQL仅返回一行。\"]},\"470\":{\"h\":\"过滤数据\"},\"471\":{\"h\":\"1. 使用 where 子句\",\"t\":[\"一般不需要所有的行，使用搜索条件进行过滤\",\"在SELECT语句中，数据根据WHERE子句中指定的搜索条件进行过滤。\",\"WHERE子句在表名(FROM子句) 之后给出，如下所示:\",\"select prod_name, prod_price from products where prod_price = 2.50; \",\"这条语句从products表中检索两个列，但不返回所有行，只返回prod_ price值为2. 50的行。\",\"`WHERE`子句的位置\",\"在同时使用ORDER BY和WHERE子句时，应该让ORDER BY位于WHERE之后，否则将会产生错误。\"]},\"472\":{\"h\":\"WHERE 子句操作符\"},\"473\":{\"h\":\"HTTP 常见面试题\",\"t\":[\"3.1 HTTP 常见面试题 | 小林coding (xiaolincoding.com)\"]},\"474\":{\"h\":\"HTTP 基本概念\"},\"475\":{\"h\":\"HTTP 是什么\",\"t\":[\"HTTP 是超文本传输协议，HyperText Transfer Protocol\"]},\"476\":{\"h\":\"HTTP 常见状态码\",\"t\":[\"1xx 类状态码属于提示信息，是协议处理中的一种中间状态，实际用到的比较少。\",\"2xx 类状态码表示服务器成功处理了客户端的请求，也是我们最愿意看到的状态。\",\"「200 OK」是最常见的成功状态码，表示一切正常。如果是非 HEAD 请求，服务器返回的响应头都会有 body 数据。\",\"「204 No Content」也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。\",\"「206 Partial Content」是应用于 HTTP 分块下载或断点续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。\",\"3xx 类状态码表示客户端请求的资源发生了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向。\",\"「301 Moved Permanently」表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。\",\"「302 Found」表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。\",\"301 和 302 都会在响应头里使用字段 Location，指明后续要跳转的 URL，浏览器会自动重定向新的 URL。\",\"「304 Not Modified」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，也就是告诉客户端可以继续使用缓存资源，用于缓存控制。\",\"4xx 类状态码表示客户端发送的报文有误，服务器无法处理，也就是错误码的含义。\",\"「400 Bad Request」表示客户端请求的报文有错误，但只是个笼统的错误。\",\"「403 Forbidden」表示服务器禁止访问资源，并不是客户端的请求出错。\",\"「404 Not Found」表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。\",\"5xx 类状态码表示客户端请求报文正确，但是服务器处理时内部发生了错误，属于服务器端的错误码。\",\"「500 Internal Server Error」与 400 类型，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道。\",\"「501 Not Implemented」表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。\",\"「502 Bad Gateway」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。\",\"「503 Service Unavailable」表示服务器当前很忙，暂时无法响应客户端，类似“网络服务正忙，请稍后重试”的意思。\"]},\"477\":{\"h\":\"GET 与 POST\"},\"478\":{\"h\":\"HTTP 特性\"},\"479\":{\"h\":\"HTTP 缓存技术\"},\"480\":{\"h\":\"HTTP 缓存有哪些实现方式？\",\"t\":[\"对于一些具有重复性的 HTTP 请求，比如每次请求得到的数据都一样的，我们可以把这对「请求-响应」的数据都缓存在本地，那么下次就直接读取本地的数据，不必在通过网络获取服务器的响应了，这样的话 HTTP/1.1 的性能肯定肉眼可见的提升。\",\"所以，避免发送 HTTP 请求的方法就是通过缓存技术，HTTP 设计者早在之前就考虑到了这点，因此 HTTP 协议的头部有不少是针对缓存的字段。\",\"HTTP 缓存有两种实现方式，分别是强制缓存和协商缓存。\"]},\"481\":{\"h\":\"强制缓存\"},\"482\":{\"h\":\"协商缓存\"},\"483\":{\"h\":\"HTTP 与 HTTPS\"},\"484\":{\"h\":\"HTTP 与 HTTPS 有哪些区别？\",\"t\":[\"HTTP 是超文本传输协议，信息是明文传输，存在安全风险的问题。HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 SSL/TLS 安全协议，使得报文能够加密传输。\",\"HTTP 连接建立相对简单， TCP 三次握手之后便可进行 HTTP 的报文传输。而 HTTPS 在 TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。\",\"两者的默认端口不一样，HTTP 默认端口号是 80，HTTPS 默认端口号是 443。\",\"HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。\"]},\"485\":{\"h\":\"HTTPS 解决了 HTTP 的哪些问题？\",\"t\":[\"HTTP 由于是明文传输，所以安全上存在以下三个风险：\",\"窃听风险，比如通信链路上可以获取通信内容，用户号容易没。\",\"篡改风险，比如强制植入垃圾广告，视觉污染，用户眼容易瞎。\",\"冒充风险，比如冒充淘宝网站，用户钱容易没。\",\"HTTPS 在 HTTP 与 TCP 层之间加入了 SSL/TLS 协议，可以很好的解决了上述的风险：\",\"信息加密：交互信息无法被窃取，但你的号会因为「自身忘记」账号而没。\",\"校验机制：无法篡改通信内容，篡改了就不能正常显示，但百度「竞价排名」依然可以搜索垃圾广告。\",\"身份证书：证明淘宝是真的淘宝网，但你的钱还是会因为「剁手」而没。\",\"可见，只要自身不做「恶」，SSL/TLS 协议是能保证通信是安全的。\",\"HTTPS 是如何解决上面的三个风险的？\",\"混合加密的方式实现信息的机密性，解决了窃听的风险。\",\"摘要算法的方式来实现完整性，它能够为数据生成独一无二的「指纹」，指纹用于校验数据的完整性，解决了篡改的风险。\",\"将服务器公钥放入到数字证书中，解决了冒充的风险。\"]},\"486\":{\"h\":\"HTTP 演变\"},\"487\":{\"h\":\"计算机网络\"},\"488\":{\"h\":\"基础\"},\"489\":{\"h\":\"HTTP\",\"t\":[\"HTTP常见面试题\"]},\"490\":{\"h\":\"TCP\"},\"491\":{\"h\":\"IP\"},\"492\":{\"h\":\"Linux系统IO多路复用模型\",\"t\":[\"I/O多路复用是一种在单个线程中管理多个输入/输出通道的技术。它允许一个线程同时监听多个输入流（例如网络套接字、文件描述符等），并在有数据可读或可写时进行相应的处理，而不需要为每个通道创建一个独立的线程。\",\"在Linux系统中，有三种常见的I/O多路复用机制：select、poll和epoll。这些机制都允许对一组文件描述符进行相关事件的注册，并阻塞等待某些事件的发生或等待超时。\",\"select：通过对一组文件描述符进行相关事件的注册，然后阻塞等待某些事件的发生或等待超时。\",\"poll：与select类似，也是对一组文件描述符进行相关事件的注册，然后阻塞等待某些事件的发生或等待超时。\",\"epoll：是Linux系统中性能最好的I/O多路复用机制。它使用了一种基于事件驱动的模型，可以高效地处理大量并发连接¹。\",\"这些I/O多路复用机制都可以关注多个文件描述符，并在有数据可读或可写时通知应用程序进行相应的读写操作。\"]},\"493\":{\"h\":\"select\"},\"494\":{\"h\":\"poll\"},\"495\":{\"h\":\"epoll\"},\"496\":{\"h\":\"Linux高性能网络模式\"},\"497\":{\"h\":\"Reactor\"},\"498\":{\"h\":\"Proactor\"},\"499\":{\"h\":\"操作系统\",\"t\":[\"线程安全\",\"reactor 和 proactor：Linux高性能网络模式\",\"select、epoll、poll：Linux系统IO多路复用模型\"]},\"500\":{\"h\":\"线程安全\",\"t\":[\"一个线程安全的class应当满足以下三个条件：\",\"多个线程同时访问时，其表现出正确的行为。\",\"无论操作系统如何调度这些线程，无论这些线程的执行顺序如何 交织（interleaving）。\",\"调用端代码无须额外的同步或其他协调动作。\",\"依据这个定义，C++标准库里的大多数class都不是线程安全的，包 括std:: string、std::vector、std::map等，因为这些class通常需要在外部加 锁才能供多个线程同时访问。\"]},\"501\":{\"h\":\"软件设计\",\"t\":[\"软件设计模式\"]},\"502\":{\"h\":\"软件设计模式\",\"t\":[\"单例模式(Singleton)，保证一个类仅有一个实例，并提供一个访问它的全局访问点。\",\"单例模式可以分为懒汉式和饿汉式，两者之间的区别在于创建实例的时间不同：\",\"懒汉式：指系统运行中，实例并不存在，只有当需要使用该实例时，才会去创建并使用实例。（这种方式要考 虑线程安全）\",\"饿汉式：指系统⼀运行，就初始化创建实例，当需要时，直接调用即可。（本身就线程安全，没有多线程的问题）\",\"实现思路：私有化它的构造函数，以防止外界创建单例类的对象；使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例。\"]},\"503\":{\"h\":\"\",\"t\":[\"C++_OpenC++的博客-CSDN博客\",\"01.树与二叉树的基础知识 | 算法通关手册 (itcharge.cn)\",\"基础知识\"]},\"504\":{\"h\":\"数据类型\",\"t\":[\"常量与变量\",\"自定义数据类型\",\"数组\",\"指针\",\"链表\",\"变量的储存类别\"]},\"505\":{\"h\":\"运算及流程控制\"},\"506\":{\"h\":\"函数\"},\"507\":{\"h\":\"输入与输出\"},\"508\":{\"h\":\"类和面向对象\"},\"509\":{\"h\":\"数据共享与保护\",\"t\":[\"类的静态成员和静态成员函数\",\"友元\",\"const型数据\",\"标识符的作用域和可见性\",\"在定义了与全局标识符相同的标识符的块中，如何访问全局标识符？ ::a1\"]},\"510\":{\"h\":\"继承与派生\",\"t\":[\"继承\",\"派生类的构造函数和析构函数\",\"多重继承\",\"基类与派生类的转换\",\"继承与组合\"]},\"511\":{\"h\":\"多态与虚函数\",\"t\":[\"静态多态性\",\"虚函数与动态多态性\",\"纯虚函数与抽象类\",\"虚析构函数\"]},\"512\":{\"h\":\"运算符重载\",\"t\":[\"运算符重载\",\"重载单目运算符\",\"重载双目运算符\",\"重载流插入运算符\",\"不同类型的数据转换\"]},\"513\":{\"h\":\"STL\"},\"514\":{\"h\":\"C++11\",\"t\":[\"std::mutex\"]},\"515\":{\"h\":\"const型数据\"},\"516\":{\"h\":\"1. const指针\"},\"517\":{\"h\":\"1.1 指向常量的指针变量\"},\"518\":{\"h\":\"1.2 常指针\"},\"519\":{\"h\":\"1.3 指向常量的常指针\"},\"520\":{\"h\":\"2. 常对象\"},\"521\":{\"h\":\"3. 常对象成员\"},\"522\":{\"h\":\"4. 指向对象的常指针\",\"t\":[\"将指针变量声明为const型，这样指针变量始终保持为初值，不能改变，即指向不变\",\"Time t1(10,12,15),t2; //定义对象 Time *const ptr1; //const位置在指针变量名前，指定 ptr1 是常指针变量 ptr1 = &t1; //ptr1 指向对象t1，此后不能改变指向 ptr1 = &t2; //错误，ptr1不能改变指向 \"]},\"523\":{\"h\":\"5. 指向常对象的指针变量\",\"t\":[\"区别于 指向常变量的指针\"]},\"524\":{\"h\":\"6. 对象的常引用\",\"t\":[\"一个变量的引用就是一个变量的别名\",\"引用实际上是一个指针变量，用来存放该变量的地址，\",\"如果形参为变量的引用，实参为变量名，在调用函数时虚实结合，把实参变量的地址传递给形参（引用），这样引用就指向实参变量。\",\"对象的引用与此类似\",\"把引用声明为 const 即常引用\",\"举例：\",\"#include <iostream> using namespace std; class Time{ public: Time(int,int,int); //声明构造函数 int hour; int minute; int sec; }; Time::Time(int h,int m,int s){ //定义构造函数 hour = h; minute = m; sec = s; } void fun(Time &t){ //形参 t 是 Time 类对象的引用 t.hour = 18; } int main(){ Time t1(10,13,56); //定义 Time类对象 t1 fun(t1); //实参是 Time 类对象，可以通过引用来修改实参t1的值 cout <<t1.hour<<endl; return 0; } \"]},\"525\":{\"h\":\"7. 小结\",\"t\":[\"形式\",\"含义\",\"Time const t;\",\"t 是常对象，其值在任何情况下都不能改变\",\"void Time::fun()const;\",\"fun 是 Time 类中的常成员函数，可以引用，但不能修改本类中的数据成员\",\"Time * const p;\",\"p 是指向 Time 类对象的'常指针'变量，p 的值（p 的指向）不能改变\",\"const Time *p;\",\"p 是指向 Time 类'常对象'的指针变量，p 指向的类对象的值不能通过 p 来改变\",\"const Time &t1 = t;\",\"t1 是 Time 类对象 t 的引用，二者指向同一储存空间，t 的值不能改变\",\"fun(const 形参)\",\"一般作用于引用或者指针形参，防止程序改变执行的对象，提高函数的可维护性\"]},\"526\":{\"h\":\"C++ mutex\"},\"527\":{\"h\":\"1. 锁：mutex\",\"t\":[\"锁，是生活中应用十分广泛的一种工具。锁的本质属性是为事物提供“访问保护”，例如：大门上的锁，是为了保护房子免于不速之客的到访；自行车的锁，是为了保护自行车只有owner才可以使用；保险柜上的锁，是为了保护里面的合同和金钱等重要东西……\",\"在c++等高级编程语言中，锁也是用来提供“访问保护”的，不过被保护的东西不再是房子、自行车、金钱，而是内存中的各种变量。此外，计算机领域对于“锁”有个响亮的名字——mutex（互斥量），学过操作系统的同学对这个名字肯定很熟悉。\",\"Mutex，互斥量，就是互斥访问的量。这种东东只在多线程编程中起作用，在单线程程序中是没有什么用处的。从c++11开始，c++提供了std::mutex类型，对于多线程的加锁操作提供了很好的支持。下面看一个简单的例子，对于mutex形成一个直观的认识。\"]},\"528\":{\"h\":\"Demo1——无锁的情况\",\"t\":[\"假定有一个全局变量counter，启动两个线程，每个都对该变量自增10000次，最后输出该变量的值。在第一个demo中，我们不加锁，代码文件保存为：mutex_demo1_no_mutex.cpp\",\"#include <iostream> #include <thread> #include <vector> #include <mutex> #include <chrono> #include <stdexcept> int counter = 0; void increase(int time) { for (int i = 0; i < time; i++) { // 当前线程休眠1毫秒 std::this_thread::sleep_for(std::chrono::milliseconds(1)); counter++; } } int main(int argc, char** argv) { std::thread t1(increase, 10000); std::thread t2(increase, 10000); t1.join(); t2.join(); std::cout << \\\"counter:\\\" << counter << std::endl; return 0; } \",\"为了显示多线程竞争导致结果不正确的现象，在每次自增操作的时候都让当前线程休眠1毫秒\",\"如果没有多线程编程的相关经验，我们可能想当然的认为最后的counter为20000，如果这样想的话，那就大错特错了。下面是两次实际运行的结果：\",\"[root@2d129aac5cc5 demo]# ./mutex_demo1_no_mutex counter:19997 [root@2d129aac5cc5 demo]# ./mutex_demo1_no_mutex counter:19996 \",\"出现上述情况的原因是：自增操作\\\"counter++\\\"不是原子操作，而是由多条汇编指令完成的。多个线程对同一个变量进行读写操作就会出现不可预期的操作。以上面的demo1作为例子：假定counter当前值为10，线程1读取到了10，线程2也读取到了10，分别执行自增操作，线程1和线程2分别将自增的结果写回counter，不管写入的顺序如何，counter都会是11，但是线程1和线程2分别执行了一次自增操作，我们期望的结果是12！！！！！\",\"轮到mutex上场。\"]},\"529\":{\"h\":\"Demo2——加锁的情况\",\"t\":[\"定义一个std::mutex对象用于保护counter变量。对于任意一个线程，如果想访问counter，首先要进行\\\"加锁\\\"操作，如果加锁成功，则进行counter的读写，读写操作完成后释放锁（重要!!!）； 如果“加锁”不成功，则线程阻塞，直到加锁成功。\",\"#include <iostream> #include <thread> #include <vector> #include <mutex> #include <chrono> #include <stdexcept> int counter = 0; std::mutex mtx; // 保护counter void increase(int time) { for (int i = 0; i < time; i++) { mtx.lock(); // 当前线程休眠1毫秒 std::this_thread::sleep_for(std::chrono::milliseconds(1)); counter++; mtx.unlock(); } } int main(int argc, char** argv) { std::thread t1(increase, 10000); std::thread t2(increase, 10000); t1.join(); t2.join(); std::cout << \\\"counter:\\\" << counter << std::endl; return 0; } \",\"上述代码保存文件为：mutex_demo2_with_mutex.cpp。先来看几次运行结果：\",\"[root@2d129aac5cc5 demo]# ./mutex_demo2_with_mutex counter:20000 [root@2d129aac5cc5 demo]# ./mutex_demo2_with_mutex counter:20000 [root@2d129aac5cc5 demo]# ./mutex_demo2_with_mutex counter:20000 \",\"这次运行结果和我们预想的一致，原因就是“利用锁来保护共享变量”，在这里共享变量就是counter（多个线程都能对其进行访问，所以就是共享变量啦）。\",\"简单总结一些std::mutex：\",\"对于std::mutex对象，任意时刻最多允许一个线程对其进行上锁\",\"mtx.lock()：调用该函数的线程尝试加锁。如果上锁不成功，即：其它线程已经上锁且未释放，则当前线程block。如果上锁成功，则执行后面的操作，操作完成后要调用mtx.unlock()释放锁，否则会导致死锁的产生\",\"mtx.unlock()：释放锁\",\"std::mutex还有一个操作：mtx.try_lock()，字面意思就是：“尝试上锁”，与mtx.lock()的不同点在于：如果上锁不成功，当前线程不阻塞。\"]},\"530\":{\"h\":\"2. lock_guard\",\"t\":[\"虽然std::mutex可以对多线程编程中的共享变量提供保护，但是直接使用std::mutex的情况并不多。因为仅使用std::mutex有时候会发生死锁。回到上边的例子，考虑这样一个情况：假设线程1上锁成功，线程2上锁等待。但是线程1上锁成功后，抛出异常并退出，没有来得及释放锁，导致线程2“永久的等待下去”（线程2：我的心在等待永远在等待……），此时就发生了死锁。给一个发生死锁的 ：\",\"Demo3——死锁的情况（仅仅为了演示，不要这么写代码哦）\",\"为了捕捉抛出的异常，我们重新组织一下代码，代码保存为:mutex_demo3_dead_lock.cpp。\",\"#include <iostream> #include <thread> #include <vector> #include <mutex> #include <chrono> #include <stdexcept> int counter = 0; std::mutex mtx; // 保护counter void increase_proxy(int time, int id) { for (int i = 0; i < time; i++) { mtx.lock(); // 线程1上锁成功后，抛出异常：未释放锁 if (id == 1) { throw std::runtime_error(\\\"throw excption....\\\"); } // 当前线程休眠1毫秒 std::this_thread::sleep_for(std::chrono::milliseconds(1)); counter++; mtx.unlock(); } } void increase(int time, int id) { try { increase_proxy(time, id); } catch (const std::exception& e){ std::cout << \\\"id:\\\" << id << \\\", \\\" << e.what() << std::endl; } } int main(int argc, char** argv) { std::thread t1(increase, 10000, 1); std::thread t2(increase, 10000, 2); t1.join(); t2.join(); std::cout << \\\"counter:\\\" << counter << std::endl; return 0; } \",\"执行后，结果如下图所示：\",\"[root@2d129aac5cc5 demo]# ./mutex_demo3_dead_lock id:1, throw excption.... \",\"程序并没有退出，而是永远的“卡”在那里了，也就是发生了死锁。\",\"那么这种情况该怎么避免呢？ 这个时候就需要std::lock_guard登场了。std::lock_guard只有构造函数和析构函数。简单的来说：当调用构造函数时，会自动调用传入的对象的lock()函数，而当调用析构函数时，自动调用unlock()函数（这就是所谓的RAII，读者可自行搜索）。我们修改一下demo3。\"]},\"531\":{\"h\":\"Demo4——避免死锁，lock_guard\",\"t\":[\"demo4保存为：mutex_demo4_lock_guard.cpp\",\"#include <iostream> #include <thread> #include <vector> #include <mutex> #include <chrono> #include <stdexcept> int counter = 0; std::mutex mtx; // 保护counter void increase_proxy(int time, int id) { for (int i = 0; i < time; i++) { // std::lock_guard对象构造时，自动调用mtx.lock()进行上锁 // std::lock_guard对象析构时，自动调用mtx.unlock()释放锁 std::lock_guard<std::mutex> lk(mtx); // 线程1上锁成功后，抛出异常：未释放锁 if (id == 1) { throw std::runtime_error(\\\"throw excption....\\\"); } // 当前线程休眠1毫秒 std::this_thread::sleep_for(std::chrono::milliseconds(1)); counter++; } } void increase(int time, int id) { try { increase_proxy(time, id); } catch (const std::exception& e){ std::cout << \\\"id:\\\" << id << \\\", \\\" << e.what() << std::endl; } } int main(int argc, char** argv) { std::thread t1(increase, 10000, 1); std::thread t2(increase, 10000, 2); t1.join(); t2.join(); std::cout << \\\"counter:\\\" << counter << std::endl; return 0; } \",\"执行上述代码，结果为：\",\"[root@2d129aac5cc5 demo]# ./mutex_demo4_lock_guard id:1, throw excption.... counter:10000 \",\"结果符合预期。所以，推荐使用std::mutex和std::lock_guard搭配使用，避免死锁的发生。\"]},\"532\":{\"h\":\"3. std::lock_guard的第二个构造函数\",\"t\":[\"实际上，std::lock_guard有两个构造函数，具体的\",\"explicit lock_guard( mutex_type& m ); (1) (since C++11) lock_guard( mutex_type& m, std::adopt_lock_t t ); (2) (since C++11) lock_guard( const lock_guard& ) = delete; (3) (since C++11) \",\"在demo4中我们使用了第1个构造函数，第3个为拷贝构造函数，定义为删除函数。这里我们来重点说一下第2个构造函数。\",\"第2个构造函数有两个参数，其中第二个参数类型为：std::adopt_lock_t。这个构造函数假定：当前线程已经上锁成功，所以不再调用lock()函数。 参考两个参数\",\"c++之多线程中“锁”（mutex）的用法_one-莫烦的博客-CSDN博客\"]},\"533\":{\"h\":\"C++ STL 部分用法\"},\"534\":{\"h\":\"String\",\"t\":[\"push_back 函数\",\"上述代码输出的结果为：\\\"Hello!\\\"\",\"请注意，push_back函数仅适用于向字符串添加一个字符。如果要添加一个字符串，可以使用字符串的加号运算符（+）或者append函数\",\"substring 函数\",\"substr(int index,int len) \",\"表示从下标为index的地方开始算，截取len长度的字符。\",\"如果只有一个参数则表示截取从该位置到末尾。\",\"split 函数\",\"标准库里没有，要自己实现。\",\"例如，分割以空格隔开的字符串，可能在前后和中间含有多个空格。\",\"vector<string> splitString(string sen){ vector<string> vec; while (sen.find(\\\" \\\") != sen.npos) { if(sen.find(\\\" \\\") == 0 ){ sen = sen.substr(sen.find(\\\" \\\") + 1, sen.length()); continue; }else{ vec.push_back(sen.substr(0, sen.find(\\\" \\\"))); sen = sen.substr(sen.find(\\\" \\\") + 1, sen.length()); } } if(sen == \\\"\\\")return vec; else { vec.push_back(sen); return vec; } } \",\"find 函数\",\"使用string类的find成员函数可以找到一个字符串在另一个字符串中的位置。find函数返回目标字符串在源字符串中的第一个匹配位置的索引，如果找不到则返回string::npos\",\"size_t pos = sourceString.find(targetString); \"]},\"535\":{\"h\":\"字符串类型转换函数\",\"t\":[\"stoi： string型变量转换为int型变量\",\"stol： string型变量转换为long型变量\",\"stoul：string型变量转换为unsigned long型变量\",\"stoll： string型变量转换为long long型变量(常用)\",\"stoull：string型变量转换为unsigned long long型变量\",\"stof： string型变量转换为float型变量\",\"stod： string型变量转换为double型变量(常用)\",\"stold：string型变量转换为long double型变量\",\"技巧\",\"在日常使用中， 最常用的是stoll和stod这两个函数， stoll可以兼容stoi，stol； 而stod可以兼容stof。\",\"例：\",\"#include<iostream> #include<string> using namespace std; int main() { string s = \\\"11.11\\\"; double a = stod(s); cout << a; return 0; } \",\"【最贴心】C++字符串转换(stoi；stol；stoul；stoll；stoull；stof；stod；stold)_来老铁干了这碗代码的博客-CSDN博客\",\"to_string 函数\",\"函数的主要作用是将数字转换为字符串。\",\"C++ to_string函数详解_笔记大全\"]},\"536\":{\"h\":\"Vector\",\"t\":[\"C++vector容器无敌详细_c++创建vector_拒绝摆烂的博客-CSDN博客\",\"C++：vector小指南（附带一些新手错误） - 知乎 (zhihu.com)\",\"WARNING\",\"对于二维vector变量，vv.size()的值vector的行数，vv[i].size()的值是vector的列数\",\"使用vector容器的头文件是#include< vector >\"]},\"537\":{\"h\":\"概念\",\"t\":[\"vector容器常被成为向量容器(据说是线性代数中的一维数组就是叫做向量)\",\"vector是一个动态大小数组的顺序容器,可以认为vector是存放任意类型的动态数组\",\"vector的特性:\",\"顺序序列：vector容器是按照严格的线性序列排序\",\"动态数组：vector容器支持对序列中元素快速访问元素通过下标的方式,也可在首尾快速的删除或增加元素，当vector的元素数量超过他的容量时,容量会增倍(vetcor.capacity());\"]},\"538\":{\"h\":\"vector构造函数\",\"t\":[\"vetcor()：创建一个空的vector容器。\",\"vector(int n)：创建一个size()为n的vector容器,元素值为0。\",\"vector(int n,const T& t)：创建一个size()为n的vector容器且每个元素值为t。\",\"vector(const vector&)：复制另一个vector容器内容到该容器中\",\"vector(begin,end)：复制一个数组区间为 [begin,end)(注意是左开右闭?) 的值到vector中\",\"#include <iostream> #include <vector> using namespace std; int main(){ int s[3]={1,2,3}; vector<int> temp(3); //temp容器元素为0,0,0 vector<int> p(5,3); //p容器元素为3,3,3,3,3 vector<int> q(p); //q容器元素为3,3,3,3,3 vector<int> tmp(s,s+3); //tmp容器元素为1,2,3 return 0; } \"]},\"539\":{\"h\":\"vector增加函数\",\"t\":[\"void push_back(const T& t)：往vector容器最后一个元素位置后添加元素t。\",\"iterator insert(iterator iter,const T& t)：往iter迭代器指向元素前添加元素t。\",\"iterator insert(iterator iter,int n,const T& t)：往iter迭代器指向元素前添加n个值为t的元素。\",\"iterator insert(iterator iter,iterator first,iterator last)：往iter迭代器指向元素前插入另一个相同类型vector容器的 [first,last) 间的元素。\",\"iterator emplace (const_iterator position, Args&&… args);往position迭代器指定位置前插入一个元素，并返回当前位置。(c++11新增函数)\",\"void emplace_back (Args&&… args);往vector容器后插入一个元素，效率高于push_back()函数。\",\"注\",\"vector容器中没有push_front()函数\",\"#include <iostream> #include <vector> using namespace std; int main(){ vector<int> s(2,4); vector<int> p; p.push_back(1); //p容器内元素为1 p.insert(p.begin(),2); //p容器内元素为2,1; p.insert(p.end(),2,3); //因为end()是指最后一个元素再下一个位置 p容器内元素为2,1,3,3; p.insert(p.begin(),s.begin(),s.end()); //p容器值为4,4,2,1,3,3 return 0; } \"]},\"540\":{\"h\":\"vector删除函数\",\"t\":[\"void pop_back()：删除容器最后一个元素。\",\"iterator erase(iterator iter)：删除iter位置的元素。\",\"iterator erase(iterator first,iterator last)：删除容器内[first,last)的元素。\",\"iterator clear()：清除容器内所有元素。\",\"注\",\"很多同学在使用迭代器遍历vector删除指定元素时,会出现野指针问题,\",\"原因在于erase(iterator iter)删除一个元素时会返回下一个元素的迭代器，而再++iter,则会出现指针指向错误,\",\"删除最后一个元素是返回end()，此时在++会出现段错误。\",\"#include <iostream> #include <vector> using namespace std; int main(){ vector<int> s(2,4); s.push_back(1); s.push_back(3); s.push_back(2); vector<int>::iterator iter=s.begin(); //遍历+删除指定元素正确用法 while(iter!=s.end()){ if(*iter==5) s.erase(iter); else iter++; } s.pop_back(); //s容器内元素为4,4,1,3 s.erase(s.begin()); //s容器内元素为4,1,3 s.erase(s.begin(),s.end()); //s容器为空 s.push_back(1); s.clear(); //s容器为空 return 0; } \"]},\"541\":{\"h\":\"vector遍历函数\",\"t\":[\"at(int pos) ：返回pos位置处元素的引用，如果超出范围会返回异常错误,所以相对于[]更安全。\",\"front()：返回首元素的引用\",\"back()：返回尾元素的应用\",\"iterator begin()：返回向量vector容器的头指针,指向第一个元素\",\"iterator end()：返回向量vector容器的尾指针,指向最后一个元素的下一个位置\",\"reverse_iterator rbegin()：反向迭代器，指向最后一个元素\",\"reverse_iterator rend()：反向迭代器，指向第一个元素之前的位置\",\"注\",\"反向迭代器与正向迭代器声明时不同需要改为reverse_iterator\",\"#include <iostream> #include <vector> using namespace std; int main(){ vector<int> s(2,4); s.push_back(1); s.push_back(3); s.push_back(2); vector<int>::iterator iter1=s.begin(); while(iter1!=s.end()){ cout << *iter1; iter1++; } //输出为4,4,1,3,2 vector<int>::reverse_iterator iter2=s.rbegin(); while(iter2!=s.rend()){ cout << *iter2; iter2++; } //输出为2,3,1,4,4 return 0; } \"]},\"542\":{\"h\":\"vector关于元素数量函数\",\"t\":[\"void reserve (size_type n)：申请n个元素个数的内存空间，一次性分配效率较高.\",\"int size()：返回vector容器元素个数。\",\"int capacity()：返回vector容器容量。\",\"resize()：设置vector容器大小。\",\"bool empty()：判断vector容器是否为空,为空返回true,否则返回false。\",\"注\",\"当vector内元素超过开始设定的size()大小,vector的容量会翻倍增加(1->2,2->4…)\",\"#include <iostream> #include <vector> using namespace std; int main(){ vector<int> s; s.resize(5); cout <<s.size(); //输出size()为5 for(int i=0;i<s.size();i++) s[i]=i; cout << s.capacity(); //s的容量为5 s.push_back(1); cout << s.capacity(); //s的容量为10 cout << s.empty(); //输出为0,flase s.clear(); cout << s.empty(); //输出为1,true return 0; } \"]},\"543\":{\"h\":\"vector其他函数\",\"t\":[\"void swap(vector&)：交换两个同类型向量的数据 ??\",\"void assign(int n,const T& x)：设置向量中前n个元素的值为x\",\"void assign(const_iterator first,const_iterator last)：向量中[first,last)中元素设置成当前向量元素\",\"#include <iostream> #include <vector> using namespace std; int main(){ vector<int> s(5,2); vector<int> p(4,3); s.swap(p); //s容器内元素为3,3,3,3 p容器内元素为2,2,2,2,2 s.assign(2,1); //s容器内元素为1,1,3,3 p.assign(s.begin(),s.end()); //p容器内元素为1,1,3,3 return 0; } \"]},\"544\":{\"h\":\"Map\",\"t\":[\"unordered_map和map的区别_unordered_map map_美丽心灵的永恒阳光的博客-CSDN博客\",\"WARNING\",\"pair< > 的 first 和 second 属于模板的成员函数，用 . 调用\",\"关联容器如 map<key, value> 等的 first 和 second 是迭代器，当成指针用，调用应该使用 ->\",\"WARNING\",\"使用count，返回的是被查找元素的个数。如果有，返回1；否则，返回0。\",\"注意，map中不存在相同元素，所以返回值只能是1或0。\",\"使用find，返回的是被查找元素的位置，没有则返回map.end()。\"]},\"545\":{\"h\":\"unordered_map\",\"t\":[\"在C++中，存在一种简单申请哈希表的函数：unordered_map<element type> name {{},{}}\",\"一.对该函数的简要介绍：\",\"1、unordered_map 是存储<key, value>键值对的关联式容器，其允许通过 key 快速的索引到与其对应的value（hashmap<key> == value）\",\"2、unordered_map 中，键值通常用于唯一的标识元素，而映射值是一个对象，其内容与此键关联，键和映射的类型可以不同\",\"3、在内部，unordered_map 没有对<key, value>进行排序，unordered_map 将相同哈希值的键值对放在对应的桶中\",\"4、unordered_map 容器通过key访问单个元素比map快，但它遍历元素子集的范围和迭代方面效率较低\",\"5、unordered_map 实现了直接访问操作符（operator[]）允许通过 key 作为参数访问 value\",\"6、unordered_map 的迭代器至少是前向迭代器\",\"二. unordered_map 迭代器\",\"功能\",\"成员方法\",\"begin()\",\"返回指向容器中第一个键值对的正向迭代器。\",\"end()\",\"返回指向容器中最后一个键值对之后位置的正向迭代器。\",\"cbegin()\",\"和 begin() 功能相同，只不过在其基础上增加了 const 属性，即该方法返回的迭代器不能用于修改容器内存储的键值对。\",\"cend()\",\"和 end() 功能相同，只不过在其基础上，增加了 const 属性，即该方法返回的迭代器不能用于修改容器内存储的键值对。\",\"find(key)\",\"查找以 key 为键的键值对，如果找到，则返回一个指向该键值对的正向迭代器；反之，则返回一个指向容器中最后一个键值对之后位置的迭代器（如果 end() 方法返回的迭代器）。\",\"equal_range(key)\",\"返回一个 pair 对象，其包含 2 个迭代器，用于表明当前容器中键为 key 的键值对所在的范围。\",\"#include <iostream> #include <string> #include <unordered_map> using namespace std; int main() { //创建 umap 容器 unordered_map<string, string> umap{ {\\\"Python教程\\\",\\\"http://python/\\\"}, {\\\"Java教程\\\",\\\"http://java/\\\"}, {\\\"Linux教程\\\",\\\"http://linux/\\\"} }; cout << \\\"umap 存储的键值对包括：\\\" << endl; //遍历输出 umap 容器中所有的键值对 for (auto iter = umap.begin(); iter != umap.end(); ++iter) { cout << \\\"<\\\" << iter->first << \\\", \\\" << iter->second << \\\">\\\" << endl; } //获取指向指定键值对的前向迭代器 unordered_map<string, string>::iterator iter = umap.find(\\\"Java教程\\\"); cout <<\\\"umap.find(\\\\\\\"Java教程\\\\\\\") = \\\" << \\\"<\\\" << iter->first << \\\", \\\" << iter->second << \\\">\\\" << endl; return 0; } \",\"umap 存储的键值对包括： <Python教程, http://python/> <Linux教程, http://linux/> <Java教程, http://java/> umap.find(\\\"Java教程\\\") = <Java教程, http://java/> \",\"[^1]: C++中申请哈希表的函数：unordered_map讲解_FightingCSH的博客-CSDN博客_unordered_map 哈希函数\"]},\"546\":{\"h\":\"unordered_set\",\"t\":[\"unordered_set 容器，可直译为“无序 set 容器”。即 unordered_set 容器和 set 容器很像，唯一的区别就在于 set 容器会自行对存储的数据进行排序，而 unordered_set 容器不会。（去重容器）\",\"几个特性\",\"不再以键值对的形式存储数据，而是直接存储数据的值 ；\",\"容器内部存储的各个元素的值都互不相等，且不能被修改；\",\"不会对内部存储的数据进行排序\",\"C++ STL 中的 unordered_set 容器类模板中未提供 at() 成员函数，也未对 [] 运算符进行重载。因此，要想访问 unordered_set 容器中存储的元素，只能借助 unordered_set 容器的迭代器。\"]},\"547\":{\"h\":\"头文件\",\"t\":[\"#include <unordered_set> \"]},\"548\":{\"h\":\"初始化\",\"t\":[\"unordered_set<int> set1; //创建空set unordered_set<int> set2(set1); //拷贝构造 unordered_set<int> set3(set1.begin(), set1.end()); //迭代器构造 unordered_set<int> set4(arr,arr+5); //数组构造 unordered_set<int> set5(move(set2)); //移动构造 unordered_set<int> set6 {1,2,10,10};//使用initializer_list初始化 \"]},\"549\":{\"h\":\"创建空的set\",\"t\":[\"unordered_set<int> set1; \"]},\"550\":{\"h\":\"拷贝构造\",\"t\":[\"unordered_set<int> set2(set1); \"]},\"551\":{\"h\":\"使用迭代器构造\",\"t\":[\"unordered_set<int> set3(set1.begin(), set1.end()); \"]},\"552\":{\"h\":\"使用数组作为初值构造\",\"t\":[\"unordered_set<int> set4(arr,arr+5); \"]},\"553\":{\"h\":\"移动构造\",\"t\":[\"unordered_set<int> set4(arr,arr+5); \"]},\"554\":{\"h\":\"使用待处置的列表构造\",\"t\":[\"unordered_set<int> set6 {1,2,10,10}; \"]},\"555\":{\"h\":\"unordered_set 常用函数\"},\"556\":{\"h\":\"empty()\",\"t\":[\"判断是否为空\",\"set1.empty(); //若容器为空，则返回 true；否则 false \"]},\"557\":{\"h\":\"find()\",\"t\":[\"查找\",\"WARNING\",\"失败返回end()\",\"set1.find(2); //查找2，找到返回迭代器，失败返回end() \"]},\"558\":{\"h\":\"count()\",\"t\":[\"出现次数\",\"set1.count(2); //返回指2出现的次数，0或1 \"]},\"559\":{\"h\":\"insert()\",\"t\":[\"插入元素\",\"//插入元素，返回pair<unordered_set<int>::iterator, bool> set1.insert(3); //使用initializer_list插入元素 set1.insert({1,2,3}); //指定插入位置，如果位置正确会减少插入时间，返回指向插入元素的迭代器 set1.insert(set1.end(), 4); //使用范围迭代器插入 set1.insert(set2.begin(), set2.end()); \",\"insert() 函数返回值\",\"insert()只传入单个参数（待插入元素）\",\"会返回一个 pair 对象\",\"这个 pair 对象包含一个迭代器，以及一个附加的布尔值用来说明插入是否成功\",\"如果元素被插入，返回的迭代器会指向新元素\",\"如果没有被插入，迭代器指向阻止插入的元素\",\"auto pr = words.insert(\\\"ninety\\\"); // Returns a pair - an iterator & a bool value \",\"insert()传入两个参数（迭代器+待插入元素）\",\"可以用一个迭代器作为insert()的第一个参数，它指定了元素被插入的位置\",\"在这种情况下，只会返回一个迭代器\",\"auto iter = words.insert (pr.first, \\\"nine\\\"); // 1st arg is a hint. Returns an iterator \",\"insert()传入初始化列表\",\"插入初始化表中的元素\",\"在这种情况下，什么都没有返回\",\"words.insert({\\\"ten\\\", \\\"seven\\\", \\\"six\\\"}); // Inserting an initializer list \",\"由于unordered_set底层实现为hash，故set内不会出现重复元素。根据这个性质，结合insert函数，可以==验证插入元素是否重复==。\"]},\"560\":{\"h\":\"emplace()\",\"t\":[\"插入元素（转移构造）\",\"//使用转移构造函数添加新元素3，比insert效率高 set1.emplace(3); \"]},\"561\":{\"h\":\"erase()\",\"t\":[\"删除元素\",\"//删除操作，成功返回1，失败返回0 set1.erase(1); //删除操作，成功返回下一个pair的迭代器 set1.erase(set1.find(1)); //删除set1的所有元素，返回指向end的迭代器 set1.erase(set1.begin(), set1.end()); \"]},\"562\":{\"h\":\"bucket_count()\",\"t\":[\"篮子数目\",\"//返回容器中的篮子总数 set1.bucket_count(); \"]},\"563\":{\"h\":\"Stack 栈\",\"t\":[\"栈提供push 和 pop 等等接口，所有元素必须符合先进后出规则，所以栈不提供走访功能，也不提供迭代器(iterator)。 不像是set 或者map 提供迭代器iterator来遍历所有元素。\",\"栈是以底层容器完成其所有的工作，对外提供统一的接口，底层容器是可插拔的（也就是说我们可以控制使用哪种容器来实现栈的功能）。\",\"所以STL中栈往往不被归类为容器，而被归类为container adapter（容器适配器）。\",\"那么问题来了，STL 中栈是用什么容器实现的？\",\"从下图中可以看出，栈的内部结构，栈的底层实现可以是vector，deque，list 都是可以的， 主要就是数组和链表的底层实现。\",\"我们常用的SGI STL，如果没有指定底层实现的话，默认是以deque为缺省情况下栈的底层结构。\",\"deque是一个双向队列，只要封住一段，只开通另一端就可以实现栈的逻辑了。\",\"SGI STL中 队列底层实现缺省情况下一样使用deque实现的。\",\"我们也可以指定vector为栈的底层实现，初始化语句如下：\",\"std::stack<int, std::vector<int> > third; // 使用vector为底层容器的栈 \"]},\"564\":{\"h\":\"定义\",\"t\":[\"stack<int> s; //表示定义一个类型为int名字为s的栈 \"]},\"565\":{\"h\":\"压入\",\"t\":[\"插入的函数是push，例如插入3：\",\"s.push(3) \"]},\"566\":{\"h\":\"弹出\",\"t\":[\"弹出的函数是pop，且弹出的是顶部元素，示例：\",\"s.pop(); \",\"无返回值，如果需要栈顶元素，需要在 pop 之前 top\"]},\"567\":{\"h\":\"栈顶元素\",\"t\":[\"顶部元素是top，例如输出栈顶元素：\",\"cout<<s.top(); \",\"和 pop 一样，栈不能为空，否则报错。\"]},\"568\":{\"h\":\"是否为空\",\"t\":[\"函数为empty，为空则返回1，反之返回0，示例：\",\"if(s.empty()) cout<<\\\"栈为空\\\"; else cout<<\\\"栈不为空\\\"; \"]},\"569\":{\"h\":\"队列\"},\"570\":{\"h\":\"queue\",\"t\":[\"函数原型：push、pop、back、front\",\"解释\",\"1\",\"push(elem)\",\"向队尾添加元素\",\"2\",\"emplace()\",\"向队尾添加元素\",\"3\",\"pop()\",\"移除当前队首元素\",\"4\",\"back()\",\"返回队尾元素\",\"5\",\"front()\",\"返回队首元素\",\"注意\",\"push与emplace区别详见 :栈(stack)的使用及push与emplace异同点\",\"std::queue 不提供迭代器访问元素，只能通过 front() 和 back() 来访问队列的第一个和最后一个元素。\",\"std::queue 不支持随机访问，不能通过索引访问队列中的元素。\",\"std::queue 的底层容器可以在创建时指定，例如使用 std::list 作为底层容器：std::queue<int, std::list<int>> myQueue;\",\"默认 dequeue\"]},\"571\":{\"h\":\"queue 其他操作\",\"t\":[\"函数原型：empty、size、swap\",\"解释\",\"1\",\"empty()\",\"判断队列是否为空\",\"2\",\"size()\",\"返回队列的大小\",\"3\",\"swap(queue<T> & que)\",\"将当前队列中元素和que中元素交换\",\"注意：swap()交换的两个队列中包含元素的类型必须相同。\"]},\"572\":{\"h\":\"deque\",\"t\":[\"C++中的deque 用法_c++ dequeue__刘小雨的博客-CSDN博客\",\"deque（双端队列）是由一段一段的定量连续空间构成，可以向两端发展，因此不论在尾部或头部安插元素都十分迅速。 在中间部分安插元素则比较费时，因为必须移动其它元素。\"]},\"573\":{\"h\":\"初始化\",\"t\":[\"#include<deque> // 需使用 using std::deque; \",\"定义的实现代码\",\"deque<int> a; // 定义一个int类型的双端队列a deque<int> a(10); // 定义一个int类型的双端队列a，并设置初始大小为10 deque<int> a(10, 1); // 定义一个int类型的双端队列a，并设置初始大小为10且初始值都为1 deque<int> b(a); // 定义并用双端队列a初始化双端队列b deque<int> b(a.begin(), a.begin()+3); // 将双端队列a中从第0个到第2个(共3个)作为双 // 端队列b的初始值 // 除此之外，还可以直接使用数组来初始化向量： int n[] = { 1, 2, 3, 4, 5 }; // 将数组n的前5个元素作为双端队列a的初值 // 说明：当然不包括arr[4]元素，末尾指针都是指结束元素的下一个元素， // 这个主要是为了和deque.end()指针统一。 deque<int> a(n, n + 5); deque<int> a(&n[1], &n[4]); // 将n[1]、n[2]、n[3]作为双端队列a的初值 \"]},\"574\":{\"h\":\"操作函数\",\"t\":[\"容量函数 容器大小：deq.size();\",\"容器最大容量：deq.max_size();\",\"更改容器大小：deq.resize();\",\"容器判空：deq.empty();\",\"减少容器大小到满足元素所占存储空间的大小：deq.shrink_to_fit();\",\"添加函数\",\"头部添加元素：deq.push_front(const T& x);\",\"末尾添加元素：deq.push_back(const T& x);\",\"任意位置插入一个元素：deq.insert(iterator it, const T& x);\",\"任意位置插入 n 个相同元素：deq.insert(iterator it, int n, const T& x);\",\"插入另一个向量的 [forst,last] 间的数据：deq.insert(iterator it, iterator first, iterator last);\",\"删除函数\",\"头部删除元素：deq.pop_front();\",\"末尾删除元素：deq.pop_back();\",\"任意位置删除一个元素：deq.erase(iterator it);\",\"删除 [first,last] 之间的元素：deq.erase(iterator first, iterator last);\",\"清空所有元素：deq.clear();\",\"访问函数\",\"下标访问：deq[1]; // 并不会检查是否越界\",\"at 方法访问：deq.at(1); // 以上两者的区别就是 at 会检查是否越界，是则抛出 out of range 异常\",\"访问第一个元素：deq.front();\",\"访问最后一个元素：deq.back();\",\"其他函数\",\"多个元素赋值：deq.assign(int nSize, const T& x); // 类似于初始化时用数组进行赋值\",\"交换两个同类型容器的元素：swap(deque&);\"]},\"575\":{\"h\":\"迭代器算法\",\"t\":[\"迭代器\",\"开始迭代器指针：deq.begin();\",\"末尾迭代器指针：deq.end(); // 指向最后一个元素的下一个位置\",\"指向常量的开始迭代器指针：deq.cbegin(); // 意思就是不能通过这个指针来修改所指的内容，但还是可以通过其他方式修改的，而且指针也是可以移动的。\",\"指向常量的末尾迭代器指针：deq.cend();\",\"反向迭代器指针，指向最后一个元素：deq.rbegin();\",\"反向迭代器指针，指向第一个元素的前一个元素：deq.rend();\"]},\"576\":{\"h\":\"算法\",\"t\":[\"遍历元素\",\"deque<int>::iterator it; for (it = deq.begin(); it != deq.end(); it++) cout << *it << endl; // 或者 for (int i = 0; i < deq.size(); i++) { cout << deq.at(i) << endl; } \",\"元素翻转\",\"#include <algorithm> reverse(deq.begin(), deq.end()); \",\"元素排序\",\"#include <algorithm> sort(deq.begin(), deq.end()); // 采用的是从小到大的排序 // 如果想从大到小排序，可以采用先排序后反转的方式，也可以采用下面方法: // 自定义从大到小的比较器，用来改变排序方式 bool Comp(const int& a, const int& b) { return a > b; } sort(deq.begin(), deq.end(), Comp); \"]},\"577\":{\"h\":\"总结\",\"t\":[\"可以看到，deque与 vector的用法基本一致，除了以下几处不同：\",\"deque 没有 capacity() 函数，而 vector有；\",\"deque 有 push_front() 和 pop_front() 函数，而 vector没有；\",\"deque 没有 data() 函数，而 vector有。\",\"栈里面的元素在内存中是连续分布的么?\",\"栈是容器适配器，底层容器使用不同的容器，导致栈内数据在内存中不是连续分布。\",\"缺省情况下，默认底层容器是deque，那么deque的在内存中的数据分布是什么样的呢？ 答案是：不连续的 \",\"我们用deque作为单调队列的底层数据结构，C++中deque是stack和queue默认的底层实现容器，deque是可以两边扩展的，而且deque里元素并不是严格的连续分布的。\"]},\"578\":{\"h\":\"priority_queue\",\"t\":[\"优先队列(priority_queue)总结_行止AC的博客-CSDN博客\"]},\"579\":{\"h\":\"不同类型的数据转换\"},\"580\":{\"h\":\"函数\"},\"581\":{\"h\":\"Ｃ++的程序结构\",\"t\":[\"组成\",\"预处理指令\",\"如#define和#include <filename>等；\",\"在程序中都是以 # 开头的\",\"全局声明\",\"在函数外对数据类型、函数和变量的声明和定义\",\"函数\",\"包含函数首部和函数体\"]},\"582\":{\"h\":\"函数（Function）\",\"t\":[\"一个函数就是一个功能\"]},\"583\":{\"h\":\"main 函数\",\"t\":[\"1、 一个程序文件只能有一个主函数\",\"​ 程序总是从main函数开始执行的，main函数由系统调用\",\"​ '由主函数调用其他函数，其他函数可以互相调用，但是不能调用main函数'\",\"​ 主函数的作用：调用其它函数\",\"​ 主函数以外的函数大多是封装在'类'里的（通过类对象调用）\",\"2、 标准C++要求main函数必须声明为 int 型\",\" void main()也能通过，无返回值的主函数\",\"3、 函数调用举例\",\"#include <iostream> using namespace std; void printstar(void){ cout << \\\"*******\\\" << endl; } int main(){ printstar(); return 0; } \",\"说明：\",\"1、void ： void printstar(void)\",\"第一个 void 表示无返回值函数\",\"第二个 void 表示调用时'不能'也不必给出参数，可以省略这个 void （无参函数）\",\"2、所有函数都是平行的（包括main函数），相互独立\",\"一个函数并不属于另一个函数\",\"不能在一个函数中定义另一个函数（嵌套定义）\",\"不能在主函数main中定义\",\"3、声明位置\",\"若在main函数之后定义，则要'先声明'才能被main调用\",\"定义位置在main之前则不用声明}\"]},\"584\":{\"h\":\"函数分类\",\"t\":[\"系统函数（库函数） #include <filename>\",\"自定义函数：\",\"无参函数：调用时不必给参数：\",\"有返回值\",\"无返回值 \",\"以无返回值的居多主函数与其之间没有数据传递，一般执行固定操作\",\"有参函数：调用时必须给出参数('在主函数和被调用函数之间有数据传递')\",\"有返回值供主函数使用\",\"也可无返回值（void）\"]},\"585\":{\"h\":\"定义函数\",\"t\":[\"1、定义无参函数\",\"typename 函数名(void) //void可以省略，该行无分号 { 声明部分； 执行语句； } \",\"2、定义有参函数\",\"typename 函数名(形式参数表列) //函数首部，形参的类别在这里要声明 { 声明部分； 执行语句； } \"]},\"586\":{\"h\":\"函数参数\",\"t\":[\"形式参数'parameter'：定义时的变量名\",\"⚠️！注意是定义时的变量名\",\"实际参数'argument'：调用时的参数（表达式）\",\"说明：\",\"'形参未被调用时，不占内存',因此称为\\\"形式参数\\\"或者\\\"虚拟参数\\\"，调用时分配内存以接受实参的数据，调用结束之后形参内存释放\",\"实参可以时'常量、变量或者表达式'(必须是确定的值)\",\"函数的首部'声明形参类型'\",\"实参与形参的类型应该'相同或者赋值兼容'（eg：char 与 int ），若不同则按照赋值规则进行转换,'实参附给形参'\",\"实参向形参的数据传递是值传递（单向传递） \",\"调用函数时，编译系统临时给形参分配内存\",\"实参与形参上不同单元\",\"执行函数时，形参值改变，与实参无关（实参值不受影响）\"]},\"587\":{\"h\":\"函数的返回值\",\"t\":[\"通过函数的调用，使主函数能得到一个确定的函数值\",\"return 返回值\",\"​ 将被调用函数中的一个确定的值带回主函数\",\"​ 可以无返回值，可以有多个 return （执行到哪个，哪个起作用）\",\"return Z <=> return(Z) //可以不要括号 return(x > y ? x : y) //可以是表达式 \",\"返回值的类型\",\"由定义函数时的函数类型决定\",\"若 return 的类型与函数值类型不一致，'以函数类型为准，函数类型决定返回值类型'\",\"对于数值类型可以自动进行类型转换\"]},\"588\":{\"h\":\"函数调用\"},\"589\":{\"h\":\"一般形式\",\"t\":[\"functionname([argument]) //函数名+实参表列 \",\"​ 其中圆括号不能省略，可以没有实参表列\",\"​ 用逗号隔开多个实参\",\"​ 实参与形参的个数相等，类型匹配，按顺序一一对应传递数据\",\"​ 不同编译器对于多个实参的求值顺序不同，例如：\",\"func(i,++i); \",\"​ 若从左到右，则为 func(3,4)\",\"​ 若从右往左，则为 func(3,3),如VC++和GCC\",\"（函数参数的压栈顺序与函数的声明顺序相反？）\",\"其他要求\",\"必须时已经存在的函数；\",\"如果是库函数需要 #include <filename>加头文件\",\"如果是自定义函数，需要与调用它的主函数在同一个程序单位中，'若位置在主函数之后，还需要在调用前声明'\",\"作用：\",\"函数调用作为单独的语句，要求函数完成一定操作\",\"函数表达式：带回一个确定时值参加表达式的计算\",\"函数参数：函数调用作为另外一个函数的实参\",\"m = max(a, sqrt(b));\"]},\"590\":{\"h\":\"函数声明\",\"t\":[\"在函数尚未定义的情况下，先将函数的有关信息通知给编译系统，以便编译正常进行。\",\"声明和定义不是一回事：\",\"定义：对函数功能的确立，是一个完整独立的函数单位\",\"声明：把函数的有关信息（名字、类型、形参及其类型、函数体等通知编译器）\",\"'声明中也可以不写形参名，只写形参类型'例如：\",\"float add(float,float);\",\"这种声明方法称为'函数原型'(function prototype),作用:\",\"'根据函数原型在程序编译阶段对调用函数的合法性进行全面检查'\",\"函数原型的一般形式为：（基本形式）\",\"typename functioname(typename, typename, ……); //函数类型 函数名（参数类型1，参数类型2，……）； \",\"或者为了便于阅读\",\"typename functioname(typename parameter, typename parameter,……); // 函数类型 函数名（参数类型1 参数名1， 参数类型2 参数名2，……）； \",\"编译系统不检查参数名，写成什么都无所谓\",\"主要保证函数原型与函数首部写法上一致（函数类型、函数名、参数个数、参数类型、参数顺序）\",\"'对函数的外部声明'：函数声明的位置可以在函数外面，在所有函数定义之前\",\"如果一个函数被多个函数调用，这样可以不必在每个主调函数中重复声明\"]},\"591\":{\"h\":\"函数的嵌套调用\",\"t\":[\"c++不能嵌套定义函数，但是能够嵌套调用\",\"在调用一个函数的过程中调用另一个函数\"]},\"592\":{\"h\":\"函数的递归调用\",\"t\":[\"在调用一个函数的过程中又直接或者间接地调用该函数本身，称为函数的递归（recursive）调用\",\"包含递归调用的函数称为递归函数\"]},\"593\":{\"h\":\"有默认参数的函数\"},\"594\":{\"h\":\"一个参数\",\"t\":[\"当用同样的实参调用同一个函数的时候，Ｃ++中能够给实参一个默认的值\",\"例，有函数声明如下\",\"float area(float r=6.5); \",\"指定r的默认值为 6.5 ，在以默认参数调用时，不必给出实参的值\",\"area(); //相当于 area(6.5) \",\"如果不想用默认值，则通过实参另行给出\",\"area(7.4); //形参得到的值时7.4而不是默认值6.5 \"]},\"595\":{\"h\":\"多个形参\",\"t\":[\"可以使每个形参都有一个默认值，也可以只对一部分形参指定默认值，一部分不指定\",\"例，求一个圆柱体体积\",\"float volume(float h,float r = 12.5); //函数声明（函数原型），只对形参r指定默认值12.5 \",\"调用可以\",\"volume(45.6); //相当于 volume(45.6,12.5) volume(12,31); //两个参数都不采用默认值 \",\"注意⚠️ '实参与形参的结合是从左往右进行的，因此指定默认值必须放在形参表列中的最右端'\",\"例：\",\"void f1(float a,int b =0,int c,char d ='a'); //不正确 void f2(float a,int c,int b = 0,char d = 'a'); //正确，将带有默认参数的形参放到右边 \",\"对于 f2()的调用\",\"f2(1.2,2,4,'x'); //形参的值全部从实参得到 f2(3.2,5,2); //最后一个形参取默认值 f2(3.5,5); //最后两个形参取默认值b=0，d=‘a’ \",\"3、应用举例\",\"求两个或三个'正整数'数的最大值，用默认参数的函数实现\",\"#include <iostream> using namespace std; int main(){ int max(int a,int b,int c = 0); int a,b,c; cin>>a>>b>>c; cout<<\\\"max(a,b,c)\\\"<<max(a,b,c)<<endl; cout<<\\\"max(a,b)\\\"<<max(a,b)<<endl; return 0; } int max(int a,int b,int c){ if (b>a) { a=b; } if (c>a) { a=c; } return a; } \",\"注意\",\"如果函数定义是在函数调用之前：\",\"则应该在函数定义中给出默认值\",\"如果函数定义是在函数调用之后：\",\"则在函数调用之前需要有函数声明，此时必须在函数声明中给出默认值\",\"总之必须在函数调用之前将默认信息告知编译系统\",\"TIP\",\"重复指定默认值报错信息，最好只在声明时指定默认值\",\"WARNING\",\"一个函数不能既作为重载函数，又作为有默认参数的函数\",\"二义性\"]},\"596\":{\"h\":\"内部函数和外部函数\",\"t\":[\"函数本质上是全局的（因为被其他函数调用）\",\"但是也可以指定函数只能被本文件调用，而不能被其他文件调用\"]},\"597\":{\"h\":\"内部函数\",\"t\":[\"如果一个函数只能被本文件中的其他函数调用，则被成为内部函数\",\"内部函数又称为静态（static）函数\",\"通常把只能由同一文件使用的函数和外部变量放在一个文件中，在它们前面加上 static 局部化，使其他文件不能使用\",\"2、使用\",\"在定义内部函数时，在函数名和函数类型的前面加 static\",\"函数首部的一般格式为：\",\"static 类型标识符 函数名(形参表) \",\"例如\",\"static int func(int a,int b) \"]},\"598\":{\"h\":\"外部函数\",\"t\":[\"在定义函数时，如果在函数首部的最左端冠以关键字 extern，则表示此函数是外部函数，可供其他文件调用\",\"如果在定义函数时省略 extern，则'默认'为外部函数\",\"在需要调用此函数的文件中，用 extern 声明所用的函数是外部函数\",\"2、使用\",\"extern int func(int a,int b) \",\"​ 这样函数 func 就可以被其他文件调用\",\"3、说明\",\"使用 extern 声明能够将其他文件中函数的作用域扩展到本文件中\",\"extern 声明的形式是在函数原型的基础上加关键字 extern\",\"extern int max(int,int); \",\"Ｃ++中允许在声明函数时省略 extern（函数在本质上是外部的）\",\"int max(int,int); \",\"此时就是函数原型\",\"函数原型：\",\"用函数原型能够把函数的作用域扩展到到定义该函数的文件之外（不必使用 extern）\",\"只要在使用该函数的每一个文件中包含该函数的原型即可\",\"函数原型通知编译系统：该函数在本文件中稍后定义或者在另一个文件中定义\",\"函数原型扩展作用域最常见例子： #include <filename> 指令。 \",\"#include <cmath>\"]},\"599\":{\"h\":\"内置函数\",\"t\":[\"概念\",\"函数调用过程：~\",\"如果函数频繁调用，会降低运行效率\",\"Ｃ++能够在编译时将所调用函数的代码直接嵌入主调函数中，而不是将流程转出去\",\"这种嵌入到主调函数中的函数成为'内置函数' inline function\",\"又称 '内嵌函数'或者'内联函数'\",\"使用\",\"举例：\",\"#include <iostream> using namespace std; inline int max(int,int,int); //声明内置函数 int main(){ int i = 10,j = 20,k = 30,m; m = max(i,j,k); cout << \\\"max = \\\"<<m<<endl; return 0; } inline int max(int a,int b,int c){ //定义内置函数 if (b > a) { a = b; } if (c > a) { a = c; } return a; } \",\"程序分析：\",\"在指定了 inline 函数之后，在编译时调用函数的语句 max(i,j,k) 就被替换成 max 的函数体，同时用实参代替形参\",\"注意⚠️\",\"可以在声明和定义函数的时候同时写 inline ，也可以只在函数声明时加 inline，而定义函数时不加 inline。\",\"只要在调用函数之前把 inline 信息告知编译系统，就会按照内置函数处理\",\"使用条件\",\"只将规模很小（五句以下）且使用频繁的函数声明为内置函数（函数规模很小时，函数调用开销甚至超过执行函数本身）\",\"内置函数中不能包括复杂的控制语句，如循环语句和 switch 语句\",\"WARNING\",\"inline 声明是一个'建议性的语句而不是指令性的'，编译系统会根据具体情况决定是否这样做\",\"​\"]},\"600\":{\"h\":\"函数模版\",\"t\":[\"Ｃ++提供了函数模版，以解决函数体完全相同，参数类型不同的情况\",\"'函数模版实际上是建立一个通用函数，其函数类型和参数类型不具体指定，用一个虚拟的类型来代表，这个通用函数就称为函数模版'\",\"凡是函数体相同的函数都可以用这个模版来代替，在调用函数时系统哦会根据实参的类型来取代模版中的虚拟类型\",\"例，将函数重载（max）中的例子用函数模版实现\",\"⚠️注意：'只适用于函数体相同，函数参数个数相同而类型不同的情况'\",\"#include <iostream> using namespace std; template <typename T> //模版声明，其中T为类型参数 T max(T a,T b,T c){ //定义一个通用函数，用T作虚拟的类型名 if (b > a) { a = b; } if (c > a) { a = c; } return a; } int main(){ int i1=1,i2=2,i3=3,i; double d1=1.3,d2=4.2,d3=5.2,d; long g1=123445,g2=987655,g3=2345432,g; i = max(i1,i2,i3); //调用函数模版，此时T被int取代 d = max(d1,d2,d3); //调用函数模版，此时T被double取代 g = max(g1,g2,g3); //调用函数模版，此时T被long取代 cout<<i<<'\\\\n'<<d<<'\\\\n'<<g<<endl; } \",\"定义函数模版的一般形式为\",\"template <typename T> \",\"通用函数定义；\",\"或者为\",\"template <class T> \",\"通用函数定义；\",\"说明\",\"template 的含义是模版，在函数调用时才能确定T为什么类型，T也可以换成其他字母\",\"class 和 template 的作用相同，都表示类型名，可以互换，用 typename 更好;\",\"类型参数可以不止一个，如 template <class T1,typename T2>\",\"通常情况下，函数模版参数个数不能为 0 个\",\"此外，如果输入的两个参数不同，可以强制转换成同一个参数，例\",\"template <typename T> T fun(T x,T y){ return x*y; } \",\"调用 fun 时\",\"fun<float>(2,2.3) \",\"此时将两个参数都转换为float型，防止编译出错\"]},\"601\":{\"h\":\"函数重载\",\"t\":[\"Ｃ++允许用同一个函数名定义多个函数，而这些函数的参数个数和参数类型不相同\",\"这就是'函数重载'，即'对一个函数名重新赋予它新的含义，使一个函数名可以多用。所谓重载，其实也就是\\\"一物多用\\\"'。\",\"不仅函数可以重载，运算符也可以重载\",\"函数重载举例\",\"求两个或者三个整数的最大数\",\"#include <iostream> using namespace std; int main(){ int max(int a,int b,int c); //函数声明 int max(int a,int b); //函数声明 int a = 8,b = -12,c = 27; cout<<\\\"max(a,b,c)=\\\"<<max(a,b,c)<<endl; //输出三个整数中的最大数 cout<<\\\"max(a,b)=\\\"<<max(a,b)<<endl; //输出两个整数中的最大数 } int max(int a,int b,int c){ //求三个整数中的最大数 if (b>a) { a = b; } if (c > a) { a = c; } return a; } int max(int a,int b){ //求两个整数中的最大数 if (b > a) { return a; } else { return b; } } \",\"说明：\",\"两次调用max函数的参数个数不同，系统根据这些不同找到与之匹配的函数\",\"参数的个数和类型可以都不同，但不能只有函数的类型不同而参数的个数和类型相同 \",\"'重载函数的参数个数、参数类型或参数顺序三者中至少有一个不同'，否则调用形式一样 f(x) 编译系统无法判断调用哪一个\",\"函数的返回值可以相同可以不同（无规定）\"]},\"602\":{\"h\":\"常用标准库函数\",\"t\":[\"常用数学函数\",\"常用字符函数\",\"常用字符串函数\"]},\"603\":{\"h\":\"友元\",\"t\":[\"友元不能被派生类继承\"]},\"604\":{\"h\":\"友元函数\",\"t\":[\"如果在本类以外的其他地方定义了一个函数（可以不属于任何类的非成员函数，也可以是其他类的成员函数）\",\"在类体中用friend对其进行声明，此函数就称为本类的友元函数\",\"友元函数可以访问这个类中的私有成员（包括私有成员函数）\"]},\"605\":{\"h\":\"将普通函数声明为友元函数\",\"t\":[\"#include <iostream> using namespace std; class Time{ public: Time(int,int,int); //声明构造函数 friend void display(Time &); //在类体中声明display函数为Time类的友元函数 private: int hour; int minute; int sec; void display1(); }; Time::Time(int h,int m,int s){ //定义构造函数，给hour，minute，sec赋值 hour = h; minute = m; sec = s; } void Time::display1(){ cout<<\\\"调用了私有成员函数\\\"<<endl; } void display(Time& t){ //这里display是普通的函数，形参上Time类对象的引用 cout<<t.hour<<\\\":\\\"<<t.minute<<\\\":\\\"<<t.sec<<endl; t.display1(); } //这里的引用加上了对象名。 int main(){ Time t1(10,12,45); display(t1); //调用display函数，实参t1时Time类对象 return 0; } \",\"说明：\",\"由于声明了display是Time类的friend函数，所以display函数可以引用Time中的私有成员\",\"使用友元函数引用私有数据成员时，必须加上对象名（t.hour）， \",\"因为 display（友元函数）不是Time类的成员函数，没有this指针，不能默认引用Time类的数据成员，必须指定要访问的对象\"]},\"606\":{\"h\":\"友元成员函数\",\"t\":[\"friend函数不仅可以是一般函数，也可以是另一个类中的成员函数，例：\",\"有一个Date类的对象和一个Time类的对象，要求一次输出其中的日期和时间\",\"#include <iostream> using namespace std; class Date; //提前引用声明！ // Date d1; //错误！编译出错，编译系统只有在见到类体之后才能确定为对象分配多大的内存 class Time{ //声明Time类 public: Time(int,int,int); //声明Time类的构造函数 void display(Date &); //声明display成员函数，形参是Date类对象的引用 private: int hour; int sec; int minute; }; //声明类结尾分号！ class Date{ //声明Date类 public: Date(int,int,int); //声明Date类的构造函数 friend void Time::display(Date &); //声明Time中的display函数为本类的友元成员函数 private: int month; int day; int year; }; Time::Time(int h,int m,int s){ //定义类Time的构造函数 hour = h; minute = m; sec = s; } void Time::display(Date &d){ //定义display函数，输出年月日和时分秒，在定义了Date类之后定义display函数 //引用Date类对象中的私有数据： cout << d.month <<\\\"/\\\" <<d.day<<\\\"/\\\"<<d.year<<endl; //引用本类中的私有数据： cout << hour << \\\":\\\" <<minute<<\\\":\\\"<<sec<<\\\":\\\"<<endl; } Date::Date(int m,int d,int y){ //定义类Date的构造函数 month = m; day = d; year = y; } int main(){ Time t1(10,13,56); Date d1(12,21,2020); t1.display(d1); //调用t1中的display函数，实参上Date类对象d1 return 0; } \",\"说明：\",\"display成员函数的实参是Date类对象d1，否则就不能访问对象d1中的私有数据\",\"在Time::display函数中引用Date类私有数据时必须加上对象名，如d.month\",\"提前引用：在正式声明一个类之前，先声明一个类名，表示此类将在稍后声明，只包含类名，不包含类体（类似 extern 全局变量的提前引用声明？） \",\"由于在Time类中声明和定义display函数时用到了Date类，然而Date类的定义在后面，所以需要对Date'提前引用'\",\"但是类对提前声明使用范围时有限的，只有在正式声明一个类以后才能去定义类对象，在此之前试提前定义类对象是错误的！如本例中第三行提前引用之后\",\"本例中在正式声明Date类之后，才定义了 Time::display()函数，因为display函数中使用到了Date类的成员month、day、year。如果不先声明Date类，则出错，因为无法识别其中的Date成员\",\"一个函数（包括普通函数和成员函数）可以被多个类声明成friend，这样就可以引用多个类中的私有数据\"]},\"607\":{\"h\":\"友元类\",\"t\":[\"不仅可以将一个函数声明为一个类的'朋友'，而且可以将一个类（Ｂ）声明为另一个类（A）的'朋友'。这时B类就是A类的友元类。\",\"友元类Ｂ中的所有函数都是A类的友元函数，可以访问A类中的所有成员\",\"在A类的定义体中用一下语句声明Ｂ类为其友元类：\",\"friend B; //声明友元类的一般形式为 friend 类名； \",\"说明\",\"友元的关系是单向的而不是双向的（如声明了Ｂ是A的友元类，此时A不是Ｂ的友元类，A类中的函数不能访问Ｂ的私有数据）\",\"友元的关系不能传递\"]},\"608\":{\"h\":\"变量的储存类别\"},\"609\":{\"h\":\"生存期\",\"t\":[\"除了作用域之外，变量还有另一种属性————储存期(storage duration,也称生命期)储存期是指变量在内存中存在的周期（从变量值存在的时间分析）\",\"分为\",\"静态储存期（static storage duration）：程序运行期间系统对变量分配固定的储存空间\",\"动态储存期（dynamic storage duration）：～系统对变量动态地分配储存空间\",\"内存中用户使用的储存空间分为：\",\"程序区、\",\"静态储存区、\",\"动态储存区\",\"说明\",\"程序中所用的数据分别放在静态储存区和动态储存区。\",\"全局变量全部存放在静态储存区中，程序开始执行的时候就给全局变量分配储存单元，程序执行完毕后释放。在程序执行过程中它们占据固定的储存单元，而不是动态的分配和释放。\",\"动态储存区中有 \",\"函数形式参数：在调用函数时给形参分配储存空间\",\"函数中定义的变量（未加 static 声明的局部变量）\",\"函数调用时的现场保护和返回地址等\",\"函数在调用开始时分配动态储存空间，函数调用结束释放\",\"在函数执行过程中这种分配和释放是动态的：\",\"如果一个程序中两次调用统一函数，则要进行两次分配和释放，而两次分配给此函数中局部变量的储存空间地址可能是不同的\",\"如果一个函数中包含多个函数，每个函数的局部变量的储存期并不等于整个程序的执行周期，只是执行周期的一部分，则根据函数调用情况，对局部变量动态地分配和释放储存空间\"]},\"610\":{\"h\":\"储存类别\",\"t\":[\"在C++中变量除了有'数据类别'的属性之外,还有储存类别（storage class）的属性\",\"储存类别指的是数据在内存中储存的方法\",\"储存方法分为静态储存和动态储存两大类\",\"按储存类型，可以分为：\",\"内部函数\",\"外部函数\",\"储存类别有四种：'自动的(auto)'、'静态的(static)'、'寄存器的(register)'、'外部的(extern)'\",\"根据变量的储存类别，可以知道变量的作用域和储存期\"]},\"611\":{\"h\":\"自动变量（auto variable）（动态局部变量）\",\"t\":[\"函数中的'局部变量'，如果不用关键字 static 加以声明，编译系统对它们是动态地分配储存空间的\",\"函数的形参和在函数中定义的变量（包括在复合语句中定义的变量）都属于此类\",\"在调用该函数时，系统给形参和函数中定义的变量分配存储空间，数据储存在'动态储存区中'\",\"在函数调用结束的时候自动释放这些空间，（在复合语句结束的时候自动释放）\",\"因此把这类'局部变量'，称为'自动变量'，用关键字 auto 声明\",\"int f(int a){ //定义函数f，a为形参 //定义b和c为整型的自动变量，当f执行完毕之后，自动释放a，b，c所占有的内存 auto int b,c; ………… } \",\"说明\",\"储存类别 auto 和数据类型 int 的顺序任意\",\"关键字 auto 可以省略，如果不写，'默认为自动储存类别' \",\"程序中大多数变量属于（默认指定的）自动变量，\"]},\"612\":{\"h\":\"静态局部变量（static local variable）\",\"t\":[\"概念：\",\"函数中局部变量的值在函数调用结束之后不消失，而保留原值（即占用的内存不释放），\",\"在下一次调用该函数时，该变量保留上一次函数调用结束时的值，\",\"这时应该指定该局部变量为'静态局部变量'，例\",\"#include <iostream> using namespace std; int f(int a){ auto int b = 0; static int c = 3; b = b + 1; c = c + 1; return a + b + c; } int main(){ int a = 2; for (i = 0; i < 3; i++) { cout << f(a)<<'\\\\t'; } cout << endl; return 0; } \",\"运行结果：\",\"7 8 9 \",\"程序分析：\",\"b = 1; c = 3 + 1; a = 2; return 7\",\"b = 1; c = 4 + 1; a = 2; return 8\",\"说明\",\"静态局部变量在静态内存区内分配储存单元。在程序整个运行期间都不释放\",\"自动变量（动态局部变量）储存在动态储存区空间，调用结束后就释放\",\"对静态局部变量是在编译时赋初值，即'只赋初值一次'，以后每次调用不是重新赋值，而是保留上一次调用结束时的值\",\"而对自动变量赋值，不是在编译的时候赋初值，而是在函数调用的时候进行，每调用一次重新赋值\",\"如果在定义局部变量时不赋初值：\",\"静态局部变量： 自动赋初值0（数值型）或者空字符（字符型）\",\"自动变量： 是一个不确定时值（不可用？）\",\"虽然静态局部变量在函数调用结束之后仍然存在，但是'其他的函数不能引用'\",\"(可见性与存在性不一致)\",\"什么时候使用静态局部变量？\",\"​ 1、需要保留上一次调用结束时的值，例求 n!\",\"输出1～5的阶乘值\",\"#include <iostream> using namespace std; int fac(int); //函数声明 int main(){ int i; for (i = 1; i <= 5; i++) { cout << i <<\\\"!= \\\"<<fac(i)<<endl; return 0; } } int fac(int n){ static int f = 1; //f为静态局部变量，函数结束时f的值不释放 f =f * n; //在f原值的基础上乘以n return 0; } \",\"​ 2、如果初始化后，变量只被引用而不改变其值，则这时用静态局部变量比较方便，以免每次调用时重新赋值\",\"​ 3、注意⚠️：静态局部变量长期占用内存，降低了程序的可读性，因此'如无必要，不要多用静态局部变量'\",\"WARNING\",\"静态成员变量\",\"将类成员变量声明为static，则为静态成员变量，与一般的成员变量不同，无论建立多少对象，都只有一个静态成员变量的拷贝，静态成员变量属于一个类，所有对象共享。\",\"静态变量在编译阶段就分配了空间，对象还没创建时就已经分配了空间，放到全局静态区。\",\"静态成员变量\",\"最好是类内声明，类外初始化（以免类名访问静态成员访问不到）。 - 无论公有，私有，静态成员都可以在类外定义，但私有成员仍有访问权限。 - 非静态成员类外不能初始化。 - 静态成员数据是共享的。\",\"静态成员函数\",\"将类成员函数声明为static，则为静态成员函数。\",\"静态成员函数\",\"静态成员函数可以直接访问静态成员变量，不能直接访问普通成员变量，但可以通过参数传递的方式访问。 - 普通成员函数可以访问普通成员变量，也可以访问静态成员变量。 - 静态成员函数没有this指针。非静态数据成员为对象单独维护，但静态成员函数为共享函数，无法区分是哪个对象，因此不能直接访问普通变量成员，也没有this指针。\"]},\"613\":{\"h\":\"用 register 声明寄存器变量（对编译系统来说是建议性的而不是强制）\",\"t\":[\"概念：\",\"一般情况下，变量的值是存放在内存中的。\",\"当程序要用到哪一个变量时，控制器发出指令将内存中的变量的值送到 cpu 中的运算器，\",\"如果一些变量使用频繁，为了减少存取变量的时间，Ｃ++允许将局部变量的值放在CPU的寄存器中，不必从内存中存取。\",\"举例：\",\"int fac(int n){ register int i,f = 1; //定义i和f是寄存器变量 for (i = 0; i < n; i++) { f = f * i; } return f; } \",\"说明：\",\"i 和 f 是存放在寄存器的局部变量，若n很大，则能节约很多执行时间\",\"现在的编译系统的会自动优化，识别使用频繁的变量自动放在寄存器中，不需用户指定\"]},\"614\":{\"h\":\"用 extern 声明外部变量（全局变量）\",\"t\":[\"全局变量（外部变量）是在函数的外部定义的，作用域为从变量的定义开始到本程序文件的末尾\",\"编译时将全局变量分配在静态储存区\",\"有时需要用 extern 声明全局变量以扩展作用域\"]},\"615\":{\"h\":\"在一个文件内声明全局变量\",\"t\":[\"如果想让定义点之前的函数使用该全局变量，用关键字 extern 对该变量做外部变量声明，表示该变量是一个将在下面定义的全局变量\",\"也称为'提前引用声明'（友元中也出现了？）\",\"TIP\",\"一般把全局变量定义放在引用它的所有函数之前，可以在函数中避免使用 extern 声明\",\"例，用 extern 对外部变量作提前引用声明，扩展程序文件中的作用域\",\"#include <iostream> using namespace std; int max(int,int); //函数声明 int main(){ extern int a,b; //对全局变a，b作提前引用声明，如果不用extern，则认为a，b未定义 cout<< max(a,b)<<endl; return 0; } int a = 15,b = -7; //定义全局变量a，b int max(int x,int y){ int z; z = x > y?x:y; return z; } \",\"运行结果：\",\"15 \"]},\"616\":{\"h\":\"在多文件程序中声明外部变量\",\"t\":[\"若一个程序包含两个文件，在两个文件中都要用到同一个外部变量 num：\",\"正确做法：在任一文件中定义外部变量 num，而在另一个文件中用 extern 对 num做'外部变量声明'，即\",\"extern int num; \",\"编译系统现在本文件中寻找，若无则将另一文件中的外部变量 num 的作用域扩展到本文件\",\"注意： extern 是变量声明，只是对一个已经定义的外部变量作声明，以扩展作用域\"]},\"617\":{\"h\":\"用 static 声明静态外部变量（全局变量）\",\"t\":[\"1、概念\",\"有时希望某些外部变量只限于被本文件引用，而不能被其他文件引用\",\"这时可以在定义外部变量时加一个 static 声明\",\"例如，在 file1.cpp 中定义了一个全局变量用 static 声明：\",\"static int a = 3; \",\"此时 a 只能用于本文件，即使在 file2.cpp 中用\",\"extern int a; 扩展作用域仍然无法使用 a\",\"这种加上 static 声明，只能用于本文件的外部变量（全局变量）被称为静态外部变量\",\"2、用途\",\"如果已知其他文件不需要引用本文件的全局变量，可以对本文件中的全局变量都加上 static 成为静态外部变量，以免被其他文件误用\",\"3、注意⚠️\",\"用 static 声明的外部变量和普通外部变量（全局变量）都采用静态储存方式 \",\"只是作用范围不同，都是在编译时分配内存\"]},\"618\":{\"h\":\"变量属性小结\",\"t\":[\"page 115\"]},\"619\":{\"h\":\"局部变量和全局变量\",\"t\":[\"作用域：每个变量都用其有效的作用范围，在作用域之外是不能访问这些变量的\",\"'文件作用域' file scope；（全局的）\",\"'函数作用域' function scope；\",\"'块作用域' block scope；\",\"'函数原型作用域' function prototype scope；\",\"除了变量之外，任何以标识符代表的实体（如函数、数组、结构体等）都有作用域\"]},\"620\":{\"h\":\"局部变量（local variable）\",\"t\":[\"在一个函数内部定义的变量是，它只在本函数范围内有效。 //在此函数之外是不能够使用这些变量的\",\"此外，在复合语句中定义的变量，也只在本复合语句中有效。\",\"这些内部变量被称为'局部变量'\",\"说明\",\"主函数main定义的变量也只在主函数中有效，也不会在整个程序文件中有效，主函数中也不能使用其他函数中定义的变量（函数平行）\",\"不同函数中可以使用同名的变量，代表不同的对象，互不干扰，在内存中占有不同的内存单元\",\"在一个函数内部的复合语句中定义变量，只在复合语句中有效，这种复合语句被称为'分程序'或者'程序块'\",\"形式参数也是局部变量，其他函数中无效\",\"在函数原型中出现的参数名，只在原型声明中的括号范围内有效，并不少实际存在的变量，不能被引用。\",\"//见函数原型\",\"'编译系统对函数声明中的变量名是忽略的，即使在调用函数时也没有为它们分配储存单元'\"]},\"621\":{\"h\":\"全局变量\",\"t\":[\"在函数内定义的变量时局部变量，而在函数之外定义的变量时外部变量，称为全局变量 （global variable）\",\"有效范围：从定义变量的位置开始，到本文件结束\",\"说明\",\"全局变量能够增加函数件数据联系到渠道\",\"同一文件中所有函数都能使用全局变量的值\",\"如果一个函数改变了全局变量，其他引用同名变量的值也会改变\",\"函数调用只能带回一个返回值，但是如果在执行的过程中改变了全局变量，'就相当于向main函数传递了更多的数据'\",\"建议非必要不使用全局变量\",\"在程序执行全程都占用内存，而不是仅在需要时开辟内存\",\"*降低函数通用性 p108 （） \",\"一般要求把程序中的函数做成一个封闭体，只有'实参——形参'渠道，移植性好，可读性强\",\"全局变量过多降低程序清晰性，容易出错\",\"在同一个源文件内，如果全局变量与局部变量同名，则全局变量不起作用，以局部变量为准\",\"在有同名全局变量和局部变量的情形时，用 域运算符 提供对全局变量的访问？？\",\"​ 例：\",\"cout<<::count<<endl; cout<<count<<endl; \"]},\"622\":{\"h\":\"基础知识\"},\"623\":{\"h\":\"C 与 C++\",\"t\":[\"C：基于过程的 C++：面向对象\",\"c 到 C++:增加了面向对象机制\",\"​ 对c语言扩充\",\"1、变量的定义可以出现在程序的任何行\",\"2、提供了标准的输入输出流对象cin、cout\",\"3、用 const 定义常量\",\"4、函数重载、函数模版、带默认值的函数\",\"5、引用类型\",\"6、单目作用运算符\",\"7、string 类型字符串\",\"8、使用 new 和 delete 代替 malloc 和 free 函数\"]},\"624\":{\"h\":\"第一行代码\",\"t\":[\"程序示例HELLOW WORLD\",\"#include <iostream> using namespace std; int main(){ cout << \\\"HELLOW WORLD!\\\" << endl; return 0; } \",\"注释：\",\"1、以 # 开头的语句：预处理指令，非必需，但是如果有就要放在开头，将”iostream“文件的内容到程序中\",\"​ 头文件： <cstdio>, <cmath>, <cstdlib>\",\"2、使用命名空间 ”std“，namespace是c++特性，防止重名\",\"​ 其他用法： using std::cout; using std::cin;using std::endl;\",\"3、<< 是插入运算符，将 ”HELLOW WORLD！“插入输出流，发送给 cout 打印 （运算符重载）\",\"4、return 0 表示程序正常结束，非0表示异常结束，操作系统支持程序获得其他程序的退出代码\"]},\"625\":{\"h\":\"C++ 代码风格\",\"t\":[\"每条语句占一行\",\"每个函数都有开始和结束的大括号\",\"函数中的语句相较大括号缩进 \\\"Tab\\\" \\\"Shift + Tab\\\"\",\"与函数名称相关的小括号周围没有空白\",\"书写注释： \",\"单行注释 //\",\"多行注释 /*\",\"​ */\"]},\"626\":{\"h\":\"C++ 的编译与执行\",\"t\":[\"编译：预处理（.ii）>> 编译（.s 汇编文件） >> 目标文件\",\"连接：.s -> .o(.obj)二进制文件（目标文件） 》.exe\",\"​ 函数库 》.exe（可执行程序 ）\",\"执行：\"]},\"627\":{\"h\":\"基类与派生类的转换\"},\"628\":{\"h\":\"多线程\"},\"629\":{\"h\":\"多重继承\"},\"630\":{\"h\":\"数据类型\"},\"631\":{\"h\":\"Ｃ++ 的数据类型\"},\"632\":{\"h\":\"分类\",\"t\":[\"数值型\",\"整型 int short long long long char bool\",\"浮点型 float double long double\",\"非数值型 string\"]},\"633\":{\"h\":\"大小\",\"t\":[\"8 bite = 1 byte\",\"8 比特 = 1 字节\",\"类 型\",\"类型标识符\",\"位数/字节数\",\"数值范围\",\"整型\",\"int\",\"32/4\",\"无符号整型\",\"unsigned int\",\"4\",\"短整型\",\"short\",\"16/2\",\"−215−1~ 215−1\",\"无符号短整型\",\"unsigned short\",\"2\",\"长整型\",\"long\",\"4\",\"无符号长整型\",\"unsigned long\",\"4\",\"字符型\",\"char\",\"1\",\"-128 ~ 127\",\"无符号字符型\",\"unsigned char\",\"1\",\"0 ~ 256\",\"单精度型\",\"float\",\"4\",\"双精度型\",\"double\",\"8\",\"长双精度型\",\"long double\",\"8\",\"​ 说明\",\"整型数据在内存中案二进制储存\",\"修饰符 signed 表示有符号的，数值以补码的形式存放，储存单元中最高位（二进制最左边的）表示符号（- +）\",\"修饰符 unsigned 没有符号，二进制数表示数值本身\"]},\"634\":{\"h\":\"用 typedef 声明新的类型名\",\"t\":[\"​ 用 typedef 声明一个新的类型名，用来代替已有的类型名（为已有类型名取一个别名）\",\"typedef int INTEGER; //指定用标识符 INTEGER 代表 int 类型 typedef float REAL; //指定用 REAL代表 float 类型 \"]},\"635\":{\"h\":\"用法\",\"t\":[\"​ 如果在一个程序中，整型变量时专门用来计数的，可以用 COUNT 来作为整型类型名：\",\"typedef int COUNT; //指定用 COUNT 代表 int 类型 COUNT i,j; //将变量 i，j 定义为 COUNT 类型，即 int 类型 \",\"​ 在程序中将 i，j 定义为 COUNT 类型，可以使人一目了然地知道它们是用于技术的\"]},\"636\":{\"h\":\"其他\"},\"637\":{\"h\":\"1、对一个结构体类型声明一个新的名字\",\"t\":[\"typedef struct { //注意在 struct 之前用了关键字 typedef，表示是声明新类型名 int month; int day; int year; }DATE; //注意 DATE 是新类型名，而不是结构体变量名 \",\"​ 所声明的新的类型名 DATE 代表上面指定的一个结构体类型\"]},\"638\":{\"h\":\"2、进一步用 typedef 声明新的类型名\",\"t\":[\"typedef int NUM[100]; //声明 NUM 为整型数组类型，包含 100 个元素 NUM n; //定义 n 为包含 100 个整型数组元素的数组 typedef char *STRING; //声明 STRING 为 char * 类型（字符指针类型） STRING p,s[10]; //定义 p 为 字符指针变量，s为 char* 类型的指针数组 //声明 POINTER 为指向函数的指针类型，函数的返回值为整型 typedef int(*POINTER)(); POINTER p1,p2; //p1，p2 为 POINTER 类型的指针变量 \"]},\"639\":{\"h\":\"总结：声明一个新的类型名的方法\",\"t\":[\"先按照定义变量的方法写出定义语句 int i;\",\"将变量名换成新的类型名 int COUNT;\",\"在最前面加上 typedef typedef int COUNT;\",\"然后可以按照新类型名去定义变量\",\"`typedef` 总结\",\"用typedef声明的新类型名又称为 typedef类型名，或 typedef名字\",\"用typedef只是对已经存在的类型增加一个类型名，而不是创造新的类型\",\"可以用typedef声明新类型名，但是不能用来定义变量\",\"用typedef可以声明 数组类型、字符串类型、指针类型，使用比较方便\",\"用typedef可以将声明数组类型和定义数组变量分离\",\"一般写到头文件中\",\"便于程序的通用与移植\"]},\"640\":{\"h\":\"Ｃ++ 常量\",\"t\":[\"分类\",\"字面常量（直接常量）字面形式上即可认别为常量\",\"数值型常量 \",\"整型常量\",\"实型常量\",\"字符型常量\"]},\"641\":{\"h\":\"数值常量\"},\"642\":{\"h\":\"整型：\",\"t\":[\"分类\",\"短整型 +-（2^15^ - 1） short\",\"整型（长整型）+-（2^32^ -1） int 或 long int\",\"常量无 unsigned 型，但是一个非负值整数可以赋给 unsigned 型变量（不能超过范围）\",\"表示形式：\",\"十进制数\",\"常用于函数调参，注意形参和实参的类型匹配：\",\"形参是 123L，实参也必须是 123L，而不能是 123\",\"长整型：后面加一个字母L，如，123L，0L\",\"八进制数\",\"常数开头加一个数字 0, \",\"例如 020 相当于十进制下的 16\",\"十六进制数\",\"常数开头加上数字 0 和字母 X ，例0X20 表示十六进制数 20，相当于十进制下的32, \",\"也有用+H的，42H 表示 66\"]},\"643\":{\"h\":\"浮点数\"},\"644\":{\"h\":\"十进制小数\",\"t\":[\"由整数部分 + 小数部分组成，可以省略其一，但是不能都省略\",\"默认处理为 double，八字节内存\",\"单精度浮点数 float：后面加 F 或者 f\",\"长双精度浮点数 long double：后面加 L 或者 l\"]},\"645\":{\"h\":\"指数形式（浮点形式）\",\"t\":[\"数符 + 数字部分 + 指数部分\",\"字母 e 表示其后的数为以 10 为底的幂\",\"3.14159 = 0.314159e1 = 31.4159e-1 \",\"由于不同的指数部分，使得小数点浮动\",\"内存中以'**规范化指数形式'**存放：\",\".314159e1 数字部分小于 1\"]},\"646\":{\"h\":\"字符常量\"},\"647\":{\"h\":\"普通的字符常量\",\"t\":[\"用单撇号括起来的 '一个字符'\",\"'a', '#'\",\"字符常量只能包含一个字符\",\"区分大小\",\"'' 是界定符，不属于其中的一部分\",\"ASCII码\",\"字符\",\"0\",\"9\",\"A\",\"Z\",\"a\",\"z\",\"ASCII码\",\"48\",\"57\",\"65\",\"90\",\"97\",\"122\"]},\"648\":{\"h\":\"转义字符型\",\"t\":[\"以 '' 开头的字符序列\",\"'\\\\0' 空字符\",\"'\\\\n' 换行\",\"'\\\\t' tab\",\"'\\\\' 反斜杠字符 \\\\\",\"''' 单引号字符 ’\",\"'\\\"' 双引号字符 “\",\"'\\\\xdd' 表示二位十六进制数，dd指的是两个数字，例 'x12'\",\"'\\\\ddd' 表示三位八进制，'123'\",\"以上两种字符型常量可以与整形通用，相当于对他们的 ASCII 码运算\"]},\"649\":{\"h\":\"字符串常量\",\"t\":[\"​ 用双引号括起来，系统会加一个 \\\\0 作为结束标识 ​ 一个中文字符两个字节 ​ \\\"a\\\" 两个字节 'a' 一个字节 ​ \\\"abc\\\\n\\\" 五个字节 ​ 如果 \\\\ 后面的无法构成一个合法的转义字符，则编译错误 ​ \\\"abc\\\\n\\\" 五个字符，六个字节\"]},\"650\":{\"h\":\"符号常量\",\"t\":[\"​ #define PRICE 30\",\"指定 PRICE 在本程序单位中表示 30\",\"TIP\",\"虽然符号常量有名字,但是不是变量\",\"常用符号常量 INT_MAX，INT_MIN等\"]},\"651\":{\"h\":\"宏定义\",\"t\":[\"define是Ｃ语言中的预处理命令，用于宏定义以#开头，一般放在源文件的前面\"]},\"652\":{\"h\":\"作用\",\"t\":[\"宏定义允许用户一个标识符表示一个字符串\",\"被定义为“宏”的标识符为“宏名”\",\"在预处理的时候，对程序中所有出现的宏名，都用宏定义中的字符串去代换，被称为'宏代换'或者'宏展开'\"]},\"653\":{\"h\":\"形式\",\"t\":[\"#define 标识符 字符串\"]},\"654\":{\"h\":\"分类\",\"t\":[\"无参数\",\"#define MAX 10 \",\"有参数\",\"#define M(y) y*y+3*y K=M(5); //调用 \",\"WARNING\",\"运算符优先问题\",\"​ 不仅宏体是纯文本替换，宏参数也是纯文本替换\",\"#define M(x,y) x*y M(1,2); //没有问题,1+3 M(1+2,3); //纯文本替换，1+2*3，优先级错误，与本意不同 \",\"解决方法：每个参数加上括号，限定优先级\",\"分号吞噬\",\"​ 宏不是语句，'不能将分号；加入结尾！！\",\"​ 否则分号也会被替换入程序中，可能产生夹断\",\"如何定义宏定义变量的时候定义数据类型？或者说只能用常变量？\"]},\"655\":{\"h\":\"C++变量\",\"t\":[\"操作计算机——————操作计算机内存\"]},\"656\":{\"h\":\"概念\",\"t\":[\"计算机中一块特定的内存空间，在程序运行期间其值可以改变的量 变量的三要素：类型，名字，值\"]},\"657\":{\"h\":\"变量名的名命规则(标识符名命)\",\"t\":[\"（标识符）只能由字母、数字、下划线 3种字符组成\",\"首字必须为 字母 或 下划线，不能是数字\",\"不能包含除了”_“下划线之外的任何特殊字符\",\"不能使用保留字（74 个）\"]},\"658\":{\"h\":\"定义和使用变量\",\"t\":[\"必须先定义，后使用 ​定义变量：\",\"typename 变量名; \",\"定义时初始化变量\",\"typename 变量名 = 值; \",\"定义后初始化变量：\",\"typename 变量名; 变量名 = 值; \",\"一条语句也可以声明多个同类型的变量，用逗号隔开\",\"int num1 = 10,num2 = 3,num3; \",\"​ 英语中逗号后最好有空格\",\"​ 等号前后最好有空格\"]},\"659\":{\"h\":\"初始化变量\",\"t\":[\"​ 初始化不是在编译阶段完成的（除了静态储存变量和外部变量（全局变量）的初始化之外） ​ 而是在程序运行时执行本函数时赋予初值的\"]},\"660\":{\"h\":\"常变量\"},\"661\":{\"h\":\"概念\",\"t\":[\"​ 定义变量前，用 const 修饰， ​ 变量的值在程序运行期间不能改变\",\"const int = 4; \",\"​ '定义常变量的时候必须初始化'，此后不能改变其值（不能出现在等式左边）\",\"const a; a = 3; //❌错误 \",\"​ 常变量又被称为'只读变量'\"]},\"662\":{\"h\":\"与 #define 的比较\",\"t\":[\"符号常量\",\"常变量\",\"由 #define 定义\",\"由 const 修饰\",\"用符号代替字符串\",\"具有变量的特征\",\"没有类型，内存中没有以符号常量命名的储存单元\",\"有类型，内存中存在………………\",\"不是变量'\",\"可以用 sizeof(type) 测量长度\"]},\"663\":{\"h\":\"指针\",\"t\":[\"指针是一个值为内存地址的变量(或者数据对象)\",\"内存地址一般用16进制表示\",\"地址 -> 内容 \",\"直接存取/直接访问:使用变量名（效率最高）\",\"间接存取\",\"变量的指针就是变量的地址；一个变量的地址称为该变量的指针\",\"指针变量：用来存放变量地址的变量是指针变量\",\"指针的大小与语言、类型、编译器无关，与硬件有关：\",\"32位系统：\",\"64位系统：\"]},\"664\":{\"h\":\"&：取地址运算符\",\"t\":[\"i_pointer = &i //将i的地址放入i_pointer中，&i是变量i储存单元的 起始地址 \",\"*：指针运算符（间接访问运算符）表示指向 i_ptr是一个指针变量，*i_ptr表示 i_ptr 所指向的变量 i = 3；等价于*i_ptr = 3; 将3赋给i_ptr所指向的变量\"]},\"665\":{\"h\":\"声明及初始化指针变量\",\"t\":[\"声明指针\",\"​\",\"数据类型 * 指针变量名 //该指针变量指向的变量的类型，基类型 typename * pointername \",\"例\",\"in * ptr_num; char * ptr_name; float * money_ptr; double * p_price; \",\"变量名前加一个 * 表示该变量是指针变量，指针变量的变量名中不含 *\",\"初始化指针变量\",\"i_ptr = &i; \",\"只能用 & 对指针变量赋值\",\"注意\",\"定义指针变量时必须声明其基类型（为了判断从内存中取多少数据大小）\",\"不能用一个具体的数给指针变量赋值，可以将一个已经定义的变量的地址作为指针变量的初值\",\"int i; int *p = &i; \",\"一个指针变量只能指向同一个类型的变量\",\"在说明变量类型的时候，不能一般的说 “a是一个指针变量” ，而是 “a是指向整型数据的指针变量”（或者int*型变量）\"]},\"666\":{\"h\":\"引用指针变量\",\"t\":[\"指针使用示例\",\"#include <iostream> using namespace std; int main(){ /*double num = 1024.5; //声明一个指针，指向num变量 double* ptr_num = &num; cout << \\\"ptr_num的值：\\\" << ptr_num << endl; cout << \\\"ptr_num指向空间的值是：\\\" << *ptr_num << endl; */ char ch = 'a'; cha * ptr_ch = &ch; //cha *在标准c中是定义字符串？？ //思考：打印的结果是地址？还是ch的值？ //有问题，char型指针在c/c++中是字符串了？？ //cout << ptr_ch << endl; cout << (void *)ptr_ch << '\\\\t' << *ptr_ch<<endl;//强制转换 //void *任意类型的指针，（总之打印出来，不管什么类型） return 0; } \",\"对于取地址运算符&和指针运算符*的说明：\",\"int * ptr_1; ptr_1 = &a; & * ptr_1 //是什么？ \",\"& 与*的优先级相同，从右往左结合，即&(*ptr_1)等价于&a ，即a的地址\",\" *&a 等价于a \"]},\"667\":{\"h\":\"空指针（null pointer）\",\"t\":[\"空指针不指向任何对象，在试图使用一个指针之前可以检查是否为空\",\"用法：\",\"int * ptr1 = nullptr; int * ptr2 = 0; //能这样用吗？？？ #include <cstdlib> int * ptr3 = NULL \",\"以上三种等价\",\"野指针\",\"指针最危险的是没有指向任何对象，为了避免野指针出现，可以将指针初始化为0（nullptr） \"]},\"668\":{\"h\":\"void * 指针\",\"t\":[\"​ 一种特殊的指针类型，可以存放任意对象的地址\",\"​ 不指向任何类型的数据，理解为指向空类型，或者不指向确定类型\",\"注意\",\"1、void* 指针存放一个内存地址，地址指向的内容是什么类型不能确定，由此\",\"void* ptr1 = &num; *ptr1 = 123; //是错误的！ \",\"2、一般用来和其他的指针比较；作为函数的输入和输出；赋值给另一个 void* 指针\",\"char *p = \\\"string\\\"; cout<<(void*)p; //输出字符串的地址 \",\"3、可以将非void指针赋值给void指针，但是不能把void指针赋值给非void指针（需要强制转换），例：\",\"char* p2; void* p3; p2 = (char*)p3; \",\"​\"]},\"669\":{\"h\":\"const 指针\",\"t\":[\"可以指定指针变量是一个常量，或者指定指针变量指向的对象是一个常量\"]},\"670\":{\"h\":\"指向常量的指针变量\",\"t\":[\"​ 1、定义：\",\"const typename * 指针变量名; \",\"​ 经过此定义后，不允许通过指针变量改变它指向的变量的值，例\",\"int a = 12,b = 15; const int *p = &a; //定义了p为指向整型变量 a 的 const 指针变量 *p = 15; //试图通过p改变它指向的对象a的值，??非法 \",\"2、说明\",\"​ 虽然不能通过 p 来改变 a 的值，但是'指针变量p的值（即p的指向）可以改变'\",\"p = &b; //合法 \",\"​ 定义了：(const int *)的指针变量之后，仍然可以通过直接赋值的方法改变 a 的值\",\"a = 15； \",\"​ 用指向常量的指针变量只是'限制了通过指针变量改变它指向的对象的值' ​\"]},\"671\":{\"h\":\"指向常变量的指针变量\",\"t\":[\"如果想保证指向的对象的值不变，应该定义为常量：\",\"const int a = 12; \",\"此时 p 就成了 指向常变量的指针变量，此时用用直接访问或者间接访问的方式都无法改变 a 的值\",\"说明\",\"如果一个变量已被声明为常变量，只能用指向常变量的指针变量指向它，而'不能'用一般的（非 const）类型的指针变量指向\",\"指向常变量的指针变量还能指向普通变量（指向常量对指针变量）（非 const） \",\"此时不能通过此指针变量改变该变量的值，但是能够直接对变量赋值\",\"定义指向常变量对指针变量p并使它指向c1，并不是说c1也声明为常变量，而只是'用指针变量访问c1期间，c1具有常变量对特征'，其值不能改变\",\"如果函数的形参是指向普通变量（非 const）的指针变量，实参只能用指向普通变量的指针，这样可通过指针改变指向变量的值\",\"表.用指针变量作形参时形参和实参的对应关系\",\"形参\",\"实参\",\"是否合法\",\"改变指针所指向的变量的值\",\"指向非 const 型变量的指针\",\"非 const 变量的地址\",\"合法\",\"可以\",\"指向非 const 型变量的指针\",\"const 变量的地址\",\"非法\",\"非法\",\"指向 const 型变量的指针\",\"const 变量的地址\",\"合法\",\"不可以\",\"指向 const 型变量的指针\",\"非 const 变量的地址\",\"合法\",\"不可以\",\"用途\",\"指向常量的指针变量常用作函数的形参，以防止指针形参所指对象的值改变影响实参\",\"举例，在函数中改变指针形参所指对象的值\",\"#include <iostream> using namespace std; void fun(int *p){ //形参是指向整型变量的指针变量 *p = 5 * (*p); //使p所指的变量为原值的5倍 } int main(){ int a = 10; fun(&a); //用 a 的地址作为实参 cout << a <<\\\" \\\"<<endl; return 0; } \",\"运行结果： 50\",\"在以上程序中，如果不想在调用函数时改变指针形参所指对象的值，可以将形参改为指向常量的指针变量，\",\"void fun(const int *p){ //形参是指向常量的指针变量 *p = 5 * (*p); //错误 } \",\"不允许通过指针变量p的值改变 *p 的值，而只能使用 *p 的值\"]},\"672\":{\"h\":\"常指针\",\"t\":[\"​ 指定指针变量的值是常量。即指针变量的指向不能改变\",\"定义\",\"typename * const 指针变量名; \",\"说明：\",\"这种指针变量称为'常指针变量'，简称'常指针'，即指针值不能改变\",\"必须在定义时初始化，指定其指向\",\"指针变量的指向不能改变，但是指向的变量的值可以改变\",\"注意 const 和 * 的位置。const 在 * 之后\",\"举例\",\"int a = 4; int b = 6; int * const p2 = &a; //定义常指针同时初始化指向a *p = 12; //使指向的变量的值改变 \"]},\"673\":{\"h\":\"指向常量的常指针\",\"t\":[\"即 指针变量指向一个固定的对象，且不能通过指针变量改变该对象的值（以上两种合在一起）\",\"定义\",\"const typename * const 指针变量名; \",\"举例\",\"int a = 10; int b = 20; const int * const pt = &a; /* pt = &b; //错误，试图改变指针的指向 *pt = 30; //错误，试图通过指针改变所指对象的值 */ a = 3; //仍然可以对 a 直接赋值 // '如果要完全禁止改变a的值，可以将a定义为常变量' const int a = 10； \"]},\"674\":{\"h\":\"指针小结\"},\"675\":{\"h\":\"有关指针的数据类型小结\",\"t\":[\"变量定义\",\"类型表示\",\"含义\",\"int i; \",\"int\",\"定义整型变量 i\",\"int *p;\",\"int*\",\"定义 p 为指向整型数据的指针变量\",\"int a[5];\",\"int[5]\",\"定义整型数组 a，有五个元素\",\"int *p[4];\",\"int*[4]\",\"定义指针数组 p，由四个指向整型数据的指针元素组成\",\"int (*p)[4];\",\"int(*)[4]\",\"p 为指向包含四个元素的一维数组的指针变量\",\"int f();\",\"int()\",\"f 为返回值类型为 int 的函数\",\"int *p();\",\"int*()\",\"p 为返回一个指针的函数，该指针指向整型数据\",\"int (*p)();\",\"int(*)()\",\"p 为指向函数的指针，该函数返回一个整型值\",\"int **p;\",\"int**\",\"p 是一个指针变量，它指向一个指向整型数据的指针变量\",\"int *const p;\",\"int *const\",\"p 是常指针，其值是固定的，即其指向不能变\",\"const int *p;\",\"const int*\",\"p 是指向常量的指针变量，不能通过 p 改变其指向的对象的值\",\"const int * const p;\",\"const int * const\",\"p 是指向常量的常指针，其指向不能改变，且不能通过 p 改变其指向的变量的值\",\"void *p;\",\"void\",\"p 是一个指针变量，基类型为 void，不指向具体的对象\"]},\"676\":{\"h\":\"指针运算小结\",\"t\":[\"指针变量加/减一个整数 p++、p--、p+i、p-i、p-=i等\",\"​ 一个指针变量加/减一个整数是将该指针变量的原值（一个地址）和它指向的变量所占用的内存单元字节数相加或相减\",\"​ 如 p+ i 代表 p + i*d\",\"指针变量赋值\",\"将一个变量地址赋值给一个指针变量\",\"p = &a; //将变量 a的地址赋给 p p = arry; //将数组 array 首元素的地址赋给 p p = &arry[i]; //将数组 array 第 i 个元素的地址赋给 p p = max; //max 为已定义的函数，将 max 的入口地址赋值给 p p1 = p2; //p1 和 p2 都是同类型的指针变量，将 p2 的值赋给 p1 \",\"指针变量可以有空值，即该指针变量不指向任何变量\",\"p = nullptr; \",\"NULL 、0 和 nullptr 的区别\",\"NULL 在c++中是一个宏，是一个空指针常量，如果将NULL扩展为常数，那么这个数是0，类型为int。所以，常数0既是整型常量，也是空指针常量，这就有可能导致二义性问题。因此，c++11新标准引入了 nullptr，将其作为空指针常量（特殊的字面常量，能够转化为任何类型的指针）。\",\"NULL 在C++中就是0，这是因为在C++中 void* 类型是不允许隐式转换成其他类型的，所以之前C++中用0来代表空指针，但是在重载整形的情况下，会出现上述的问题。\",\"所以，C++11加入了 nullptr，可以保证在任何情况下都代表空指针，而不会出现上述的情况，因此，建议以后还是都用 nullptr 替代 NULL，而NULL就当做0使用。\",\"野指针的情况非常危险，在引用指针变量之前应该对其赋值\",\"任何指针变量或地址都可以与空指针比较\",\"两个指针变量可以相减\",\"如果两个指针变量指向同一个数组元素，则两个指针变量值之差是两个指针之间的元素个数\",\"假如 p1 指向 a[1]，p2 指向 a[4],则 p2 - p1 = a+4 -(a+1)=3\",\"但是 p1+p2 没有意义\",\"两个指针变量比较\",\"若两个指针指向同一个数组的元素，则可以比较，\",\"指向不同数组的指针比较没有意义\",\"指向前面的元素的指针变量小于指向后面元素的指针变量\",\"上例中表达式 “p2 > p1” 的值为真;\",\"对指针赋值应该注意类型问题\",\"不同类型的指针变量之间不能相互赋值\",\"如果一定要对不同类型的指针变量赋值，可以用强制类型转换\",\"​ 例，\",\"int *p1;char *p2;float *p3; p1 = (int *)p2; //将 p2 的值强制转换为指向整型数据的指针类型，并赋值给 p1 p2 = (char *)p3; p3 = (float *)p1; \"]},\"677\":{\"h\":\"内存泄漏（Memory Leak）\",\"t\":[\"是指程序中已动态分配的'堆内存'由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。\"]},\"678\":{\"h\":\"数组\"},\"679\":{\"h\":\"字符数组与字符串\"},\"680\":{\"h\":\"字符数组\",\"t\":[\"用来存放字符数据的数组\",\"字符数组具有数组的共同属性\"]},\"681\":{\"h\":\"定义：\",\"t\":[\"方法与数值型数组类似\",\"如：\",\"char c[10]; c[0]='t'; c[1]='e'; \"]},\"682\":{\"h\":\"初始化\",\"t\":[\"​ 1、用字符逐个给数组的元素赋值\",\"char c[10] = {'i',' ','a','m',' ','h','a','p','p','y'}; //把十个字符分别赋给十个元素 \",\"说明\",\"如果花括号中提供的初值个数大于数组长度，则按语法错误处理\",\"如果初值个数小于数组长度，则只将这些字符赋给数组前面的元素，其余为空字符 '\\\\0'\",\"也可以在定义时省略字符长度，系统根据所给的初值确定数组长度\",\"定义和初始化二维数组\",\"char diamond[5][5] = {{' ',' ','*'},………………} \"]},\"683\":{\"h\":\"赋值与引用\",\"t\":[\"​ '只能对字符数组的元素赋值，而不能用赋值语句对整个数组赋值'，例\",\"char c[3]; c = {'a','b','c'}; //错误，不能对整个数组一次赋值 c[0]='a';c[1]='b';c[3]='c'; //正确 \",\"此外，如果定义了 a 和 b 是具有相同类型和长度的数组，且 b 数组已经初始化\",\"a = b; //错误，不能对整个数组整体赋值 a[0] = b[0]; //正确，引用数组元素 \",\"例，设计和输出一个钻石图形\",\"#include <iostream> using namespace std; int mian(){ char diamond[] = { {' ',' ','*'}, {' ','*',' ','*'}, {'*',' ',' ',' ','*'}, {' ','*',' ','*'}, {' ',' ','*'}}; int i,j; for ( i = 0; i < 5; i++) { for ( j = 0; j < 5; j++) { cout << diamond[i][j]; cout <<endl; } } } \"]},\"684\":{\"h\":\"字符串和字符串结束的标志\",\"t\":[\"字符串结束符\",\"一个字符数组可以存放一个字符串中的字符\",\"C++规定了一个'字符串结束标志'： '\\\\0'\",\"遇到字符 '\\\\0' 就表示字符串到此结束，由它前面的字符组成有效字符串\",\"对于一个字符串常量，系统自动在最后加一个 '\\\\0' 作为结束符，占有一个字节\",\"有了结束符之后字符数组的长度就没那么重要了\",\"'在程序中往往依靠检测 '\\\\0' 的位置来判定字符串是否结束，而不是根据数组的长度决定字符串的长度'\",\"注意：\",\"字符数组不要求最后一个元素为 '\\\\0'\",\"甚至可以不包括 '\\\\0'\",\"用字符串常量来初始化字符数组\",\"char str[]={\\\"China\\\"}; \",\"也可以省略花括号\",\"char str[]=\\\"Chaina\\\"; \",\"注意\",\"用字符串常量给字符数组初始化时，后面自带 '\\\\0'，长度+1\",\"而如果单独的对字符数组赋值，最后可能没有 '\\\\0'\"]},\"685\":{\"h\":\"字符数组的输入和输出\",\"t\":[\"如上逐个字符的输入输出\",\"将整个字符串一次输入输出\",\"char str[20]; cin >> str; //用字符数组名输入字符串 cout << str; //用字符数组名输出字符串 \",\"注意：\",\"输出的字符不包括结束符 '\\\\0'\",\"输出字符串时，cout 流中用字符数组元素名，而不是数组元素名\",\"cout<< str; //用数组名，输出的是字符串 cout << str[3] //用数组元素名，输出的是一个字符 \",\"如果数组长度大于字符串的实际长度，输出遇 '\\\\0' 结束\",\"char str[10]=\\\"chaina\\\"; cout << str; \",\"只输出了 chaina ，而不是10个字符\",\"用 cin 从键盘向计算机输入一个字符串时，从键盘输入的字符串因该短于已经定义的字符长度\"]},\"686\":{\"h\":\"字符串处理函数\",\"t\":[\"#include <cstring>#include <string.h>\",\"cstring和string\",\"有什么区别？\",\"字符串处理函数的函数原型中，形参其实是 (char*,const char*),返回的是字符指针 char*\"]},\"687\":{\"h\":\"字符串连接函数 stract\",\"t\":[\"函数原型\",\"stract(char[],const char[]); \",\"strcat 是 string catenate 的缩写。\",\"作用\",\"将第 2 个字符数组中的字符串连接到前面字符数组字符串的后面。\",\"第 2 个字符数组被声明为 const\",\"连接后的字符串放在第一个字符数组中\",\"函数调用后得到的函数值就是第一个字符数组的地址\",\"3、例\",\"char str1[30] = \\\"People's Republic of\\\"; char str2[] = \\\"China\\\"; cout << stract(str1,str2); \",\"输出 …………\"]},\"688\":{\"h\":\"字符串赋值函数 strcpy\",\"t\":[\"函数原型\",\"strcpy(char[],const char []); \",\"strcpy 是 string copy 的缩写。\",\"作用\",\"将第 2 个字符数组中的字符串复制到第一个字符数组中去\",\"将第 1 个字符数组中的相应字符覆盖\",\"第 2 个参数是字符型常数组，不能被改变\",\"例\",\" char str[10],str[]=\\\"China\\\"; strcpy(str1,str2); \",\"说明\",\"在调用 strcpy 函数时，第 1 个实参必须是数组名，第 2 个实参可以是字符数组名，也可以是一个字符串常量 \",\"如 strcpy(str1,\\\"China\\\");\",\"可以用 strcpy 函数将一个字符串中的前若干个字符，复制到一个字符数组中 \",\"如 strcpy(str1,str2,2);\",\"作用是将 str2 中前面 2 个字符复制到 str1 中去，然后再加一个'\\\\0'\",\"只能通过调用 strcpy 函数实现将一个字符串赋给一个字符数组 \",\"不能用赋值语句将一个字符串常量或者字符数组直接赋值给一个字符数组，例如\",\"str1 = \\\"China\\\"; //错误❌，不能将一个字符串常量赋值给一个字符数组（初始化？？？） str1 = str2; //错误❌，不能将一个字符数组的内容赋给另一个字符数组 \",\"str1 代表数组地址，是常量，不能被赋值，不可作为左值'\"]},\"689\":{\"h\":\"字符串比较函数 strcmp\",\"t\":[\"函数原型\",\"strcmp(const char[],const char[]); \",\"strcmp 是string compare的缩写。\",\"举例\",\"strcmp(str1,str2); strcmp(\\\"china\\\",\\\"american\\\"); strcmp(str1,\\\"Beijing\\\"); \",\"作用\",\"比较两个字符串\",\"由于两个字符串只参加比较而不改变其内容，因此两个参数都加上 const 声明\",\"返回值\",\"比较结果由返回值带回\",\"如果 str1 等于 str2，函数值为 0\",\"如果 str1 大于 str2，函数值为一个正整数\",\"如果 str1 小于 str2，函数值为一个负整数\",\"比较规则\",\"对两个字符串从左至右，逐个字符按ASCII码值大小比较，直到出现不同的字符或者'\\\\0'为止\",\"如果全部相同，则认为相等\",\"如果出现不同，则按照出现的第一个不同字符的比较结果为准\",\"注意\",\"不能直接使用 < > 对字符串比较，如\",\"if (str > str2) cout <<\\\"yes\\\"; \",\"字符数组名代表数组地址，上面写法是对数组地址比较，除非重载运算符\",\"否则只能用 strcmp() 函数进行比较\",\"if (strcmp(str1,str2) > 0) cout << \\\"yes\\\"; \"]},\"690\":{\"h\":\"字符串长度函数 strlen\",\"t\":[\"函数原型\",\"strlen(const char[]); \",\"strlen 是 string length 的缩写。\",\"作用\",\"测量字符串长度\",\"函数值为字符串的实际长度，不包括 '\\\\0'在内\",\"举例\",\"char str[10] = \\\"china\\\"; cout << strlen(str); \",\"输出结果为 5 ，而不是 6 或者 10\",\"字符数组应用举例\",\"例，有五个国家，要找出按字母顺序排在最前面的国家\",\"分析：\",\"用二维数组 3✖️30，可以把 str[0],str[1],str[2]看成三个一维数组？？\",\"#include <iostream> #include <string> //为啥说要用 cstring ,string 编译不过？ using namespace std; //函数声明 int main(){ void smallest_string(char str[][30],int i); int i; char contry_name[3][30]; //定义二维字符数组 for (i = 0; i < 3; i++) { cin >>contry_name[i]; //遍历输入 3 个国家名 } smallest_string(contry_name,3); //调用 smallest_string 函数 return 0; } void smallest_string(char str[][30],int n){ int i; char string[30]; strcpy(string,str[0]); //使 string 的值为 str[0] 的值 for (i = 0; i < n; i++) { if (strcmp(str[i],string) < 0) { //将比较得到的小的数组复制到 string 中 strcpy(string,str[i]); } } cout << endl <<\\\"The smallest string is \\\"<<string <<endl; } \",\"程序分析：\",\"函数 smallest_string 用来找最小字符串\",\"实参 contry_name 是 3 行 30 列的字符数组名，代表二维数组中第一行的首地址\",\"实参 3 表示需要处理的字符串的个数\",\"形参 str 是二维字符数组名，在声明时指定了第 2 维的大小为30，而没有指定第 1 维的大小\"]},\"691\":{\"h\":\"字符串类 与 字符串变量\",\"t\":[\"字符数组总是有一定大小的，可能会出现溢出的情况\",\"Ｃ++提供类一种新的数据类型————字符串类型 （string类型）\",\"string 不是基本类型，而是Ｃ++标准库中声明的一个'字符串类'，用这种类可以定义对象\",\"每一个字符串都是string类的一个对象\"]},\"692\":{\"h\":\"字符串变量的定义和引用\",\"t\":[\"​ 字符串变量必须先定义再使用，用类名进行定义\",\"​ 在使用 string 类定义变量时，必须在本文件的开头将 Ｃ++ 标准库中的string头文件包含进来\",\"#include <string> //不是 string.h string string1; //定义 string1 为字符串变量 string string2 = \\\"China\\\"; //定义 string2 并初始化 \"]},\"693\":{\"h\":\"对字符串变量赋值\",\"t\":[\"​ 1、赋值\",\"str1 = \\\"China\\\"; \",\"注意⚠️：\",\"str1 是字符串变量，而不是字符数组名\",\"字符数组不能直接用字符数组名赋值（指针混乱）\",\"char str[10]; str = \\\"China\\\"; //错误❌ \",\"​ 2、用字符串赋值字符串\",\"str1 = str2; //str1 和 str2 都已经定义了 \",\"​ 不要求 str1 和 str2 的长度相同\",\"​ 定义字符串时不需要指定长度，长度随其中的内容而改变\",\"​ 3、对字符串中的某一个字符操作\",\"string word = \\\"Then\\\"; word[2] = 'a'; //修改序号为 2 的字符（从0开始），Than \"]},\"694\":{\"h\":\"字符串变量的输入和输出\",\"t\":[\"​ 可以在输入输出语句中使用字符串变量名字，输入输出字符串\",\"cin >> str1; //如果用 cin 输入，遇到 空格 也会停止输入 cout << str2; \"]},\"695\":{\"h\":\"字符串变量的运算\",\"t\":[\"​ 字符数组存放的字符串运算需要字符串函数\",\"​ 而 string 类对象可以直接用运算符\",\"​ 1、字符串复制直接用赋值号 =\",\"str1 = str2; \",\"​ 作用和 strcpy(str1,str2); 相同\",\"​ 2、字符串连接用 + 号\",\"string str1 = \\\"A\\\"; string str2 = \\\"b\\\"; str1 = str1 + str2; //连接 str1 和str2 \",\"​ 连接后 str1 的内容为 \\\"Ab\\\"\",\"​ 3、字符串比较关系直接用关系运算符\",\"​ 可以直接用 ==、>、<、!=、>=、<= 来对字符串进行比较\",\"​ 因为 string 头文件中已经对这些运算符重载\",\"WARNING\",\"需要查证，报错了\",\"字符串运算举例：\",\"​ 例，输入三个字符串，要求按字母由小到大排序\",\"#include <iostream> #include <string> using namespace std; int main(){ string str1,str2,str3,temp; cout << \\\"Input strings\\\"; cin >> str1 >> str2 >> str3; if (str1 > str2) { temp = str2; str2 = str1; str1 = temp;} if (str1 > str3) { temp = str3; str3 = str1; str1 = temp;} if (str2 > str3) { temp = str2; str2 = str3; str3 = temp;} cout << str1 <<'\\\\t'<< str2 <<'\\\\t'<< str3<<endl; return 0; } \"]},\"696\":{\"h\":\"字符串数组\",\"t\":[\"不仅可以用 string 定义字符串变量，也可以用 string 定义字符串数组\",\"string name[5]; //定义一个字符串数组包含 5 个字符串元素 string name[5] = {\\\"as\\\",\\\"bs\\\",\\\"ds\\\",\\\"ch\\\",\\\"bg\\\"}; //定义一个字符串数组并初始化 \",\"说明：\",\"在一个字符串数组中包含若干个元素，每个元素相当于一个字符串变量\",\"并不要求每个字符串元素具有相同的长度，对于同一个元素，也可以重新赋值为不同长度\",\"在字符串数组的每一个元素存放一个字符串，而不是字符\",\"字符串数组中的每一个元素只包含字符串本身的字符，而不包括'\\\\0'\",\"（字符串数组不是直接存放字符串，而是存放字符串的地址 pgae 148）\"]},\"697\":{\"h\":\"字符串与指针\",\"t\":[\"回顾，在c++中可以用三种方法访问字符串\",\"用字符数组存放一个字符串\",\"用字符串变量存放字符串\",\"#include <string>\",\"用字符指针指向一个字符串\"]},\"698\":{\"h\":\"字符指针\",\"t\":[\"​ 例，定义一个字符指针变量并初始化，然后输出它指向的字符串\",\"#include <iostream> using namespace std; int main(){ char * str = \\\"China\\\"; cout << str << endl; return 0; } \",\"分析：\",\"这里没有定义字符数组\",\"在程序中定义了一个字符指针变量 str，用字符串对其初始化\",\"'实际上时把字符串中第 1 个字符的地址赋给 str'\",\"等价于：\",\"char * str; str = \\\"China\\\"; \",\"输出\",\"在输出时，系统先输出 str 指向的第一个字符数据，然后自动+1，使之指向下一个字符，直到遇见'\\\\0'\",\"字符串最后被自动加了一个'\\\\0'\",\"字符串中字符的存取\",\"​ 例，将字符串 str1 复制为字符串 str2 用字符指针\",\"#include <iostream> using namespace std; int main(){ char str1[] = \\\"China\\\",str2[20],*p1,*p2; p1 = str1; p2 = str2; for (; *p1 != '\\\\0'; p1++,p2++) { *p2 = *p1; } *p2 = '\\\\0'; p1 = str1; //注意，这里前面指针的值是不断变化的，如果要输出则要重新指向数组头 p2 = str2; cout <<\\\"str1 is:\\\" << p1 << endl; cout <<\\\"str2 is:\\\" << p2 << endl; return 0; } \",\"用 string 处理则十分简单\",\"​\",\"用字符指针的时候也可以使用字符串处理函数\",\"可以用字符指针表示的字符串，对字符串数组 a[] 赋值\"]},\"699\":{\"h\":\"派生类的构造函数和析构函数\"},\"700\":{\"h\":\"类和面向对象\"},\"701\":{\"h\":\"对象、面向对象\",\"t\":[\"凡是以类对象为基本构成单位的程序称为基于对象的程序\",\"面向对象的程序特点：抽象、封装、继承、多态性\",\"类对象体现了c++的抽象与封装\",\"对象：万物皆对象（object）\",\"对象的两个要素\",\"静态特征:'属性'(attribute)\",\"动态特征:'行为（或者功能）'(behavior)\",\"从外部控制对象：发送一个信息:'消息'(message)\",\"在一个系统中的多个对象之间通过一定的渠道互相联系\",\"要是某一对象实现某一种行为（操作），应向它传送相应的消息\",\"对象是由一组属性和一组行为构成的\",\"C++中，每个对象都是由'数据'和'函数'构成的\",\"封装与信息隐蔽\",\"对一个对象进行封装处理，把它的一部分属性和功能对外界隐蔽\",\"把对象的内部实现和外部行为分隔开\",\"封装性(encapsulation)\",\"将有关的数据和操作代码封装在一个对象中，形成一个基本单位，各个对象之间相互独立，互不干扰\",\"将对象中的某些部分对外隐蔽，即隐蔽基本细节，只保留少量接口，以便对外联系和接受信息。这种做法被称为信息隐蔽（imofrmation hiding） //c++中函数名就是对外接口\",\"抽象\",\"抽象的作用是表示同一类事物的本质\",\"类是对象的抽象，而对象则是类的特例，即类的具体表现形式\",\"继承与重用\",\"继承机制:若已经建立了一个A类，再建立一个与A基本相同的Ｂ类，不必再从头设计一个新类，只需在A类的基础上增加新的内容\",\"父类/基类\",\"子类/派生类\",\"多态性\",\"多态现象：有几个相似但是不完全相同的对象，在向它们发送同一个消息时，它们的反应各不相同，分别执行不同的操作\",\"多态性：由继承而产生的不同的派生类，其对象对同一消息会做出不同的响应。\",\"多态性时面向对象程序设计的一个重要特征，能增加程序的灵活性\",\"*面向对象程序设计的特点\",\"把数据和有关操作封装成一个对象\",\"包括两个方面:\",\"设计所需的各种类和对象，即决定把那些数据和操作封装在一起\",\"考虑如何向有关对象发送消息，以完成任务\"]},\"702\":{\"h\":\"类的声明、定义、引用\",\"t\":[\"类是对象的抽象，对象是类的具体实例\",\"类是对象的'模版'\",\"类是抽象的，不占用内存；而对象是具体的，占用储存空间\"]},\"703\":{\"h\":\"声明类类型\",\"t\":[\"与声明结构体类型相似，一般形式为\",\"class 类名{ private: 私有的数据和成员函数 public: 公有的数据和成员函数 }; //有分号结尾！！！！ \",\"说明\",\"private和public是成员访问限定符，用来声明各成员的访问属性。\",\"被声明为私有的成员，只能被本类中的成员函数引用，类外的不能调用(友元类除外)\",\"还有一种成员限定符' protected'，不能被类外访问，但是能被'派生类'成员函数访问\",\"声明private、public、protected时没有规定的顺序，访问限定符也可以出现多次（最好一次）\",\"如果没有任何声明，默认'private'\"]},\"704\":{\"h\":\"定义对象\",\"t\":[\"1、先声明类类型，然后在定义对象,eg\",\"Student stud1,stud2; //Student是已经声明过的类类型 \",\"或者\",\"class Student stud1,stud2; //标准c继承下来的写法，c++种可以像上一种一样不加class更简单 \",\"2、在声明类的同时定义对象,eg\",\"class Student{ public: void display(){ cout << \\\"num\\\" << num << '\\\\n' << \\\"name\\\" << name << '\\\\n' << \\\"gender\\\" << gender << endl; } private: int num; char name[20]; char gender; }stud1,stud2; //在这里定义两个类对象，别忘了分号 \",\"3、不出现类名，直接定义对象eg：\",\"class{ private: ...... public: ...... }stud1,stud2; \",\"​ 不提倡使用这种方法\"]},\"705\":{\"h\":\"类的成员函数\",\"t\":[\"性质：\",\"是函数的一种，简称类函数\",\"属于类的成员，调用时注意权限\",\"对外接口：需要被外界调用的函数应指定为public\",\"工具函数：为本类中的成员函数调用，是类中其他成员的工具函数，应设置为private\"]},\"706\":{\"h\":\"在类外定义成员函数\",\"t\":[\"class Student{ public: void display(); //公用成员函数原型声明 private: int num; char name[20]; char gender; }; //表示Student类作用域中的display函数 void Student::display(){ cout << \\\"num\\\" << num << '\\\\n' << \\\"name\\\" << name << '\\\\n' << \\\"gender\\\" << gender << endl; } Student stud1,stud2; \",\"说明\",\"::是作用域限定符，或称作用域运算符，在类外定义成员函数时，必须在函数名前加上类名\",\"如果::前面没有类名，或者类名和作用域运算符都没有\",\"​ ::display() 或者 display()则表示全局函数（普通函数）\"]},\"707\":{\"h\":\"内置成员函数（ inline ）（见内置函数）\",\"t\":[\"类的成员函数也可被指定为内置函数\",\"概念\",\"由于类体中函数规模一般较小，调用一个函数的时间开销远远大于执行该函数的时间\",\"为了减小时间开销，如果在'类体中定义的'成员函数，且不包括循环等控制结构\",\"Ｃ++系统自动将它们作为'内置'函数处理\",\"使用\",\"Ｃ++要求对一般的内置函数要用 inline 关键字声明\",\"但是对类体内部定义的成员函数，可以省略 inline，因为这些成员函数已经被隐含地指定为内置函数\",\"也可以自己加上 inline\",\"注意\",\"对于在类外定义的成员函数\",\"在类外定义的函数不是默认内置函数\",\"需要自己手动添加 inline 做显示的声明\",\"同样的只有在类外定义的成员函数规模很小而调用频率很高时，才指定为内置函数\",\"举例\",\"class Student{ public: inline void display(); //声明此成员函数为内置哈是你 private: int num; string name; char sex; }; inline void Student::display(){ //在类外定义的函数 display 需要手动添加 inline cout<<………… } \",\"​ 在普通函数的声明或者定义中做 inline 声明都可以（有一个就行）\",\"如果在类体外定义 inline 函数，必须将类定义和成员函数定义都放在同一个头文件中（或者写在同一个源文件中），否则编译时无法置换\"]},\"708\":{\"h\":\"成员函数的储存\",\"t\":[\"概念\",\"'同一类的不同对象中的数据成员的值一般时不相同的，而不同对象的函数的代码时相同的，\",\"不论调用哪一个函数的代码，其实调用的都是同样内容的代码' \",\"例证：一个对象所占空间的大小只取决于其数据成员所占的空间，而与成员函数无关（sizeof(对象)）\",\"函数的目标代码是储存在对象空间之外的\",\"但是调用不同对象的成员函数执行同一段代码结果却不一样：Ｃ++中专门设立了 this 指针用来指向不同的对象\",\"说明\",\"不论成员函数在类内定义还是在类外定义，成员函数的代码段的储存方式是相同的，都不占有对象的储存空间\",\"不要将成员函数的这种储存方式与 inline 函数的概念混淆\",\"​ 不论是否用 inline 声明，成员函数的代码段都不占有对象的储存空间\",\"​ inline 函数只是印象程序的执行效率，而与成员函数是否占有对象的储存空间无关\",\"成员对象的储存方式是从物理的角度而言的，而“对象 stud1 的成员函数 display”是从逻辑的角度而言的\"]},\"709\":{\"h\":\"对象成员的引用\",\"t\":[\"1、通过对象名和成员运算符访问对象中的成员\",\"对象名.成员名 //stud1.num stud1.display() \",\"​ 应该注意在类外只能调用公有函数，'在一个类中应至少有一个公用函数成员，作为对外的接口，否则就无法对对象进行任何操作'\",\"​ 举例：\",\"#include <iostream> uisng namespace std; class Time{ public: int min; int hour; int sec; }; int main(){ Time t1; cin >>t1.hour >> t1.min >> t1.sec; cout <<t1.hour <<t1.min <<t1.sec; return 0; } \",\"2、通过指向对象的指针访问（与指向结构体的指针相似）\",\"class Time{ public: int hour; int minute; }; Time t, *p; //定义对象t和指针变量p p = &t; //使p指向对象t cout << p->hour; //输出p指向对象中的成员hour \",\"在p指向t的前提下 p->hour, (*p).hour, t.hour 等价\",\"3、通过对象的引用来访问对象中的成员\",\"为对象定义一个引用；与通过对象名引用一样\",\"Time t1; Time &t2 = t1; //定义Time类引用t2，并初始化为t1 cout <<t2.hour; //输出对象t1中的成员hour \"]},\"710\":{\"h\":\"对象名作为函数参数\",\"t\":[\"在函数中，用对象名作为函数参数时，在函数调用时建立一个新的对象，它是实参对象的拷贝。\",\"'此时会调用拷贝构造函数，函数结束时调用析构函数！'\",\"实参把值传给形参，二者分别占有不同的储存空间。\",\"无论形参是否修改都不会影响实参的值。\",\"而且这样的虚实结合要产生实参对象的拷贝，时间和内存开销大\",\"'因此常用指针作为函数参数，而不用对象名'\"]},\"711\":{\"h\":\"用new和delete运算符进行动态分配和撤销储存空间\"},\"712\":{\"h\":\"new 分配空间\",\"t\":[\"Ｃ++提供了较简单强大的'运算符' new 和 delete 来取代 malloc(size) 和 free(pointer) 函数\",\"注意\",\"new 和 delete 是'运算符'，不是函数，执行效率高\",\"2、使用\",\"一般格式为\",\"new typename[初值] \",\"​ 例\",\"new int; //开辟一个存放整数的储存空间，返回一个指向该存储空间的地址（即指针） new int(100); //开辟存放一个整数的空间，并指定该整数的初值为100，返回一个指向该存储空间的地址 new char[10]; //开辟一个存放包含 10 个元素字符数组的空间，返回字符数组首元素的地址 new int[5][10]; //开辟一个存放而为整型数组（大小为5*4）的空间，返回首元素的地址 float * p = new float(3.14159) //开辟一个存放单精度数的空间，并指定该数的初值为3.14159，将返回的该空间的地址赋值给指针变量p \",\"注意\",\"用 new 分配数组空间时不能指定初值\",\"如果内存不足等原因无法正常分配空间，则 new 会返回一个空指针 NULL ，可以据此判断分配空间是否成功\"]},\"713\":{\"h\":\"delete 撤销储存空间\",\"t\":[\"1、格式\",\"delete 指针变量； //对变量 delete [] 指针变量；//对数组 \",\"2、举例\",\"delete p; //上例中撤销 new 开辟的单精度数的空间 delete [] pt; //如果把一个开辟的数组空间返回的地址赋值给了pt，在指针变量名前加一对方括号，表示对数组空间的操作 \",\"3、程序举例\",\"例，临时开辟一个储存空间以存放一个结构体数据。假设已经声明了一个结构体类型Student（name，num，sex）\",\"#include <iostream> using namespace std; struct Student{ char name[10]; int num; char sex; } int main(){ Student *p; p = new Student; p->name = \\\"Wang Fang\\\"; p->num = 1001; p ->sex = 'm'; cout<<p->name<<'\\\\n'<<p->num<<'\\\\n'<<p->sex<<endl; delete p; return 0; } \",\"程序说明：\",\"本程序没有在主函数中定义结构体变量，而是定义了一个基类型为Student 的指针变量 p。\",\"用 new 开辟一段空间以存放一个 Student 类型的数据，空间大小由系统根据 Student 自动算出，不必用户指定\",\"执行 new 得到一个指向 Student 类型的指针赋值给 p \",\"这样虽然没有定义一个结构体变量，但是可以通过指针变量 p 访问该空间 \",\"可以认为是对一个'无名的结构体变量进行操作'\",\"'想访问用 new 所开辟的空间，无法通过变量名进行，只能通过指针 p 进行访问'\"]},\"714\":{\"h\":\"对象的动态建立与释放\",\"t\":[\"可以用 new 运算符动态建立对象，用 delete 运算符释放这些内存空间\",\"1、对象的动态建立\",\"​ 1、建立\",\"​ 如果已经定义了一个 Box 类，可以\",\"new Box; \",\"​ 执行此语句时，系统开辟了一段内存空间，并在此内存空间中存放一个 Box 类对象\",\"​ 同时调用了该类的构造函数，以使该对象初始化（如果由此功能（默认参数））\",\"​ 但是用户无法访问此'无名对象'，new 会返回一个地址，只能通过指针访问，例\",\"Box *pt; //定义个一个执行Box类对象的指针变量pt pt = new Box; //在pt中存放了新建对象的起始地址 \",\"​ 这样就可以通过指针变量 pt 访问这个新建的对象，如\",\"cout << pt->height; \",\"​\",\"​ 2、初始化\",\"​ 可以在执行 new 时，对新建立的对象进行初始化，如\",\"Box *pt = new Box(12,12,12); \",\"​ 这种写法把 定义指针变量 和 用 new 建立新对象 合并为一句话，并指定初值\",\"​\",\"​ 3、用途\",\"​ 主要用于动态的数据结构，如链表\",\"​ 访问链表中的节点并不需要对象名，而是上一个节点中存放的下一个节点的地址，从而从上一个节点找到下一个节点，构成链接关系\",\"​ 4、错误处理\",\"​ 在执行 new 运算时，如果内存不足，无法开辟空间，大多数编译系统会返回一个空指针 NULL\",\"​ 只要检查返回值是否为 0，就可以判断分配内存是否成功\",\"2、动态建立对象的释放\",\"​ 在不需要由 new 建立的对象时，用 delete 运算符释放，如\",\"delete pt; //释放pt指向的内存空间 \",\"​ 这样就撤销了 pt 指向的对象\",\"​ '如果用一个指针变量pt 先后指向了不同的动态对象，应该注意指针变量的当前指向，以免删错对象'\",\"​ 在执行 delete 运算符时，在释放内存空间之前，自动调用析构函数，完成善后清理工作\"]},\"715\":{\"h\":\"对象的初始化\",\"t\":[\"WARNING\",\"不能在类的声明中对数据成员初始化，因为类不是一个实体，而是一种'抽象类型，不占用储存空间'\",\"如果一个类中所有的成员都是公用的，可以在'定义对象'时，对数据成员进行初始化\",\"但是如果类中有private或者protected的数据成员，就不能用这种方式初始化\"]},\"716\":{\"h\":\"构造函数\",\"t\":[\"用构造函数实现数据成员的初始化\"]},\"717\":{\"h\":\"构造函数(constructor)\",\"t\":[\"是一种特殊的成员函数，不需要用户调用，在建立对象的时候自动运行\",\"构造函数的名字必须与类名同名，不具有任何类型，不返回任何值，eg\",\"class Time { public: Time(){ //定义构造成员函数，函数名与类名相同 hour = 0; //利用构造函数对对象中的数据成员赋值 minute = 0; sec = 0; } void set_time(); //声明成员函数 void show_time(); //声明成员函数 private: int hour; int minute; int sec; }; //声明类对象大括号结尾的分号！ \",\"说明\",\"与在声明类时对数据成员赋值不同，赋值语句是写在构造函数的函数体中的，只用在调用构造函数的时候才执行这些赋值语句\",\"赋值步骤:先建立对象t1（这里略写类），在执行构造函数的过程中对t1中的数据成员赋值\",\"也可以在类的定义内仅声明构造函数，在类的定义外定义构造函数，eg\",\"…… Time(); //在类的定义内仅有声明 …… //在类的定义外构造成员函数，要加上类名Time和域限定符\\\"::\\\" Time::Time(){ hour = 0; minute = 0; sec = 0; } \",\"说明：\",\"在建立类对象的时候自动调用构造函数。建立对象的时候系统为该对象分配储存单元，此时执行构造函数，把初值送到储存单元中。每建立一个对象就调用一次构造函数\",\"构造函数呢没有返回值，没有类型，总用仅为初始化对象\",\"不需要也不能被用户调用,在定义对象的时候由系统自动执行，只能执行一次，'构造函数一般声明为public'\",\"可以用一个类对象初始化另一个类对象\",\"Time t2=t1； //建立对象t2，并用t1初始化t2，此时不调用t2.Time() \",\"如果用户没有定义构造函数，系统会自动生成一个构造函数，函数体是空的，没有任何操作\",\"​\",\"​\"]},\"718\":{\"h\":\"带参数的构造函数\",\"t\":[\"上面的方法使得每一个对象的初值相同，但是无法用于对不同的对象赋予不同的初值\",\"所以可以采用'带参数的构造函数'，在调用不同对象的构造函数时，从外面将不同的数据传递给构造函数，以实现不同时初始化，函数首部一般为：\",\"构造函数名(类型1 形参1，类型2 形参2，…) \",\"由于用户无法调用构造函数，所以在定义对象的时候给出实参：\",\"类名 对象名(实参1，实参2，……)； \",\"例：俩长方体，用俩类求体积\",\"class Box{ public: Box(int,int,int); //用函数原型声明带参数的构造函数 int volume(); private: int height; int width; int length; };//分号！！！！！！ Box::Box(int h ,int w,int l){ //在类外定义带参的构造函数 height = h; width = w; length = l; } int Box::volume(){ return(height*width*length); //定义求体积函数 } int main(){ //在定义对象的时候给出实参，初始化对象 Box box1(12,34,13); cout <<…………<< box1.volume()<<…… //建立（定义）对象box1，并指定box1的长宽高 //在定义对象的时候给出实参，初始化对象 Box box2(394,223,34); cout <<…………<< box2.volume()<<…… //建立对象box2，并指定box2的长宽高 return 0; } \",\"说明:\",\"带参构造函数中的形参对应的实参是在建立对象时给定的。\",\"在建立对象的同时指定数据成员的初值\",\"​\"]},\"719\":{\"h\":\"用参数初始化表对数据成员初始化\",\"t\":[\"在函数首部实现对数据成员的初始化\",\"一般形式如\",\"方括号内的可有可无\",\"类名::构造函数名([参数表])[:成员函数初始化表] { [构造函数体] } \",\"​ 上一例中，可以改为：\",\"Box::Box(int h,int w,int l):height(h),width(w),length(l){} \",\"用形参h的值初始化数据成员height……\",\"空的花括号\",\"对于数组\",\"数据成员是数组不能在参数初始化表中对其初始化，应当在构造函数的函数体中用语句对其初始化。\"]},\"720\":{\"h\":\"构造函数重载\",\"t\":[\"概念\",\"一个类中可以定义多个构造函数，以为对象提供不同的初始化方法选择\",\"这些构造函数具有相同的名字，而参数的个数或者类型不同\",\"这被称为构造函数的'重载'\",\"使用\",\"在建立对象时不必给出实参的构造函数，为默认构造函数\",\"无参的构造函数属于默认构造函数\",\"一个类只能有一个默认的构造函数\",\"如果用户没有定义构造函数，系统自动提供的默认构造函数函数体是空的，不初始化\",\"如果要在创建对象时就有初值，就必须自己定义构造函数\",\"如果在建立对象时用的是无参的构造函数\",\"注意此时定义对象的写法：\",\"Box box1; //正确建立对象并调用了默认构造函数 Box box1(); //错误，是声明一个普通函数返回值为 Box 类型 \",\"构造函数不能被用户显式调用\",\"一个类中可以有多个构造函数，但是建立一个对象时只能调用其中一个构造函数\",\"​\"]},\"721\":{\"h\":\"默认参数的构造函数\",\"t\":[\"​ 构造函数中参数的值既可以通过实参传递，也可以指定为某些默认值\",\"​ （有默认参数的普通函数）在声明构造函数时指定默认参数\",\"#include <iostream> using namespace std; class Box{ public: Box(int h = 10,int w = 10,int len = 10); //Box(int = 10,int = 10,int = 10); //形参名可以省略 int volum(); private: int height; int width; int length; }; Box::Box(int h,int w,int len){ height = h; width = w; length = len; } int Box::volume(){ return(height*width*length); } int main(){ Box box1; //没有给实参，形参均取默认值 Box box2(15); //只给一个实参，w和len去默认值 Box box3(13,45); //只给两个实参， Box box4(23,44,55); //给三个实参 return 0; } \",\"说明：\",\"1、在什么地方指定构造函数的默认参数？\",\"'应该在声明构造函数时指定默认值，而不是在定义构造函数时指定默认值'\",\"2、声明构造函数时'形参名可以省略'，即\",\"Box(int = 10,int = 10,int = 10); \",\"3、应该避免同时出现定义了 无参的构造函数 和 全部参数都指定了默认值 的构造函数\",\"以避免出现歧义性为原则\",\"TIP\",\"构造函数全部参数指定了默认值，在定义对象时也可以不给出实参\",\"此时也属于默认构造函数，如果还定义了无参的构造函数，就会出现歧义\",\"一个类只能有一个默认构造函数\",\"可以不用参数而调用的构造函数只能有一个\",\"4、在一个类中定义了全部时默认参数的构造函数之后，不能再定义重载构造函数\",\"如果构造函数中的参数并非完全默认值，需要具体分析，以是否出现歧义为标准\",\"例1,\",\"有如下声明：\",\"Box(int = 11,int = 11,int = 11);\",\"Box();\",\"Box(int,int);\",\"有如下定义？\",\"Box box1;\",\"Box box2(11,22);\",\"例2，有如下声明：\",\"Box(int,int = 10,int = 11);\",\"Box();\",\"Box(int,int);\",\"有如下定义？\",\"Box box1;\",\"Box box2(11);\",\"Box box3(11,22);\"]},\"722\":{\"h\":\"析构函数（destructor）\",\"t\":[\"析构函数也是一个特殊的成员函数，作用与构造函数相反\",\"在类名前加一个'~'位取反运算符\",\"当对象的生命周期结束时，自动执行析构函数 \",\"在一个函数中定义了一个对象（局部），当函数被调用结束时，对象应该被释放，在对象释放前自动执行析构函数\",\"'静态'(static) 局部对象在函数调用结束时对象并不释放，因此不调用析构函数，只有在main函数结束或者调用 exit() 函数结束时，才调用 static局部对象的析构函数\",\"如果定义了一个全局对象，则在函数的流程离开其作用域时（例如main函数结束或者调用exit函数），调用该全局对象的析构函数\",\"如果用 new运算符动态的建立了一个对象，应用 delete运算符释放该对象时，先调用该对象的析构函数\",\"'析构函数作用并不是删除对象，而是在撤销对象占用内存之前完成一些清理工作'\",\"还可以来执行'在最后一次使用对象之后的任何操作'\",\"析构函数不返回任何值，没有函数类型。没有函数参数，所以'不能被重载'\",\"一个类可以有多个构造函数，但是只能有一个析构函数\",\"如果用户没有在声明类的时候定义析构函数，编译系统自动生成一个无任何操作的析构函数\",\"析构函数举例：\",\"#include <string> #include <iostream> using namespace std; class Student{ //声明类，在main之前，作用域全局 public: Student(int n,string nam,char s){ //定义有参构造函数 num = n; name = nam; sex = s; cout << \\\"Constructor called\\\"<< endl; } ~Student(){ //定义析构函数 cout << \\\"Destructor called\\\"<<endl; } void display(){ //定义成员函数 cout << \\\"num\\\" << num << '\\\\n' <<\\\"name\\\" << name <<'\\\\n' <<\\\"sex:\\\" << sex << endl; } private: int num; char name[10]; char sex; }; int main(){ Student stud1(10010,\\\"Gan\\\",'m'); //定义对象stud1 stud1.display(); //输出stud1数据 Student stud1(10020,\\\"qin\\\",'f'); stud2.diaplay(); return 0; } \",\"调用构造函数和析构函数的顺序\",\"先构造的后析构，后构造的先析构，\",\"相当于一个栈，先进后出\",\"什么时候调用析构函数和构造函数？\",\"1、在全局范围定义的对象\",\"构造函数：\",\"在本文件模块中所有函数（包括main）之前调用\",\"如果一个程序包含多个文件，每个都有全局对象，则顺序不确定\",\"析构函数\",\"在 main 函数执行完毕 或者 调用 exit() 函数时\",\"2、局部自动对象（例如在函数中定义的对象）\",\"构造函数：\",\"建立对象时调用\",\"如果函数调用多次，每次都要调用\",\"析构函数\",\"函数调用结束时，对象释放前调用析构函数\",\"3、在函数中定义的'静态' static 局部对象\",\"构造函数：\",\"只在程序第一次调用时调用构造函数\",\"析构函数：\",\"静态局部对象在函数调用结束时不释放，\",\"因此在 main 函数结束或者调用 exit() 时对象释放时调用析构函数\"]},\"723\":{\"h\":\"对象的赋值与复制\"},\"724\":{\"h\":\"对象的赋值\",\"t\":[\"1、概念\",\"如果一个类定义了两个或多个对象，则这些同类对象之间可以相互赋值\",\"通过成员复制完成\",\"对象的赋值只对其中的数据成员赋值，不对成员函数赋值\",\"'类中的数据成员不能包括动态分配的数据，否则在赋值时会出现严重后果'\",\"对象之间的赋值通过赋值运算符 = 进行\",\"（本来 = 只能对单个变量赋值，这里通过运算符重载扩展了使用）\",\"2、形式\",\"对象名1 = 对象名2; \",\"对象名1和对象名2必须属于同一个类，如\",\"Student stud1,stud2; //定义两个同类的对象 stud2 = stud1; //将 stud1 赋给 stud2 \",\"3、举例\",\"#include <iostream> using namespace std; class Box{ public: Box(int = 10,int = 10,int = 10); //声明有默认参数的构造函数 int volume(); private: int height; int width; int length; }; Box::Box(int h,int w,int len){ //定义构造函数 height = h; width = w; length = len; } int Box::volume(){ //定义体积函数 return(height*width*length); //返回体积 } int main(){ Box box1(15,23,44),box2; //定义两个对象 cout << \\\"The volume of box1 is\\\"<<box1.volume()<<endl; box2 = box1; //将 box1 的值赋给 box2 cout << \\\"The volume of box2 is\\\"<<box2.volume()<<endl; return 0; } \"]},\"725\":{\"h\":\"对象的复制\",\"t\":[\"用一个已有的对象快速地复制出多个完全相同的对象\",\"一般形式为\",\"类名 对象2(对象1); \",\"用 对象1 复制出 对象2 ，例\",\"Box box2(box1); //用已有的 box1 复制出 box2 \",\"还可以用赋值号代替括号\",\"一般形式为\",\"类名 对象2 = 对象1; \",\"例，\",\"Box box2 = box1; \",\"还可以在一个语句中对多个对象进行复制，如\",\"Box box2 = box1，box3 = box2; //按 box1 复制出 box2 和 box3 \"]},\"726\":{\"h\":\"复制构造函数\",\"t\":[\"概念\",\"对象复制与对象定义的方式相似，但是括号中的参数不是一般变量而是对象名\",\"在建立对象时调用一个特殊构造函数————'复制构造函数'(copy constructor)\",\"Box::Box(const Box& b){ height = b.height; width = b.width; length = b.length; } \",\"复制构造函数只有一个参数，是'本类的对象'\",\"采用对象的引用形式，一般约定用 const 声明，防止调用时不慎改变实参\",\"调用\",\"由于参数是对象，编译系统就调用复制构造函数（构造函数重载？）而不会调用其他构造函数\",\"如果用户没有自定义复制构造函数\",\"系统默认的复制构造函数只是简单的复制类中的每个数据成员\",\"​\"]},\"727\":{\"h\":\"有关比较\"},\"728\":{\"h\":\"对象的复制与赋值\",\"t\":[\"​ 对象的赋值是对一个已经存在的对象赋值，必须先定义被赋值的对象\",\"​ 对象的复制是复制出一个新的对象，与原对象完全相同\"]},\"729\":{\"h\":\"普通构造函数和复制构造函数\",\"t\":[\"形式上\",\"普通构造函数：\",\"类名(形参列表); \",\"复制构造函数\",\"类名(类名 &对象名); \",\"建立对象时实参类型不同\",\"系统会根据实参的类型决定调用普通构造函数还是复制构造函数\",\"Box box1(11,22,33); //实参是整数，调用普通构造函数 Box box2(box1); //实参是对象名，调用复制构造函数 \",\"使用方式不同\",\"普通构造函数\",\"在程序中建立对象时被调用\",\"复制构造函数\",\"在用已有的对象复制一个新对象时被调用：\",\"1、程序中需要建立一个新对象，并用一个同类的对象对它进行初始化\",\"2、当函数的参数为类的对象时\",\"在调用函数时需要将实参对象完整地传递给形参，需要建立一个实参的的拷贝\",\"这时需要调用复制构造函数实现\",\"3、函数的返回值是类的对象\",\"在函数调用完毕将返回值带回函数调用处时，需要将函数中的对象复制一个临时对象传给函数调用处\",\"举例\",\"Box f(){ //函数 f 的类型为 Box 类类型 Box box1(11,22,33); return box1; //返回值是 Box 类的对象 } int main(){ Box box2; //定义 Box 类的对象 box2 box2 = f(); //调用 f 函数，返回 Box 类的临时对象，并将它赋值给 box2 return 0; } \",\"说明；\",\"由于 box1是在函数 f 中定义的，调用结束时，box1的生命周期结束\",\"因此不是将 box1带回了主函数，而是在函数 f 结束前，调用 Box类中的复制构造函数\",\"复制 box1得到一个临时对象，再赋值给 box2\"]},\"730\":{\"h\":\"对象数组\",\"t\":[\"数组不仅可以由简单变量组成，也可以由类对象组成\",\"'对象数组的每一个元素都是同类的对象'\",\"1.定义\",\"​ 例如，定义一个学生类的对象数组，每一个数组元素就是一个“学生类”对象\",\"Student stud[50]; //假设已声明了 Student 类，定义 stud 数组，有五十个元素 \",\"初始化\",\"构建对象数组一定要有默认构造函数（或者全为默认参数）\",\"在建立对象数组时，会调用构造函数，如果有50个元素，就要调用50次\",\"在需要时可以在定义数组时提供实参以实现初始化\",\"如果构造函数只有一个参数，在定义数组时可以直接在等号后面的花括号内提供实参，例\",\"Student stud[3] = {23，42，56}； //三个实参分别传递给3个数组元素的构造函数 \",\"​ 编译系统只为每个元素对象的构造函数传递一个实参，'提供的的实参个数不能超过数组元素个数'\",\"如果构造函数有多个参数 \",\"不能在定义数组时直接提供所有实参，容易产生歧义（如果采用上例方法，则是提供给三个元素的第一个实参）\",\"应该在花括号中分别写出构造函数名并在括号内指定实参，例(三个参数分别为学号，年龄，成绩)\",\"Student Stud[3]={ //定义对象数组 Student(1002,12,34), //调用第一个元素的构造函数，向它提供三个实参，用逗号隔开 Student(1003,34,66), Student(1004,34,23) }; //是一个语句，注意末尾有分号 \",\"应用举例\"]},\"731\":{\"h\":\"对象与指针\"},\"732\":{\"h\":\"指向对象的指针（类比结构体指针）\",\"t\":[\"在建立对象时，编译系统会为每一个对象分配一定的储存空间，以存放数据成员\",\"对象空间的起始地址就是对象的指针\",\"1、定义指向对象的指针,若有一个类如下：\",\"class Time{ public: int hour; int minute; int sec; void ge_time(); //在类中声明成员函数 }; //类定义结尾的分号！ void Time::get_time(){ //在类外定义成员函数 cout<< hour <<\\\":\\\"<<minute<<\\\":\\\"<<sec<<endl; } \",\"​ 在此基础上定义指向对象的指针变量\",\"Time * pt; //定义pt为指向Time类对象的指针变量 Time t1; //定义ti为Time类对象 pt = &t1; //将t1的起始地址赋值给pt \",\"定义类对象的指针的一般形式为：\",\"类名 * 指针对象名; \",\"2、通过指针对象访问对象和对象的成员\",\"*pt; //pt所指向的对象t1 (*pt).hour //pt所指向对象中的hour成员，即t1.hour pt ->hour //pt所指向对象中的hour成员，即t1.hour (*pt).get_time() //调用pt所指向对象中的get_time函数，即t1.get_time pt ->get_time() //调用pt所指向对象中的get_time函数，即t1.get_time \"]},\"733\":{\"h\":\"指向对象成员的指针\",\"t\":[\"指向对象的指针变量：存放对象的起始地址的指针变量\",\"指向对象成员的指针变量：存放对象成员地址的指针变量\"]},\"734\":{\"h\":\"指向对象数据成员的指针\",\"t\":[\"定义指向对象数据成员的指针变量的方法和定义指向普通变量的指针变量方法相同，如\",\"int *p1; typename *pointername; //定义指向对象数据成员的指针变量的一般形式 \",\"如果Time类的数据成员hour为public，\",\"可以在类外通过指向对象数据成员的指针变量访问对象的数据成员hour\",\"p1 = &t1.hour; //将对象t1的数据成员hour的地址赋给p1，p1指向t1.hour cout << *p1 <<endl; //输出t1.hour \",\"注意\",\"不能用在类外的指针指向私有的数据类型，因为在类外无法访问！\"]},\"735\":{\"h\":\"指向对象成员函数的指针\",\"t\":[\"注意与指向普通函数的指针变量的区别\",\"​\",\"复习：指向普通函数的指针：\",\"typename (*指针变量名)(参数表列);//如 void (*p)(); //p是指向void型函数的指针变量 \",\"可以通过使它指向一个函数，并通过指针变量调用函数\",\"p = fun; //将fun函数的入口地址赋给指针变量p，p就指向函数fun (*p)(); //调用fun函数 \",\"1、概念\",\"指向'对象成员函数'的指针要复杂一些，编译系统要求指针变量的类型与赋值号右侧的函数类型相匹配：\",\"函数的参数的类型和参数个数\",\"函数返回值的类型\",\"所属的类\",\"如果直接使上例中的p指向一个成员函数，p与类无关，不能在类外直接用成员函数名作为函数入口地址去调用成员函数\",\"2、定义与初始化\",\"定义指向成员函数的指针变量，使其指向一个共用成员函数\",\"void(Time:: *p2)(); //定义p2为指向Time类中公用成员函数的指针变量 p2 = &Time::get_time; //使指针变量指向一个公用成员函数 \",\"一般形式为：\",\"typename(类名:: *指针变量名)(参数表列); //注意，第一个括号不能省略，否则就是返回值为“typename”类型的指针函数 指针变量名 = &类名::成员函数名; //把公用成员函数的入口地址赋给一个指向公用成员函数的指针变量即可 \",\"注意\",\"成员函数入口地址的写法为&类名::成员函数名，不能写成 p2 = &t1.get_time;\",\"因为t1是对象名而不是类名（成员函数不是存放在对象空间中的，而是存放在对象外）\",\"定义指向成员函数的指针变量和初始化可以写一行：\",\"void(Time:: *p3)() = &Time::get_time; //定义指针变量并初始化 \",\"可以不写&，和指向普通函数的指针的赋值一样\",\"p = Time::get_time; \"]},\"736\":{\"h\":\"this 指针\",\"t\":[\"每一个成员函数中都包含一个特殊的指针，这个指针的名字是固定的，称为 this\",\"this指针是'指向本类对象的指针，它的值是当前被调用的成员函数所在的对象的起始地址'\",\"用来解决不同对象调用同一个函数的目标代码时，保证引用的所指定对象的成员\",\"例如，当调用成员函数 a.volume 时，编译系统就把对象a的起始地址赋给 this 指针，在成员函数引用数据成员时，就按照 this 的指向找到对象a的数据成员\",\"this 指针是隐式使用的，它是作为参数被传递给成员函数的\",\"综上所述，所谓“调用对象a的成员函数f”，实际上是在调用成员函数f时使 this 指针指向对象a，从而访问对象a的成员\"]},\"737\":{\"h\":\"类模板\",\"t\":[\"与函数模板类似\",\"有多个类，功能是相同的，仅仅是数据类型不同\",\"Ｃ++提供模板功能，提供解决这类问题的途径\"]},\"738\":{\"h\":\"声明\",\"t\":[\"声明通用类模板\",\"template <class 类型参数名> class 类名{类体}; \",\"例：\",\"template <class numtype> class Compare{ public: Compare(numtype a,numtype b){ x = a; y = b; } numtype max(){ return((x>y)?x:y;) } numtype min(){ return((x<y)?x:y;) } private: numtype x,y; }; \",\"注意：\",\"声明类模板前面加一行\",\"template <class 类型参数名> \",\"template是声明类模板的关键字\",\"在 template后面的尖括号内的内容为模板的参数表\",\"关键字 class 表示后面的是类型参数\",\"本例中 numtype 就是一个类型参数名，这个名字是任意选取的，合法的标识符\",\"并不是实际存在的类型名，只是一个虚拟类型参数名\",\"在这之后将被一个实际的类型名取代;\",\"在建立类对象时，如果将实际类型指定为 int 型，编译系统就会用 int 取代所有 numtype\",\"这样就能实现'一类多用'\",\"由于类模板包含类型参数，因此又被称为'参数化的类'\",\"类是对象的抽象，对象是类的实例\",\"'类模板是类的抽象，类是类模板的实例'\",\"​\"]},\"739\":{\"h\":\"使用\",\"t\":[\"1、一般形式\",\"类模板名 <实际类型名> 对象名(参数表); \",\"不能直接用 类模板名，因为不是一个具体的类\",\"2、举例\",\"Compare <int> cmp(4,7); \",\"说明：\",\"Compare是类模板名，在之后的尖括号内指定实际的类型名\",\"在编译时，系统用 int 替换类模板中的类型参数 numtype\",\"这样就把类模板具体化（实例化）\",\"​\"]},\"740\":{\"h\":\"在类模板外定义成员函数\",\"t\":[\"不能使用一般定义类成员函数的形式\",\"而应该写成类模板，例\",\"template <class numtype> numtype Compare<numtype>::max(){ return(x>y?x:y); } \",\"说明：\",\"第一行表示类模板\",\"第二行左边的 numtype是虚拟类型名，\",\"后面的 Compare<numtype> 是一个整体，是带参的类\",\"表示所定义的 max 函数时在类 Compare<numtype> 的作用域内的，\",\"在定义对象时，用户指定实际类型的时候，编译器将类模板中的虚拟类型名 numtype 替换为实际类型\",\"这时 Compare<numtype> 就相当于一个实际的类，\"]},\"741\":{\"h\":\"总结\",\"t\":[\"1、先写出一个实际的类\",\"2、将此类中准备改变的类型名改成一个自定的虚拟类型名\",\"3、在类的声明前面加入一行：\",\"template <class 虚拟类型参数> \",\"4、用类模板定义对象时，用以下形式\",\"类模板名<实际类型名>对象名; 类模板名<实际类型名>对象名(实参表); \",\"5、如果在类模板外定义成员，应该写成类模板形式\",\"template<class 虚拟类型函数> 函数类型 类模板名<虚拟类型参数>::成员函数名(函数形参表){ ……… } \",\"6、类模板的类型参数可以有一个或多个，每个类型前面都必须加 class，如：\",\"template <class T1,class T2> class A{………………}; \",\"定义时分别加入实际的类型名\",\"A<int,double>obj; \",\"7、使用类模板要注意其作用域，只能在其有效作用域内用它定义对象\",\"如果类模板是在文件A开头定义的，则A文件范围为有效作用域，但是在B文件中不能用类模板定义对象\",\"8、类模板可以有层次，一个类模板可以作为基类，派生出派生模板类\"]},\"742\":{\"h\":\"类的静态成员和静态成员函数\"},\"743\":{\"h\":\"类的静态数据成员\",\"t\":[\"如果想在同类的多个对象之间实现数据共享，也不要用全局对象，可以用静态的数据成员\"]},\"744\":{\"h\":\"静态数据成员\",\"t\":[\"静态数据成员是一种特殊的数据成员，以关键字 static 开头，例如：\",\"class Box{ public: …… private: static int height; //把height定义为静态的数据成员 int width; int length; }; \",\"如果希望各个对象中的数据成员的值是一样的，就可以把它定义为静态数据成员\",\"为各个对象所'共有'，所有对象都能引用\",\"在内存中只占一份空间，而不是每个对象分别为它保留一份空间，节约空间提高效率\",\"之前说过在声明类时数据成员不占有内存空间，在定义对象时才分配内存空间。\",\"但是静态数据成员**不属于任何一个对象**\",\"在为对象所分配的空间中不包括静态数据成员所占的空间。\",\"静态数据成员是在所以对象之外单独开辟空间。\",\"只要在'声明类的时候指定了静态数据成员，这时候就会为其分配内存'，\",\"即使使不定义对象，静态数据成员也可以被引用\",\"静态数据成员与静态变量类似，不随对象的建立而分配空间，也不随对象的撤销而释放。\",\"静态数据数据成员在程序开始运行时就分配空间，到程序结束的时候释放空间\",\"初始化静态数据成员\",\"​ 只能在类体外初始化，例：\",\"int Box::height = 10; \",\"一般类型为：\",\"数据类型 类名::静态数据成员名 = 初值； \",\"不能用参数初始化表对静态函数成员初始化\",\"Box(int h,int w,int l):height(h){}; //错误！height是静态数据成员 \",\"​\",\"静态数据成员既可以通过对象名引用，也可以通过类名引用\",\"例：\",\"有两个Box对象a，b；引用public静态数据成员height\",\"a.height 或者 b.height 或者 Box::height\",\"在类外可以通过'对象名'访问公用的静态数据成员，也可以通过'类名'引用静态数据成员\",\"这说明静态数据成员不是属于对象的，而是属于类的，但是能够被对象引用。\",\"通过静态数据成员，各个对象之间有了沟通的渠道，实现数据共享，可以不使用全局，全局变量破坏了封装的原则，不符合面向对象程序的要求\",\"注意公用静态函数成员和全局变量的区别：'静态数据成员的作用域只限于定义该类的作用域内'，如果实在一个函数中定义类，那么其中静态数据成员的作用域就在此函数内。\",\"在此作用域内，可以通过类名和域运算符::引用静态数据成员，而不论对象是否存在\"]},\"745\":{\"h\":\"静态成员函数\",\"t\":[\"成员函数也可以定义为静态的，在类中声明函数的前面加上 static 就成了静态成员函数，例：\",\"static int volum(); \",\"和静态数据成员一样，静态成员函数是类的一部分而不是对象的一部分\",\"在类外调用公用的静态成员函数，要用类名和域运算符\",\"Box::volum(); \",\"同时也允许通过对象名调用静态成员函数\",\"a.volume(); \",\"这里不是说该函数属于对象a，而是使用了a的类型Box\",\"与静态数据成员不同，静态成员函数的作用不是为了对象之间的沟通，而是为了处理静态数据成员\",\"'静态成员函数不属于某一对象，与任何对象都无关，没有this指针'，\",\"所以无法对一个对象中的非静态成员进行默认访问（即在引用数据时不指定对象名）\",\"静态成员函数与非静态成员函数的根本区别：\",\"​ 非静态成员函数有 this 指针，而静态成员函数没有 this 指针。 ​ 由此决定了静态成员函数不能访问本类中的非静态成员。\",\"静态成员函数可以直接引用本类中的'静态成员'\",\"因为静态成员同样是属于类的，可以直接引用。\",\"在C++程序中，'静态成员函数主要用来访问静态数据成员，而不访问非静态成员'。\",\"如果一定要访问：假设a为Box类，在静态成员函数中\",\"cout<< a.width <<endl; //引用本类对象a中的非静态成员 cout<< height << endl; //若height已经声明为static，则是引用本类中的静态成员，合法 \",\"程序举例\",\"#include <iostream> using namespace std; class Student{ //定义student类 public: Student(int n,int a,float s):num(n),age(a),score(s){} //定义构造函数 void total(); //声明成员函数 static float average(); //声明静态成员函数 private: int num; int age; float score; static float sum; //静态数据成员sum static int count; //静态数据成员count }; void Student::total(){ //定义非静态成员函数 sum += score; //累加总分 count++; //累加已统计的人数 } float Student::average(){ //定义静态成员函数 return(sun/count); } float Student::sum = 0; //初始化静态数据成员 int Student::count = 0; //初始化静态数据成员 int main(){ Student stud[3]={ //定义对象数组并初始化 Student(1001,18,70), Student(1002,19,78), Student(1005,20,89) }; int n; cout<<\\\"please input the number of students:\\\"; cin>>n; //输入需要求签名多少学生的平均成绩 for (int i=0; i < n; i++) { //调用3次total函数 stud[i].total(); } cout<< \\\"the average score of \\\"<<n<<\\\" students is \\\"<< Student::average()<< endl; return 0; //调用静态成员函数 } \",\"说明\",\"在Student类中定义了两个静态数据成员sum（总分）和count（累计统计的学生人数），因为这两个数据成员的值是需要进行累加的，不从属于某一个单独的对象，而是多个对象元素共有的\",\"total时公用的成员函数，将一个学生的成绩累加到sum中。\",\"公用到成员函数可以引用本对象中的一般数据成员，也可以引用类中的静态数据成员\",\"average是静态成员函数，它可以直接引用私有的静态数据成员（不必加类名或者对象名）\",\"在main函数中，引用普通成员函数要加对象名，引用静态成员函数要加类名或者对象名\",\"注意对象的作用域对于静态成员函数引用非静态数据成员的影响：\",\"解决方法举例：在main外定义对象，则为全局；将对象作为参数，好处是实参可以改变\",\"只用静态成员函数引用静态数据成员，而不引用非静态数据成员，这样逻辑清晰，不易出错\"]},\"746\":{\"h\":\"纯虚函数与抽象类\"},\"747\":{\"h\":\"继承\",\"t\":[\"面向对象程序设计的四个主要特点：抽象、封住、继承、多态\",\"继承性是面向对象程序设计最重要的特征\",\"面向对象技术强调'软件的可重用性'（software reusability），Ｃ++语言提供了类的继承机制，解决了软件重用问题\"]},\"748\":{\"h\":\"1. 继承与派生的概念\",\"t\":[\"Ｃ++中可重用性通过'继承'(inheritance)机制实现\",\"在Ｃ++中继承就是在一个已存在的类的基础上建立一个新的类。\",\"已存在的类被称为'基类'（base class）或'父类'（father class）\",\"新建的类称为'派生类'（derived class）或'子类'（son class）\",\"'子类型'：必须是子类继承了父类所有的可继承特性（公有继承），才能说是子类型，否则是单纯的子类\",\"'类的继承'：一个新类从已有的类那里获得其他已有特性\",\"通过继承，一个新建子类从已有的父类获得父类的特性\",\"'类的派生'：从已有的类（父类）产生一个新的子类\",\"类的继承是用已有的类来建立专用类的编程技术\",\"类的'继承层次结构' 派生类继承了基类的所有数据成员和成员函数，并根据需要对成员做出必要的调整\",\"类的每一次派生，都继承了其基类的基本特征，同时又有区别和发展\",\"一个基类可以派生出多个派生类，每一个派生类又可以作为基类再派生出新的派生类\",\"因此基类和派生类都是相对而言的。一代一代的派生下去，就形成了类的'继承层次结构'\",\"继承具有'传递性'\",\"单继承：一个派生类只从一个基类派生（继承最简单的情况），形成一个树形结构\",\"多重继承：一个派生类有两个或多个基类的称为'多重继承'（multiple inheritance）\",\"理解：一个派生类还可以从多个基类派生（如马和驴子杂交骡），一个派生类可以有多个基类\",\"派生类和基类的关系：派生类是基类的具体化，基类是派生类的抽象\",\"基类综合了派生类的公共特征，派生类则在基类的基础上增加了某些特性，把抽象类变成具体的、实用的类型\"]},\"749\":{\"h\":\"2. 派生类的声明\",\"t\":[\"单继承举例\",\"class Student{ //声明一个类Student public: void display(){ cout<<\\\"num: \\\"<<num<<endl; cout<<\\\"name: \\\"<<name<<endl; cout<<\\\"sex: \\\"<<sex<<endl; } private: int num; string name; char sex; }; class Student1:public Student{ //声明基类是Student public: void display_1(){ cout<<\\\"age: \\\"<<age<<endl; //新增加的成员函数 cout<<\\\"address: \\\"<<address<<endl; } private: int age; //新增加的数据成员 int address; //新增加的数据成员 }; \",\"说明\",\"在定义第二个类时，Student1 是新建的类名，冒号后面的 Student 表示是已声明的基类\",\"在 Student 前的关键字public表示基类 Student 中的成员在派生类 Student1 中的'继承方式'\",\"基类名前有 public的称为公用继承（public inheritance），此外还有**private(私有继承)、protected(保护继承)**\",\"如果不写则默认'私有继承'\",\"声明派生类的一般形式为\",\"class 派生类名:[继承方式]基类名 { 派生类新增加的成员 }; //类声明分号结尾！！ \"]},\"750\":{\"h\":\"3. 派生类的构成\",\"t\":[\"派生类中的成员包括从基类继承过来的成员和自己增加的成员两大部分\",\"从基类继承的成员体系类派生类从基类继承而获得的共性\",\"新增加的成员体现了派生类的个性，（正是这些新增加的成员体现了派生类与基类的不同） \",\"派生类通过 添加新的成员 将其本身与基类区分开来\",\"构造一个派生类包括三部分工作（并不少简单的把基类的成员和派生类自己增加的成员加在一起成为派生类）\",\"从基类接收成员\",\"派生类把基类的全部成员（不包括构造函数和析构函数、友元特性、赋值运算符重载函数 = ）接收过来，没有选择余地，不能接收一部分放弃一部分\",\"在多次派生后会造成数据冗余问题，目前在Ｃ++中无法解决，所以要求慎重选择基类，考虑如何是派生类的结构更加合理\",\"有些类是专门为基类设计的，在设计时充分考虑到了派生类的要求\",\"调整从基类接收的成员\",\"接收基类成员无法选择，但是能够对成员调整\",\"例如通过指定继承方式调整基类成员在派生类中的访问属性\",\"可以在派生类中声明一个与基类成员同名的成员，则派生类中的新成员会覆盖基类的同名成员\",\"利用这种方法可以用新成员取代基类的成员\",\"注意\",\"如果是成员函数应该使函数名和函数的参数表（参数的个数和类型相同），如果不同则是函数的重载而不是覆盖\",\"在声明派生类是增加的成员\",\"增加的成员体现了派生类对基类的功能扩展，需要精心设计成员和函数\",\"在声明派生类时，一般还应该自己定义派生类的构造函数和析构函数（构造函数和析构函数不能从基类继承）\",\"综上所述\",\"派生类是基类定义的延续，通过对基类声明的延续，将一个抽象的基类转化为具体的派生类。因此，派生类是抽象基类的具体实现\"]},\"751\":{\"h\":\"4. 派生类成员的访问属性\",\"t\":[\"不同的继承方式决定了基类成员在派生类中的访问属性，一个成员在不同的派生层次中的访问属性可能是不同的\",\"有以下几种访问情况需要讨论\"]},\"752\":{\"h\":\"5. 区分 派生类对象 和 派生类 对基类成员的访问权限\",\"t\":[\"“派生类对象”对基类成员的访问权限：\",\"对于公有继承，只有基类的公有成员可以被“派生类对象”访问，其他(保护和私有)成员不能被访问。\",\"对于私有继承和保护继承，基类中所有成员都不能被“派生类对象”访问。\",\"“派生类”对基类中成员的访问权限：\",\"对于公有继承，基类中的公有成员和保护成员可以被“派生类”访问，而基类中的私有成员不能被访问。\",\"对私有继承和保护继承，也是基类中的公有成员和保护成员可以被“派生类”访问，而基类中的私有成员不能被访问。\"]},\"753\":{\"h\":\"继承与组合\"},\"754\":{\"h\":\"自定义数据类型\"},\"755\":{\"h\":\"枚举类型\",\"t\":[\"如果一个变量只能有几种可能的值，可以定义为枚举类型 enumeration\",\"枚举指的是将变量的值一一列举出来，变量的值只能在列举出来的值的范围内\",\"声明\",\"enum 枚举类型名 {枚举常量表} \",\"例：\",\"enum weekday{sun,mon,tue,wed,thu,fri，sat,sun}; \",\"其中花括号内部的称为 枚举元素，或者 枚举常量\",\"定义\",\"在声明了枚举类型之后，可以用它来定义变量\",\"weekday workday,week_end; \",\"也可以在声明枚举类型的同时定义枚举变量\",\"enum weekday{sun,mon,tue,wed,thu,fri，sat,sun}workday,week_end; \",\"赋值\",\"workday = mon; week_end = sun; \",\"枚举变量的值只能是所列出的枚举常量的值之一\",\"说明\",\"枚举元素按常量处理，故称枚举常量\",\"​ 不是变量，不能赋值\",\"枚举元素作为常量，是有值的，值是一个整数\",\"​ 编译系统按照定义时的顺序，对它们赋值为 0，1，2，3…………\",\"​ workday = mon;\",\"​ 把枚举常量 mon 的值赋给枚举常量 workday，workday 的值等于 1，这个值是可以输出的\",\"​ cout<<work; //输出整数为1，而不是 mon\",\"​ 也可以在声明枚举类型时，自己定义指定枚举元素的值\",\"​ enum weekday{sun = 7,mon = 1…………};\",\"枚举值可以用来做比较判断，按照整型比较规则比较\",\"不能把一个整数直接赋给枚举变量，枚举变量只能接受枚举类型数据\",\"workday = tue; //正确 workday = 2; //错误❌，类型不匹配 \",\"​ 可以强制类型转换\",\"workday = (weekday)2; workday = weekday(2); \"]},\"756\":{\"h\":\"结构体类型\",\"t\":[\"在一个组合项中包含若干个类型不同（也可不同）数据项\",\"数据类型————结构体\",\"1、声明\",\"struct 结构体类型名{ 成员表 }; //⚠️分号 \",\"说明：\",\"结构体类型名作为结构体类型的标准\",\"声明一个结构体类型时，对其各个成员都要声明 \",\"typename 成员名;\",\"成员也称为结构体中的 域 field，成员表 也称为 域表 \",\"C++中成员包括 数据成员 和 函数成员\",\"TIP\",\"声明的是结构体类型\",\"然后再用结构体类型声明结构体变量\"]},\"757\":{\"h\":\"定义\",\"t\":[\"先声明结构体类型，再定义变量\",\"struct Student{ int mum; char name[20]; char sex; int age; float score; char addr[30]; }; //注意！⚠️有分号 Student student1,student2; //结构体类型名 结构体变量名 \",\"声明类型的同时定义变量\",\"struct Student{ ……………… }student1,student2; \",\"TIP\",\"提倡使用1的定义方法 ，便于不同函数甚至不同文件能使用所声明的结构体\",\"或者将结构体类型集中到一个头文件中\",\"2方法适用于简单程序\",\"结构体的成员也可以是结构体变量\",\"struct Date{ ………… }; struct Student{ ………… Date birthday; //Date 是结构体类型，birthday是 Date 类型成员 p193 }student1,student2; \",\"对结构体变量成员的引用：\",\"student1.brithday.yeam = 1; student1.birthday.month = 1; \",\"使用两个成员运算符\",\"定义结构体时，结构体名称缺省\",\"​ 同时定义结构体变量sum1，sum2。但后面不可再定义结构体变量！\",\"struct{ char aa; char bb; char cc; int dd; }sum1, sum2; struct sum3; // 这里编译器报错 \"]},\"758\":{\"h\":\"初始化\",\"t\":[\"定义时赋初值\",\"struct Student{ ………… }student1 = {1001,\\\"zhang\\\",'m'}; \",\"声明与定义分开，在定义时赋初值\",\"Student student2 = {………………}; \",\"引用结构体变量\",\"student1 = student2; \",\"将一个结构体变量的值赋给另一个具有相同结构的结构体变量\",\"成员对应赋值\",\"结构体变量名.成员名; Student1.num = 10010; \",\"使用成员运算符 “.” 进行赋值\",\"'成员运算符'所有运算符中等级最高\"]},\"759\":{\"h\":\"结构体数组\",\"t\":[\"与数值型数组不同，每个数组元素都是一个结构体类型数据，它们都分别包括各个成员项\",\"​ 举例，对候选人得票统计，有三个候选人，从键盘输入十个投票结果，输出获胜者\",\"#include <iostream> #include <string> using namespace std; struct person{ string name; int count; }; int main(){ person leader[3] = {\\\"a\\\",0,\\\"b\\\",0,\\\"c\\\",0}; //定义 person 类型数组 int i,j; string vote; for ( i = 0; i < 10; i++) { cin >> vote; for ( j = 0; j < 3; j++) { if (vote == leader[j].name) { leader[j].count++; } } cout << endl; } for ( i = 0; i < 3; i++) { cout << leader[i].name <<\\\": \\\" << leader[i].count <<endl; } return 0; } \"]},\"760\":{\"h\":\"指向结构体变量的指针\",\"t\":[\"该变量所占据的内存段的起始地址\",\"通过指向结构体变量的指针引用结构体变量中的成员\",\"例:\",\"Student stu; Student *p = &stu; ……………… cout <<(*p).num<<…………… \",\"WARNING\",\"括号不能省略！否则成员运算符 “.” 的优先级高于 * ，*p.num 为结构体成员的地址\",\"指向运算符：->\",\"C++提供了指向运算符表示指向结构体变量的指针的指向关系\",\"一下三种方式等价\",\"结构体变量名.成员名;\",\"stu.num; \",\"(*p).成员名;\",\"(*p).num; \",\"p->成员名;\",\"p->num; \",\"指向成员运算符的优先级也非常高！\",\"p->n; p->n++; //等价于 (p->n)++ ++p->n; //等价于 ++(p->) \"]},\"761\":{\"h\":\"链表\",\"t\":[\"​ 见指针中链表部分\"]},\"762\":{\"h\":\"结构体变量型数据作为函数参数\",\"t\":[\"用结构体变量名作为函数参数\",\"值传递的方式，将结构体变量所占有的内存单元的全部内容顺序传给实参\",\"形参也必须是相同类型的结构体变量\",\"程序直观\",\"占用开销大，一般不采用这种方法\",\"函数声明和定义举例：\",\"void print(Student); void print(Student stu){ …… } \",\"用指向结构体变量的指针作实参\",\"采用指针变量作为实参和形参，在调用函数时形参只占用四个字节\",\"效率高，时间和内存开销少\",\"程序不如1直观\",\"函数声明和定义举例：\",\"void print(Student *); void print(Student * ptr){ …… } \",\"用结构体变量的引用作为形参，作为实参（结构体变量名）的别名\",\"实参为结构体 Student 类型变量，形参为引用\",\"实参传递的是地址给形参 \",\"效率高\",\"可读性高\",\"函数声明和定义举例：\",\"void print(Student&); void print(Student & stu){ …………} \"]},\"763\":{\"h\":\"虚函数与动态多态性\"},\"764\":{\"h\":\"利用虚函数实现动态多态性\"},\"765\":{\"h\":\"虚函数\"},\"766\":{\"h\":\"引入\",\"t\":[\"回顾\",\"在同一类中不能定义两个名字相同，参数个数和类型都相同的函数（重复定义）。\",\"在类的继承结构中，在不同的层次中可以出现名字相同，参数个数类型都相同而功能不同的函数。\",\"这是合法的，编译系统按照'同名覆盖'的原则决定调用对象。\",\"如果想要调用基类的同名函数，需要用 基类名加'域运算符' 区分同名函数，例\",\"cy1.Circle::area(); \",\"对于 同名数据成员：\",\"⚠️当派生类中的成员变量和基类中同名，那么与函数同名一样，基类中的同名变量会被隐藏。\",\"也就是通过派生类对象无法访问基类的同名变量\",\"能否用同一个调用形式来调用派生类和基类的同名函数？？\",\"在程序中不是通过对象名去调用不同派生层次的同名函数\",\"而是通过 指针 调用！！\",\"调用前临时将指针变量 pt 赋予不同的值\"]},\"767\":{\"h\":\"虚函数概念\",\"t\":[\"基类声明函数是虚拟的，并不是实际存在的函数，然后在派生类中才正式定义此函数\",\"在程序运行期间，用指针指向某一派生类对象\",\"这样就能调用指针指向的派生类对象中的函数，而不会调用其他派生类中的函数\"]},\"768\":{\"h\":\"虚函数的作用\",\"t\":[\"允许在派生类中重新定义与基类同名的函数，\",\"并且可以通过基类指针或引用来访问基类和派生类中的同名函数\",\"类族\",\"如果基类有多个派生类，每个派生类又产生新的派生类，形成了同一基类的类族\"]},\"769\":{\"h\":\"举例\",\"t\":[\"#include <iostream> #include <string> using namespace std; class student{ public: student(int n,string nam,float s); //声明构造函数 void display(); //声明输出函数 protected: //受保护的成员，派生类可以访问 int num; string name; float score; }; student::student(int n,string nam,float s){ num = n; name = nam; score = s; } void student::display(){ cout<<\\\"num: \\\"<<num <<\\\"\\\\nname: \\\"<<name <<\\\"\\\\nscore: \\\"<<score <<\\\"\\\\n\\\\n\\\"; } class graduate:public student{ public: graduate(int,string,float,float); //声明构造函数 void display(); //声明输出函数，与基类的输出函数同名 private: float wage; }; graduate::graduate(int n,string nam,float s,float w):student(n,nam,s),wage(w){} void graduate::display(){ cout<<\\\"num: \\\"<<num <<\\\"\\\\nname: \\\"<<name <<\\\"\\\\nscore: \\\"<<score <<\\\"\\\\nwage: \\\"<<wage<<endl; } int main(){ student stud1(1001,\\\"LI\\\",33.3); graduate grad1(2002,\\\"gan\\\",12.2,1222); student *pt = &stud1; pt->display(); pt = &grad1; pt->display(); return 0; } \",\"​ 运行结果：没有出现 wage 的数据！！！\",\"​ 程序分析：\",\"​ 用指向父类的指针输出父类数据后，将指针指向派生类，试图输出 grad1 的全部数据成员\",\"​ 但是只输出类 grad1 中基类的数据成员\",\"​ 说明没有调用 grad1 中的 display 函数（基类指针指向的是派生类对象中的基类部分）\",\"​\",\"其他方法：（不使用虚函数）\",\"1、通过对象名调用 display 函数，例 grad1.display()\",\"按照同名覆盖的方法，如果要调用基类的 display()\",\"grad1.sutdent::display(); \",\"2、定义一个指向派生类的指针 p，再有 p->display()\",\"3、定义指向基类的指针 p 指向派生类，调用 p->display()\",\"则只能调用其中的继承的基类的 display() 函数，而不是派生类的 display()\",\"这些方法都不方便\",\"如果派生类中改名为如 dispaly1，也不行，因为指向的派生类中的基类没有此成员函数\",\"​\",\"TIP\",\"​ 问题：如何用同一种方式去调用同一类族中不同类的所有同名函数？？\",\"​ 解决方法：使用虚函数\",\"​ 在基类 student 的 display 函数声明前加上关键字 virtual\",\"​ virtual void dispaly()\",\"​ 用同一种调用形式 pt->display()，且 pt 是同一个基类的指针，调用同一类族的不同虚函数\",\"​ 这些就实现了对同一消息不同对象有不同的响应方式（多态性）\",\"4、虚函数的作用\",\"​ 1、原理\",\"​ 基类中的函数被声明为虚函数，在声明派生类时被重载\",\"​ 派生类的同名函数取代了基类中的虚函数\",\"​ 因此在使用基类指针指向派生类对象后，调用 display 函数时调用了派生类的 display 函数\",\"​ 注意⚠️：只有通过 virtual 声明了函数为虚函数后才行，试图通过基类指针调用派生类的非虚函数是不行的\",\"​ 2、作用\",\"​ 其他方式的缺点\",\"​ 类的继承目的是保留基类的特性，但是从基类继承的某些成员函数无法满足新的需要\",\"​ 可以使函数名字不同，如果派生类过多也不方便\",\"​ 如果名字相同会出现同名覆盖\",\"​ 虚函数\",\"​ 把基类的某个成员函数声明为虚函数之后，允许在其派生类中对函数重新定义，赋予新的功能\",\"​ 并且可以通过指向基类的指针指向同一类族中不同类的对象，从而调用其中的同名函数\",\"​\",\"由虚函数实现的多态性实质就是\",\"​ 同一类族中不同类的对象，对同一函数调用做出不同的响应\",\"5、虚函数使用方法\",\"​ 1、在基类中用 virtual 声明成员函数为虚函数，在类外定义虚函数时，不必再加 virtual\",\"​ 2、在派生类中重新定义此函数\",\"​ 函数名、函数类型、函数参数个数和类型必须与基类的虚函数相同\",\"​ 根据派生类的需要重新定义函数体\",\"​ 当一个成员函数被声明为虚函数后\",\"​ 派生类中的同名函数都自动成为虚函数\",\"​ 派生类中重新声明该虚函数时，可加可不加 virtual（为了易读性，最好每一层都加）\",\"​ 如果派生类中没有对基类的虚函数重新定义：\",\"​ 派生类简单地继承'直接基类的虚函数'\",\"​ 3、定义一个指向基类的指针变量，并使它指向同一类族中需要调用该函数的对象\",\"​ 4、通过该指针变量调用此虚函数，调用的是指针变量指向对象的同名虚函数\",\"​ 5、在什么情况下声明虚函数？？\",\"WARNING\",\"只能用 virtual 声明类的成员函数，而不能声明类外的普通函数为虚函数\",\"一个成员函数被声明为虚函数后，在同一类族中的类不能再定义一个 非virtual 的但与该虚函数具有相同参数和函数返回值类型的同名函数类\",\"​ 2、考虑一下几点\",\"​ 1、看成员函数所在的类是否会作为基类，在类继承后有无可能被更改功能\",\"​ 2、如果成员函数在类被继承后功能无需修改，或者派生类用不到该函数（不要把基类所有函数都声明为虚函数）\",\"​ 3、考虑对成员函数的调用是通过对象名、基类指针 还是 引用 去访问\",\"​ 如果通过 基类指针 或者 引用访问的，应当声明为虚函数\",\"​ 4、有时定义虚函数时并不定义函数体（纯虚函数）\",\"6、总结\",\"​ 通过虚函数与指向基类对象的指针变量的配合使用，就能实现动态的多态性\",\"​ 如果想调用同一类族中不同类的同名函数，只要现用基类指针指向该类对象即可\",\"​ 如果指针先后指向同一类族中不同类的对象，就能不断地调用指向对象中的同名函数\",\"​ 如果在基类中定义的'非虚函数'在派生类中重新定义\",\"​ 如果用'基类指针'调用该成员函数，则会调用对象中基类部分的成员函数\",\"​ 如果用'派生类指针'调用该成员函数，系统会调用派生类对象中的成员函数\",\"​ 这使用的是不同类型的指针，而不是多态性！！\",\"​ 函数重载：'横向重载'同一层次上的同名函数，函数首部不同\",\"​ 虚函数：'纵向重载'不同派生层次上的同名函数，虚函数函数首部相同！\",\"使用虚函数会有空间开销！！\",\"当一个类带有虚函数时，编译系统会为该类增加一个 虚函数表 VFT，是一个指针数组\",\"（用sizeof可以知道带虚函数的类字节数更多），\",\"存放每个虚函数的入口地址\",\"系统在进行动态关联时的时间开销是很少的，因此多态性是高效的\"]},\"770\":{\"h\":\"静态关联与动态关联\",\"t\":[\"关联：\",\"​ 确定调用的具体对象的过程称为'关联' binding（联编、束定、编联）\",\"静态关联：\",\"​ 函数重载和通过对象名调用的虚函数，在编译时就可以确定其调用的虚函数属于哪个类，这种过程被称为'静态关联' （static binding）\",\"​ 例如用 inline 声明的函数\",\"​ 由于是在运行前进行关联的，又称为'早期关联'（early binding）\",\"动态关联：\",\"​ 定义基类指针指向派生类并调用其中的虚函数时，编译系统只做静态的语法检查，无法确定 pt->dispaly() 调用的是哪个对象\",\"​ 因此在运行阶段处理，在运行阶段把虚函数和类对象绑定的过程称为'动态关联'（dynamic binding）\",\"​ 动态的多态性，运行阶段的多态性\",\"​ 由于是在编译之后的运行阶段进行的，因此也被称为'滞后关联'late binding\",\"​ 动态联编的条件：\",\"​ 1、被调用的成员函数是虚函数\",\"​      2、用指针或者引用调用虚函数\"]},\"771\":{\"h\":\"虚析构函数\"},\"772\":{\"h\":\"输入与输出\"},\"773\":{\"h\":\"标准输入输出流\"},\"774\":{\"h\":\"标准输出流\",\"t\":[\"cout、ceer、clog流\"]},\"775\":{\"h\":\"cout 流对象\",\"t\":[\"cout（console output）意思是在控制台输出\",\"cout不是Ｃ++预定义的关键字，它是 ostream 流派生类的对象，在 iostream 头文件中定义\",\"cout流中的数据是用流插入运算符 << 顺序加入的\",\"cout流是容纳数据的载体，不是一个运算符\",\"用cout<<输出标准类型的时候，系统已经定义了重载函数，不必考虑什么类型\",\"对用用户自定义类型，需要自己重载\",\"cout流在内存内开劈了一个缓冲区，用来存放流中的数据\",\"当向流中插入一个endl时，无论缓冲区是否已满，立即输出，再插入一个换行符，并刷新流（清空缓冲区）\"]},\"776\":{\"h\":\"cerr 流\",\"t\":[\"概念\",\"cerr流时'标准错误流'\",\"与显示器关联\",\"向标准错误设备显示错误信息\",\"比较\",\"与cout用法类似，不同点：\",\"cout除了在显示器上显示，还能重新定向输出到磁盘文件\",\"cerr流中的信息只能在显示器输出；\",\"用处\",\"避免出错信息输出到文件中，在显示器上即时输出，用cerr流来确保\",\"cerr流中的信息时用户根据需要指定的。\"]},\"777\":{\"h\":\"clog 流对象\",\"t\":[\"clog 也是标准错误流，作用与cerr相同\",\"不同点：\",\"cerr不经过缓冲区直接向显示器输出\",\"clog中的信息放到缓冲区中，缓冲区满或者遇到 endl 之后才向显示器输出。\",\"​\",\"​\"]},\"778\":{\"h\":\"标准类型数据的格式输出\",\"t\":[\"1、使用控制符控制输出格式\",\"需要头文件\",\"#include <iomanip>\",\"2、用流对象的成员函数控制输出格式\"]},\"779\":{\"h\":\"用流成员函数 put 输出字符\",\"t\":[\"1、概念\",\"2、形式\"]},\"780\":{\"h\":\"标准输入流\",\"t\":[\"cin流\",\"在头文件iostream中定义的 cin、cout、cerr、clog中，后三个是输出流\",\"cin是输入流\",\"​\"]},\"781\":{\"h\":\"对ASCII文件的操作\",\"t\":[\"如果文件的每一个字节均以ASCII代码形式存放数据，即每一个字节存放一个字符，这个文件就是ASCII文件（或称字符文件）\",\"1、用流插入运算符“<<”和流提取运算符“>>”输入输出标准类型的数据\",\"<< 和 >> 都已经在 iostream中被重载为能用于 ostream 和 istream类对象的标准类型的输入输出\",\"且 ifstream 和 ofstream分别是 istream和 ostream 类的派生类，因此它们继承了公用的重载函数，可以同 cincout一样对标准设备读写\",\"2、用文件流的 put ，get，getline 等成员函数进行字符的输入输出\",\"3、几个例子\",\"1、有一个整型数组，含十个元素，从键盘输入 10 个整数给数组，将此数组送到磁盘文件中存放\",\"#include <fstream> using namespace std; int main(){ int a[10]; ofstream outfile(\\\"f1.dat\\\",ios::out); //定义文件流，打开磁盘文件 f1.dat if (!outfile) { //如果打开失败，outfile 返回 0 cerr << \\\"打开文件失败！\\\"<<endl; exit(1); } cout <<\\\"enter 10 integer numbers:\\\"<<endl; for (int i = 0; i < 10; i++) { cin >>a[1]; outfile <<a[i]<<\\\" \\\"; //向磁盘文件 f1.dat 输出数据 } outfile.close(); //关闭磁盘文件 f1.dat return 0; } \",\"程序分析：\",\"#include 指令包含了头文件 fstream，这是由于在程序中用到了文件流类 ofstream 是在头文件 fstream 中定义的\",\"#include <fstream> 中包含了头文件 iostream 所以可以用 coutcin，不用重复写\",\"程序中用 ofstream 类定义文件流对象 outfile \",\"调用结构函数打开磁盘文件 f1.dat，它是输出文件，只能向它写入数据，不能从中读取数据\",\"ios::out为默认格式，可以省略\",\"ofstream outfile(\\\"f1.dat\\\",ios::out); ofstream outfile(\\\"f1.dat\\\"); \",\"文件打开结果\",\"如果打开成功，\",\"文件流对象 outfile 返回值为非0值\",\"如果打开失败，\",\"则返回值为 0，(!outfile) 为真，输出错误信息\",\"调用系统函数 `exit()`` \",\"exit()函数的参数可以为任意整数（可能需要头文件 stdlib.h）\",\"在程序中用提取运算符 << 从键盘逐个输入 10 个整数\",\"​ 向磁盘文件输出，输出语句为\",\"outfile<<a[i]<<\\\" \\\"; \",\"​ 输出语句与向显示器输出类似，把标准输出流对象 cout 换成了文件输出流对象 outfile\",\"2、从上例中建立的文件 f1.dat 中读入十个数据放在数组中，找出并输出这十个数字中最大的和它的编号\",\"#include <fstream> using namespace std; int main(){ int a[10],max,i,order; //定义输入文件流对象，以输入方式打开磁盘文件 ifstream infile(\\\"f1.dat\\\",ios::in|ios::nocreate); if (!infile) { cerr<<\\\"open error!\\\"<<endl; exit(1); } for (i = 0; i < 10; i++) { //对字符逐个处理，直到遇到 /0 为止， /0 的 ASCII 序号为 0 infile>>a[i]; //从磁盘文件中读入十个整数到a数组中 cout<<a[i]<<'\\\\t'<<endl; //在显示器上顺序显示10个数 } cout<<endl; max = a[0]; order = 0; for (i = 0; i < 10; i++) { if (a[i] > max){ max = a[i]; order = i; } } cout<<\\\"max= \\\"<<max<<endl <<\\\"order= \\\"<<order<<endl; infile.close(); return 0; } \",\"3、从键盘读入一行字符，把其中的字母字符依次存放到磁盘文件 f2.dat 中，再把从磁盘文件中读入程序，将小写字母改成大写，放到磁盘文件 f3.dat 中\",\"#include <iostream> using namespace std; //定义函数从键盘读入一行字符，并将其中的字母存入磁盘文件 void save_to_file(){ //定义输出文件流对象 outfile，以输出的方式打开磁盘文件 f2.dat ofstream outfile(\\\"f2.dat\\\"); if (!outfile) { cerr<<\\\"Open f2.dat error!\\\"<<endl; exit(1); } char c[80]; cin.getline(c,80); for (int i = 0; c[i] != 0; i++) { //对字符逐个处理，直到遇到 /0 为止， /0 的 ASCII 序号为 0 if (c[i] >= 65 && c[i] <= 90 ||c[i]>= 97 && c[i] <= 122) { //如果是字母字符 outfile.put(c[i]); //将字母字符存入磁盘文件 f2.dat cout <<c[i]; //同时送显示器显示 } } cout<<endl; outfile.close(); //关闭 f2.dat //从磁盘文件f2.dat 读入字母字符，将其的小写字母字母改为大写字母，再存入 f3.dat void get_from_file(){ char ch; ifstream infile(\\\"f2.dat\\\",ios::in|ios::nocreat); //定义输入文件流 infile，以输入方式打开磁盘文件 f2.dat if (!infile) { cerr<<\\\"open f2.dat error!\\\"<<endl; exit(1); } ofstream outfile(\\\"f2.dat\\\"); //定义输出流文件，以输出方式打开磁盘文件 f3.dat if (!outfile) { cerr<<\\\"open f3.dat error!\\\"<<endll exit(1); } while (infile.get(ch)) { //当读取字符成功，指向下面的复合语句 if (ch >= 97 && ch <= 122) { //判断是否为小写字母 ch = ch -32; //将小写字母改为大写字母 outfile.put(ch); //将该大写字母存入磁盘文件 f3.dat cout << ch; //同时在显示器输出 } } cout << endl; infile.close(); //关闭磁盘文件 f2.dat outfile.close(); //关闭磁盘文件 f3.dat } int main(){ save_to_file(); //调用函数，从键盘读取一行字符，并将其存入磁盘文件 f2.dat get_from_file(); //调用函数，从 f2.dat 读入字母字符，改为大写字母，再存入 f3.dat return 0; } \",\"程序分析：\",\"用文件流的 putgetgetline 等成员函数实现输入与输出\",\"cin 和 infile 都是 istream 类的对象\",\"因此在之前介绍的成员函数都可以对磁盘文件输入输出\",\"区别在于对标准设备显示器输入用 cin ，对磁盘文件输出时用 文件流对象\",\"​\",\"从显示器上看 ASCII 文件的内容\",\"在widows系统下，从记事本打开\",\"用一个函数将磁盘文件内容读入内存，再输出到显示器\",\"#include <fstream> using namespace std; void display_file(char *filename){ ifstream infile(filename,ios::in|ios::nocreat); if (!infile) { cerr<<\\\"open error!\\\"<<endl; exit(1); } char ch; while (infile.get(ch)) { cout.put(ch); } cout<<endl; infile.close(); } int main(){ display_file(\\\"f3.dat\\\"); return 0; } \"]},\"782\":{\"h\":\"对二进制文件的操作\",\"t\":[\"1、概念\",\"​ 将内存中数据储存形式不加转换地传送到磁盘文件中\",\"​ 又称为内存数据的映像文件\",\"​ 对二进制文件的操作也要先打开文件，用完之后关闭\",\"​ 打开时用 ios::binary 指定以二进制形式传送和储存\",\"​ 与ASCII不同：\",\"​ 二进制文件除了可以作为输入文件或输出文件\",\"​ 还可以'既能输入又能输出的文件'\",\"2、用成员函数 read 和 write 读写二进制文件\",\"​ 1、函数原型\",\"istream& read(char *buffer,int len); istream& write(const char * buffer,int len); \",\"字符指针 buffer 指向内存中的一段储存空间\",\"len 是读写的字节数。\",\"​ 2、调用\",\"a.write(p1,50); \",\"a是输出文件流对象\",\"write函数将字符指针 p1 指向的单元开始的50个字节内容不加转换的写到与 a 关联的磁盘文件中。\",\"b.read(p2.30); \",\"b是输入文件流对象\",\"read函数从b所关联的磁盘文件中，读入30个字节（或遇EOF）解释\",\"存放在字符指针 p2 指向的一段空间内\",\"​\"]},\"783\":{\"h\":\"文件与文件流\"},\"784\":{\"h\":\"概念\",\"t\":[\"文件（file）一般指储存在外部介质上数据的集合\",\"操作系统以文件为单位对数据进行管理\"]},\"785\":{\"h\":\"分类\",\"t\":[\"对于用户，常用的文件分为\",\"程序文件（program file）\",\"​ 如C++源程序文件.cpp；目标文件.obj；可执行文件.exe\",\"数据文件（data file）\",\"​ 程序中输入和输出的对象就是数据文件\",\"根据文件中数据的组织形式\",\"ASCII文件：\",\"文本文件（text）或字符文件，它的每一个字符放一个ASCII代码\",\"可以直接在屏幕打印或者显示，直观便于阅读，但是占有内存多，花费转换时间\",\"如果是为了显示和打印供阅读，则用ASCII码形式输出，得到的ASCII文件可直接在显示屏观看\",\"二进制文件：\",\"内部格式文件或字节文件，把内存中的数据按其在内存中的储存形式原样输出到磁盘上存放\",\"节省外存空间，不需要转换时间，但是一个字节并不对应一个字符，不能直接显示文件中的内容\",\"如果在程序运行过程中某些中间结果数据暂时保存在磁盘中，以后要输入到内存的，用二进制文件保存\",\"其他\",\"对于字符信息，在内存中是以ASCII代码形式存放的，因此无论用ASCII文件输出和用二进制文件输出，其数据形式是一样的\",\"对于数值数据则不同，ASCII一个字符一个字节，而对于整数如 100000 按内部格式输出则四个字节\"]},\"786\":{\"h\":\"I/Ｏ功能\",\"t\":[\"Ｃ++提供流低级的I/Ｏ功能和高级I/Ｏ功能\"]},\"787\":{\"h\":\"高级的I/Ｏ：\",\"t\":[\"把若干个字节组合为一个有意义的单位（整数、字符串、用户自定义类型等），然后以ASCII字符形式输入和输出\",\"例如，把数据从内存输送到显示器输出：\",\"先将内存中的数据转换为ASCII字符，然后按各自的数据类型输出\",\"优点：这种面向类型的输入输出对于用户方便\",\"缺点：对于传输大容量文件，由于数据格式的转换，速度较慢，效率不高\"]},\"788\":{\"h\":\"低级的I/Ｏ：\",\"t\":[\"以字节为单位输入和输出，在输入和输出时不进行数据格式的转换，以二进制形式进行\",\"通常在内存和设备之间传输一批字节\",\"优点：输入输出速度快、效率高。一般大容量文件传输用无格式转换的I/Ｏ\",\"缺点：不直观，难以判定数据内容\"]},\"789\":{\"h\":\"文件流与文件流对象\",\"t\":[\"Ｃ++的输入输出是由对象实现的，❓如cin和cout就是流对象\",\"由于cin和cout已在iostream头文件中定义，用户不用自己定义\",\"cin和cout只能处理Ｃ++中以标准设备为对象的输入输出，而不能处理以磁盘文件为对象的输入输出\",\"而在用磁盘文件时，由于情况各异，无法事先统一定义，必须由自己定义 \",\"因此另外定义以磁盘文件为输出对象的输入输出流对象\"]},\"790\":{\"h\":\"文件流\",\"t\":[\"以外存文件为输入输出对象的数据流\",\"输出文件流是从内存流向外存文件的数据\",\"输入文件流是从外存文件流向内存的数据\",\"每一个文件流都有一个内存缓冲区与之对应\",\"区分文件流与文件\",\"文件流本身不是文件，而只是'以文件为输入输出对象的流'\",\"若要对磁盘文件输入输出，就必须通过文件流来实现\"]},\"791\":{\"h\":\"用于文件操作的文件类\",\"t\":[\"ifstream类\",\"从istream类派生。用来支持从磁盘文件的输入\",\"ofstream类\",\"从ostream类派生。用来支持向磁盘文件的输出\",\"fstream类\",\"从iostream类派生。用来支持对磁盘文件的输入输出\",\"要以磁盘文件为对象进行输入输出，必须定义一个文件流类的对象，通过文件流对象将数据从内存输出到磁盘文件，或者通过文件流对象从磁盘文件将数据输入到内存\",\"对磁盘文件的操作时通过文件流对象（而不是cin和cout）实现的\",\"TIP\",\"文件流对象由'文件流类'定义，而不是istream和ostream类定义\"]},\"792\":{\"h\":\"文件的打开与关闭\"},\"793\":{\"h\":\"打开磁盘文件\",\"t\":[\"打开（open）文件是指在文件读写之前做的必要准备工作，包括：\",\"为文件流对象和指定的磁盘文件建立关联，以便文件流流向指定的磁盘文件\",\"指定文件的工作方式（输入还是输出，ASCII文件还是二进制文件）\",\"实现方法：\",\"调用文件流的成员函数open\",\"ofstream outfile; //定义ofstream类（输出文件流类）对象outfile outfile.open(\\\"f1.dat\\\",ios::out); //使文件流与f1.dat文件建立关联 \",\"说明\",\"第二行是调用输出文件流的成员函数 open() 打开磁盘文件 f1.dat ,并指定它为输出文件，文件流对象 outfile 将向磁盘文件 f1.dat 输出数据。\",\"ios::out 是I/Ｏ模式的一种，表示以输出方式打开一个文件（此时 f1.dat 是一个输出文件，接收从内存输出的数据）\",\"调用成员函数 open()的一般形式为\",\"文件流对象.open(磁盘文件名，输入输出方式); \",\"磁盘文件名可以包括路径，如\\\"c:\\\\\\\\new\\\\\\\\f1.dat\\\",如果缺省路径，则默认当前目录下的文件\",\"WARNING\",\"要用 \\\\ 转义字符！！！！\",\"在定义文件流对象时指定参数\",\"在声明文件流类时定义了带参数的构造函数，其中包含了打开磁盘文件的功能。\",\"因此可以在定义文件流对象的时候指定参数，调用文件流类的构造函数实现打开文件的功能，如\",\"ofstream outfile(\\\"f1.dat\\\",ios::out); //作用与open函数相同 \",\"输入输出方式见==??????== ，输入输出方式是在 ios 类中定义的，它们是枚举常量\",\"方式\",\"作用\",\"ios::in\",\"以输入方式打开文件。\",\"ios::out\",\"以输出方式打开文件（这是默认方式），如果已有此名字的文件，则将其原有内容全部清除\",\"ios::app\",\"以输出方式打开文件，写入的数据添加在文件末尾\",\"ios::ate\",\"打开一个已有文件，文件指针指向文件末尾\",\"ios::trunc\",\"打开一个文件，如果文件已存在，则删除其中全部数据；如果文件不存在，则建立新文件。如已指定了 ios::out 方 式，而未指定 ios::app、ios::ate、ios::in，则同时默认此方式\",\"ios::binary\",\"以二进制打开一个文件，如果不指定此方式则默认为ASCII 方式\",\"ios::nocreate\",\"打开一个已有文件，如果文件不存在则打开失败。no create 表示不能建立新文件\",\"ios::noreplace\",\"如果文件不存在则建立新文件，如果文件已经存在则操作失败，no replace 表示不准更新现有文件\",\"ios::in| ios::out\",\"以输入和输出方式打开文件，文件可读可写\",\"ios::out |ios::binary\",\"以二进制方式打开一个输出文件\",\"ios::in |ios::binary\",\"以二进制方式打开一个输入文件\",\"说明：\",\"新版本的 I/Ｏ 库中不提供 ios::nocreat 和 ios::noreplace\",\"文件指针\",\"每一个打开的文件都有一个文件指针，该指针的初始位置由 I/Ｏ 方式指定，\",\"每次读写都从文件指针的当前位置开始\",\"每读入一个字节，指针就后移一个字节\",\"当文件指针移到最后，就会遇到文件结束（'文件结束符'也占一个字节，值为 -1），此时流对象的成员函数 eof 的值为非0（一般设为1），表示文件结束了\",\"可以用‘位或’运算符 | 对输入输出方式进行组合，除了上面表中的例子之外\",\"ios::in|ios::nocreat //打开一个输入文件，若文件不存在则返回打开失败的信息 ios::app|ios::nocreat //打开一个输出文件，在文件结尾接着写数据，若文件不存在则返回一个打开失败信息 ios::out|ios::noreplace //打开一个新文件作为输出文件，如果文件已经存在则返回打开失败 ios::in|ios::out|ios::binary //打开一个二进制文件，可读可写 \",\"但是不能组合互相排斥的方式\",\"如果打开操作失败，open 函数的返回值为 0；如果是调用构造函数的方式打开文件的，则流对象的值为 0，以此测试打开是否成功\",\"if (outfile.open(\\\"f1.dat\\\",ios::app)== 0) { cout <<\\\"打开错误\\\"; } \",\"​ 或者\",\"if (!outfile) { cout <<\\\"打开文件错误\\\"; } \"]},\"794\":{\"h\":\"关闭磁盘文件\",\"t\":[\"关闭文件用成员函数 close，如\",\"outfile.close(); //将输出文件流所关联的磁盘文件关闭 \",\"关闭文件实际上是接触该磁盘文件与文件流的关联，原来设置的工作方式也失效\",\"这样就不能通过文件流对文件进行输入和输出\",\"这时可以将文件流与其他磁盘文件建立关联，通过文件流对新的文件进行输入或输出，如\",\"outfile.open(\\\"f2.dat\\\",ios::app|ios::nocreat); \",\"此时文件流 outfile与 f2.dat 进行了关联，并指定了 f2.dat 的工作方式\"]},\"795\":{\"h\":\"运算及流程控制\"},\"796\":{\"h\":\"表达式\"},\"797\":{\"h\":\"算术运算与算术表达式\"},\"798\":{\"h\":\"基本算术运算\",\"t\":[\"​ +-*/%\",\"说明\",\"两个整型相除除不尽，一般采用向零取整？？\",\"int a=5,b=2; double c = a/b; \",\"此时 c 等于 2，因为整型 a/b 的值为 2\",\"此外，'Ｃ++对运算时所有的float型数据按照double型处理'\"]},\"799\":{\"h\":\"不同数值类型的混合运算（隐式类型转换）\",\"t\":[\"不同类型的数据先转换为同一类型，再进行运算\",\"float -> double\",\"​ long\",\"​ unsigned\",\"char,short -> int\",\"向右的箭头是必定的转换\",\"由下往上优先级越来越高\",\"箭头仅表示方向，不表示过程（转换一步到位）\",\"总之从范围小的转换到范围大的\"]},\"800\":{\"h\":\"自增自减运算符\",\"t\":[\"使变量的值 +1 或者 -1\",\"++i：先 i = i + 1，在使用 i\",\"i++：先使用 i ，在执行 i = i + 1\",\"++i和i++的区别\",\"?????\"]},\"801\":{\"h\":\"强制类型转换运算符\",\"t\":[\"​ 一般不同类型的数据可以自动转换，有时需要手动强制转换\",\"(typename)表达式 typename(表达式) \",\"​ 例：\",\"(double)a (int)(x + y) (float)(5%4) int(x + y) 注意与 (int)x + y 不同 int(x) \",\"TIP\",\"强制类型转换得到的是一个中间值，一般作为输出或者赋给另一个变量\",\"原变量的类型不变\",\"TIP\",\"LL代表的意思是long long类型， 1LL是为了在计算时，把int类型的变量转化为long long类型，然后再赋值给long long类型的变量\",\"C/C++ 一个数字后面加上LL_ida 数字后面加ll_彭华成的博客-CSDN博客\",\"C++中的1LL_c++ 1ll_ACM小学生的博客-CSDN博客\"]},\"802\":{\"h\":\"赋值运算与赋值表达式\"},\"803\":{\"h\":\"赋值运算符\",\"t\":[\"=\",\"从右向左\"]},\"804\":{\"h\":\"复制过程中的类型转换\",\"t\":[\"如果赋值运算符两侧的类型不一致，但是都是数值型或者字符型，在赋值时自动进行类型转换\",\"浮点型赋给整型，舍弃小数部分\",\"int 1; i = 3.14;cout << i <<endl; \",\"输出 i 为 3（整型）\",\"整型赋给浮点型\",\"数值不变，但是在内存中已经变成指数形式（变为浮点型）\",\"将 double 赋给 float\",\"注意不要溢出\",\"将字符型赋给整型\",\"赋给字符的 ASCII 码\",\"将 int，short 或 long 赋给 char\",\"仅取低 8 位（发生截断）\",\"将有符号 signed 赋给长度相同的 unsigned\",\"将储存单位内容原样照搬\",\"总结：不同类型的整型数据直接的赋值就是按照存储单元中的存储形式直接传送\"]},\"805\":{\"h\":\"复合赋值运算符\",\"t\":[\"在赋值符 = 之前加上其他运算符，可以构成复合运算符\",\"a += 3 a = a+3 a *= b + 3 a = a*(b + 3) //赋值运算符优先级较低且为右结合性 a %= 3 a = a % 3 \",\"凡是双目运算符可以与赋值符一起组合位复合运算符\"]},\"806\":{\"h\":\"赋值表达式\",\"t\":[\"1、形式\",\"变量 = 表达式\",\"2、求解过程\",\"先求右值(right valve，rvalve)再将右值赋给左值\",\"左值：\",\"赋值运算符左侧的标识符\",\"不是任何对象都可作为右值\",\"右值：\",\"左值都可以作为右值 a = b\",\"表达式可以为赋值表达式 a = b = 5\",\"3、结果\",\"赋值表达式整体有一个值作为结果\",\"a=3*5的值为 15，执行表达式后 a 的值也为 15\",\"4、使用\",\"Ｃ++赋值表达式式可以以表达式的形式出现在非赋值语句中，例\",\"cout<<(a = b); //赋值输出双功能 \"]},\"807\":{\"h\":\"逗号运算符和逗号表达式\",\"t\":[\"又称为顺序求值运算符\",\"形式：\",\"表达式1, 表达式2, …………, 表达式n; \",\"求解\",\"先求解表达式1，再求表达式2（从左到右）\",\"整个逗号表达式的值是表达式2的值（后面那个表达式的值）\",\"例，3+5,6+8 \\\"3+5,6+8\\\"的值为 14\",\"优先级\",\"逗号运算符的优先级最低，比赋值 = 还低，例\",\"a= 3*5,a*4; \",\"求解：\",\"先对a赋值 a = 15\",\"再求 a*4 = 60，即整个表达式的值为 60\",\"运用\",\"逗号表达式一般是把若干个表达式串联起来\",\"只是为了在一个表达式中对若干个表达式进行计算得到值，而并非为了整个逗号表达式的值\",\"常用于循环语句\"]},\"808\":{\"h\":\"条件运算符与条件表达式\",\"t\":[\"条件运算符 ? :\",\"条件表达式\",\"表达式1 ? 表达式2:表达式3 \",\"求解：\",\"先求解表达式1\",\"如果表达式1的值 非0（真）\",\"则整个表达式的值为 表达式2\",\"如果表达式1的值 0（假）\",\"则整个表达式的值为 表达式3\",\"举例\",\"max = (a>b)?a:b; //将a，b中较大的值赋给 max \"]},\"809\":{\"h\":\"关系运算与关系表达式\",\"t\":[\"关系运算：\",\"比较运算，将两个数据进行比较\",\"还可以对字符表达式比较\",\"关系表达式：\",\"表达式 关系运算符 表达式\",\"关系运算符\",\"< 优先级相同，比下面两个更高\",\"<=\",\">\",\">=\",\"== (等于，不等于的优先级低于大于小于)\",\"!= 不等于\",\"优先级与结合性\",\"​ 结合性：\",\"​ 从左向右，例\",\"​ a>b>c 等价于 (a>b)>c\",\"​ 上面的优先级更高：\",\"​ 算术运算符\",\"​ 关系运算符\",\"​ 赋值运算符\",\"​ 例：\",\"c > a + b c > (a + b) a > b == c (a > b) == c a == b < c a == (b < c) a = b > c a = (a>c) \",\"关系表达式的值\",\"关系表达式的值是'逻辑值，即真或者假'\"]},\"810\":{\"h\":\"逻辑运算与逻辑表达式\",\"t\":[\"逻辑常量与逻辑变量\",\"Ｃ语言中没有逻辑型数据，真或假（关系表达式）对值使用 1 和 0 代表的\",\"C++中增加了逻辑型数据\",\"逻辑常量 \",\"false; 假，编辑器将 false 处理为 0\",\"true; 真，将 true 处理为 1\",\"占 1 字节\",\"逻辑变量 \",\"类型表示符 bool\",\"值只能为 true 或者 false，例\",\"bool A; A = true; \",\"布尔变量 布尔常量 \",\"逻辑型又被称为布尔型\",\"cout<<boolalpha<<endl;//按照bool类型访问 \",\"布尔代数 \",\"可以与数值型数据混合进行算术运算\",\"若将非零整数赋给布尔型数据，则按“真”处理，值为 1\",\"逻辑运算符\",\"&&\",\"||\",\"!\",\"与\",\"或\",\"非\",\"双目运算符\",\"双目运算符\",\"单目运算符\",\"优先级\",\"!(非) 大于 &&（与）大于 ||(或)\",\"!(非)\",\"算术运算符\",\"关系运算符\",\"逻辑运算符\",\"赋值运算符\",\"逻辑表达式\",\"形式\",\"表达式 逻辑运算符 表达式\",\"2、说明\",\"得到一个逻辑量：真/假\",\"非0 ——〉 真 ——〉值为1\",\"0 ——〉假\",\"逻辑运算符两侧可以为任何数值型数据\",\"​\"]},\"811\":{\"h\":\"运算符\",\"t\":[\"1、算术运算符\",\"+\",\"-\",\"*\",\"/\",\"%\",\"++\",\"--\",\"加\",\"减\",\"乘\",\"除\",\"整数求余\",\"自加\",\"自减\",\"2、关系运算符\",\">< ==>= <=!=\",\"3、逻辑运算符\",\"&&||!\",\"4、位运算符\",\"<<\",\">>\",\"&\",\"|\",\"^\",\"~\",\"按位左移\",\"按位右移\",\"按位与\",\"按位或\",\"按位异或\",\"按位取反\",\"目数：双目\",\"结合性：从左往右\",\"例 2 << 3 =16 ：将 2（10）的二进制数全部向左移动 16（10000）,如果溢出则舍去高位\",\"TIP\",\"<<左移运算符：expr1<<expr2 表示 expr1 左移 expr2 位，数值上表示 expr1 扩大了 2^expr2 倍；\",\"右移运算符：expr1>>expr2表示 expr2 右移 expr2 位，数值上表示 expr1 缩小了 2^expr2 倍；\",\"左边的数表示被移位的数字，1<<n = 2^n、n<<1 = 2*n\",\"总结：\",\"左移就是扩大 2^移位数^，右移就是缩小2^移位数^\",\"————————————————\",\"版权声明：本文为CSDN博主「algsup」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\",\"原文链接：https://blog.csdn.net/qq_43152052/article/details/100076874\",\"5、赋值运算符\",\"=-=+=*=/=………………\",\"6、条件运算符\",\"? :\",\"7、逗号运算符\",\",\",\"8、指针运算符\",\"*\",\"9、引用运算符和地址运算符\",\"&\",\"10、求字节数运算符\",\"sizeof(type)\",\"11、强制类型转换运算符\",\"(typename) 或者 typename()\",\"12、成员运算符\",\".\",\"13、指向成员的运算符\",\" ->\",\"14、下标运算符\",\"[]\",\"15、其他（如函数调用运算符() ）\",\":: 作用域运算符：标识某个成员属于哪个类\"]},\"812\":{\"h\":\"运算符的优先级、结合性与目数\"},\"813\":{\"h\":\"优先级\",\"t\":[\"在求解表达式时，按运算符的优先级依次执行\",\"同一优先级则按照结合方向\",\"大致优先级：\",\"初等运算符 ::->.`` ()[]\",\"单目运算符 \",\"自增自减（后置）\",\"自增自减（前置）\",\"逻辑非 !\",\"正负\",\"算术（先乘除，后加减）\",\"关系\",\"条件\",\"赋值\",\"逗号\"]},\"814\":{\"h\":\"目数\",\"t\":[\"运算对象的个数\",\"单目运算符\",\"-``+（正负） ++--sizeof(type) ………… 只在运算符一侧出现一个运算对象\",\"双目运算符\",\"-+（加减）………… 两侧各有一个运算对象\",\"三目运算符\",\"条件运算符\",\"x?a:b \",\"唯一一个三目运算符\"]},\"815\":{\"h\":\"结合性\",\"t\":[\"结合方向\",\"从左向右\",\"大部分运算符都是从左向右\",\"从右向左\",\"大部分单目运算符是从右向左\",\"赋值运算符是从右向左（先算等式右边的）\"]},\"816\":{\"h\":\"语句\",\"t\":[\"Ｃ++语句\",\"Ｃ++程序中最小的独立单位，一般以分号结尾，复合语句以 \\\"}\\\" 结尾\",\"分类\",\"声明语句\",\"int a,b; \",\"​ 对变量和其他对象的定义（Ｃ语言中不是语句）\",\"​ 位置可以在任何地方\",\"​ 作用范围从声明开始到本函数或本块的结尾\",\"执行语句\",\"控制语句\",\"完成一定的控制功能\",\"函数和流对象调用语句\",\"函数调用\",\"流调用\",\"表达式语句\",\"表达式 + 分号\",\"空语句\",\"只有一个分号，什么也不做\",\"常作为转向点，循环语句中的循环体：循环体是空语句，表示循环体什么也不做\",\"int n = 0; while (n++<=2); cout << n; //输出为 4 \",\"复合语句\",\"​ 用 {} 把一些语句扩起来，成为复合语句\"]},\"817\":{\"h\":\"选择控制语句\",\"t\":[\"if 语句\",\"根据表达式值的真或假，执行给出的操作\",\"​ 1、形式\",\"if (表达式) 语句 \",\"​ 例：\",\"if (x > y) cout <<x<<endl; \",\"if (表达式) 语句1 else 语句2 \",\"​ 例：\",\"if (x>y) cout<<x<<endl; else cout<<y; \",\"if(表达式) 语句 else if(表达式) 语句 else if(表达式) 语句 ……………… else 语句 \",\"注意\",\"执行 if 时先对（）中的表达式求解，按照 非0（真） 和 0（假） 处理\",\"例：if(2)cout<<ok;\",\"分号⚠️\",\"语句以\\\";\\\"或者\\\"}\\\"结尾\",\"在复合语句中定义的变量为'局部变量'，只在该语句中有效\",\"if 语句嵌套\",\"​ 例：\",\"if () if () else else if () else \",\"注意 if 和 else 的配对关系：\",\"else 总是和它上面最近的，且未配对的 if 配对\",\"如果 if 和 else 的数量不一样，可以用花括号来确定关系\",\"​\"]},\"818\":{\"h\":\"多分支选择结构与 switch 语句\",\"t\":[\"​ 1、形式\",\"switch (表达式) { case condition: 语句1; case condition: 语句2; …………… case condition: 语句n; default:语句 n+1 //default 可以不写，可以有一个，无论在哪都是最后执行 } \",\"​ 2、说明\",\"​ 1、switch 后面的表达式只能是整型或者字符类型（枚举类型）\",\"​ 2、当 switch 表达式的值与某一个 case 子句中的常量表达式值相匹配时，就执行此 case 子句\",\"​ 如果都不能匹配，就执行 default 子句中的内嵌语句;\",\"​ 3、每一个 case 表达式的值必须互不相同，否则会出现矛盾;\",\"​ 4、各个 case 和 default: 的出现次序不影响执行结果;\",\"​ 5、执行完一个 case 子句之后，流程控制转移到下一个 case 子句继续执行\",\"​ 并不是在 case 处进行条件判断\",\"​ 根据 switch 表达式的值，找到匹配的case之后，就从 case 开始执行下去，不再进行判断\",\"​ 为了跳出结构，中止语句，可以在每一个 case 之后加上 break; 例：\",\"switch (grade) { case 'A': cout<<\\\"85~95\\\\n\\\";break; case 'B': cout<<\\\"70~84\\\\n\\\";break; ……………… default:cout<<\\\"error\\\\n\\\";break; //最后一个子句（这里是default）可以不加 } \",\"​ 6、多个 case 执行同一个语句\",\"switch (grad) { case 'A': case 'B': case 'c': cout<<\\\">60\\\\n\\\";break; } \",\"​ 当grade的值为 A，B，Ｃ的时候执行同一个语句;\",\"​\"]},\"819\":{\"h\":\"循环结构和循环语句\",\"t\":[\"1、用while语句构成循环\",\"​ 1、形式\",\"while (表达式) { 语句; } \",\"​ 2、作用\",\"当指定的条件为真（表达式为非0）时，执行while语句中的内嵌语句（循环体）\",\"​ 3、特点\",\"先判断表达式，再执行语句\",\"​\",\"`goto`和`break`\"]},\"820\":{\"h\":\"运算符重载\"},\"821\":{\"h\":\"重载单目运算符\"},\"822\":{\"h\":\"重载双目运算符\"},\"823\":{\"h\":\"重载流插入运算符\"},\"824\":{\"h\":\"链表\",\"t\":[\"链表是动态地进行储存分配的一种结构。\",\"用数组存放数据时，必须事先定义固定的长度（即元素个数），如果不确定长度，则需要把数组定的足够大\",\"链表根据需要开辟内存单元，没有这种缺点\",\"异质链表：\",\"用抽象类指针指向派生类对象的链表\"]},\"825\":{\"h\":\"单向链表结构\",\"t\":[\"1、结构\",\"​ 链表有一个头指针变量（head），存放一个地址，改地址指向一个元素\",\"​ 链表中的每一个元素称为结点\",\"​ 结点包括两个部分\",\"​ 用户所需用到的实际数据\",\"​ 下一个结点的地址\",\"​ 表尾\",\"​ head 指向第一个元素，第一个元素指向第二个元素…………直到最后一个元素\",\"​ 该元素不再指向其他元素，称为表尾\",\"​ 表尾的地址是一个空地址 NULL，链表到此结束\",\"2、特点\",\"​ 链表中的各个元素可以不是连续存放的\",\"​ 一个结点中应该包含一个指针变量，用它存放下一个结点的地址\",\"​ 用结构体变量或者类对象作为链表中的结点最为合适\",\"3、例，建立一个三个学生数据的结点构成的链表，输出各结点中的数据\",\"#define NULL 0 //可以省略，在 iostream 中已有此定义，或者用 nullptr //codeblock 无法编译 nullptr ，没有支持 c++ 11 的新特性 #include <iostream> using namespace std; struct student{ long num; float score; struct student *next; }; int main(){ struct student a,b,c,*head,*p; a.num = 12;a.score = 33; b.num = 13;b.score = 4.6; c.num = 23;c.score = 23.3; //为结点的 num 和 score 成员赋值 head = &a; //将结点 a 的起始地址赋值给头指针 head a.next = &b; //将结点 b 的起始地址赋值给 a 结点的 next 成员 b.next = &c; //将结点 c 的起始地址赋值给 b 结点的 next 成员 c.next = NULL; //c 结点的 next 成员不存放其他结点的地址 p = head; //使 p 指针指向 a 结点 do { cout << p->num <<'\\\\t'<< p->score <<endl; //输出 p 指向的结点的数据 p = p->next; //使 p 指向下一个结点 } while (p != NULL); //输出完 c 结点后 p 的值为 null return 0; } \",\"​ 说明\",\"​ 本例所有结点都是在程序中定义的，不是临时开辟的，也不能用完后释放\",\"​ 这种链表称为'静态链表'\"]},\"826\":{\"h\":\"动态链表\",\"t\":[\"用一个creat 函数，建立一个有三个学生数据的单向动态链表\",\"1、算法\",\"​ 1、设置三个指针变量 head 、 p1 、 p2，指向 student类型\",\"​ 2、用 new 运算符开辟第 1 个结点，并使 p1 和 p2 指向它\",\"​ 约定输入的学号不为 0，输入 0 表示完成链表构建，该结点不连接到链表中\",\"​ head 的初值为 nullptr，即链表为空的情况，建立第一个结点就使 head 指向该结点\",\"​ 3、如果 p1->num 不等于 0\",\"​ 输入第一个结点数据，n == 1\",\"​ 令 head = p1; 使 head 指向新开劈的结点，为第一个结点\",\"​ 再另开辟一个结点，并用 p1 指向它，接着输入该结点的数据\",\"​ 4、如果输入的 p1->num 不等于 0，\",\"​ n == 2；\",\"​ 将第二个结点的地址赋给第一个结点中的 next 成员\",\"​ p2->next = p1，此时 p2 仍然指向第一个结点，第一个结点中的 next 指向第二个结点\",\"​ 再将 p2 指向刚建立的第二个结点，p2 = p1，此时 p1 和 p2 都指向了第二个结点\",\"​ 再开辟一个新的结点（第三个），用 p1 指向它\",\"​ 5、如果输入的 0\",\"​ ………………\",\"​ 循环下去，知道达到输入 0 的中止条件\",\"​ 此时后面的循环不再进行，新结点不连接到链表中\",\"​ 最后一个结点的next没有指向这个新开劈的结点，虽然 p1 指向但是不再链表中\",\"​ '让 p1 指向新的结点，p2 指向链表中的最后一个结点，把 p1 所指的结点连接在 p2 所指的结点后面，用 p2->next = p1 实现'\",\"2、建立函数\",\"#include <iostream> using namespace std; struct student{ long num; float score; student *next; }; int n; //n 为全局变量，本文件中的各个函数均可使用 student *creat(void){ //定义函数，此函数带回一个指向链表头的指针 student *head; student *p1,*p2; n = 0; // n 用来累计结点个数 p1 = p2 = new student; //开辟一个新单元，并使 p1，p2 指向它 cin >> p1->num >> p1->score; head = nullptr; while (p1->num != 0) { n = n+1; if (n==1) { head = p1; } else { p2->next = p1; } p2 = p1; p1 = new student; cin >> p1->num >> p1->score; } p2->next = nullptr; return(head); //指针类型的函数，返回一个指针值，指向 student 类型数据，即一个链表的起始地址 } \"]},\"827\":{\"h\":\"链表的遍历\",\"t\":[\"将上面建立的链表中的各个结点数据依次输出\",\"1、算法\",\"已知 head 头指针的值后，用一个指针变量 p 指向它\",\"进行操作之后，将 p 往后移一个结点，即\",\"p = p->next; \",\"直到链表的尾结点\",\"2、举例\",\"假设已经有如下程序\",\"#include <iostream> using namespace std; struct student{ long num; float score; student *next; }; int n; //可以写出 print 函数如下： void print(student *head){ student *p; cout << endl <<\\\"Now,These \\\"<< n <<\\\" records are:\\\"<<endl; p = head; if (head != nullptr) { do { cout << p->num <<'\\\\t'<< p->score <<endl; p = p->next; } while (p != nullptr); } } \",\"程序说明：\",\"head 的值由实参传递过来，也就是将已有的链表的头指针传给被调用的函数\",\"p = p->next 是将第二个结点的起始地址赋值给 p，使 p 指向第二个结点\",\"这里用的是 do —— while 循环，因为最后遇到 nullptr 就直接退出循环\",\"也可以\",\"for(Node* i = head; i; i = i->next){ cout<<i->val <<endl; } \"]},\"828\":{\"h\":\"链表结点的删除\",\"t\":[\"从动态链表中删去一个结点，并不是真正从内存中抹去，而是把它从链表中分离开\",\"撤销原来的连接关系\",\"算法\",\"在上例中，以某个标准，如学号作为删除结点的标准\",\"从 p 指向的第一个结点开始，检查该结点中的 num 是否为要删除的那个学号\",\"如果相等就删除\",\"如果不等就将 p 移到后一个结点，直到表尾\",\"具体操作：\",\"设定两个指针变量 p1 和 p2\",\"将 p1 指向第一个结点\",\"如果删除的是第一个结点（p1 = head）\",\"则应该 head = p1->next ，将头指针指向第二个结点\",\"如果要删除的不是第一个结点\",\"将 p1 赋值给 p2，使 p2 指向刚检查过的结点\",\"使 p1 移向下一个结点\",\"（'p1 指向的结点比 p2 永远快一步'）\",\"直到找到所有要删除的结点\",\"找到后：\",\"p2->next = p1->next 使 p2 指向 p1 指向结点的下一个结点，跳过 p1 所指向的结点\",\"还要考虑链表是空表（无结点）、链表中找不到要删除的结点的情况\",\"3、举例\",\"#include <iostream> using namespace std; struct student{ long num; float score; student *next; }; int n; student *del(student *head,long num){ //函数类型为指向 student 类型的指针，参数为 head 和要删除的学号 student *p1,*p2; //在vs 中 p2 必须要有初值 nullptr if (head == nullptr) { //空表的情况 cout <<\\\"是空表\\\"<<endl; return(head); } p1 = head; //如果不是空表，使 p1 指向第一个结点 while (num != p1->num && p1 ->next != nullptr) { //如果 p1 指向的不是所要找的结点，而且后面还有结点 p2 = p1; //将 p2 指向 已经检查过了的 p1 指向的结点 p1 = p1->next; //p1 指向下一个结点 } if (num == p1->num) { //如果找到了要删除的点 if (p1 == head) { //如果要删除的是第一个结点 head = p1->next; //将头指针指向第二个结点 } else { p2->next = p1->next; //如果要删除的不是第一个结点，将要删除点的下一个结点的地址赋给前一个结点的 next } cout <<\\\"删除了：\\\"<<num<<endl; n -= 1; //删去了一个之后，链表长度 -1 } else { cout <<\\\"找不到结点 \\\"<< num <<endl; //如果找不到该结点 } return(head); //返回值是头指针，它的值可能会改变 } \"]},\"829\":{\"h\":\"链表结点的插入\",\"t\":[\"将一个结点插入到一个已有的链表中\",\"算法\",\"如果链表按照某种方式排序了（从小到大），现在要在其中插入一个新的结点\",\"先将指针变量 p0 指向要插入的结点，p1 指向第一个结点\",\"将 p0->num 与 p1->num 相比较 \",\"如果 p0->num > p1->num ,则待插入的结点不应插在 p1 所指的结点之前\",\"此时应该将 p1 后移，并使 p2 指向刚才 p1 所指的结点\",\"再将 p1->num 与 p0->num 比，\",\"如果仍然是 p0->num 大\",\"使 p1 继续后移\",\"直到 p0->num <= p1->num 为止\",\"如果 p1 所指的已经是表尾结点\",\"p1 不后移了。\",\"如果 p0->num 比所有结点的 num 都大\",\"则应将 p0所指的结点插到链表末尾\",\"如果插入的位置既不在第一个结点之前，又不在表尾结点之后\",\"p2->next = p0, 将 p0 的值赋给 p2->next ,使 p2->next 指向待插入的结点\",\"p0->next = p1, 将 p1 的值赋给 p0->next ,使 p0->next 指向 p1 指向的变量\",\"这样就在这两个结点之间插入一个新的结点\",\"如果插入位置为第一个结点之前（p1 = head）\",\"head = p0 将 p0 赋给 head\",\"p0->next = p1 将 p1 赋给 p0->next\",\"如果要插入到表尾之后\",\"p1->next = p0 p0->next = nullptr \",\"2、实例\",\"student *insert(student *head,student *stud){ student *p0,*p1,*p2; //在 vs 必须要有初值 nullptr p1 = head; //使 p1 指向第一个结点 p0 = stud; //使 p0 指向要插入的结点 if (head ==nullptr) { //空链表的情况 head = p0; //将头指针指向要插入的结点， p0->next = nullptr; } else { while ((p0->num > p1->num) && (p1->next != nullptr)) { //检查在哪里插入，同时防止 p1 指向末尾的空指针 p2 = p1; //使 p2 指向刚才 p1 指向的结点 p1 = p1->next; //使 p1 后移一个结点 } //对要插入的位置进行分类处理 if (p0->num <= p1->num){ //如果插入位置不在链尾 if (head == p1) head = p0; //如果插入位置在头部，将 p0 赋值给头指针 else p2->next = p0; //如果插入位置不在头部，插入到 p2 之后 p0->next = p1; //将要插入结点的 next 与下一个结点（p1）连接起来 } else //如果在链尾 插入 { p1->next = p0; p0->next = nullptr; } n = n + 1; return(head); } } \"]},\"830\":{\"h\":\"整合\",\"t\":[\"将以上四个函数整合在一起，实现链表的建立，输出，删除，插入\",\"有问题的例子：\",\"#include <iostream> using namespace std; struct student{ long num; float score; student *next; }; int n; int main(){ student *creat(void); student *del(student *,long); student *insert(student *,student *); void print(student *); student *head,stu; long delNum; cout << \\\"输入节点\\\"<<endl; head = creat(); print(head); cout << endl << \\\"输入要删除的数据\\\" << endl; cin >> delNum; head = del(head,delNum); print(head); cout << endl << \\\"输入要插入的节点\\\"; cin >> stu.num >> stu.score; head = insert(head,&stu); print(head); return 0; } \",\"注意\",\"​ 直接将上面几个函数整合在一起的话，\",\"​ 如果只删除一个，插入一个，运行正确\",\"​ 如果有多次插入（重复最后五行），运行会出错！！\",\"​ 错误原因分析：\",\"​ 要插入的节点 stu 是一个固定地址的结构体变量，第二次插入之后，stu 节点被覆盖，导致第一次插入的没有了\",\"解决方法\",\"每次插入的时候新开辟一个内存区\",\"#include <iostream> using namespace std; struct student{ long num; float score; student *next;}; int n; int main(){ student *creat(void); student *del(student *,long); student *insert(student *,student *); void print(student *); student *head,stu; long delNum; cout << \\\"输入节点\\\"<<endl; head = creat(); print(head); cout << endl << \\\"输入要删除的数据\\\" << endl; cin >> delNum; head = del(head,delNum); print(head); cout << endl << \\\"输入要插入的节点\\\"; //新增内容！ stu = new student; //开辟一个新的无名节点给 stu cin >> stu.num >> stu.score; while (stu->num != 0) { //直到要插入的为 0 0 的时候结束插入 head = insert(head,&stu); print(head); cout << endl << \\\"输入要插入的节点\\\"; stu = new student; cin >> stu.num >> stu.score; } return 0; } student *creat(void){ //定义函数，此函数带回一个指向链表头的指针 student *head; student *p1,*p2; n = 0; // n 用来累计结点个数 p1 = p2 = new student; //开辟一个新单元，并使 p1，p2 指向它 cin >> p1->num >> p1->score; head = nullptr; while (p1->num != 0) { n = n+1; if (n==1) { head = p1; } else { p2->next = p1; } p2 = p1; p1 = new student; cin >> p1->num >> p1->score; } p2->next = nullptr; return(head); //指针类型的函数，返回一个指针值，指向 student 类型数据，即一个链表的起始地址 } void print(student *head){ student *p; cout << endl <<\\\"Now,These \\\"<< n <<\\\" records are:\\\"<<endl; p = head; if (head != nullptr) { do { cout << p->num <<'\\\\t'<< p->score <<endl; p = p->next; } while (p != nullptr); } } student *del(student *head,long num){ //函数类型为指向 student 类型的指针，参数为 head 和要删除的学号 student *p1,*p2; if (head == nullptr) { //空表的情况 cout <<\\\"是空表\\\"<<endl; return(head); } p1 = head; //如果不是空表，使 p1 指向第一个结点 while (num != p1->num && p1 ->next != nullptr) { //如果 p1 指向的不是所要找的结点，而且后面还有结点 p2 = p1; //将 p2 指向 已经检查过了的 p1 指向的结点 p1 = p1->next; //p1 指向下一个结点 } if (num == p1->num) { //如果找到了要删除的点 if (p1 == head) { //如果要删除的是第一个结点 head = p1->next; //将头指针指向第二个结点 } else { p2->next = p1->next; //如果要删除的不是第一个结点，将要删除点的下一个结点的地址赋给前一个结点的 next } cout <<\\\"删除了：\\\"<<num<<endl; n = n - 1; //删去了一个之后，链表长度 -1 } else { cout <<\\\"找不到结点 \\\"<< num <<endl; //如果找不到该结点 } return(head); //返回值是头指针，它的值可能会改变 } student *insert(student *head,student *stud){ student *p0,*p1,*p2; p1 = head; //使 p1 指向第一个结点 p0 = stud; //使 p0 指向要插入的结点 if (head == nullptr) { //空链表的情况 head = p0; //将头指针指向要插入的结点， p0->next = nullptr; } else { //检查在哪里插入，同时防止 p1 指向末尾的空指针 while ((p0->num > p1->num) && (p1->next != nullptr)) { p2 = p1; //使 p2 指向刚才 p1 指向的结点 p1 = p1->next; //使 p1 后移一个结点 } //对要插入的位置进行分类处理 if (p0->num <= p1->num){ //如果插入位置不在链尾 if (head == p1) head = p0; //如果插入位置在头部，将 p0 赋值给头指针 else p2->next = p0; //如果插入位置不在头部，插入到 p2 之后 p0->next = p1; //将要插入结点的 next 与下一个结点（p1）连接起来 } else //如果在链尾 插入 {p1->next = p0; p0->next = nullptr; } n = n + 1; return(head); } \"]},\"831\":{\"h\":\"静态多态性\"},\"832\":{\"h\":\"\",\"t\":[\"断言 python-assert\",\"根据数据绘制热力图\",\"一种添加高斯模糊的方法\",\"使用-python-生成-GIF\"]},\"833\":{\"h\":\"断言 assert\",\"t\":[\"Python assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。\",\"断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况，例如我们的代码只能在 Linux 系统下运行，可以先判断当前系统是否符合条件。\",\"以下实例判断当前系统是否为 Linux，如果不满足条件则直接触发异常，不必执行接下来的代码：\",\"import sys assert ('linux' in sys.platform), \\\"该代码只能在 Linux 下执行\\\" \",\"Python3 assert（断言） | 菜鸟教程 (runoob.com)\"]},\"834\":{\"h\":\"一种利用卷积添加高斯模糊的方法\",\"t\":[\"使用卷积来添加高斯模糊\",\"输入的 map 是一个矩阵，ndarray\",\"def G_blur(map): kernel = np.array([0.3, 0.7, 0.3]) # Here is kernel of any size map = np.apply_along_axis(lambda x: np.convolve(x, kernel, mode='same'), 0, map) map = np.apply_along_axis(lambda x: np.convolve(x, kernel, mode='same'), 1, map) return map \"]},\"835\":{\"h\":\"使用 python 生成 GIF\",\"t\":[\"有一串图片，要生成 GIF 动画\",\"import imageio from pathlib import Path def imgs2gif(imgPaths, saveName, duration=None, loop=0, fps=2): \\\"\\\"\\\" 生成动态图片 格式为 gif :param imgPaths: 一系列图片路径 :param saveName: 保存gif的名字 :param duration: gif每帧间隔， 单位 秒 :param fps: 帧率 :param loop: 播放次数（在不同的播放器上有所区别）， 0代表循环播放 :return: \\\"\\\"\\\" if fps: duration = 1 / fps images = [imageio.imread(str(img_path)) for img_path in imgPaths] imageio.mimsave(saveName, images, \\\"gif\\\", duration=duration, loop=loop) pathlist = Path(r\\\"E:/Work/SLAM-2D-LIDAR-SCAN/Output\\\").glob(\\\"*.png\\\") p_lis = [] for n, p in enumerate(pathlist): if n % 5 == 0: p_lis.append(p) imgs2gif(p_lis, \\\"exp.gif\\\", 0.033 * 5, 0) # imgs2gif(p_lis, \\\"exp2.gif\\\", 0.033 * 5, 1) \",\"python生成gif\"]},\"836\":{\"h\":\"根据数据绘制热力图\",\"t\":[\"seaborn.heatmap — seaborn 0.12.0 documentation (pydata.org)\",\"python 热力图\",\"python 中可以用 seaborn.heatmap 画热力图，在分类任务中也可以画混淆矩阵。\"]},\"837\":{\"h\":\"参数\",\"t\":[\"def heatmap( data, *, vmin=None, vmax=None, cmap=None, center=None, robust=False, annot=None, fmt=\\\".2g\\\", annot_kws=None, linewidths=0, linecolor=\\\"white\\\", cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels=\\\"auto\\\", yticklabels=\\\"auto\\\", mask=None, ax=None, **kwargs ) \",\"根据 data 传入的值画出热力图，一般是二维矩阵\",\"vmin 设置最小值, vmax设置最大值\",\"cmap 换用不同的颜色\",\"center 设置中心值\",\"annot 是否在方格上写上对应的数字，True 或者是 False\",\"fmt 写入热力图的数据类型，默认为科学计数，d表示整数，.1f表示保留一位小数\",\"linewidths 设置方格之间的间隔\",\"xticklabels，yticklabels 填到横纵坐标的值。可以是 bool，填或者不填。可以是 int，以什么间隔填，可以是 list\"]},\"838\":{\"h\":\"例子\",\"t\":[\"import numpy as np import seaborn as sns import matplotlib.pyplot as plt fp_exp_pred = np.loadtxt('./data/map/map.1.txt') proj_pred = np.loadtxt('proj_pred_115') sns.set_theme() ax_1 = sns.heatmap(fp_exp_pred) # ax_2 = sns.heatmap(proj_pred) plt.show() \"]},\"839\":{\"h\":\"\",\"t\":[\"常用函数\",\"加载预训练权重，并在提取中间部分权重\",\"自定义损失函数\",\"Tensorboard\",\"batch的最后一个epoch的张量对齐问题\",\"深度学习训练已经停止GPU内存还在占用着\"]},\"840\":{\"h\":\"使用 tensorboard 可视化\",\"t\":[\"from tensorboardX import SummaryWriter from torch.autograd import Variable # 模拟输入 dummy_input = Variable(torch.rand(5,1,64,64)) dummy_input2 = Variable(torch.rand(5,1,1,3)) # print(dummy_input) model = pos_est(5,\\\"cpu\\\").to(\\\"cpu\\\") pred = model.forward(dummy_input,dummy_input,dummy_input2) print(pred.shape) with SummaryWriter(comment='pos') as w: w.add_graph(model, (dummy_input, dummy_input,dummy_input2)) \",\"在终端输入\",\"tensorboard --logdir=./runs \"]},\"841\":{\"h\":\"如何关闭Tensorboard服务器\",\"t\":[\"获取正在运行的tensorboard进程详情 ps -ef|grep tensorboard\",\"样本输出 ：uzzal_x+ 4585 4413 0 02:46 pts/4 00:00:01 bin/python /bin/tensorboard --logdir=runs/ 使用pid*（进程id）杀死进程**\",\"kill -9 <pid> \",\"第一个数字4585是我当前的tensorflow的pid\\n————————————————\\n版权声明：本文为CSDN博主「shuaiqidexiaojiejie」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\\n原文链接：https://blog.csdn.net/shuaiqidexiaojiejie/article/details/131000622\"]},\"842\":{\"h\":\"一个Epoch前几个batch正常训练，最后一个batch的数据不足报错\"},\"843\":{\"h\":\"问题：\",\"t\":[\"在模型训练过程中，一个epoch的前几轮batch数据可以正常训练输出loss，在最后一轮batch数据报错，大概率就是数据量和epoch不匹配，导致最后一个batch的数据不能被整除，所以导致该问题。\"]},\"844\":{\"h\":\"解决方案1：\",\"t\":[\"手动将epoch的参数调整一下，保证num-data/ batchz-size= epoch中的所有参数均为整数。\"]},\"845\":{\"h\":\"解决方案2：\",\"t\":[\"删除最后一个batch的数据，不参与训练，具体的操作是在定义dataloader的时候，设置drop_last参数为True。\",\"torch.utils.data.DataLoader(dataset, batch_size=1, shuffle=None, sampler=None, batch_sampler=None, num_workers=0, collate_fn=None, pin_memory=False, drop_last=False, timeout=0, worker_init_fn=None, multiprocessing_context=None, generator=None, *, prefetch_factor=None, persistent_workers=False, pin_memory_device='') \",\"TIP\",\"drop_last:设置为True表示在数据量与batch_size不能被整除的情况下，删除不完整的batch数据；默认设置为False drop_last (bool, optional) – set to True to drop the last incomplete batch, if the dataset size is not divisible by the batch size. If False and the size of dataset is not divisible by the batch size, then the last batch will be smaller. (default: False)\",\"参考官网定义：torch.utils.data — PyTorch 2.0 documentation\\n————————————————\\n版权声明：本文为CSDN博主「zy_destiny」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\\n原文链接：https://blog.csdn.net/qq_38308388/article/details/131041955\"]},\"846\":{\"h\":\"加载预训练权重，并在提取中间部分权重\",\"t\":[\"model_path = \\\"model_best.slam.pth\\\" model_dict = model.state_dict() pretrained_dict = torch.load(model_path, map_location=device) load_key, no_load_key, temp_dict = [], [], {} for k, v in pretrained_dict.items(): # 进行名字和张量大小的双重对比 if k in model_dict.keys() and np.shape(model_dict[k]) == np.shape(v): temp_dict[k] = v load_key.append(k) else: no_load_key.append(k) model_dict.update(temp_dict) model.load_state_dict(model_dict) # 输出导入了多少没导入多少 print(\\\"\\\\nSuccessful Load Key:\\\", str(load_key)[:500], \\\"……\\\\nSuccessful Load Key Num:\\\", len(load_key)) print(\\\"\\\\nFail To Load Key:\\\", str(no_load_key)[:500], \\\"……\\\\nFail To Load Key num:\\\", len(no_load_key)) \",\"如果名字有不同，还要看看然后再改名字再比对\",\"for k, v in pretrained_dict[\\\"model\\\"].items(): # 假如这个权重保存的时候的名字前面还加了其他的东西比如 “backbone_net.” name = \\\"backbone_net.\\\"+k # print(name) if name in model_dict.keys() and np.shape(model_dict[name]) == np.shape(v): temp_dict[name] = v load_key.append(name) else: no_load_key.append(name) model_dict.update(temp_dict) model.load_state_dict(model_dict, strict=False) \",\"保存权重\",\"torch.save(model.state_dict(), \\\"model.pth\\\") \"]},\"847\":{\"h\":\"常用函数\"},\"848\":{\"h\":\"torch.mean()\",\"t\":[\"torch._C._VariableFunctions @overload def mean(input: Tensor, dim: Sequence[Union[str, ellipsis, None]], keepdim: bool = False, *, dtype: Optional[dtype] = None, out: Optional[Tensor] = None) -> Tensor \",\"mean()函数的参数：\",\"dim=0,按行求平均值，返回的形状是（1，列数）；\",\"dim=1,按列求平均值，返回的形状是（行数，1）,\",\"默认不设置dim的时候，返回的是所有元素的平均值。\",\"torch.mean\"]},\"849\":{\"h\":\"torch.split()\",\"t\":[\"torch.split(tensor, split_size_or_sections, dim=0) \",\"tensor：要被切割的张量\",\"split_size_or_sections：当此参数为整数时，意思是将tensor按照每块大小为split_size_or_sections来切割，当此参数为列表时，将此tensor切成和列表中元素大小一样的大小的块。\",\"dim：指定要切割的维度\",\"a = torch.rand(4,5) print(a) a = torch.split(a,2,1) for i in a: print(i.shape) \",\"tensor([[0.7568, 0.6668, 0.8802, 0.5335, 0.1019], [0.4578, 0.9263, 0.9214, 0.5211, 0.5284], [0.8461, 0.5140, 0.8428, 0.4166, 0.5266], [0.1308, 0.4008, 0.2265, 0.0765, 0.2782]]) torch.Size([4, 2]) torch.Size([4, 2]) torch.Size([4, 1]) \",\"tensor分割\"]},\"850\":{\"h\":\"torch.sum()\"},\"851\":{\"h\":\"torch.matmul()\"},\"852\":{\"h\":\"深度学习训练已经停止了，可GPU内存还在占用着，怎么办？\",\"t\":[\"深度学习训练已经停止了，可GPU内存还在占用着，怎么办？_wx6487d58cca837的技术博客_51CTO博客\",\"该情况通常发生在非正常中断GPU下发生，如手动暂停了训练。然后发现，再一次训练的时候出现错误：\",\"RuntimeError: CUDA out of memory. Tried to allocate 736.00 MiB (GPU 0; 10.92 GiB total capacity; 2.26 GiB already allocated; 412.38 MiB free; 2.27 GiB reserved in total by PyTorch)\",\"在终端查看GPU使用情况：\",\"查看GPU进程ID\",\"通过nvidia-smi查看， PID号就是进程号，我这里是1297\",\"如果上述办法看不到PID，输入\",\"```bash fuser -v /dev/nvidia* ``` 查看 \",\"杀死进程 kill -9 PID\",\"就恢复了。\",\"使用 kill -9 PID 进程杀不死，怎么办，如下图\",\"如果遇到这种情况，肯定还有隐藏进程\",\"终端输入：\",\"ps -A -ostat,ppid,pid,cmd | grep -e '^[Zz]' \",\"发现：不仅有13754， 还有13728.\",\"于是 把13728 kill 掉： kill -9 13728\",\"再次运行 nvidia-smi 发现进程被杀死了。\",\"如果以上没解决问题。重启吧， sudo reboot\"]},\"853\":{\"h\":\"自定义损失函数\"},\"854\":{\"h\":\"1. 通过nn.Module类来实现自定义的损失函数\",\"t\":[\"鉴于前面所说的，损失函数的本质也就是“对输入进行函数运算，得到一个输出”，所以我们可以像定义层一样自定义一个损失函数，比如我自己定义一个 MSE 损失函数，代码如下：\",\"class My_loss(nn.Module): def __init__(self): super().__init__() #没有需要保存的参数和状态信息 def forward(self, x, y): # 定义前向的函数运算即可 return torch.mean(torch.pow((x - y), 2)) \",\"TIP\",\"pytorch TypeError: __init__() takes 1 positional argument but 3 were given \",\"在自己编写loss函数Myloss_for_neg后，调用时出现问题。\",\"原因是需要初始化，即分两步：\",\"loss_fun = My_loss() loss = My_loss(outputs, label) \",\"类似于模型初始化\"]},\"855\":{\"h\":\"2. 通过直接定义函数来完成\",\"t\":[\"自定义类中，其实最终调用还是forward实现，同时nn.Module还要维护一些其他变量和状态。不如直接自定义loss函数实现：\",\"# 直接定义函数 ， 不需要维护参数，梯度等信息\",\"# 注意所有的数学操作需要使用 tensor 完成。\",\"def my_mse_loss(x, y): return torch.mean(torch.pow((x - y), 2)) \",\"nn.functional 里面定义了一些常见的函数，当然也包括一些常见的损失函数\",\"https://blog.csdn.net/qq_27825451/article/details/95165265\"]},\"856\":{\"h\":\"CLIPS\",\"t\":[\"Learning Transferable Visual Models From Natural Language Supervision\",\"26 Feb 2021\",\"CLIP: Connecting text and images (openai.com)\",\"CLIP from OpenAI: what is it and how you can try it out yourself | by Inmeta | Medium\"]},\"857\":{\"h\":\"出发点\",\"t\":[\"传统的图像分类模型无法对类别进行拓展，想要保证准确率只能从头开始训练，费时费力。\",\"CLIP模型就可以用来解决这种问题，预训练后的模型就可以直接进行zero-shot\"]},\"858\":{\"h\":\"成果\",\"t\":[\"将图像和任意的文本联系起来，只需要简单地提供包含新类别的文本描述就可以使用该模型来识别新类别。\",\"CLIP在完全不使用ImageNet中所有训练数据的前提下直接Zero-shot得到的结果与ResNet在128W ImageNet数据训练效果一致\",\"CLIP使用4亿个配对的数据和文本来进行训练，不标注直接爬取（没有解决transformer训练所需数据量大的缺点）\"]},\"859\":{\"h\":\"Train\",\"t\":[\"以一个batch size为N的输入为例，\",\"首先，N张图像和N个文本分别被各自模态的Encoder编码成高维向量。\",\"然后，用它们的向量表示建立一个相似度矩阵（图中，I*T表示两模态向量的内积）。值得注意的是，在训练过程中，矩阵对角线上的内积是匹配图文的内积（即当前batch内，文本T1和图像I1是匹配的图文对，而文本T1和图像I2是不匹配的图文对）。我们知道内积越大，相似度越高，因此匹配的图文对的相似度（内积）必须高于同一行/列中其他图文对的相似度（内积）才合理。\",\"于是，训练的目标可以看作是在进行对比，对比的目的是使同一行/列中匹配图文的内积尽可能大，不匹配图文的内积尽可能小。我们也可以用更通俗的方式来理解：每一行都是一个分类任务，给定一个输入图像I，预测匹配的那个文本是谁。同理，每一列都是一个分类任务：给定输入文本T，预测匹配的那张图像是谁。\",\"在训练期间，Open AI使用了非常大规模的batch size（32768），这可以充分发挥这种对比训练的潜力。\",\"标准图像模型联合训练图像特征提取器和线性分类器来预测某些标签，而 CLIP 联合训练图像编码器和文本编码器来预测一批（图像、文本）训练示例的正确配对。在测试时，学习的文本编码器通过嵌入目标数据集类的名称或描述来合成零样本线性分类器。\",\"# image_encoder - ResNet or Vision Transformer # text_encoder - CBOW or Text Transformer # I[n, h, w, c] - minibatch of aligned images # T[n, l] - minibatch of aligned texts # W_i[d_i, d_e] - learned proj of image to embed # W_t[d_t, d_e] - learned proj of text to embed # t - learned temperature parameter # 分别提取图像特征和文本特征 I_f = image_encoder(I) #[n, d_i] T_f = text_encoder(T) #[n, d_t] # 对两个特征进行线性投射，得到相同维度的特征，并进行l2归一化 I_e = l2_normalize(np.dot(I_f, W_i), axis=1) T_e = l2_normalize(np.dot(T_f, W_t), axis=1) # 计算缩放的余弦相似度：[n, n] logits = np.dot(I_e, T_e.T) * np.exp(t) # 对称的对比学习损失：等价于N个类别的cross_entropy_loss labels = np.arange(n) # 对角线元素的labels loss_i = cross_entropy_loss(logits, labels, axis=0) loss_t = cross_entropy_loss(logits, labels, axis=1) loss = (loss_i + loss_t)/2 \"]},\"860\":{\"h\":\"infer\",\"t\":[\"在推理过程中，使用者可以按照prompt（提示词）的格式自定义新文本。将新文本和图像送入CLIP模型后，通过内积值的大小来判断新文本和图像是否是匹配的。如下图所示，提示词是a photo of a {object}.，我们只需要将我们想判断的类别跟{object}进行替换即可。例如，我想判断这个图片是不是狗，我的新文本就是a photo of a dog.\",\"经典的分类训练只关心模型是否可以正确预测图像的分类标签。如果模型预测成功了狗，那么它不在乎图像是一张狗的照片，还是一张狗的素描。而CLIP模型在大规模数据集上完成的训练，这使得CLIP模型还学习到了图像的各方面信息。\",\"例如，CLIP模型对用于图像描述的单词很敏感。文本“a photo of a bird”、“a photo of a bird siting near bird feeder”或“an image of a bird”与相同的图像匹配产生的概率是不同的。\"]},\"861\":{\"h\":\"结果\"},\"862\":{\"h\":\"DiffusionCLlP\",\"t\":[\"DiffusionCLIP: Text-Guided Diffusion Models for Robust Image Manipulation | Papers With Code\",\"CVPR 2022\",\"过使扩散生成时的图像和目标文本的多模态CLIP损失尽可能小。\",\"CLIP Loss\",\"Ldirection​(xgen​,ytar​;xref​,yref​):=1−∥ΔI∥∥ΔT∥⟨ΔI,ΔT⟩​\",\"其中 ΔI 是图像编码器对生成图和原图的编码向量差，ΔT是文本编码器对目标文本和原文本的编码向量的差。\",\"VQVAE原理解读 - 知乎 (zhihu.com)\",\"生成模型之VQ-VAE - 知乎 (zhihu.com)\",\"变分自编码器（一）：原来是这么一回事 - 科学空间|Scientific Spaces (kexue.fm)\",\"变分自编码器（二）：从贝叶斯观点出发 - 科学空间|Scientific Spaces (kexue.fm)\",\"Taming Transformers for High-Resolution Image Synthesis\",\"CVPR 2021\",\"驯化transformer来生成高解析度图像\"]},\"863\":{\"h\":\"问题\",\"t\":[\"图像的序列长度远比自然语言高。自然语言模型往往将生成序列的长度控制在1024或512内，但如果将自然语言模型里的transformer用来自回归式逐位生成像素的话，1024的长度只能生成32*32大小的图像。并且，attention的计算复杂度是随着序列长度的增长以平方级增长的，这样就限制了能生成图像的大小。虽然相比于CNN，transformer并不对输入进行任何先验的假设（例如平移不变性，局部性等）并且因此能够很好地拟合输入间复杂的关系，但这种普适泛化性也意味着你需要更充足的训练和更广泛的搜索范围。\",\"**有没有办法既兼具CNN的先验偏置，又兼具transformer建模序列的泛化性？**这篇文章主要在探讨如何解决这个问题。作者提出了以下洞见：CNN的归纳偏置可以很好地概括图像的底层结构特性（例如它的局部性），但这种偏置对于语义层面（即图像的整体理解，全局把握）的建模用处不大。\"]},\"864\":{\"h\":\"方法\",\"t\":[\"提出了一种CNN+GAN+Transformer的结构来生成高精度图像。\",\"第一个步骤先训练一个VQVAE模型，其中CNN负责作为编码器，将图像编码成一个个具体且感知丰富（由感知损失Perceptual loss和GAN共同完成）的离散编码向量，再由解码器（也是CNN架构）还原原图像。\",\"而在得到了编解码器后采样生成的第二个步骤时，训练一个transformer来学习第一步里的离散编码向量序列间的关系。\",\"VQGAN或者DALL-E都使用了Transformer架构将潜在空间里的离散索引序列的建模问题转化为了一维的序列生成问题。 ？？？？\",\"VQGAN-CLIP: Open Domain Image Generation and Editing with Natural Language Guidance | Papers With Code\",\"用一个多模态的编码器来计算文和图的编码向量的余弦相似度，并将该相似度以损失的形式传递给图像生成器，不断迭代直到收敛。而这种流程对于用文本引导从零生成和以图生图的区别仅在于输入是随机噪声还是给定图像。\",\"CompVis/stable-diffusion: A latent text-to-image diffusion model (github.com)\",\"CVPR 2022\",\"Disco-Diffusion：diffusion + clip，在全图像素上进行扩散，训练一个这样的模型需要数百个V100卡满载天数，而且下游推理同样费时费力。\",\"StableDiffusion\"]},\"865\":{\"h\":\"总结\",\"t\":[\"最本质来说，SD相当于VQGAN里的Transformer被替换成了diffusion model。\",\"论文的另一个核心贡献是探索了使用cross-attention做多模态的条件扩散生成。\"]},\"866\":{\"h\":\"Denoising Diffusion Probabilistic Models\"},\"867\":{\"h\":\"1. Difussion\",\"t\":[\"扩散过程：\",\"一个固定过程\",\"扩散超参 β\",\"xt−1​→xt​：\",\"xt​=1−βt​​xt−1​+β​t​zt​,zt​∼N(0,I)\",\"β:10−4∼2−2, linear, T≈2000\",\"令 1−βt​=αt​\",\"xt​​=α​t​xt​+1−αt​​zt​=α​t​(αt−1​​xt−2​+1−αt−1​​zt−1​)+1−αt​​zt​​​\",\"根据高斯分布的叠加方法：\",\"xt​=αt​αt−1​​xt−2​+1−αt​αt−1​​z,z∼N(0,I)\",\"令 αˉt​=∏i=1T​αi​，得到 x0​ 与 xt​ 的关系：\",\"xt​=αˉt​​x0​+1−αˉt​​z\",\"如何取β的值？：αˉ→0,xT​→N(0,I)\",\"train a model to fit noise in each steps\"]},\"868\":{\"h\":\"2. Training\",\"t\":[\"假设batch_size = 4，T = 2000\",\"def diffusion_loss_fn(model,x_0,alphas_bar_sqrt,one_minus_alphas_bar_sqrt,n_steps): \\\"\\\"\\\"对任意时刻t进行采样计算loss\\\"\\\"\\\" batch_size = x_0.shape[0] #对一个batchsize样本生成随机的时刻t t = torch.randint(0,n_steps,size=(batch_size//2,)).to(device) t = torch.cat([t,n_steps-1-t],dim=0) t = t.unsqueeze(-1) #x0的系数 a = alphas_bar_sqrt[t] #eps的系数 aml = one_minus_alphas_bar_sqrt[t] #生成随机噪音eps e = torch.randn_like(x_0).to(device) #构造模型的输入 x = x_0 * a + e * aml #送入模型，得到t时刻的随机噪声预测值 output = model(x,t.squeeze(-1)) #与真实噪声一起计算误差，求平均值 return (e - output).square().mean() \"]},\"869\":{\"h\":\"3. Sampling\",\"t\":[\"根据贝叶斯理论：\",\"q(xt−1​∣xt​)=q(xt​)q(xt​,xt−1​)​=q(xt​)q(xt​∣xt−1​)q(xt−1​)​\",\"目前已知的有：xt−1​→xt​，x0​→xt​\",\"xt​xt​​=αt​​xt−1​+1−αt​​z∼N(αt​​xt−1​,(1−αt​)I)⟶q(xt​∣xt−1​)=αˉt​​x0​+1−αˉt​​z∼N(αˉt​​x0​,(1−αˉt​)I)⟶q(xt​)​​\",\"q(xt​∣xt−1​)q(xt​)q(xt−1​)​∼N(αt​​xt−1​,(1−αt​)I)∼N(αˉt​​x0​,(1−αˉt​)I)∼N(αˉt−1​​x0​,(1−αˉt−1​)I)​\",\"又因为，高斯分布的密度函数可以写成：N(μ,σ2)∝exp(−21​σ2(x−μ)2​)\",\"q(xt​)q(xt​∣xt−1​)q(xt−1​)​​∝exp[−21​(1−αt​(xt​−α​t​xt−1​)2​+1−αˉt−1​(xt−1​−αˉt−1​​x0​)2​−1−αˉt​(xt​−αˉt​​x0​)2​)]∝exp{−21​[(βt​αt​​+1−αˉt−1​1​)xt−12​−2(βt​α​t​xt​​+1−αˉt−1​αˉt−1​​x0​​)xt−1​]+...}∝exp[−21​(Axt−12​+Bxt​+C)]∝exp[−21​A(xt−1​+2AB​)2+...]​\",\"提取系数，A=βt​αt​​+1−αˉt−1​1​，B=−2(βt​α​t​xt​​+1−αˉt−1​αˉt−1​​x0​​)\",\"所以，μ=2AB​，σ2=A1​\",\"σ2​=A1​=βt​αt​​+1−αˉt−1​1​1​=1−αt​αˉt−1​βt​(1−αˉt−1​)​=1−αˉt​1−αˉt−1​​βt​​​\",\"μ​=2AB​=(βt​α​t​xt​​+1−αˉt−1​αˉt−1​​x0​​)1−αˉt​1−αˉt−1​​βt​=1−αˉt​αt​​xt​(1−αˉt−1​)​+1−αˉt​αˉt−1​​x0​βt​​=1−αˉt​αt​​(1−αˉt−1​)​xt​+1−αˉt​αˉt−1​​βt​​x0​​​\",\"因为 xt​=αt​​xt−1​+1−αt​​z ，x0​=αˉt​​1​(xt​−1−αˉt​​z~)，带入 μ\",\"μ​=1−αˉt​αt​​(1−αˉt−1​)​xt​+1−αˉt​αˉt−1​​βt​​αˉt​​1​(xt​−1−αˉt​​z~)=αˉt​​xt​​(1−αˉt​αt​−αˉt​+βt​​)+αt​​z~​1−αˉt​​βt​​=α​t​1​(xt​−1−αˉt​​βt​​z~)​​\",\"[TOC]\"]},\"870\":{\"c\":[\"文威\"]},\"871\":{\"h\":\"Deblurring via Stochastic Refinement\",\"t\":[\"(cvpr 2022')Deblurring via Stochastic Refinement\",\"Deblurring via Stochastic Refinement | Papers With Code\",\"未开源\"]},\"872\":{\"h\":\"related work\",\"t\":[\"cvpr 18‘ the preception-distortion tradeoff\",\"pd 曲线\",\"论文阅读笔记之——《The Perception-Distortion Tradeoff》_gwpscut的博客-CSDN博客\"]},\"873\":{\"h\":\"method\",\"t\":[\"predict ＆ refine，扩散模型的 x0 不再是原图，而是原图和 predictor 的残差\",\"sample averaging：由于每一次采样的随机性，可以多重建几次，取平均\",\"采样步数越多，主观质量越好，反之客观质量越好 \",\"训练的时候用小patch，测试的时候用整张图————low level task\"]},\"874\":{\"h\":\"网络架构\",\"t\":[\"未开源\",\"initial predictor 和 denoiser 是一样的，base channel 前者64，后者32\",\"参数量前者 26m，后者7m\"]},\"875\":{\"h\":\"result\",\"t\":[\"Low-level任务：常见的包括 Super-Resolution，denoise， deblur， dehze， low-light enhancement， deartifacts等。简单来说，是把特定降质下的图片还原成好看的图像，现在基本上用end-to-end的模型来学习这类 ill-posed问题的求解过程，客观指标主要是PSNR，SSIM，大家指标都刷的很高。目前面临以下几点问题：\",\"泛化性差，换个数据集，同种任务变现就很差\",\"客观指标与主观感受存在，GAP，指标刷很高，人眼观感不佳，用GAN可缓解 落地的问题，SOTA模型运算量很(上百G Flops)，但实际不可能这么用\",\"主要是为人眼服务，缺乏与High-level之间的联系\",\"High-level任务：分类，检测，分割等。一般公开训练数据都是高品质的图像，当送入降质图像时，性能会有下降，即使网络已经经过大量的数据增强（形状，亮度，色度等变换）\",\"真实应用场景是不可能像训练集那样完美的，采集图像的过程中会面临各种降质问题，需要两者来结合。简单来说，结合的方式分为以下几种\",\"直接在降质图像上fine-tuning\",\"先经过low-level的增强网络，再送入High-level的模型，两者分开训练\",\"将增强网络和高层模型（如分类）联合训练\\n————————————————\\n版权声明：本文为CSDN博主「WTHunt」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\\n原文链接：https://blog.csdn.net/qq_20880415/article/details/117225213\"]},\"876\":{\"h\":\"DiffSeg\",\"t\":[\"Diffuse, Attend, and Segment: Unsupervised Zero-Shot Segmentation using Stable Diffusion\",\"Aug.23.2023\"]},\"877\":{\"h\":\"相关工作\",\"t\":[\"Transformer Decoder\",\"https://github.com/CompVis/latent-diffusion/blob/a506df5756472e2ebaf9078affdde2c4f1502cd4/ldm/modules/attention.py#L196C40-L196C40\",\"class BasicTransformerBlock(nn.Module): def __init__(self, dim, n_heads, d_head, dropout=0., context_dim=None, gated_ff=True, checkpoint=True): super().__init__() self.attn1 = CrossAttention(query_dim=dim, heads=n_heads, dim_head=d_head, dropout=dropout) # is a self-attention self.ff = FeedForward(dim, dropout=dropout, glu=gated_ff) self.attn2 = CrossAttention(query_dim=dim, context_dim=context_dim, heads=n_heads, dim_head=d_head, dropout=dropout) # is self-attn if context is none self.norm1 = nn.LayerNorm(dim) self.norm2 = nn.LayerNorm(dim) self.norm3 = nn.LayerNorm(dim) self.checkpoint = checkpoint def forward(self, x, context=None): return checkpoint(self._forward, (x, context), self.parameters(), self.checkpoint) def _forward(self, x, context=None): x = self.attn1(self.norm1(x)) + x x = self.attn2(self.norm2(x), context=context) + x x = self.ff(self.norm3(x)) + x return x \"]},\"878\":{\"h\":\"方法\"},\"879\":{\"h\":\"理论依据\"},\"880\":{\"h\":\"Intra-Attention Similarity\",\"t\":[\"一张 attn map 中，同一个 object group 附近相似。\"]},\"881\":{\"h\":\"Inter-Attention Similarity\",\"t\":[\"同一个 object group 具有相似 attn map 。\"]},\"882\":{\"h\":\"attention map\",\"t\":[\"(hk​,wk​)∈{8×8,16×16,32×32,64×64}\",\"总共16个注意力层\",\"使用无条件的 latent\",\"仅运行一次SD \",\"t = 300，近似无噪音输入\",\"如何处理多头注意力\",\"由于多头注意力机制，存在第五个维度。\",\"每个注意力层都有 8 个多头输出。我们沿着多头轴平均注意力张量以减少到 4 个维度，因为它们在这个维度上非常相似。\",\"实验中，多头之间的差异远小于不同map之间kl散度的阈值，即使不平均在后面也会被合并。\"]},\"883\":{\"h\":\"Attention Aggregation\",\"t\":[\"对齐张量\",\"不同大小的map使用双线性插值扩大 \",\"归一化，保持和为1\",\"不同数量的map进行复制\",\"相加，聚合成 64×64×64×64\",\"聚合权重，正比于map分辨率\"]},\"884\":{\"h\":\"Iterative Attention Merging\",\"t\":[\"采样 64 个点（anchors）\",\"La​，sample grid，从 Af​中采样\",\"Af​, attn maps, 64×64×64×64\",\"N, iterations,\",\"τ, threshold\",\"第一次迭代\",\"根据相似程度，将不同的maps聚类到不同的anchors上 \",\"KL散度，\",\"KL散度具有方向，取正反两个方向相加\",\"对每个聚类的anchors中的maps进行平均，得到这个anchor的attn map\",\"后续\",\"与第一次迭代类似，不同的是对anchor进行聚类和平均，减少anchor数量 \",\"类似 mean shift\",\"双线性插值\",\"非极大抑制\",\"TIP\",\"KL 散度不是距离指标，没有对称性\",\"用其他方式衡量相似的？\",\"Wasserstein Distance\",\"【数学】Wasserstein Distance - 知乎 (zhihu.com)\",\"Covariance\"]},\"885\":{\"h\":\"结果\"},\"886\":{\"h\":\"类似工作\"},\"887\":{\"h\":\"AffinityNet\",\"t\":[\"jiwoon-ahn/psa: Learning Pixel-level Semantic Affinity with Image-level Supervision for Weakly Supervised Semantic Segmentation, CVPR 2018 (github.com)\",\"论文笔记]AffinityNet_动如脱兔((≡ຶ̑ꀬ≡ຶ̑))静如脱兔的博客-CSDN博客\",\"输入：原始图像\",\"输出：图像中相邻坐标像素对的语义相似度\",\"仅通过图像级标签预测像素级别的语义相似度\",\"根据给定的图像和生成的CAM，首先建立一个邻域图，其中每个像素都在一定半径内与其邻域相连，通过AffinityNet估计图中连通像素对的语义相似度。\",\"针对每一个类别，CAM中稀疏的激活区域通过随机游走策略传播到周围语义相同的区域，并对传播到其他语义类别的区域进行处罚。这种语义扩散对CAMs区域起到了很大的修正作用。\",\"本文利用这个过程来进行训练，通过获取的每个像素位置与CAM对应类标签的关联性合成像素级的分割标签。生成的分割标签用于训练分割模型。\",\"类似文章，把cnn的feature 换成了 transform 的feature\",\"CVPR 2022] Learning Affinity from Attention: End-to-End Weakly-Supervised Semantic Segmentation with Transformers (github.com)\"]},\"888\":{\"h\":\"DiffuMasks\",\"t\":[\"weijiawu/DiffuMask: DiffuMask: Synthesizing Images with Pixel-level Annotations for Semantic Segmentation Using Diffusion Models (github.com)\",\"ICCV 2023\",\"生成图片的同时生成mask，跨模态，文本监督\"]},\"889\":{\"h\":\"ReCo\",\"t\":[\"Reco: Retrieve and co-segment for zero-shot transfer.\",\"NeurIPS'22 ReCo: Retrieve and Co-segment for Zero-shot Transfer (github.com)\",\"ReCo (ox.ac.uk)\",\"不懂\",\"ReCo 的输入是未标记图像的集合以及要分割的概念的文本描述列表。通过将图像检索和图像集合中的联合分割相结合，ReCo 可以动态地为给定的概念构建分割器。在推理过程中，应用该分割器时无需对感兴趣的目标分布中的图像进行微调，从而支持零样本传输。\",\"Dense Clip\",\"将 clip 的 text - image 工作进一步拓展到 text - pixel ，以实现分割\",\"【CLIP系列Paper解读】DenseCLIP: Language-Guided Dense Prediction with Context-Aware Prompting - 知乎 (zhihu.com)\"]},\"890\":{\"h\":\"Network-free\",\"t\":[\"cvpr‘2023\",\"Network-Free, Unsupervised Semantic Segmentation With Synthetic Images | Papers With Code\",\"核心idea\",\"当使用 GAN 中的风格混合方法生成图像的合成变体时，属于同一语义段的一组像素的相关性不会改变。\"]},\"891\":{\"h\":\"ToCo\",\"t\":[\"CVPR 2023 Token Contrast for Weakly-Supervised Semantic Segmentation (github.com)\",\"CAM: Class Activation Map, 分类网络预测图像时的激活区域。\",\"EMA: 指数移动平均（Exponential Moving Average）也叫权重移动平均（Weighted Moving Average），是一种给予近期数据更高权重的平均方法。\",\"【炼丹技巧】指数移动平均（EMA）的原理及PyTorch实现 - 知乎 (zhihu.com)\",\"vit存在的过度平滑问题,feature map\"]},\"892\":{\"h\":\"PTC：Patch Token Contrast\",\"t\":[\"利用中间层（第十个encoder)的输出外接辅助分类层得到Mm，主要是因为中间层仍然可以保持语义多样性，由它生成的token relations Y作为global patch tokens F的监督，可以解决vit存在的过度平滑问题。\"]},\"893\":{\"h\":\"CTC：ClassTokenContrast\",\"t\":[\"PTC解决了vit存在的过度平滑问题，生成效果不错的辅助cam。然而，仍然存在一些识别能力较弱的难以区分的对象区域。\",\"受ViT中class token 可以聚合高级语义的特性，设计了(class Token Contrast, CTC)模块，提高伪标签质量。\",\"从辅助CAM Mm指定的不确定区域和背景区域对原始图像进行随机裁剪得到局部图像，将其分配为正样本(来自不确定区域)或负样本(来自背景区域)。\",\"通过最小化全局class token P和正样本之间的差异（在不确定区域中激活出更多的前景区域），最大化全局class token P和负样本之间的差异（加大前景和背景的差异），\",\"整个ctc loss 通过最小化全局class token 和局部class token 来促进局部非显著区域与全局对象之间表示的一致性，从而进一步强制从CAM中激活更多的对象区域。\"]},\"894\":{\"h\":\"PoseDiffusion\",\"t\":[\"PoseDiffusion: Solving Pose Estimation via Diffusion-aided Bundle Adjustment\",\"Bundle Adjustment原理及应用（附实战代码） - 知乎 (zhihu.com)\",\"光程平差法\",\"LM 最优化算法\"]},\"895\":{\"h\":\"SCORE-BASED GENERATIVE MODELING THROUGH STOCHASTIC DIFFERENTIAL EQUATIONS\",\"t\":[\"Score-Based Generative Modeling through Stochastic Differential Equations - 馒头and花卷 - 博客园 (cnblogs.com)\",\"扩散模型发展过程中最重要的工作 \",\"将之前两类扩散模型进行了理论上的统一\",\"本质还是估计 Score\"]},\"896\":{\"h\":\"用 SDE 描述扩散模型\",\"t\":[\"xt​ t 固定 -> 随机变量 xt​∼N(αˉ​x0​,(1−αˉt​)I)\",\"​ x 固定 -> xT​,xT−1​,...,x1​,x0​ 轨迹（采样）\",\"xt​ 是一个随机过程，所以可以用 SDE 描述\"]},\"897\":{\"h\":\"SDE-based diffusion process\",\"t\":[\"离散过程\",\"t∈{0,1,2,...,T}\",\"连续过程\",\"t∈[0,1]xt​→xt+Δt​,Δt→0\",\"dx=确定性f(x,t)dt​​+不确定性g(t)dw​​\",\"f(x,t)： drift coefficient\",\"g(t)：diffusion coefficient\",\"w ：Brownian motion\",\"菲克第二定律，郎之万动力学\",\"xt+Δt​−xt​xt+Δt​p(xt+Δt​∣xt​)xt+Δt​→xt​,logp(xt+Δt​)p(xt​∣xt+Δt​)≈exp{​=f(xt​,t)Δt+g(t)Δt​ε,ε∼N(0,I)=xt​+f(xt​,t)Δt+g(t)Δt​ε∼N(xt​+f(xt​,t)Δt,g2(t)Δt)p(xt​∣xt+Δt​)=p(xt+Δt​)p(xt+Δt​∣xt​)p(xt​)​=p(xt+Δt​∣xt​)exp{logp(xt​)−logp(xt+Δt​)}≈logp(xt​)+(xt+Δt​−xt​)∇xt​​logp(xt​)+Δt∂t∂​logp(xt​)=p(xt+Δt​∣xt​)exp{−(xt+Δt​−xt​)∇xt​​logp(xt​)−Δt∂t∂​logp(xt​)}∝exp{2g2(t)Δt∥xt+Δt​−xt​−f(xt​,t)Δt∥22​​−(xt+Δt​−xt​)∇xt​​logp(xt​)−Δt∂t∂​logp(xt​)}=exp{−2g2(t)Δt1​((xt+Δt​−xt​)2−(2f(xt​,t)Δt−2g2(t)Δt∇xt​​logp(xt​))(xt+Δt​−xt​))−Δt∂t∂​logp(xt​)−2g2(t)f2(xt​,t)Δt​}=exp{−2g2(t)Δt1​​(xt+Δt​−xt​)−(f(xt​,t)−g2(t)∇xt​​logp(xt​))Δt​22​−Δt∂t∂​logp(xt​)−2g2(t)f2(xt​,t)Δt​+2g2(t)(f(xt​,t)−g2(t)∇xt​​logp(xt​))2Δt​}Δt→0,xt+Δt​→xt​−2g2(t)Δt1​​(xt+Δt​−xt​)−(f(xt+Δt​,t+Δt)−g2(t+Δt)∇xt+Δt​​logp(xt+Δt​))Δt​22​}​​\",\"p(xt​∣xt+Δt​)dx采样：xt+Δt​−xt​​均值：方差：=[f(x,t)−g2(t)∇xt​​logp(xt​)]+g(t)dw=[f(xt+Δt​,t+Δt)−g2(t+Δt)∇xt+Δt​​logp(t+Δt)]Δt+g(t+Δt)Δt​ε​​\",\"总结：扩散过程与采样过程\",\"{​dx=f(x,t)dt+g(t)dwdx=[f(x,t)−g2(t)∇x​logp(x)]dt+g(t)dw​\"]},\"898\":{\"h\":\"与之前工作的联系\"},\"899\":{\"h\":\"VE-SDE\",\"t\":[\"variance exploding\",\"NCSN，noise-conditioned score networks \",\"xt​=x0​+σt​ε\",\"xt+1​=xt​+σt+12​−σt2​​ε\",\"xT​=x0​+σT​ε\",\"σT​↑\"]},\"900\":{\"h\":\"VP-SDE\",\"t\":[\"variance preserving\",\"DDPM \",\"xt​=αˉt​​x0​+1−αˉt​​ε\",\"xt+1​=1−βt+1​​xt​+βt+1​​ε\",\"xT​=αˉT​​x0​+1−αˉT​​ε\",\"αˉT​​→0\",\"dx=f(x,t)dt+g(t)dw,xt​→xt+Δt​\",\"xt+Δt​=xt​+f(xt​,t)Δt+g(t)Δt​ε\",\"VE:\",\"xt+Δt​​=xt​+σt+Δt2​−σt2​​ε=xt​+Δtσt+Δt2​−σt2​​​Δt​ε=xt​+dtd[σt2​]​​Δt​ε​\",\"f(xt​,t)=0,g(t)=dtd[σt2​]​​\",\"VP:\",\"xt+1​{βi​}i=1T​,xt+1​T→∞,β(Ti​)=βˉ​i​,xt+Δt​​=1−βt+1​​xt​+βt+1​​ε令{βˉ​i​=Tβi​}i=1T​=1−Tβˉ​t+1​​​xt​+Tβˉ​t+1​​​ε{βi​}i=1T​→β(t),t∈[0,1]Δt=T1​=1−β(t+Δt)Δt​xt​+β(t+Δt)Δt​ε≈(1−21​β(t+Δt)Δt)xt​+β(t+Δt)Δt​ε≈(1−21​β(t)Δt)xt​+β(t)Δt​ε​\",\"f(xt​,t)=−21​β(t)Δt)xt​, g(t)=β(t)​\",\"SDE 通过不同的 f()   g()，来实现 NCSN，DDPM\"]},\"901\":{\"h\":\"Image Super-Resolution via Iterative Refinement\",\"t\":[\"SR3 的工作原理是通过一系列细化步骤学习将标准正态分布转换为经验数据分布。灵感来自最近关于去噪扩散概率模型 (DDPM) 和去噪分数匹配 的工作。\",\"将超分任务描述成一个有条件生成\",\"将 LR 作为条件，与噪声图 concat 后送入Unet\",\"不再直接取 αˉt​，而是取均匀分布 [αˉt−1​,αˉt​]\",\"不再输入t给unet，而是直接输入 noise level，也就是上一条中均匀采样的值\",\"xt​=αˉt​​x0​+1−αˉt​​z\",\"z~=Unet(xt​,t)\",\"z~=Unet(xt​,αˉt​)\",\"通过噪声level，跳步生成过程\",\"(NIPSW 22')Palette: Image-to-Image Diffusion Models\",\"Palette: Image-to-Image Diffusion Models (iterative-refinement.github.io)\",\"对 unet ，损失函数添加条件项，未开源\"]},\"902\":{\"h\":\"生成模型\",\"t\":[\"假定我们有一个数据集 {x1,x2,…,xN} 其中的每个 xi 都是从一个潜在的数据分布 pθ​(x) 中独立取得的\",\"生成模型的目的是能够完美的建模这个数据分$p_θ (x) $,以便任意的采样都能生成符合这个分布的新数据。\",\"设定，fθ​(x)∈R是一个以θ 为参数的函数\",\"为了构造这个模型需要一种表示这种概率分布的方式\"]},\"903\":{\"h\":\"概率密度函数\",\"t\":[\"pθ​(x)=zθ​e−fθ​(x)​\",\"Zθ​：归一化常数，使得概率密度函数积分为一\",\"fθ​(x) ：非归一化的概率模型\",\"对于任意一般情况下的fθ​(x)，归一化常数非常难求\"]},\"904\":{\"h\":\"score-based models\",\"t\":[\"通过构造一个score function而非density function来避开处理这个规则化常数的问题。\",\"对一个分布P(x) ， 其score function定义为:（Stein score function）\",\"∇x​log⁡p(x)\",\"使用这种score function的模型我们就统称为score-based model，用 sθ​(x)表示\",\"sθ​(x)=∇x​logpθ​(x)=−∇x​fθ​(x)+=0∇x​logZθ​​​=−∇x​fθ​(x)\",\"排除掉 Zθ​，无需通过设计复杂的结构处理\",\"Estimation of Non-Normalized Statistical Models by Score Matching\",\"Score Matching 的抽象逻辑其实可以用一句话概括：通过最小化模型的对数密度梯度（gradient of the log-density）和 观测数据的对数密度梯度 的期望平方距离 来估计参数。\",\"​\",\"Ep(x)​[∣∣∇x​logp(x)−sθ​(x)∣∣22​]\",\"可以在给定数据上通过梯度下降的方式估计得到\",\"如果处理不了形式复杂的函数，那就处理这个函数的导数\",\"sθ​(x)代表梯度预测网络。\",\"∇θ​​Epdata​​[∣∣sθ​(x)−∇x​logpdata​(x)∣∣22​]=∇θ​Epdata​​[∣∣sθ​(x)∣∣22​+(∇x​logpdata​(x))(∇x​logpdata​(x))T]−2sθ​(x)(˙​∇x​logpdata​(x))T=∇θ​Edata​[∣∣sθ​(x)∣∣22​]+0−2∇θ​Epdata​​[sθ​(x)⋅pdata​(x)∇x​pdata​(x)​]=∇θ​Edata​[∣∣sθ​(x)∣∣22​]−2∇θ​∫sθ​(x)⋅∇x​pdata​(x)dx(∫∇x​(sθ​(x)⋅∇x​pdata​(x))dx=sθ​(x)⋅pdata​(x)∣x→−∞x→+∞​≡0=∇θ​Edata​[∣∣sθ​(x)∣∣22​−2tr(∇x​sθ​(x))](Our TrainingObject)​​​\",\"变换后的公式不需要显式的概率密度pθ​(x)，因此可求，但是含有梯度计算，计算量巨大\",\"目标函数 Eqσ​(x^∣x)pdata​(x)​[∣∣sθ​(x^)−∇x^​logqσ​(x^∣x)∣∣22​]\",\"真实带噪数据\",\"模型扩散过程中（扰动后）的对数密度梯度\",\"噪声为高斯噪声时 ，可化简。\",\"用一种特定的噪声分布来扰动原始数据，用score matching的方法去估计扰动后的数据分布的score。\",\"当噪声十分小的时候，有近似：qσ​(x)≈pdata​(x)\"]},\"905\":{\"h\":\"Langevin dynamics\",\"t\":[\"仅通过使用score function $∇_x log⁡p(x) $来对真实数据分布P(x)进行MCMC采样\",\"MCMC, 马尔科夫链蒙特卡洛(Markov Chain Monte Carlo)方法,是用于从复杂分布中获取随机样本的统计学算法\",\"$z_t\\\\sim\\\\mathcal{N}(0,I) $，α 是步长\",\"https://ieeexplore.ieee.org/abstract/document/6795935\"]},\"906\":{\"h\":\"DDPM\",\"t\":[\"让模型输出和随机生成的噪音 距离差值最小。我们的模型的目标其实就是在生成噪音。\",\"α 为超参\",\"扩散过程就是从初始状态也是观测值（x0）开始，一步步添加高斯噪音，直到步数T足够多之后，噪音将原始输入信号完全淹没，得到一个纯的高斯噪声（xT）。\",\"每一步得到的图片都可以看成是初始值和标准高斯噪音的一个线性组合，如果可以预测到，就可以在反向过程将每一步t中的噪声信息从x中抽取出来，起到去噪的效果。\",\"生成真实信号与标准高斯分布噪音之间多余的那部分噪音信号，我们可以通过用 标准高斯分布噪音 减去 生成的噪音信号 得到我们最后的 合成信号。\"]},\"907\":{\"h\":\"SR3\",\"t\":[\"前向马尔可夫扩散过程 q，它在 T 次迭代中逐渐将高斯噪声添加到高分辨率图像 y0 中。\",\"扩散的过程是人为拟定好的过程，主要训练的是反向的去噪过程。\",\"模型fθ​(x,y^​,γ)将噪声的方差 γ 的充分统计量作为输入，并被训练用来预测噪声向量 ε。通过调节标量 γ，使模型了解噪声水平。\"]},\"908\":{\"h\":\"训练过程\",\"t\":[\"训练集为图像对（LR，HR）\",\"模型输入包括：\",\"LR图像x。\",\"含噪图像 yt ，其中 y0 为HR图像，由下面公式得到：\",\"α为超参,γ与训练次数t相关\",\"使得模型输出的噪声与随机采样的高斯噪声差距尽可能小。\"]},\"909\":{\"h\":\"推理过程\",\"t\":[\"输入为低分辨率图像x以及高斯噪声yt，输出为高分辨率图像。 输入通过公式重复迭代T次得到SR图像\",\"类似于 Langevin 动力学的一个步骤，其中f_θ 提供了数据对数密度梯度的估计\"]},\"910\":{\"h\":\"实验结果\",\"t\":[\"人脸图像：训练集为FFHQ，评估集为CelebA-HQ\",\"表 1 显示了 16×16 → 128×128 人脸超分辨率的 PSNR、SSIM [59] 和 Consistency 分数。SR3 在 PSNR 和 SSIM 上的表现优于 PULSE 和 FSRGAN，而在回归基准上的表现稍差。当输入分辨率低且放大因子大时，这些传统的自动评估措施与人类感知的相关性不佳。\",\"PSNR和SSIM等自动图像质量分数通常会惩罚合成的高频细节，例如头发纹理，因为合成细节和参考细节并不完全一致，所以与基于 MSE 回归的技术相比差一些。\",\"自然图像：训练集与评估集为ImageNet\",\"SR3 的输出实现了更高的样本质量分数（FID 和 IS），但 PSNR 和 SSIM 比回归差。\",\"Generative Modeling by Estimating Gradients of the Data Distribution | Yang Song (yang-song.net)\",\"SR3: Iterative Image Enhancement (iterative-refinement.github.io)\",\"另辟蹊径—Denoising Diffusion Probabilistic 一种从噪音中剥离出图像/音频的模型 - 知乎 (zhihu.com)\",\"生成模型新方向\",\"SR3:Image Super-Resolution via Iterative Refinement - 知乎 (zhihu.com)\",\"Denoising Diffusion Probabilistic Models (DDPM) - 馒头and花卷 - 博客园 (cnblogs.com)\"]},\"911\":{\"h\":\"Score based Diffusion model\",\"t\":[\"[ 生成模型新方向]: score-based generative models_sooner高的博客-CSDN博客\",\"Generative Modeling by Estimating Gradients of the Data Distribution | Yang Song (yang-song.net)\"]},\"912\":{\"h\":\"生成模型分类：\",\"t\":[\"likelihood based models \",\"直接队数据分布进行你和 \",\"VAE\",\"normalizing flow models\",\"缺点：对于网络结构设计有很大限制\",\"implicit generative models \",\"间接对数据分布进行拟合 \",\"GANs\",\"缺点：往往需要对抗学习，不容易训练\"]},\"913\":{\"h\":\"方法\",\"t\":[\"score based model 不是直接学习概率分布，而是学习 score\",\"假设我们通过某种方法（score match）得到了 score 模型：sθ​(x)≈∇x​logp(x)\",\"通过郎之万动力学的迭代过程从任意一个分布走到目标分布：\",\"xi+1​←xi​+ϵ∇x​logp(x)+2ϵ​zi​,i=0,1,...,k,\",\"上式给出了一种从随机采样噪声出发一步步逼近目标数据的方法\",\"ϵ 步长\"]},\"914\":{\"h\":\"问题\"},\"915\":{\"h\":\"在数据密度较低的位置，score的估计往往是不准确的\",\"t\":[\"导致在推理的早期，模型容易根据错误的梯度二脱轨\",\"解决方法\",\"对数据加噪声，扩大数据范围，增加可以准确估计score的区域\"]},\"916\":{\"h\":\"要加少强度的噪声？\",\"t\":[\"较弱的噪声——避免损害原本的数据分布——无法在大多数区域准确估计score\",\"较强的噪声——损害原本的数据分布——更多区域可以准确估计score\",\"解决方法：\",\"在推理的不同阶段加不同强度的噪声，从大到小\"]},\"917\":{\"h\":\"求 score\",\"t\":[\"DDPM的噪声假设：xt​∼N(αt​ˉ​​x0​,(1−αt​ˉ​)I)\",\"密度分布函数：p(xt​)∝exp{−2(1−αˉt​)(xt​−αt​ˉ​​x0​)⊤(xt​−αt​ˉ​​x0​)​}\",\"score: ∇xt​​logp(xt​)\",\"推导：∇xt​​logp(xt​)=−1−αˉt​xt​−αt​ˉ​​x0​​\",\"score 和加在原图上的噪声仅仅相差一个系数的关系，可以用一个噪声估计网络来估计\"]},\"918\":{\"h\":\"目标函数：\",\"t\":[\"i=1∑L​λ(i)Epσi​​(x)​[∥∇x​logpσi​​(x)−sθ​(x,i)∥22​],​​\",\"不同噪声尺度的加权结果\"]},\"919\":{\"h\":\"image inpainting\"},\"920\":{\"h\":\"总结\",\"t\":[\"为什么要加噪声：\",\"增加扰动，扩大数据范围，增加可以准确估计score的区域\",\"为什么要估计噪声：\",\"估计噪声就是估计score，也就是估计数据分布的对数梯度\"]},\"921\":{\"h\":\"Stable-Diffusion\",\"t\":[\"CompVis/stable-diffusion: A latent text-to-image diffusion model (github.com)\",\"CVPR 2022\",\"硬核解读Stable Diffusion（完整版） (qq.com)\"]},\"922\":{\"h\":\"Intro\",\"t\":[\"Disco-Diffusion：diffusion + clip，在全图像素上进行扩散，训练一个这样的模型需要数百个V100卡满载天数，而且下游推理同样费时费力。\",\"扩散模型最大的问题是它的时间成本和经济成本都极其“昂贵”。Stable Diffusion的出现就是为了解决上述问题。如果我们想要生成一张 1024 × 1024 尺寸的图像，U-Net 会使用 1024 × 1024尺寸的噪声，然后从中生成图像。这里做一步扩散的计算量就很大，更别说要循环迭代多次直到100%。一个解决方法是将大图片拆分为若干小分辨率的图片进行训练，然后再使用一个额外的神经网络来产生更大分辨率的图像（超分辨率扩散）。\",\"基于latent的扩散模型的优势在于计算效率更高效，因为图像的latent空间要比图像pixel空间要小，这也是SD的核心优势。文生图模型往往参数量比较大，基于pixel的方法往往限于算力只生成64x64大小的图像，\",\"比如OpenAI的DALL-E2和谷歌的Imagen，然后再通过超分辨模型将图像分辨率提升至256x256和1024x1024；\",\"而基于latent的SD是在latent空间操作的，它可以直接生成256x256和512x512甚至更高分辨率的图像。\",\"2021年发布的Latent Diffusion模型给出了不一样的方法。 Latent Diffusion模型不直接在操作图像，而是在潜在空间中进行操作。通过将原始数据编码到更小的空间中，让U-Net可以在低维表示上添加和删除噪声。 [2112.10752] High-Resolution Image Synthesis with Latent Diffusion Models (arxiv.org)\"]},\"923\":{\"h\":\"潜在空间(Lantent Space)\",\"t\":[\"潜在空间简单的说是对压缩数据的表示。\",\"所谓压缩指的是用比原始表示更小的数位来编码信息的过程。\",\"比如我们用一个颜色通道（黑白灰）来表示原来由RGB三原色构成的图片，此时每个像素点的颜色向量由3维变成了1维度。\",\"维度降低会丢失一部分信息，然而在某些情况下，降维不是件坏事。通过降维我们可以过滤掉一些不太重要的信息，只保留最重要的信息。\"]},\"924\":{\"h\":\"Latent Diffusion\",\"t\":[\"“潜在扩散模型”（Latent Diffusion Model）将GAN的感知能力、扩散模型的细节保存能力和Transformer的语义能力三者结合，创造出比上述所有模型更稳健和高效的生成模型。与其他方法相比，Latent Diffusion不仅节省了内存，而且生成的图像保持了多样性和高细节度，同时图像还保留了数据的语义结构。\"]},\"925\":{\"h\":\"感知压缩\",\"t\":[\"在感知压缩学习阶段，学习方法必须去除高频细节将数据封装到抽象表示中。此步骤对构建一个稳定、鲁棒的环境表示是必要的。GAN 擅长感知压缩，通过将高维冗余数据从像素空间投影到潜在空间的超空间来实现这一点。潜在空间中的潜在向量是原始像素图像的压缩形式，可以有效地代替原始图像。\",\"更具体地说，用自动编码器 (Auto Encoder) 结构捕获感知压缩。 自动编码器中的编码器将高维数据投影到潜在空间，解码器从潜在空间恢复图像。\"]},\"926\":{\"h\":\"语义压缩\",\"t\":[\"在学习的第二阶段，图像生成方法必须能够捕获数据中存在的语义结构。 这种概念和语义结构提供了图像中各种对象的上下文和相互关系的保存。 Transformer擅长捕捉文本和图像中的语义结构。 Transformer的泛化能力和扩散模型的细节保存能力相结合，提供了两全其美的方法，并提供了一种生成细粒度的高度细节图像的方法，同时保留图像中的语义结构。\",\".\"]},\"927\":{\"h\":\"Method\",\"t\":[\"对于SD模型，其autoencoder模型参数大小为84M，CLIP text encoder模型大小为123M，而UNet参数大小为860M，所以SD模型的总参数量约为1B。\"]},\"928\":{\"h\":\"autoencoder\",\"t\":[\"是一个基于encoder-decoder架构的图像压缩模型，对于一个大小为H×W×3的输入图像，encoder模块将其编码为一个大小为h×w×c 的latent，其中 f=H/h=W/h为下采样率（downsampling factor）。\",\"在训练autoencoder过程中，除了采用L1重建损失外，还增加了感知损失（perceptual loss，\",\"即LPIPS，具体见论文The Unreasonable Effectiveness of Deep Features as a Perceptual Metric）\",\"以及基于patch的对抗训练。\",\"辅助loss主要是为了确保重建的图像局部真实性以及避免模糊\",\"同时为了防止得到的latent的标准差过大，采用了两种正则化方法：\",\"第一种是KL-reg，类似VAE增加一个latent和标准正态分布的KL loss，不过这里为了保证重建效果，采用比较小的权重（～10e-6）；\",\"第二种是VQ-reg，引入一个VQ （vector quantization）layer，此时的模型可以看成是一个VQ-GAN，不过VQ层是在decoder模块中，这里VQ的codebook采样较高的维度（8192）来降低正则化对重建效果的影响。latent diffusion论文中实验了不同参数下的autoencoder模型，如下表所示，可以看到当 f 较小和 c 较大时，重建效果越好（PSNR越大）(此时压缩率小)。\",\"论文进一步将不同f的autoencoder在扩散模型上进行实验，在ImageNet数据集上训练同样的步数（2M steps），其训练过程的生成质量如下所示，\",\"可以看到过小的f（比如1和2）下收敛速度慢，此时图像的感知压缩率较小，扩散模型需要较长的学习；\",\"而过大的f其生成质量较差，此时压缩损失过大。\",\"当f在4～16时，可以取得相对好的效果。\",\"SD采用基于KL-reg的autoencoder，其中下采样率 f=8，特征维度为c=4，当输入图像为512x512大小时将得到64x64x4大小的latent。autoencoder模型时在OpenImages数据集上基于256x256大小训练的，但是由于autoencoder的模型是全卷积结构的（基于ResnetBlock），所以它可以扩展应用在尺寸>256的图像上。\"]},\"929\":{\"h\":\"CLIP text encder\",\"t\":[\"SD采用CLIP text encoder来对输入text提取text embeddings，具体的是采用目前OpenAI所开源的最大CLIP模型：clip-vit-large-patch14，这个CLIP的text encoder是一个transformer模型（只有encoder模块）：层数为12，特征维度为768，模型参数大小是123M。对于输入text，送入CLIP text encoder后得到最后的hidden states（即最后一个transformer block得到的特征），其特征维度大小为77x768（77是token的数量），这个细粒度的text embeddings将以cross attention的方式送入UNet中。\",\"from transformers import CLIPTextModel, CLIPTokenizer text_encoder = CLIPTextModel.from_pretrained(\\\"runwayml/stable-diffusion-v1-5\\\", subfolder=\\\"text_encoder\\\").to(\\\"cuda\\\") # text_encoder = CLIPTextModel.from_pretrained(\\\"openai/clip-vit-large-patch14\\\").to(\\\"cuda\\\") tokenizer = CLIPTokenizer.from_pretrained(\\\"runwayml/stable-diffusion-v1-5\\\", subfolder=\\\"tokenizer\\\") # tokenizer = CLIPTokenizer.from_pretrained(\\\"openai/clip-vit-large-patch14\\\") # 对输入的text进行tokenize，得到对应的token ids prompt = \\\"a photograph of an astronaut riding a horse\\\" text_input_ids = text_tokenizer( prompt, padding=\\\"max_length\\\", max_length=tokenizer.model_max_length, truncation=True, return_tensors=\\\"pt\\\" ).input_ids # 将token ids送入text model得到77x768的特征 text_embeddings = text_encoder(text_input_ids.to(\\\"cuda\\\"))[0] \",\"值得注意的是，这里的tokenizer最大长度为77（CLIP训练时所采用的设置），当输入text的tokens数量超过77后，将进行截断，如果不足则进行paddings，这样将保证无论输入任何长度的文本（甚至是空文本）都得到77x768大小的特征。\",\"在训练SD的过程中，CLIP text encoder模型是冻结的。\",\"在早期的工作中，比如OpenAI的GLIDE和latent diffusion中的LDM均采用一个随机初始化的tranformer模型来提取text的特征，但是最新的工作都是采用预训练好的text model。比如谷歌的Imagen采用纯文本模型T5 encoder来提出文本特征，而SD则采用CLIP text encoder，预训练好的模型往往已经在大规模数据集上进行了训练，它们要比直接采用一个从零训练好的模型要好。\"]},\"930\":{\"h\":\"UNet\",\"t\":[\"text condition将通过CrossAttention模块嵌入进来，此时Attention的query是UNet的中间特征，而key和value则是text embeddings。\",\"SD和DDPM一样采用预测noise的方法来训练UNet，其训练损失也和DDPM一样\"]},\"931\":{\"h\":\"应用\"},\"932\":{\"h\":\"text2image\"},\"933\":{\"h\":\"image2image\"},\"934\":{\"h\":\"image inpainting\"},\"935\":{\"h\":\"总结\",\"t\":[\"最本质来说，SD相当于VQGAN里的Transformer被替换成了diffusion model。\",\"论文的另一个核心贡献是探索了使用cross-attention做多模态的条件扩散生成。\",\"总之，我们的工作做出了以下贡献：\",\"(i) 与纯粹基于transformer的方法 [23、64] 相比，我们的方法可以更优雅地扩展到更高维的数据，因此可以 (a) 在压缩级别上工作，提供更多比以前的工作（见图 1）和（b）忠实和详细的重建可以有效地应用于百万像素图像的高分辨率合成。\",\"(ii) 我们在多项任务（无条件图像合成、修复、随机超分辨率）和数据集上实现了有竞争力的性能，同时显着降低了计算成本。与基于像素的扩散方法相比，我们还显着降低了推理成本。\",\"(iii) 我们表明，与同时学习编码器/解码器架构和基于分数的先验的先前工作 [90] 相比，我们的方法不需要对重建和生成能力进行微妙的加权。这确保了极其忠实的重建，并且几乎不需要对潜在空间进行正则化。\",\"(iv) 我们发现，对于超分辨率、修复和语义合成等密集条件任务，我们的模型可以以卷积方式应用，并渲染 ∼ 10242 像素的大而一致的图像。\",\"(v) 此外，我们设计了一种基于交叉注意力的通用调节机制，支持多模态训练。我们用它来训练类条件、文本到图像和布局到图像模型。\",\"(vi) 最后， 发布预训练的潜在扩散和自动编码模型，除了训练 DM 之外，它可能可重复用于各种任务\"]},\"936\":{\"h\":\"扩散模型与受控图像生成\",\"t\":[\"扩散模型与受控图像生成-脉络梳理 - 知乎 (zhihu.com)\"]},\"937\":{\"h\":\"基于迭代去噪过程的图像编辑\"},\"938\":{\"h\":\"IVLR：Conditioning Method for Denoising Diffusion Probabilistic Models\",\"t\":[\"ILVR: Conditioning Method for Denoising Diffusion Probabilistic Models - 知乎 (zhihu.com)\",\"2108.02938v2.pdf (arxiv.org)\",\"这篇论文是直接基于DDPM的工作上展开的受控图像生成。其主要针对的痛点是DDPM的随机性太高无法确定性的生成，导致我们很难控制模型生成带有我们想要的语义信息的图片。\",\"其核心思想非常地简洁但精巧：\",\"我们的前向和后向是一个等长的过程。其中前向时原数据的信息逐渐丢失（先丢失高频信息再丢失低频信息）而后向时信息逐渐从纯噪声中补全（先补全低频信息再到高频信息）。\",\"如果我们记录下前向过程里每一步的噪声图像，将其与后向过程中的噪声图像混合，我们就可以影响后向过程的生成结果（考虑极端情况完全替换后向过程的噪声图像的话则一定可以轻易地回到原图）。\",\"而我们通过影响混合时注入的前向信息的多少，或者后向时注入信息的时间步的多少，可以控制所生成的图与原图的相似程度。具体来说，其算法如下：其中 ϕN​ 是一个低通滤波器加上一系列降维再升维保持图像维度不变的过程。\",\"很明显，我们可以通过控制降维再升维的倍数来控制信息的留存比例。也可以通过噪声在后向过程里添加的时间步多寡来调整控制的强弱。通过原论文里的两张图可以看到，随着压缩倍数的增加，其细节信息的缺失会导致最终生成的结果与原图的语义差别加大。同样的趋势可以在后向去噪时施加影响的终止步数上看到。越早终止施加，则语义差别越大。\",\"优点\",\"无需额外训练，需要调控的超参不多，并且直观易懂。\",\"缺点\",\"但适用场景也比较局限无法局部调整只能全局修改，并且只能保留原有图像的空间布局，无法做到改变姿势角度等变化，且无法精细化地控制生成的图像的性质。\"]},\"939\":{\"h\":\"SDEdit\",\"t\":[\"ICLR 2022\",\"SDEdit: Guided Image Synthesis and Editing with Stochastic Differential Equations | Papers With Code\",\"核心思想\",\"扩散的前向过程实际是个图像语义信息不断被噪声掩盖的过程，并且总是从高频信息开始到低频信息。IVLR里实际用了低通滤波和下上采样来抽取出低频信息来影响后向去噪过程。\",\"那么我们是否可以直接省略这一步直接让前向过程不要加噪到纯噪声，而是加噪到中间过程使其保留一些低频信息\",\"下图直观地体现了这个过程，其中t0就是前向加噪的比例。通过调控信息保留的多少，我们也同样调控了生成与原图之间的相似程度。\"]},\"940\":{\"h\":\"RePaint: Inpainting using Denoising Diffusion Probabilistic Models\",\"t\":[\"CVPR 2022\",\"RePaint: Inpainting using Denoising Diffusion Probabilistic Models | Papers With Code\",\"这篇工作略晚于以上两篇工作，核心思想也非常接近，但略有不同的是针对其只能全局修改的痛点增添了对图像的MASK操作，将任务转变为了图像补全任务，使得局部修改成为可能。\",\"具体来说，\",\"在前向扩散时，依然记录每一步的噪声图像。\",\"在后向去噪时，我们将未被掩码的区域从前向的记录里抽取出来，而被掩码的区域则由噪声填充，拼合成一张完整的图后我们开始迭代去噪。\",\"之后每一步都更新未掩码区域为前向的记录部分，而掩码区域更新为后向去噪的结果。做法如下图所示\",\"但是这个简单的做法会有一个很大的弊端就是掩码的区域里所有的信息实质上是被全部丢弃的，重新生成的结果往往在局部语义上是自洽的但是没有考虑到全局语义。比如以下这个例子，对比最左边的原图与我们朴素的做法产生的结果我们可以看到，尽管掩码部分重新生成的结果与周围的材质和颜色接近，但在全局语义上这张图明显是不自洽的。\",\"我们在后向去噪时，考虑的拼合图像里包含了原图前向扩散的静态输出，即使我们在后向去噪时不断地试图生成语义一致的内容，但图像里的未掩码区域都会在下一步被替换成没有考虑后向生成过程的前向扩散输出。导致了语义的不一致性。此外随着去噪过程的逐渐深入，我们的方差也在逐渐减小(β setp)，使得更正语义变得更为困难。\",\"换句话说，模型需要更多的步骤来更正语义的不一致性。而作者具体的做法则是结合了以上两点洞见。\",\"首先我们在每一步去噪的时候，我们重新将去噪后的拼合结果xt−1​加一次噪声至xt, 再重复同样的后向去噪步骤。\",\"将以上这个过程重复n次，我们就得到了上图里语义一致的输出结果。\",\"这个做法分别对应了未掩码区域没有考虑后向生成结果的问题和需要更多步骤生成的问题。\",\"限于其框架依然是基于迭代去噪过程的无条件生成的DDPM模型（即不条件于文本图像或类别等信息的生成），其对掩码区域所能做的调控依然非常有限，只能借助于随机性重新生成。\"]},\"941\":{\"h\":\"基于显式分类器的图像引导生成\",\"t\":[\"扩散模型的优化目标本质上是在数据空间拟合一个前往目标数据分布的最优梯度方向∇logP(xt​)。那么很自然地，如果我们想要做引导生成，我们可以用贝叶斯定理将基于条件生成的梯度拆解成一个基于显式分类器的梯度和一个常规的无条件生成的梯度。\",\"换句话来说，我们依然可以使用之前DDPM的方式继续训练一个无条件生成模型，我们现在只需要额外训练一个新的基于噪声输入的分类器就可以了。\"]},\"942\":{\"h\":\"Diffusion Models Beat GANs on Image Synthesis\",\"t\":[\"The score function learned under Classifier Guidance can then be summarized as:\"]},\"943\":{\"h\":\"基于CLIP模型的多模态图像引导生成\"},\"944\":{\"h\":\"More Control for Free! Image Synthesis with Semantic Diffusion Guidance\",\"t\":[\"More Control for Free! Image Synthesis with Semantic Diffusion Guidance | Papers With Code\",\"**扩大化了P(y|x)的定义。实际上我们完全可以把分类引导的定义拓展为文字，图像或者多模态的引导。**具体来说，我们可以将分类器重新写成方程 Fϕ​(xt​,y,t)=logPϕ​(y∣xt​) 。\",\"有了以上的定义，现在我们可以借助CLIP模型里文本和图像之间对齐的表征来做一些损失计算了。具体来说，想要使用一个文本来引导图像生成，我们可以每一步都计算现在的图像表征和文本表征的距离，使用方程的梯度来计算缩小这个距离的方向。最简单的方式莫过于余弦距离\"]},\"945\":{\"h\":\"Blended Diffusion for Text-driven Editing of Natural Images\",\"t\":[\"CVPR 2022\",\"Blended Diffusion for Text-driven Editing of Natural Images | Papers With Code\",\"同样是在DDPM生成的时候做额外的梯度引导，只是额外添加了MASK的操作，使得文本引导可以只针对具体的某个区域更改。\",\"Text-driven blended diffusion. Given input image x, input mask m, and a text prompt d, we leverage the diffusion process to edit the image locally and coherently. We denote with ⊙ the element-wise blending of two images using the input mask m.\"]},\"946\":{\"h\":\"基于隐式分类器的文生图大模型\"},\"947\":{\"h\":\"Classifier-Free Diffusion Guidance\",\"t\":[\"Classifier-Free Diffusion Guidance | Papers With Code\",\"浅谈扩散模型的有分类器引导和无分类器引导 - 知乎 (zhihu.com)\",\"将前面的 classifier diffusion guidance 带入\",\"∇logp(xt​∣y)​=∇logp(xt​)+γ(∇logp(xt​∣y)−∇logp(xt​))=∇logp(xt​)+γ∇logp(xt​∣y)−γ∇logp(xt​)=conditionalscoreγ∇logp(xt​∣y)​​+unconditionalscore(1−γ)∇logp(xt​)​​​​\",\"即我们可以用贝叶斯将显式分类器的梯度引导再拆解为两项其中一个是无条件生成的梯度预估模型（例如常规的DDPM），另一个是基于条件生成的梯度预估模型（条件生成可以建模为UNet+cross-attention）。而我们甚至可以使用同一个模型同时表示两者，区别只在于生成时是否将条件向量置为零即可。\",\"GLIDE Explained | Papers With Code\"]},\"948\":{\"h\":\"条件DDPM\"},\"949\":{\"h\":\"unconditional DDPM\",\"t\":[\"根据郎之万动力方程的推导，最终的生成表达式中依赖神经网络对噪声的预测可以生成图像，但是这种生成是没有任何约束的，也就是说给定纯高斯噪声，我们就能生成图片。好处是我们的输入不受任何控制，只要是高斯噪声就可以，坏处是我们无法监督这一过程，最终生成的结果不受控制。\"]},\"950\":{\"h\":\"Guided Diffusion/Diffusion Models Beat GANs on Image Synthesis\",\"t\":[\"https://proceedings.neurips.cc/paper/2021/file/49ad23d1ec9fa4bd8d77d02681df5cfa-Paper.pdf\",\"第一次，classifier guidance\"]},\"951\":{\"h\":\"ILVR: Conditioning Method for Denoising Diffusion Probabilistic Models\",\"t\":[\"sample全程加入参考图片\",\"ILVR: Conditioning Method for Denoising Diffusion Probabilistic Models - 知乎 (zhihu.com)\",\"2108.02938v2.pdf (arxiv.org)\",\"这篇论文是直接基于DDPM的工作上展开的受控图像生成。其主要针对的痛点是DDPM的随机性太高无法确定性的生成，导致我们很难控制模型生成带有我们想要的语义信息的图片。\",\"其核心思想非常地简洁但精巧：\",\"我们的前向和后向是一个等长的过程。其中前向时原数据的信息逐渐丢失（先丢失高频信息再丢失低频信息）而后向时信息逐渐从纯噪声中补全（先补全低频信息再到高频信息）。\",\"如果我们记录下前向过程里每一步的噪声图像，将其与后向过程中的噪声图像混合，我们就可以影响后向过程的生成结果（考虑极端情况完全替换后向过程的噪声图像的话则一定可以轻易地回到原图）。\",\"而我们通过影响混合时注入的前向信息的多少，或者后向时注入信息的时间步的多少，可以控制所生成的图与原图的相似程度。具体来说，其算法如下：其中 ϕN​ 是一个低通滤波器加上一系列降维再升维保持图像维度不变的过程。\"]},\"952\":{\"h\":\"创新点\",\"t\":[\"DDPM模型已经在无条件生成方面取得了显著的成就，然而，由于其生成过程的随机性，对该模型做可控生成十分具有挑战性。\",\"本文提出了一个Iterative Latent Variable Refinement(ILVR)来指导DDPM在给定reference image的条件下能够生成高质量的图片样本。\",\"同时，这样控制的方法可以让一个DDPM模型在无需额外模型或学习过程参与的情况下适用于multi-domain image translation，editing with scribbles等应用任务。\"]},\"953\":{\"h\":\"Diffusion Probabilistic Models for 3D Point Cloud Generation\",\"t\":[\"点云生成：Diffusion Probabilistic Models for 3D Point Cloud Generation_\",\"使用学习到的潜变量 Z 控制点云形状\",\"由于马尔可夫链的目的是对点分布进行建模，因此仅靠马尔可夫链无法生成各种形状的点云。为此，我们引入了一个潜在的形状作为过渡内核的条件。在生成设置中，潜在形状遵循先验分布，我们通过归一化流 [5、6] 对其进行参数化，以获得强大的模型表现力。\",\"在自动编码的设置中，潜在的形状是端到端学习的。最后，我们将训练目标制定为最大化以潜在形状为条件的点云似然的变分下界，进一步将其制定为封闭形式的易处理表达式。我们将我们的模型应用于点云生成、自动编码和无监督表示学习，结果表明我们的模型在点云生成和自动编码方面取得了有竞争力的性能，并且在无监督表示学习方面取得了可比的结果。\"]},\"954\":{\"h\":\"Drag GAN\"},\"955\":{\"h\":\"Motion Supervision\",\"t\":[\"GAN 生成的中间 feature 具有很强的语义性\",\"Handle Point\",\"Target Point\",\"如何监督 GAN 生成图像的点运动之前还没有太多探索。在这项工作中，我们提出了一种不依赖于任何额外神经网络的运动监督损失。关键思想是生成器的中间特征非常有辨别力，因此简单的损失就足以监督运动。具体来说，我们考虑了 StyleGAN2 第 6 个块之后的特征图 F，由于分辨率和判别力之间的良好权衡，它在所有特征中表现最好。我们通过双线性插值调整 F 的大小，使其具有与最终图像相同的分辨率。\"]},\"956\":{\"h\":\"Point Tracking\",\"t\":[\"The insight is that the discriminative features of GANs well capture dense correspondence and thus tracking can be effectively performed via nearest neighbor search in a feature patch.\",\"更新 handle point\"]},\"957\":{\"h\":\"GAN\",\"t\":[\"GAN 的主要灵感来源于博弈论中零和博弈的思想，应用到深度学习神经网络上来说，就是通过生成网络 G（Generator）和判别网络 D（Discriminator）不断博弈，进而使 G 学习到数据的分布，如果用到图片生成上，则训练完成后，G 可以从一段随机数中生成逼真的图像。\",\"G 是一个生成网络，其输入为一个随机噪音，在训练中捕获真实数据的分布，从而生成尽可能真实的数据并让 D 犯错\",\"D 是一个判别网络，判别生成的数据是不是“真实的”。它的输入参数是 x，输出 D(x) 代表 x 为真实数据的概率，如果为 1，就代表 100% 是真实的数据，而输出为 0，就代表不可能是真实的数据\",\"训练GAN需要达到纳什均衡，有时候可以用梯度下降法做到，但有时候做不到。我们还没有找到很好的达到纳什均衡的方法，所以训练 GAN 相比 VAE 是不稳定的\",\"GAN 的目的是在高维非凸的参数空间中找到纳什均衡点，GAN 的纳什均衡点是一个鞍点，但是 SGD 只会找到局部极小值，因为 SGD 解决的是一个寻找最小值的问题，GAN 是一个博弈问题。\",\"同时，SGD容易震荡，容易使GAN训练不稳定。因此，GAN 中的优化器不常用 SGD\",\"GAN 简介_gan简介_Lemon_Yam的博客-CSDN博客\"]},\"958\":{\"h\":\"Style GAN\",\"t\":[\"StyleGAN 和 StyleGAN2 的深度理解 - 知乎 (zhihu.com)\",\"StyleGAN中的“**Style”**是指数据集中人脸的主要属性，比如人物的姿态等信息，而不是风格转换中的图像风格，这里Style是指人脸的风格，包括了脸型上面的表情、人脸朝向、发型等等，还包括纹理细节上的人脸肤色、人脸光照等方方面面。\",\"StyleGAN 的网络结构包含两个部分，\",\"Mapping network，图 (b)中的左部分，由隐藏变量 z 生成 中间隐藏变量 w的过程，这个 w 就是用来控制生成图像的style，即风格，为什么要多此一举将 z 变成 w 呢，后面会详细讲到。\",\"Synthesis network，它的作用是生成图像，创新之处在于给每一层子网络都喂了 A 和 B，A 是由 w 转换得到的仿射变换，用于控制生成图像的风格，B 是转换后的随机噪声，用于丰富生成图像的细节，即每个卷积层都能根据输入的A来调整**\\\"style\\\"**。\",\"传统的GAN网络输入是一个随机变量或者隐藏变量 z，但是StyleGAN 将 z 单独用 mapping网络将z变换成w，再将w投喂给 Synthesis network的每一层，因此Synthesis network中最开始的输入变成了常数张量\"]},\"959\":{\"h\":\"Mapping Network\",\"t\":[\"Understanding Latent Space in Machine Learning | by Ekin Tiu | Towards Data Science\",\"Mapping network 要做的事就是对隐藏空间（latent space）进行解耦。\",\"为了更好的对数据进行分类或生成，需要对数据的特征进行表示，但是数据有很多特征，这些特征之间相互关联，耦合性较高，导致模型很难弄清楚它们之间的关联，使得学习效率低下，因此需要寻找到这些表面特征之下隐藏的深层次的关系，将这些关系进行解耦，得到的隐藏特征，即latent code。由 latent code组成的空间就是 latent space。\",\"Mapping network由8个全连接层组成，通过一系列仿射变换，由 z 得到 w，这个 w 转换成风格 ，结合 AdaIN (adaptive instance normalization) 风格变换方法：\",\"【风格迁移】Adaptive Instance Normalization（AdaIN）_深井蛙i的博客-CSDN博客\",\"一般 z 是符合均匀分布或者高斯分布的随机向量，但在实际情况中，并不是这样，比如特征：头发的长度 和 男子气概，下图（a）中就是这两个特征的组合，左上角缺失的部分代表头发越长，男子气概越强，如果直接用 均匀分布或者高斯分布对特征变量头发长度和男子气概进行采样，得到的结果都不准确，因此在（b）中将分布（a）warp 成连续的分布函数 f(z)，这个 f(z) 的密度是非均匀的，图 (c) 是 w 的分布。\"]},\"960\":{\"h\":\"Latent space interpolations\",\"t\":[\"latent space interpolations 不是StyleGAN提到的，但在多篇paper中有提到，如下图的椅子，左边是比较宽的椅子，右边是比较窄的椅子，中间的椅子是这两种椅子特征的线性组合。\"]},\"961\":{\"h\":\"Style Mixing\",\"t\":[\"第一行是 source B， 第一列是source A，source A 和 source B的每张图片由各自相应的latent code 生成，剩余的图片是对 source A 和 souce B 风格的组合。 Style mixing 的本意是去找到控制不同style的latent code的区域位置，具体做法是\",\"将两个不同的latent code z1​ 和 z2​ 输入到 mapping network 中，分别得到 w1​ 和 w2​ ，分别代表两种不同的 style，\",\"然后在 synthesis network 中随机选一个中间的交叉点，交叉点之前的部分使用 w1​ ，交叉点之后的部分使用 w2​ ，生成的图像应该同时具有 source A 和 source B 的特征，称为 style mixing。\",\"根据交叉点选取位置的不同，style组合的结果也不同。\",\"下图中分为三个部分，\",\"第一部分是 Coarse styles from source B，分辨率(4x4 - 8x8)的网络部分使用B的style，其余使用A的style, 可以看到图像的身份特征随souce B，但是肤色等细节随source A；\",\"第二部分是 Middle styles from source B，分辨率(16x16 - 32x32)的网络部分使用B的style，这个时候生成图像不再具有B的身份特性，发型、姿态等都发生改变，但是肤色依然随A；\",\"第三部分 Fine from B，分辨率(64x64 - 1024x1024)的网络部分使用B的style，此时身份特征随A，肤色随B。\",\"由此可以大致推断，低分辨率的style 控制姿态、脸型、配件 比如眼镜、发型等style，高分辨率的style控制肤色、头发颜色、背景色等style。\"]},\"962\":{\"h\":\"Stochastic variation\",\"t\":[\"让生成的人脸的细节部分更随机、更自然\",\"实现这种 Stochastic variation 的方法就是引入噪声，StyleGAN的做法是在每一次卷积操作后都加入噪声\"]},\"963\":{\"h\":\"Perceptual path length\",\"t\":[\"Perceptual path length 是一个指标，用于判断生成器是否选择了最近的路线（比如上图蓝色虚线），用训练过程中相邻时间节点上的两个生成图像的距离来表示\",\"g 表示生成器，d 表示判别器， f 表示mapping netwrok， f(z1​) 表示由latent code z1​ 得到的中间隐藏码 w ， w∈W ， t 表示某一个时间点， t∈(0,1) , $t+\\\\varepsilon $ 表示下一个时间点，$lerp $表示线性插值 （linear interpolation），即在 latent space上进行插值。\"]}},\"dirtCount\":0,\"index\":[[\"窄\",{\"1\":{\"960\":1}}],[\"椅子\",{\"1\":{\"960\":5}}],[\"气概\",{\"1\":{\"959\":3}}],[\"男子\",{\"1\":{\"959\":3}}],[\"井蛙\",{\"1\":{\"959\":1}}],[\"仿射变换\",{\"1\":{\"958\":1,\"959\":1}}],[\"喂给\",{\"1\":{\"958\":1}}],[\"喂\",{\"1\":{\"958\":1}}],[\"肤色\",{\"1\":{\"958\":1,\"961\":4}}],[\"朝向\",{\"1\":{\"958\":1}}],[\"脸型\",{\"1\":{\"958\":1,\"961\":1}}],[\"震荡\",{\"1\":{\"957\":1}}],[\"鞍点\",{\"1\":{\"957\":1}}],[\"纳什\",{\"1\":{\"957\":4}}],[\"犯错\",{\"1\":{\"957\":1}}],[\"逼真\",{\"1\":{\"957\":1}}],[\"逼近\",{\"1\":{\"226\":1,\"348\":2,\"349\":1,\"446\":1,\"913\":1}}],[\"似然\",{\"1\":{\"953\":1}}],[\"似然性\",{\"1\":{\"228\":1}}],[\"⊙\",{\"1\":{\"945\":1}}],[\"材质\",{\"1\":{\"940\":1}}],[\"材料\",{\"1\":{\"340\":1}}],[\"朴素\",{\"1\":{\"940\":1}}],[\"弊端\",{\"1\":{\"940\":1}}],[\"拼合\",{\"1\":{\"940\":2}}],[\"拼\",{\"1\":{\"940\":1}}],[\"拼接\",{\"1\":{\"294\":1,\"332\":1}}],[\"晚于\",{\"1\":{\"940\":1}}],[\"姿态\",{\"1\":{\"958\":1,\"961\":2}}],[\"姿势\",{\"1\":{\"938\":1}}],[\"姿下\",{\"1\":{\"290\":1}}],[\"趋势\",{\"1\":{\"938\":1}}],[\"趋向于\",{\"1\":{\"399\":1}}],[\"留存\",{\"1\":{\"938\":1}}],[\"留给\",{\"1\":{\"379\":1}}],[\"升维\",{\"1\":{\"938\":2,\"951\":1}}],[\"升序\",{\"1\":{\"19\":1,\"20\":1,\"469\":1}}],[\"ϕ\",{\"1\":{\"938\":1,\"944\":2,\"951\":1}}],[\"轻易\",{\"1\":{\"938\":1,\"951\":1}}],[\"轻量化\",{\"1\":{\"55\":1}}],[\"轻量级\",{\"1\":{\"3\":1}}],[\"痛点\",{\"1\":{\"938\":1,\"940\":1,\"951\":1}}],[\"梳理\",{\"1\":{\"936\":1}}],[\"脉络\",{\"1\":{\"936\":1}}],[\"忠实\",{\"1\":{\"935\":2}}],[\"擅长\",{\"1\":{\"925\":1,\"926\":1}}],[\"棒\",{\"1\":{\"925\":1}}],[\"鲁\",{\"1\":{\"925\":1}}],[\"鲁棒\",{\"1\":{\"246\":1,\"261\":1}}],[\"鲁棒性\",{\"1\":{\"193\":1,\"194\":1,\"436\":1}}],[\"坏处\",{\"1\":{\"949\":1}}],[\"坏事\",{\"1\":{\"923\":1}}],[\"坏死\",{\"1\":{\"437\":2}}],[\"灰\",{\"1\":{\"923\":1}}],[\"谷歌\",{\"1\":{\"922\":1,\"929\":1}}],[\"⊤\",{\"1\":{\"917\":1}}],[\"损害\",{\"1\":{\"916\":2}}],[\"损失\",{\"0\":{\"285\":1,\"295\":1,\"338\":1,\"420\":1,\"853\":1,\"854\":1},\"1\":{\"198\":1,\"225\":1,\"226\":1,\"255\":1,\"263\":1,\"268\":2,\"270\":2,\"282\":2,\"285\":3,\"295\":2,\"308\":1,\"312\":1,\"323\":4,\"338\":1,\"348\":1,\"354\":3,\"355\":2,\"377\":1,\"390\":2,\"839\":1,\"854\":3,\"855\":1,\"859\":1,\"862\":1,\"864\":2,\"901\":1,\"928\":3,\"930\":1,\"944\":1,\"955\":2}}],[\"ϵ\",{\"1\":{\"913\":3}}],[\"←\",{\"1\":{\"913\":1}}],[\"音频\",{\"1\":{\"910\":1}}],[\"剥离\",{\"1\":{\"910\":1}}],[\"惩罚\",{\"1\":{\"910\":1}}],[\"稍差\",{\"1\":{\"910\":1}}],[\"稍后\",{\"1\":{\"476\":1,\"598\":1,\"606\":1}}],[\"拟定\",{\"1\":{\"907\":1}}],[\"拟合\",{\"1\":{\"270\":1,\"355\":1,\"451\":2,\"863\":1,\"912\":1,\"941\":1}}],[\"抽取\",{\"1\":{\"906\":1,\"939\":1,\"940\":1}}],[\"抽象类\",{\"0\":{\"746\":1},\"1\":{\"511\":1,\"748\":1,\"824\":1}}],[\"抽象\",{\"1\":{\"44\":1,\"246\":1,\"347\":1,\"701\":5,\"702\":2,\"715\":1,\"738\":2,\"747\":1,\"748\":1,\"750\":2,\"904\":1,\"925\":1}}],[\"抽象化\",{\"1\":{\"28\":1}}],[\"淹没\",{\"1\":{\"906\":1}}],[\"˙\",{\"1\":{\"904\":1}}],[\"避开\",{\"1\":{\"904\":1}}],[\"避免出现\",{\"1\":{\"721\":1}}],[\"避免\",{\"0\":{\"531\":1},\"1\":{\"99\":1,\"103\":1,\"199\":1,\"393\":1,\"451\":1,\"480\":1,\"530\":1,\"531\":1,\"615\":1,\"667\":1,\"721\":1,\"776\":1,\"916\":1,\"928\":1}}],[\"θ\",{\"1\":{\"902\":4,\"903\":6,\"904\":29,\"907\":1,\"909\":1,\"913\":1,\"918\":1}}],[\"∞\",{\"1\":{\"900\":1,\"904\":2}}],[\"↑\",{\"1\":{\"899\":1}}],[\"∂\",{\"1\":{\"897\":10}}],[\"∇\",{\"1\":{\"897\":10,\"904\":23,\"905\":1,\"913\":2,\"917\":2,\"918\":1,\"941\":1,\"947\":9}}],[\"ε\",{\"1\":{\"897\":4,\"899\":3,\"900\":12,\"907\":1}}],[\"郎之万\",{\"1\":{\"897\":1,\"913\":1,\"949\":1}}],[\"菲克\",{\"1\":{\"897\":1}}],[\"轨迹\",{\"1\":{\"896\":1}}],[\"馒头\",{\"1\":{\"895\":1,\"910\":1}}],[\"伪\",{\"1\":{\"893\":1}}],[\"伪影\",{\"1\":{\"246\":1,\"277\":1}}],[\"炼丹\",{\"1\":{\"891\":1}}],[\"懂\",{\"1\":{\"889\":1}}],[\"游走\",{\"1\":{\"887\":1}}],[\"游戏\",{\"0\":{\"152\":1},\"1\":{\"152\":1}}],[\"脱轨\",{\"1\":{\"915\":1}}],[\"脱兔\",{\"1\":{\"887\":1}}],[\"脱离\",{\"1\":{\"8\":1}}],[\"静如\",{\"1\":{\"887\":1}}],[\"静态数据\",{\"0\":{\"743\":1,\"744\":1},\"1\":{\"37\":1,\"612\":1,\"744\":21,\"745\":14}}],[\"静态方法\",{\"1\":{\"5\":1,\"502\":1}}],[\"静态\",{\"0\":{\"36\":1,\"37\":1,\"612\":1,\"617\":1,\"742\":2,\"745\":1,\"770\":1,\"831\":1},\"1\":{\"5\":1,\"8\":1,\"35\":1,\"36\":10,\"37\":7,\"502\":1,\"509\":2,\"511\":1,\"597\":1,\"609\":4,\"610\":2,\"612\":30,\"614\":1,\"617\":3,\"659\":1,\"701\":1,\"722\":3,\"743\":1,\"744\":4,\"745\":30,\"770\":3,\"825\":1,\"940\":1}}],[\"ꀬ\",{\"1\":{\"887\":1}}],[\"̑\",{\"1\":{\"887\":2}}],[\"ຶ\",{\"1\":{\"887\":2}}],[\"≡\",{\"1\":{\"887\":2,\"904\":1}}],[\"极小值\",{\"1\":{\"957\":1}}],[\"极端\",{\"1\":{\"938\":1,\"951\":1}}],[\"极其\",{\"1\":{\"922\":1,\"935\":1}}],[\"极大\",{\"1\":{\"884\":1}}],[\"极快\",{\"1\":{\"30\":1}}],[\"轴\",{\"1\":{\"882\":1}}],[\"轴为\",{\"1\":{\"299\":2}}],[\"色度\",{\"1\":{\"875\":1}}],[\"落地\",{\"1\":{\"875\":1}}],[\"落入\",{\"1\":{\"223\":1}}],[\"＆\",{\"1\":{\"873\":1}}],[\"∝\",{\"1\":{\"869\":5,\"897\":1,\"917\":1}}],[\"⟶\",{\"1\":{\"869\":2}}],[\"噪后\",{\"1\":{\"940\":1}}],[\"噪时\",{\"1\":{\"938\":1,\"940\":3}}],[\"噪\",{\"0\":{\"937\":1},\"1\":{\"901\":2,\"906\":1,\"907\":1,\"939\":1,\"940\":6}}],[\"噪音\",{\"1\":{\"868\":1,\"906\":9,\"910\":1,\"957\":1}}],[\"噪声\",{\"0\":{\"916\":1},\"1\":{\"193\":1,\"228\":1,\"261\":1,\"293\":1,\"300\":1,\"342\":1,\"436\":1,\"451\":1,\"868\":1,\"901\":2,\"904\":4,\"906\":2,\"907\":4,\"908\":2,\"909\":1,\"913\":1,\"915\":1,\"916\":3,\"917\":3,\"918\":1,\"920\":3,\"922\":2,\"938\":5,\"939\":2,\"940\":3,\"941\":1,\"949\":3,\"951\":4,\"962\":2}}],[\"∏\",{\"1\":{\"867\":1}}],[\"≈\",{\"1\":{\"867\":1,\"897\":2,\"900\":2,\"904\":1,\"913\":1}}],[\"洞见\",{\"1\":{\"863\":1,\"940\":1}}],[\"兼具\",{\"1\":{\"863\":2}}],[\"兼容\",{\"1\":{\"535\":2,\"586\":1}}],[\"兼容性\",{\"1\":{\"55\":1}}],[\"驯化\",{\"1\":{\"862\":1}}],[\"贝叶斯\",{\"1\":{\"862\":1,\"869\":1,\"941\":1,\"947\":1}}],[\"⟩\",{\"1\":{\"862\":1}}],[\"⟨\",{\"1\":{\"862\":1}}],[\"狗\",{\"1\":{\"860\":4}}],[\"谁\",{\"1\":{\"859\":2}}],[\"爬取\",{\"1\":{\"858\":1}}],[\"亿个\",{\"1\":{\"858\":1}}],[\"拓展\",{\"1\":{\"857\":1,\"889\":1,\"944\":1}}],[\"拓扑\",{\"0\":{\"134\":1},\"1\":{\"226\":1,\"270\":1,\"277\":1,\"301\":1,\"308\":1}}],[\"鉴于\",{\"1\":{\"854\":1}}],[\"暂停\",{\"1\":{\"852\":1}}],[\"暂时\",{\"1\":{\"476\":2,\"785\":1}}],[\"\\n\",{\"1\":{\"841\":3,\"845\":3,\"875\":3}}],[\"纵坐标\",{\"1\":{\"837\":1}}],[\"纵向\",{\"1\":{\"769\":1}}],[\"横\",{\"1\":{\"837\":1}}],[\"横向\",{\"1\":{\"769\":1}}],[\"填\",{\"1\":{\"837\":2}}],[\"填到\",{\"1\":{\"837\":1}}],[\"填充\",{\"1\":{\"72\":2,\"318\":1,\"940\":1}}],[\"科学\",{\"1\":{\"837\":1,\"862\":2}}],[\"播放器\",{\"1\":{\"835\":1}}],[\"播放\",{\"1\":{\"835\":2}}],[\"秒\",{\"1\":{\"835\":1}}],[\"热\",{\"0\":{\"836\":1},\"1\":{\"832\":1,\"836\":1,\"837\":1}}],[\"绘制\",{\"0\":{\"836\":1},\"1\":{\"832\":1}}],[\"抹\",{\"1\":{\"828\":1}}],[\"矛盾\",{\"1\":{\"818\":1}}],[\"舍去\",{\"1\":{\"811\":1}}],[\"舍弃\",{\"1\":{\"314\":1,\"316\":1,\"804\":1}}],[\"〉\",{\"1\":{\"810\":3}}],[\"照搬\",{\"1\":{\"804\":1}}],[\"照片\",{\"1\":{\"290\":2,\"860\":1}}],[\"华成\",{\"1\":{\"801\":1}}],[\"彭\",{\"1\":{\"801\":1}}],[\"箭头\",{\"1\":{\"799\":2}}],[\"❓\",{\"1\":{\"789\":1}}],[\"ｏ\",{\"0\":{\"786\":1,\"787\":1,\"788\":1},\"1\":{\"786\":2,\"788\":1,\"793\":3}}],[\"屏幕\",{\"1\":{\"785\":1}}],[\"屏蔽\",{\"1\":{\"321\":2,\"437\":1}}],[\"介质\",{\"1\":{\"784\":1}}],[\"介绍\",{\"1\":{\"45\":2,\"85\":2,\"218\":1,\"318\":1,\"325\":1,\"380\":1,\"391\":1,\"545\":1,\"781\":1}}],[\"映像\",{\"1\":{\"782\":1}}],[\"映射\",{\"1\":{\"205\":1,\"210\":1,\"211\":1,\"227\":1,\"228\":1,\"246\":2,\"268\":2,\"322\":1,\"334\":1,\"393\":1,\"545\":2}}],[\"磁盘\",{\"0\":{\"793\":1,\"794\":1},\"1\":{\"776\":1,\"781\":24,\"782\":3,\"785\":2,\"789\":3,\"790\":1,\"791\":7,\"793\":7,\"794\":3}}],[\"刷\",{\"1\":{\"875\":2}}],[\"刷新\",{\"1\":{\"775\":1}}],[\"刷分\",{\"1\":{\"451\":1}}],[\"劈\",{\"1\":{\"775\":1,\"826\":2}}],[\"载体\",{\"1\":{\"775\":1}}],[\"滞后\",{\"1\":{\"770\":1}}],[\"束\",{\"1\":{\"770\":1}}],[\"族\",{\"1\":{\"769\":8}}],[\"投\",{\"1\":{\"958\":1}}],[\"投射\",{\"1\":{\"859\":1}}],[\"投票\",{\"1\":{\"759\":1}}],[\"投影\",{\"0\":{\"216\":1,\"245\":1},\"1\":{\"201\":1,\"216\":1,\"217\":1,\"220\":1,\"223\":1,\"228\":1,\"244\":3,\"245\":7,\"270\":1,\"298\":4,\"300\":2,\"322\":1,\"342\":1,\"371\":1,\"372\":3,\"925\":2}}],[\"讨论\",{\"1\":{\"751\":1}}],[\"延续\",{\"1\":{\"750\":2}}],[\"延迟\",{\"1\":{\"211\":1}}],[\"慎重\",{\"1\":{\"750\":1}}],[\"慎用\",{\"1\":{\"459\":1}}],[\"冒号\",{\"1\":{\"749\":1}}],[\"冒充\",{\"1\":{\"485\":3}}],[\"骡\",{\"1\":{\"748\":1}}],[\"杂交\",{\"1\":{\"748\":1}}],[\"驴子\",{\"1\":{\"748\":1}}],[\"签名\",{\"1\":{\"745\":1}}],[\"破坏\",{\"1\":{\"744\":1}}],[\"沟通\",{\"1\":{\"744\":1,\"745\":1}}],[\"派\",{\"1\":{\"741\":1,\"748\":1}}],[\"派生类\",{\"0\":{\"627\":1,\"699\":1,\"749\":1,\"750\":1,\"751\":1,\"752\":2},\"1\":{\"510\":2,\"603\":1,\"701\":2,\"703\":1,\"748\":15,\"749\":4,\"750\":21,\"751\":1,\"752\":6,\"766\":3,\"767\":4,\"768\":5,\"769\":25,\"770\":1,\"775\":1,\"781\":1,\"824\":1}}],[\"派生\",{\"0\":{\"510\":1,\"748\":1},\"1\":{\"741\":1,\"748\":6,\"750\":1,\"751\":1,\"766\":1,\"769\":1,\"791\":3}}],[\"尖括号\",{\"1\":{\"738\":1,\"739\":1}}],[\"途径\",{\"1\":{\"737\":1}}],[\"俩\",{\"1\":{\"718\":1}}],[\"善后\",{\"1\":{\"714\":1}}],[\"删去\",{\"1\":{\"828\":2,\"830\":1}}],[\"删错\",{\"1\":{\"714\":1}}],[\"删除\",{\"0\":{\"97\":1,\"171\":1,\"182\":1,\"540\":1,\"828\":1},\"1\":{\"69\":1,\"85\":1,\"97\":37,\"102\":1,\"103\":2,\"106\":1,\"171\":2,\"182\":1,\"191\":1,\"282\":1,\"391\":4,\"532\":1,\"537\":1,\"540\":7,\"561\":4,\"574\":5,\"722\":1,\"793\":1,\"828\":13,\"830\":10,\"845\":2,\"922\":1}}],[\"印象\",{\"1\":{\"708\":1}}],[\"哈是\",{\"1\":{\"707\":1}}],[\"哈希\",{\"0\":{\"104\":1,\"209\":1},\"1\":{\"104\":2,\"126\":1,\"137\":3,\"204\":2,\"209\":1,\"210\":2,\"545\":4}}],[\"皆\",{\"1\":{\"701\":1}}],[\"万物\",{\"1\":{\"701\":1}}],[\"混淆\",{\"1\":{\"708\":1,\"836\":1}}],[\"混乱\",{\"1\":{\"693\":1}}],[\"混合\",{\"0\":{\"247\":1,\"389\":1,\"799\":1},\"1\":{\"199\":1,\"217\":1,\"218\":2,\"228\":1,\"244\":2,\"395\":1,\"485\":1,\"810\":1,\"890\":1,\"938\":2,\"951\":2}}],[\"✖\",{\"1\":{\"690\":1}}],[\"遇见\",{\"1\":{\"698\":1}}],[\"遇\",{\"1\":{\"685\":1,\"782\":1}}],[\"遇到\",{\"1\":{\"10\":1,\"30\":1,\"70\":1,\"85\":1,\"89\":1,\"97\":1,\"126\":1,\"191\":1,\"684\":1,\"694\":1,\"777\":1,\"781\":2,\"793\":1,\"827\":1,\"852\":1}}],[\"钻石\",{\"1\":{\"683\":1}}],[\"崩溃\",{\"1\":{\"677\":1,\"833\":1}}],[\"泄漏\",{\"0\":{\"677\":1}}],[\"危险\",{\"1\":{\"667\":1,\"676\":1}}],[\"❌\",{\"1\":{\"661\":1,\"688\":2,\"693\":1,\"755\":1}}],[\"夹断\",{\"1\":{\"654\":1}}],[\"吞噬\",{\"1\":{\"654\":1}}],[\"纯粹\",{\"1\":{\"935\":1}}],[\"纯\",{\"1\":{\"654\":3,\"769\":1,\"906\":1,\"929\":1,\"939\":1,\"949\":1}}],[\"纯虚\",{\"0\":{\"746\":1},\"1\":{\"511\":1}}],[\"宏体\",{\"1\":{\"654\":1}}],[\"宏名\",{\"1\":{\"652\":1}}],[\"宏\",{\"0\":{\"651\":1},\"1\":{\"651\":1,\"652\":5,\"654\":3,\"676\":1}}],[\"斜杠\",{\"1\":{\"648\":1}}],[\"斜线\",{\"1\":{\"128\":1}}],[\"界定\",{\"1\":{\"647\":1}}],[\"撇号括\",{\"1\":{\"647\":1}}],[\"浮动\",{\"1\":{\"645\":1}}],[\"浮点数\",{\"0\":{\"643\":1},\"1\":{\"644\":2}}],[\"浮点\",{\"0\":{\"645\":1},\"1\":{\"632\":1,\"804\":3}}],[\"浮点运算\",{\"1\":{\"62\":1,\"65\":1}}],[\"幂\",{\"1\":{\"645\":1}}],[\"十个\",{\"1\":{\"682\":2,\"759\":1,\"781\":4}}],[\"十六进制\",{\"1\":{\"642\":2,\"648\":1}}],[\"十进制\",{\"0\":{\"644\":1},\"1\":{\"642\":3}}],[\"十分迅速\",{\"1\":{\"572\":1}}],[\"十分\",{\"1\":{\"527\":1,\"698\":1,\"904\":1,\"952\":1}}],[\"专用\",{\"1\":{\"748\":1}}],[\"专门\",{\"1\":{\"635\":1,\"708\":1,\"750\":1}}],[\"专注\",{\"1\":{\"320\":1,\"332\":1,\"354\":1,\"423\":1}}],[\"情形\",{\"1\":{\"621\":1}}],[\"情况\",{\"0\":{\"528\":1,\"529\":1},\"1\":{\"4\":1,\"10\":1,\"11\":1,\"17\":1,\"19\":1,\"30\":2,\"77\":3,\"85\":3,\"94\":2,\"97\":8,\"98\":1,\"106\":2,\"153\":1,\"169\":1,\"292\":1,\"308\":1,\"349\":3,\"525\":1,\"530\":4,\"559\":2,\"563\":2,\"577\":1,\"590\":1,\"600\":3,\"609\":1,\"613\":1,\"676\":4,\"691\":1,\"748\":1,\"751\":1,\"769\":1,\"789\":1,\"826\":1,\"828\":2,\"829\":1,\"830\":2,\"833\":2,\"845\":1,\"852\":3,\"903\":1,\"923\":1,\"938\":1,\"951\":1,\"952\":1,\"959\":1}}],[\"渠道\",{\"1\":{\"621\":2,\"701\":1,\"744\":1}}],[\"干扰\",{\"1\":{\"620\":1,\"701\":1}}],[\"干净\",{\"1\":{\"259\":2,\"451\":1}}],[\"误用\",{\"1\":{\"617\":1}}],[\"误差\",{\"1\":{\"245\":1,\"270\":1,\"283\":3,\"436\":1,\"451\":1}}],[\"寄存器\",{\"0\":{\"613\":1},\"1\":{\"610\":1,\"613\":4}}],[\"ｂ\",{\"1\":{\"607\":6,\"701\":1}}],[\"朋友\",{\"1\":{\"607\":2}}],[\"试图\",{\"1\":{\"667\":1,\"670\":1,\"673\":2,\"769\":2,\"940\":1}}],[\"试\",{\"1\":{\"606\":1}}],[\"试一试\",{\"1\":{\"141\":1}}],[\"元\",{\"1\":{\"605\":1,\"607\":2,\"615\":1,\"750\":1}}],[\"元素\",{\"0\":{\"108\":1,\"542\":1,\"567\":1},\"1\":{\"71\":10,\"72\":2,\"86\":1,\"94\":1,\"96\":5,\"97\":10,\"102\":1,\"103\":4,\"107\":7,\"110\":1,\"123\":1,\"125\":1,\"126\":3,\"153\":3,\"217\":1,\"222\":2,\"270\":1,\"294\":1,\"304\":1,\"353\":1,\"372\":1,\"537\":4,\"538\":6,\"539\":14,\"540\":11,\"541\":7,\"542\":3,\"543\":7,\"544\":3,\"545\":3,\"546\":2,\"559\":12,\"560\":1,\"561\":2,\"563\":2,\"566\":2,\"567\":2,\"570\":8,\"571\":3,\"572\":3,\"573\":4,\"574\":14,\"575\":4,\"576\":3,\"577\":2,\"638\":2,\"675\":3,\"676\":7,\"682\":3,\"683\":2,\"684\":1,\"685\":3,\"696\":7,\"712\":3,\"730\":9,\"745\":1,\"755\":4,\"759\":1,\"781\":1,\"824\":1,\"825\":9,\"848\":1,\"849\":1,\"859\":1}}],[\"友\",{\"1\":{\"605\":1,\"607\":2,\"615\":1,\"750\":1}}],[\"友元类\",{\"0\":{\"607\":1},\"1\":{\"607\":4,\"703\":1}}],[\"友元\",{\"0\":{\"603\":1,\"604\":1,\"606\":1},\"1\":{\"509\":1,\"603\":1,\"604\":2,\"605\":2,\"606\":1,\"607\":3}}],[\"频繁\",{\"1\":{\"599\":2,\"613\":2}}],[\"频率\",{\"1\":{\"100\":2,\"707\":1}}],[\"冠以\",{\"1\":{\"598\":1}}],[\"告知\",{\"1\":{\"595\":1,\"599\":1}}],[\"告诉\",{\"1\":{\"30\":1,\"379\":1,\"469\":1,\"476\":1}}],[\"圆柱体\",{\"1\":{\"595\":1}}],[\"圆括号\",{\"1\":{\"589\":1}}],[\"️\",{\"1\":{\"586\":1,\"595\":1,\"599\":1,\"600\":1,\"612\":1,\"617\":1,\"690\":1,\"693\":1,\"756\":1,\"757\":1,\"766\":1,\"769\":1,\"817\":1}}],[\"⚠\",{\"1\":{\"586\":1,\"595\":1,\"599\":1,\"600\":1,\"612\":1,\"617\":1,\"693\":1,\"756\":1,\"757\":1,\"766\":1,\"769\":1,\"817\":1}}],[\"居多\",{\"1\":{\"584\":1}}],[\"嵌套\",{\"0\":{\"591\":1},\"1\":{\"583\":1,\"591\":2,\"817\":1}}],[\"嵌入\",{\"0\":{\"319\":1},\"1\":{\"201\":1,\"218\":1,\"228\":1,\"247\":1,\"315\":5,\"319\":2,\"599\":2,\"859\":1,\"930\":1}}],[\"ｃ\",{\"0\":{\"581\":1,\"631\":1,\"640\":1},\"1\":{\"594\":1,\"598\":1,\"599\":1,\"600\":1,\"601\":1,\"613\":1,\"651\":1,\"691\":2,\"692\":1,\"707\":2,\"708\":1,\"712\":1,\"737\":1,\"747\":1,\"748\":2,\"750\":1,\"775\":1,\"786\":1,\"789\":2,\"798\":1,\"806\":1,\"810\":1,\"816\":3,\"818\":1}}],[\"么\",{\"1\":{\"577\":1}}],[\"费时费力\",{\"1\":{\"857\":1,\"864\":1,\"922\":1}}],[\"费时\",{\"1\":{\"572\":1}}],[\"刘\",{\"1\":{\"572\":1}}],[\"队\",{\"1\":{\"912\":1}}],[\"队尾\",{\"1\":{\"570\":1}}],[\"队首\",{\"1\":{\"570\":2}}],[\"队列\",{\"0\":{\"106\":1,\"569\":1},\"1\":{\"4\":4,\"8\":3,\"11\":4,\"25\":1,\"29\":1,\"32\":2,\"34\":4,\"46\":2,\"72\":7,\"107\":10,\"308\":1,\"563\":2,\"570\":2,\"571\":4,\"572\":1,\"573\":9,\"577\":1,\"578\":1}}],[\"篮子\",{\"1\":{\"562\":2}}],[\"故称\",{\"1\":{\"755\":1}}],[\"故\",{\"1\":{\"559\":1}}],[\"布尔代数\",{\"1\":{\"810\":1}}],[\"布尔\",{\"1\":{\"810\":4}}],[\"布尔值\",{\"1\":{\"559\":1}}],[\"布局\",{\"1\":{\"423\":1,\"935\":1}}],[\"桶\",{\"1\":{\"545\":1}}],[\"阳光\",{\"1\":{\"544\":1}}],[\"美丽\",{\"1\":{\"544\":1}}],[\"摆烂\",{\"1\":{\"536\":1}}],[\"摆动\",{\"0\":{\"146\":1},\"1\":{\"146\":1}}],[\"贴心\",{\"1\":{\"535\":1}}],[\"隔开\",{\"1\":{\"534\":1,\"589\":1,\"658\":1,\"701\":1,\"730\":1}}],[\"末尾\",{\"1\":{\"534\":1,\"573\":1,\"574\":2,\"575\":2,\"614\":1,\"730\":1,\"793\":2,\"829\":2,\"830\":1}}],[\"搭配\",{\"1\":{\"531\":1}}],[\"搭建\",{\"1\":{\"49\":1}}],[\"卡\",{\"1\":{\"530\":1,\"864\":1,\"922\":1}}],[\"哦\",{\"1\":{\"530\":1,\"600\":1}}],[\"永恒\",{\"1\":{\"544\":1}}],[\"永远\",{\"1\":{\"530\":2,\"828\":1}}],[\"永久\",{\"1\":{\"43\":2,\"476\":1,\"530\":1}}],[\"心灵\",{\"1\":{\"544\":1}}],[\"心\",{\"1\":{\"530\":1}}],[\"抛出\",{\"1\":{\"530\":3,\"531\":1,\"574\":1}}],[\"死\",{\"1\":{\"852\":1}}],[\"死锁\",{\"0\":{\"531\":1},\"1\":{\"529\":1,\"530\":5,\"531\":1}}],[\"死循环\",{\"1\":{\"103\":1}}],[\"啦\",{\"1\":{\"529\":1}}],[\"汇编\",{\"1\":{\"528\":1,\"626\":1}}],[\"@\",{\"1\":{\"528\":2,\"529\":3,\"530\":1,\"531\":1,\"848\":1}}],[\"休眠\",{\"1\":{\"528\":2,\"529\":1,\"530\":1,\"531\":1}}],[\"认别\",{\"1\":{\"640\":1}}],[\"认识\",{\"1\":{\"527\":1}}],[\"认为\",{\"1\":{\"174\":1,\"222\":1,\"257\":2,\"259\":1,\"261\":1,\"355\":1,\"386\":1,\"467\":1,\"528\":1,\"537\":1,\"615\":1,\"689\":1,\"713\":1}}],[\"东东\",{\"1\":{\"527\":1}}],[\"东西\",{\"1\":{\"13\":2,\"527\":2,\"846\":1}}],[\"熟悉\",{\"1\":{\"527\":1}}],[\"响亮\",{\"1\":{\"527\":1}}],[\"响应\",{\"0\":{\"42\":1},\"1\":{\"31\":1,\"40\":2,\"42\":5,\"43\":1,\"46\":1,\"53\":1,\"228\":1,\"476\":5,\"480\":2,\"701\":1,\"769\":2}}],[\"金钱\",{\"1\":{\"527\":2}}],[\"金字塔\",{\"1\":{\"332\":1}}],[\"免于\",{\"1\":{\"527\":1}}],[\"房子\",{\"1\":{\"527\":2}}],[\"始终保持\",{\"1\":{\"522\":1}}],[\"括\",{\"1\":{\"500\":1,\"649\":1}}],[\"括号\",{\"1\":{\"106\":6,\"587\":1,\"620\":1,\"625\":1,\"654\":1,\"682\":1,\"684\":1,\"719\":1,\"725\":1,\"726\":1,\"730\":3,\"735\":1,\"755\":1,\"760\":1,\"817\":1}}],[\"套\",{\"1\":{\"492\":1}}],[\"套路\",{\"1\":{\"122\":1}}],[\"演变\",{\"0\":{\"486\":1}}],[\"演示\",{\"1\":{\"469\":1,\"530\":1}}],[\"恶\",{\"1\":{\"485\":1}}],[\"剁\",{\"1\":{\"485\":1}}],[\"淘宝\",{\"1\":{\"485\":1}}],[\"淘宝网\",{\"1\":{\"485\":2}}],[\"竞价排名\",{\"1\":{\"485\":1}}],[\"竞争力\",{\"1\":{\"935\":1,\"953\":1}}],[\"竞争\",{\"1\":{\"34\":1,\"528\":1}}],[\"百万\",{\"1\":{\"935\":1}}],[\"百度\",{\"1\":{\"485\":1}}],[\"百分比\",{\"1\":{\"246\":1,\"342\":2}}],[\"忘记\",{\"1\":{\"485\":1}}],[\"窃取\",{\"1\":{\"485\":1}}],[\"窃听\",{\"1\":{\"485\":2}}],[\"钱\",{\"1\":{\"485\":2}}],[\"站\",{\"1\":{\"485\":1}}],[\"瞎\",{\"1\":{\"485\":1}}],[\"眼镜\",{\"1\":{\"961\":1}}],[\"眼\",{\"1\":{\"485\":1}}],[\"垃圾\",{\"1\":{\"485\":2}}],[\"植入\",{\"1\":{\"485\":1}}],[\"篡改\",{\"1\":{\"485\":4}}],[\"证书\",{\"1\":{\"484\":1}}],[\"证明\",{\"1\":{\"194\":1,\"220\":1,\"262\":1,\"357\":4,\"485\":1}}],[\"握手\",{\"1\":{\"484\":3}}],[\"风险\",{\"1\":{\"484\":1,\"485\":9}}],[\"风格\",{\"0\":{\"625\":1},\"1\":{\"174\":2,\"268\":1,\"310\":1,\"890\":1,\"958\":5,\"959\":3,\"961\":1}}],[\"段\",{\"1\":{\"480\":1,\"540\":1,\"760\":1,\"890\":1}}],[\"段时间\",{\"1\":{\"19\":1}}],[\"肉眼\",{\"1\":{\"480\":1}}],[\"敬请期待\",{\"1\":{\"476\":1}}],[\"禁止\",{\"1\":{\"476\":1,\"673\":1}}],[\"禁用\",{\"1\":{\"191\":2}}],[\"笼统\",{\"1\":{\"476\":2}}],[\"称\",{\"1\":{\"476\":1,\"609\":1,\"781\":1}}],[\"称为\",{\"1\":{\"8\":1,\"30\":1,\"35\":1,\"137\":1,\"198\":1,\"218\":2,\"246\":1,\"332\":1,\"344\":1,\"354\":1,\"419\":1,\"437\":1,\"586\":1,\"590\":1,\"592\":2,\"597\":1,\"600\":1,\"604\":1,\"611\":1,\"615\":1,\"617\":1,\"620\":2,\"621\":1,\"639\":1,\"652\":1,\"661\":1,\"663\":1,\"672\":1,\"701\":2,\"720\":1,\"736\":1,\"738\":1,\"748\":3,\"749\":1,\"755\":1,\"756\":2,\"770\":5,\"782\":1,\"807\":1,\"810\":1,\"825\":3,\"961\":1}}],[\"断言\",{\"0\":{\"833\":1},\"1\":{\"832\":1,\"833\":3}}],[\"断点续传\",{\"1\":{\"476\":1}}],[\"断开连接\",{\"1\":{\"180\":1}}],[\"断开\",{\"0\":{\"180\":1}}],[\"愿意\",{\"1\":{\"476\":1}}],[\"便于\",{\"1\":{\"590\":1,\"639\":1,\"757\":1,\"785\":1}}],[\"便\",{\"1\":{\"484\":1}}],[\"便宜\",{\"1\":{\"469\":1}}],[\"便利\",{\"1\":{\"301\":1}}],[\"物理\",{\"1\":{\"708\":1}}],[\"物品\",{\"1\":{\"469\":1}}],[\"物体\",{\"1\":{\"50\":1,\"218\":1,\"235\":1,\"237\":1,\"242\":1,\"270\":1,\"273\":1,\"282\":1,\"369\":2,\"379\":1,\"398\":2,\"404\":1}}],[\"价格\",{\"1\":{\"468\":1}}],[\"价值\",{\"1\":{\"355\":1,\"392\":1}}],[\"姓\",{\"1\":{\"468\":1}}],[\"限于\",{\"1\":{\"469\":1,\"617\":1,\"744\":1,\"922\":1,\"940\":1}}],[\"限定符\",{\"1\":{\"703\":3,\"706\":1,\"717\":1}}],[\"限定\",{\"0\":{\"462\":1},\"1\":{\"462\":2,\"654\":1}}],[\"限制\",{\"0\":{\"461\":1},\"1\":{\"199\":1,\"235\":1,\"246\":2,\"254\":1,\"370\":1,\"372\":1,\"390\":1,\"670\":1,\"863\":1,\"912\":1}}],[\"顾名思义\",{\"1\":{\"460\":1}}],[\"逗号\",{\"0\":{\"807\":2},\"1\":{\"458\":1,\"468\":1,\"589\":1,\"658\":2,\"730\":1,\"807\":4,\"811\":1,\"813\":1}}],[\"号\",{\"1\":{\"457\":1,\"485\":2,\"585\":1,\"658\":1,\"695\":2,\"703\":1,\"725\":1,\"730\":3,\"735\":1,\"756\":1,\"757\":1,\"816\":1,\"828\":1,\"852\":2}}],[\"迹\",{\"1\":{\"451\":1}}],[\"凡是\",{\"1\":{\"451\":1,\"600\":1,\"701\":1,\"805\":1}}],[\"γ\",{\"1\":{\"451\":1,\"907\":3,\"908\":1,\"947\":5}}],[\"μ\",{\"1\":{\"451\":10,\"869\":6}}],[\"亮度\",{\"1\":{\"451\":1,\"875\":1}}],[\"康\",{\"1\":{\"449\":1}}],[\"门控\",{\"1\":{\"449\":1}}],[\"欠佳\",{\"1\":{\"449\":1}}],[\"爆炸\",{\"0\":{\"448\":1}}],[\"庆幸\",{\"1\":{\"436\":1}}],[\"缠绕\",{\"1\":{\"436\":1}}],[\"缠绕着\",{\"1\":{\"436\":1}}],[\"缠结\",{\"1\":{\"195\":1}}],[\"«\",{\"1\":{\"426\":1}}],[\"床\",{\"1\":{\"425\":1}}],[\"草\",{\"1\":{\"425\":1}}],[\"录制\",{\"1\":{\"423\":1}}],[\"白天\",{\"1\":{\"423\":1}}],[\"白标\",{\"1\":{\"55\":1}}],[\"月\",{\"1\":{\"423\":1}}],[\"天数\",{\"1\":{\"864\":1,\"922\":1}}],[\"天气\",{\"1\":{\"423\":1}}],[\"天空\",{\"1\":{\"423\":1,\"425\":1}}],[\"天然\",{\"1\":{\"89\":1,\"370\":1}}],[\"城市\",{\"1\":{\"423\":2}}],[\"剔除\",{\"1\":{\"419\":1}}],[\"笔者\",{\"1\":{\"419\":1}}],[\"笔记\",{\"1\":{\"53\":1,\"54\":1,\"535\":1,\"872\":1,\"887\":1}}],[\"轿车\",{\"1\":{\"419\":1}}],[\"宽\",{\"1\":{\"417\":1,\"960\":1}}],[\"宽高为\",{\"1\":{\"288\":1}}],[\"马尔可夫\",{\"1\":{\"907\":1,\"953\":2}}],[\"马尔科夫\",{\"1\":{\"905\":1}}],[\"马\",{\"1\":{\"416\":1,\"748\":1}}],[\"拿到\",{\"1\":{\"465\":1}}],[\"拿\",{\"1\":{\"411\":1}}],[\"•\",{\"1\":{\"411\":2}}],[\"矩形\",{\"1\":{\"411\":1}}],[\"矩阵\",{\"1\":{\"102\":2,\"211\":1,\"222\":1,\"223\":2,\"225\":6,\"226\":4,\"290\":5,\"342\":1,\"394\":4,\"395\":1,\"451\":2,\"834\":1,\"836\":1,\"837\":1,\"859\":2}}],[\"怪兽\",{\"1\":{\"406\":1}}],[\"奥特曼\",{\"1\":{\"406\":1}}],[\"赫尔曼\",{\"1\":{\"406\":1}}],[\"迪菲\",{\"1\":{\"406\":1}}],[\"迪士尼\",{\"1\":{\"340\":1}}],[\"σ\",{\"1\":{\"399\":2,\"451\":16,\"869\":4,\"899\":5,\"900\":6,\"904\":3,\"918\":2}}],[\"临近\",{\"1\":{\"399\":1}}],[\"临时\",{\"1\":{\"43\":2,\"476\":1,\"586\":1,\"713\":1,\"729\":3,\"766\":1,\"825\":1}}],[\"⋯\",{\"1\":{\"399\":1}}],[\"借助于\",{\"1\":{\"940\":1}}],[\"借助\",{\"1\":{\"451\":1,\"546\":1,\"944\":1}}],[\"借鉴\",{\"1\":{\"399\":1}}],[\"借用\",{\"1\":{\"72\":1}}],[\"ℎ\",{\"1\":{\"399\":1}}],[\"腿\",{\"1\":{\"398\":1}}],[\"†\",{\"1\":{\"396\":1}}],[\"裁减\",{\"1\":{\"395\":1}}],[\"裁剪\",{\"0\":{\"390\":1},\"1\":{\"386\":4,\"390\":6,\"392\":2,\"393\":1,\"394\":2,\"395\":3,\"893\":1}}],[\"∥\",{\"1\":{\"394\":4,\"862\":4,\"897\":2,\"918\":2}}],[\"决策\",{\"1\":{\"392\":1}}],[\"决定\",{\"1\":{\"223\":1,\"270\":1,\"308\":1,\"392\":1,\"413\":2,\"587\":2,\"599\":1,\"684\":1,\"701\":1,\"729\":1,\"745\":1,\"751\":1,\"766\":1}}],[\"ρ\",{\"1\":{\"392\":2}}],[\"余地\",{\"1\":{\"750\":1}}],[\"余下\",{\"1\":{\"391\":1}}],[\"余弦\",{\"1\":{\"270\":1,\"394\":1,\"859\":1,\"864\":1,\"944\":1}}],[\"坍缩\",{\"1\":{\"390\":1}}],[\"旷视\",{\"1\":{\"385\":1}}],[\"争取\",{\"1\":{\"380\":1}}],[\"究\",{\"1\":{\"380\":1}}],[\"偶数\",{\"1\":{\"380\":1}}],[\"剩下\",{\"1\":{\"380\":1,\"392\":1,\"417\":1}}],[\"剩余\",{\"1\":{\"112\":1,\"288\":1,\"355\":1,\"961\":1}}],[\"道路\",{\"1\":{\"379\":1,\"425\":1}}],[\"铺平\",{\"1\":{\"379\":1}}],[\"车道\",{\"1\":{\"427\":1}}],[\"车\",{\"1\":{\"379\":1,\"416\":1}}],[\"车辆\",{\"1\":{\"58\":1,\"423\":1}}],[\"街景\",{\"1\":{\"379\":1,\"423\":1}}],[\"毛病\",{\"1\":{\"379\":1}}],[\"潜\",{\"1\":{\"953\":1}}],[\"潜力\",{\"1\":{\"379\":1,\"859\":1}}],[\"潜在\",{\"0\":{\"923\":1},\"1\":{\"199\":2,\"201\":1,\"228\":2,\"246\":1,\"314\":3,\"316\":1,\"320\":2,\"322\":1,\"864\":1,\"902\":1,\"922\":1,\"923\":1,\"924\":1,\"925\":5,\"935\":2,\"953\":4}}],[\"绿豆\",{\"1\":{\"375\":1}}],[\"绿色\",{\"1\":{\"126\":1}}],[\"花卷\",{\"1\":{\"895\":1,\"910\":1}}],[\"花费\",{\"1\":{\"406\":2,\"785\":1}}],[\"花\",{\"1\":{\"375\":1,\"682\":1,\"684\":1,\"719\":1,\"730\":2,\"755\":1}}],[\"花瓶\",{\"1\":{\"311\":1}}],[\"鲜艳\",{\"1\":{\"373\":1}}],[\"弥补\",{\"1\":{\"372\":1}}],[\"综上所述\",{\"1\":{\"736\":1,\"750\":1}}],[\"综合\",{\"1\":{\"372\":1,\"748\":1}}],[\"综述\",{\"1\":{\"340\":1,\"342\":1,\"359\":2,\"402\":1}}],[\"促使\",{\"1\":{\"371\":1,\"372\":1}}],[\"促进\",{\"1\":{\"319\":2,\"320\":1,\"893\":1}}],[\"枚举\",{\"0\":{\"755\":1},\"1\":{\"371\":1,\"755\":22,\"793\":1,\"818\":1}}],[\"达成\",{\"1\":{\"372\":1}}],[\"达\",{\"1\":{\"370\":2}}],[\"达到\",{\"1\":{\"25\":1,\"50\":1,\"52\":1,\"55\":1,\"370\":1,\"379\":1,\"392\":1,\"826\":1,\"957\":2}}],[\"却\",{\"1\":{\"369\":1,\"708\":1}}],[\"示意图\",{\"1\":{\"366\":1,\"373\":1}}],[\"示例\",{\"1\":{\"44\":1,\"82\":2,\"137\":3,\"138\":2,\"139\":3,\"314\":1,\"359\":1,\"566\":1,\"568\":1,\"624\":1,\"666\":1,\"859\":1}}],[\"送\",{\"1\":{\"781\":1}}],[\"送到\",{\"1\":{\"613\":1,\"717\":1,\"781\":1}}],[\"送入\",{\"1\":{\"366\":1,\"410\":1,\"415\":1,\"860\":1,\"868\":1,\"875\":2,\"901\":1,\"929\":3}}],[\"送进\",{\"1\":{\"49\":1}}],[\"摘取\",{\"1\":{\"366\":1,\"408\":1,\"415\":1}}],[\"摘要\",{\"0\":{\"199\":1},\"1\":{\"192\":1,\"485\":1}}],[\"⋅\",{\"1\":{\"363\":1,\"364\":1,\"399\":6,\"451\":3,\"904\":4}}],[\"速览\",{\"1\":{\"361\":1}}],[\"速度慢\",{\"1\":{\"62\":1,\"65\":1,\"928\":1}}],[\"速度\",{\"1\":{\"30\":1,\"63\":1,\"198\":1,\"199\":1,\"446\":1,\"449\":1,\"677\":1,\"787\":1,\"788\":1}}],[\"港\",{\"1\":{\"360\":1}}],[\"港口\",{\"1\":{\"58\":1,\"63\":1}}],[\"南大\",{\"1\":{\"360\":1}}],[\"今晚\",{\"1\":{\"359\":1}}],[\"今天\",{\"1\":{\"174\":1}}],[\"尚未\",{\"1\":{\"358\":1,\"590\":1}}],[\"胜过\",{\"1\":{\"358\":1}}],[\"虽有\",{\"1\":{\"390\":1}}],[\"虽\",{\"1\":{\"357\":1}}],[\"虽然\",{\"1\":{\"175\":1,\"235\":1,\"299\":1,\"379\":1,\"530\":1,\"612\":1,\"650\":1,\"670\":1,\"713\":1,\"826\":1,\"863\":1}}],[\"阵营\",{\"1\":{\"357\":1}}],[\"耦\",{\"1\":{\"357\":3,\"959\":2}}],[\"耦合\",{\"1\":{\"354\":1,\"355\":2,\"356\":4,\"959\":1}}],[\"β\",{\"1\":{\"356\":1,\"357\":4,\"358\":1,\"451\":1,\"867\":6,\"869\":15,\"900\":21,\"940\":1}}],[\"𝑡\",{\"1\":{\"356\":1}}],[\"𝑝\",{\"1\":{\"356\":1}}],[\"批次\",{\"1\":{\"355\":1}}],[\"批量\",{\"0\":{\"163\":1}}],[\"迁移\",{\"1\":{\"355\":1,\"959\":1}}],[\"置\",{\"1\":{\"410\":1,\"437\":1,\"947\":1}}],[\"置信度\",{\"1\":{\"355\":4,\"356\":1}}],[\"置信\",{\"1\":{\"355\":4}}],[\"置换\",{\"1\":{\"220\":3,\"222\":1,\"223\":1,\"227\":1,\"228\":1,\"244\":1,\"246\":1,\"707\":1}}],[\"暗\",{\"1\":{\"355\":2}}],[\"突出\",{\"1\":{\"355\":2,\"399\":1}}],[\"突破\",{\"1\":{\"38\":1}}],[\"τ\",{\"1\":{\"354\":2,\"355\":4,\"356\":1,\"357\":1,\"884\":1}}],[\"除不尽\",{\"1\":{\"798\":1}}],[\"除外\",{\"1\":{\"703\":1}}],[\"除此之外\",{\"1\":{\"573\":1}}],[\"除非\",{\"1\":{\"396\":1,\"689\":1}}],[\"除\",{\"1\":{\"354\":1,\"451\":1,\"811\":1}}],[\"除了\",{\"1\":{\"38\":1,\"225\":1,\"228\":1,\"380\":1,\"409\":1,\"577\":1,\"609\":1,\"610\":1,\"619\":1,\"657\":1,\"659\":1,\"776\":1,\"782\":1,\"793\":1,\"928\":1,\"935\":1}}],[\"∖\",{\"1\":{\"353\":2,\"354\":1}}],[\"蒸馏\",{\"0\":{\"350\":1,\"351\":1},\"1\":{\"350\":1,\"354\":2,\"355\":4,\"356\":1,\"357\":10,\"358\":1,\"377\":1,\"386\":1}}],[\"辨别力\",{\"1\":{\"955\":1}}],[\"辨别\",{\"1\":{\"349\":1}}],[\"恒定\",{\"1\":{\"349\":2,\"392\":1}}],[\"倘若\",{\"1\":{\"349\":1}}],[\"∫\",{\"1\":{\"349\":1,\"904\":2}}],[\"⁡\",{\"1\":{\"348\":3,\"904\":1,\"905\":1}}],[\"∼\",{\"1\":{\"347\":2,\"348\":3,\"428\":2,\"451\":2,\"867\":3,\"869\":5,\"896\":1,\"897\":2,\"917\":1,\"935\":1}}],[\"散度\",{\"0\":{\"346\":1,\"349\":1},\"1\":{\"349\":7,\"358\":2,\"451\":1,\"882\":1,\"884\":3}}],[\"观感\",{\"1\":{\"875\":1}}],[\"观看\",{\"1\":{\"785\":1}}],[\"观点\",{\"1\":{\"398\":1,\"862\":1}}],[\"观测\",{\"1\":{\"342\":1,\"904\":1,\"906\":1}}],[\"观察\",{\"1\":{\"38\":1,\"242\":1,\"299\":2,\"369\":1}}],[\"纠正\",{\"1\":{\"342\":1}}],[\"拍摄\",{\"1\":{\"342\":1}}],[\"拍照\",{\"1\":{\"290\":2}}],[\"泊松\",{\"1\":{\"342\":1}}],[\"泊松盘\",{\"1\":{\"222\":1}}],[\"北大\",{\"1\":{\"342\":1}}],[\"–\",{\"1\":{\"342\":1,\"422\":2,\"423\":1,\"845\":1}}],[\"追踪\",{\"1\":{\"340\":1,\"427\":1}}],[\"追随者\",{\"1\":{\"33\":1}}],[\"λ\",{\"1\":{\"338\":2,\"918\":1}}],[\"ˉ\",{\"1\":{\"332\":1,\"867\":4,\"869\":48,\"896\":2,\"900\":9,\"901\":6,\"917\":7}}],[\"∑\",{\"1\":{\"332\":1,\"338\":2,\"347\":1,\"348\":2,\"349\":8,\"353\":1,\"363\":1,\"364\":1,\"366\":1,\"371\":1,\"372\":2,\"395\":3,\"451\":2,\"918\":1}}],[\"教师\",{\"1\":{\"325\":1,\"354\":3,\"355\":2}}],[\"教程\",{\"1\":{\"160\":1,\"545\":10,\"833\":1}}],[\"记事本\",{\"1\":{\"781\":1}}],[\"记为\",{\"1\":{\"323\":1,\"350\":1,\"390\":1}}],[\"记录下来\",{\"1\":{\"10\":1}}],[\"记录\",{\"1\":{\"4\":1,\"11\":1,\"28\":1,\"44\":1,\"71\":1,\"95\":1,\"99\":1,\"100\":2,\"107\":2,\"125\":1,\"137\":5,\"138\":1,\"139\":1,\"153\":1,\"172\":1,\"182\":1,\"210\":1,\"394\":1,\"465\":4,\"938\":1,\"940\":3,\"951\":1}}],[\"暴露\",{\"1\":{\"322\":1}}],[\"暴力\",{\"1\":{\"104\":1}}],[\"希尔伯特\",{\"1\":{\"318\":1}}],[\"希望\",{\"1\":{\"55\":1,\"349\":1,\"446\":1,\"617\":1,\"744\":1}}],[\"莫过于\",{\"1\":{\"944\":1}}],[\"莫烦\",{\"1\":{\"532\":1}}],[\"莫顿\",{\"1\":{\"318\":3}}],[\"莫名其妙\",{\"1\":{\"175\":1}}],[\"丰富\",{\"1\":{\"315\":1,\"319\":2,\"355\":1,\"372\":1,\"864\":1,\"958\":1}}],[\"义\",{\"1\":{\"315\":2,\"344\":1,\"371\":1,\"775\":1}}],[\"义为\",{\"1\":{\"201\":1}}],[\"挑选\",{\"1\":{\"312\":2}}],[\"挑战\",{\"1\":{\"217\":1,\"226\":2,\"229\":1,\"270\":1,\"315\":1,\"325\":1,\"379\":4}}],[\"挑战性\",{\"1\":{\"193\":1,\"250\":1,\"254\":1,\"355\":1,\"952\":1}}],[\"巧妙\",{\"1\":{\"312\":1,\"337\":1,\"384\":2}}],[\"歧义\",{\"1\":{\"312\":1,\"721\":3,\"730\":1}}],[\"片段\",{\"1\":{\"311\":1}}],[\"吗\",{\"1\":{\"309\":1}}],[\"违反\",{\"1\":{\"308\":1}}],[\"→\",{\"1\":{\"304\":1,\"867\":3,\"869\":2,\"897\":5,\"900\":4,\"904\":2,\"910\":1}}],[\"凑成\",{\"1\":{\"304\":2}}],[\"浅谈\",{\"1\":{\"947\":1}}],[\"浅层\",{\"1\":{\"400\":1,\"449\":1}}],[\"浅显\",{\"1\":{\"304\":1}}],[\"浅八叉\",{\"1\":{\"218\":1}}],[\"李群\",{\"1\":{\"303\":1}}],[\"孙\",{\"1\":{\"303\":1}}],[\"雪\",{\"1\":{\"303\":1}}],[\"雪峰\",{\"1\":{\"30\":1}}],[\"梧桐\",{\"1\":{\"303\":1}}],[\"仔细\",{\"1\":{\"303\":1}}],[\"措施\",{\"1\":{\"303\":1,\"910\":1}}],[\"阻止\",{\"1\":{\"559\":1}}],[\"阻碍\",{\"1\":{\"303\":1}}],[\"阻塞\",{\"0\":{\"17\":1},\"1\":{\"3\":1,\"4\":2,\"11\":2,\"13\":1,\"15\":3,\"17\":3,\"23\":1,\"30\":12,\"39\":1,\"492\":3,\"529\":2}}],[\"折叠为\",{\"1\":{\"311\":1}}],[\"折叠\",{\"1\":{\"301\":2,\"307\":3,\"308\":8,\"311\":1,\"312\":2}}],[\"抑制\",{\"1\":{\"300\":1,\"355\":4,\"884\":1}}],[\"衡量\",{\"1\":{\"299\":1,\"323\":2,\"342\":1,\"392\":2,\"451\":5,\"884\":1}}],[\"截取\",{\"1\":{\"534\":2}}],[\"截头\",{\"1\":{\"299\":1}}],[\"截断\",{\"1\":{\"226\":1,\"804\":1,\"929\":1}}],[\"野变\",{\"1\":{\"294\":1}}],[\"野\",{\"1\":{\"293\":1,\"303\":1,\"540\":1,\"667\":2,\"676\":1}}],[\"朗伯\",{\"1\":{\"293\":1}}],[\"书写\",{\"1\":{\"625\":1}}],[\"书\",{\"1\":{\"292\":1,\"293\":1,\"485\":1}}],[\"幅\",{\"1\":{\"290\":1}}],[\"幅宽\",{\"1\":{\"62\":1,\"64\":1,\"65\":1}}],[\"锥形\",{\"1\":{\"290\":3}}],[\"稠密\",{\"1\":{\"288\":2}}],[\"张图\",{\"1\":{\"940\":1}}],[\"张\",{\"1\":{\"288\":1,\"423\":2,\"859\":2}}],[\"张量\",{\"1\":{\"204\":1,\"222\":1,\"304\":8,\"839\":1,\"846\":1,\"849\":1,\"882\":1,\"883\":1,\"958\":1}}],[\"真\",{\"1\":{\"676\":1,\"781\":1,\"808\":1,\"809\":1,\"810\":5,\"817\":2}}],[\"真的\",{\"1\":{\"485\":1}}],[\"真数\",{\"1\":{\"348\":2}}],[\"真值\",{\"1\":{\"342\":4}}],[\"真实性\",{\"1\":{\"928\":1}}],[\"真实\",{\"1\":{\"284\":1,\"290\":3,\"292\":2,\"299\":1,\"323\":4,\"342\":3,\"348\":2,\"349\":3,\"451\":7,\"868\":1,\"875\":1,\"904\":1,\"905\":1,\"906\":1,\"957\":6}}],[\"真正\",{\"1\":{\"13\":2,\"30\":1,\"410\":1,\"828\":1}}],[\"梯度方向\",{\"1\":{\"941\":1}}],[\"梯度\",{\"0\":{\"448\":2},\"1\":{\"284\":1,\"372\":1,\"436\":1,\"437\":2,\"446\":3,\"449\":1,\"855\":1,\"904\":3,\"915\":1,\"920\":1,\"941\":3,\"944\":1,\"945\":1,\"947\":3,\"957\":1}}],[\"α\",{\"1\":{\"283\":2,\"356\":1,\"357\":2,\"451\":1,\"867\":16,\"869\":71,\"896\":2,\"900\":5,\"901\":6,\"905\":1,\"906\":1,\"908\":1,\"917\":7}}],[\"继承性\",{\"1\":{\"747\":1}}],[\"继承\",{\"0\":{\"510\":1,\"629\":1,\"747\":1,\"748\":1,\"753\":1},\"1\":{\"282\":1,\"510\":3,\"603\":1,\"701\":4,\"704\":1,\"747\":2,\"748\":17,\"749\":7,\"750\":5,\"751\":1,\"752\":6,\"766\":1,\"769\":6,\"781\":1}}],[\"继续执行\",{\"1\":{\"818\":1}}],[\"继续\",{\"1\":{\"30\":2,\"43\":1,\"71\":1,\"72\":1,\"180\":1,\"191\":1,\"337\":1,\"476\":1,\"829\":1,\"941\":1}}],[\"δ\",{\"1\":{\"282\":6,\"290\":2,\"364\":1,\"371\":3,\"372\":3,\"862\":6,\"897\":62,\"900\":23}}],[\"融入\",{\"1\":{\"276\":1,\"327\":1}}],[\"融合\",{\"0\":{\"300\":1,\"330\":1,\"332\":1,\"395\":1},\"1\":{\"53\":8,\"211\":1,\"228\":4,\"233\":1,\"245\":2,\"247\":1,\"294\":1,\"300\":3,\"386\":1,\"392\":1,\"393\":1,\"395\":5}}],[\"忽略\",{\"1\":{\"276\":1,\"342\":1,\"390\":1,\"417\":1,\"620\":1}}],[\"质心\",{\"1\":{\"273\":1}}],[\"质量\",{\"1\":{\"202\":1,\"288\":1,\"299\":2,\"451\":3,\"873\":2,\"893\":1,\"910\":2,\"928\":2}}],[\"审视\",{\"1\":{\"273\":1}}],[\"渲染\",{\"1\":{\"270\":1,\"340\":2,\"935\":1}}],[\"克服\",{\"1\":{\"270\":1,\"315\":2}}],[\"ˆ\",{\"1\":{\"268\":2}}],[\"·\",{\"1\":{\"268\":1}}],[\"ζ\",{\"1\":{\"268\":1}}],[\"额\",{\"1\":{\"265\":1}}],[\"额外\",{\"1\":{\"56\":1,\"105\":1,\"198\":2,\"210\":1,\"259\":1,\"282\":1,\"349\":1,\"393\":1,\"394\":1,\"399\":1,\"451\":1,\"500\":1,\"922\":1,\"938\":1,\"941\":1,\"945\":2,\"952\":1,\"955\":1}}],[\"略有不同\",{\"1\":{\"940\":1}}],[\"略写\",{\"1\":{\"717\":1}}],[\"略\",{\"1\":{\"264\":1,\"940\":1}}],[\"略带\",{\"1\":{\"55\":1}}],[\"挖出\",{\"1\":{\"263\":1}}],[\"挖掘\",{\"1\":{\"225\":1,\"227\":1,\"391\":1}}],[\"室外\",{\"1\":{\"262\":1}}],[\"室内\",{\"1\":{\"262\":1}}],[\"远比\",{\"1\":{\"863\":1}}],[\"远远\",{\"1\":{\"707\":1}}],[\"远距离\",{\"1\":{\"370\":2}}],[\"远\",{\"1\":{\"262\":1,\"882\":1}}],[\"远程\",{\"1\":{\"168\":3,\"188\":1}}],[\"足以\",{\"1\":{\"262\":1,\"370\":1,\"955\":1}}],[\"足够\",{\"1\":{\"229\":1,\"370\":1,\"824\":1,\"906\":1}}],[\"替代\",{\"1\":{\"261\":1,\"676\":1}}],[\"替换成\",{\"1\":{\"599\":1,\"865\":1,\"935\":1,\"940\":1}}],[\"替换\",{\"1\":{\"105\":1,\"373\":1,\"654\":4,\"739\":1,\"740\":1,\"860\":1,\"938\":1,\"951\":1}}],[\"思想\",{\"1\":{\"337\":1,\"955\":1,\"957\":1}}],[\"思考\",{\"0\":{\"401\":1},\"1\":{\"259\":1,\"666\":1}}],[\"思路\",{\"1\":{\"5\":1,\"137\":1,\"344\":2,\"402\":2,\"502\":1}}],[\"源程序\",{\"1\":{\"785\":1}}],[\"源文件\",{\"1\":{\"621\":1,\"651\":1,\"707\":1}}],[\"源于\",{\"1\":{\"372\":1}}],[\"源\",{\"1\":{\"259\":1,\"332\":1,\"534\":1}}],[\"源码\",{\"1\":{\"38\":1,\"380\":2}}],[\"温度\",{\"1\":{\"255\":1}}],[\"熵\",{\"0\":{\"348\":1},\"1\":{\"255\":1,\"299\":1,\"347\":6,\"348\":10,\"349\":8}}],[\"巨大\",{\"1\":{\"254\":1,\"370\":1,\"904\":1}}],[\"景观\",{\"1\":{\"254\":1}}],[\"景点\",{\"1\":{\"234\":1}}],[\"既能\",{\"1\":{\"782\":1}}],[\"既\",{\"1\":{\"254\":1,\"595\":1,\"676\":1,\"721\":1,\"744\":1,\"829\":1,\"863\":1}}],[\"既然\",{\"1\":{\"126\":1}}],[\"昂贵\",{\"1\":{\"254\":1,\"370\":1,\"469\":2,\"922\":1}}],[\"ß\",{\"1\":{\"247\":1}}],[\"控制点\",{\"1\":{\"953\":1}}],[\"控制符\",{\"1\":{\"778\":1}}],[\"控制台\",{\"1\":{\"775\":1}}],[\"控制结构\",{\"1\":{\"707\":1}}],[\"控制器\",{\"1\":{\"613\":1}}],[\"控制\",{\"0\":{\"505\":1,\"795\":1,\"817\":1},\"1\":{\"246\":1,\"299\":1,\"308\":1,\"374\":1,\"395\":1,\"476\":1,\"563\":1,\"599\":1,\"701\":1,\"778\":2,\"816\":2,\"818\":1,\"863\":1,\"938\":6,\"949\":2,\"951\":2,\"952\":1,\"958\":2,\"961\":3}}],[\"扫描\",{\"1\":{\"246\":1,\"247\":1,\"262\":1,\"342\":1}}],[\"戴\",{\"1\":{\"246\":1}}],[\"良好\",{\"1\":{\"246\":2,\"325\":1,\"355\":2,\"423\":1,\"955\":1}}],[\"群\",{\"1\":{\"246\":1,\"303\":1}}],[\"严重后果\",{\"1\":{\"677\":1,\"724\":1}}],[\"严重\",{\"1\":{\"246\":1,\"355\":1}}],[\"严格\",{\"1\":{\"225\":1,\"358\":1,\"537\":1,\"577\":1}}],[\"馈送\",{\"1\":{\"246\":1}}],[\"敏感性\",{\"1\":{\"451\":1}}],[\"敏感\",{\"1\":{\"245\":1,\"357\":2,\"860\":1}}],[\"欧几里得\",{\"1\":{\"245\":1,\"334\":1}}],[\"欧几里德\",{\"1\":{\"222\":1,\"226\":1}}],[\"摄像机\",{\"1\":{\"245\":1}}],[\"范数\",{\"1\":{\"307\":1,\"308\":1}}],[\"范式\",{\"1\":{\"244\":1}}],[\"范围\",{\"1\":{\"43\":1,\"94\":1,\"152\":2,\"245\":1,\"299\":1,\"357\":1,\"370\":1,\"372\":1,\"417\":1,\"451\":1,\"545\":2,\"559\":1,\"606\":1,\"617\":1,\"619\":1,\"620\":2,\"621\":1,\"633\":1,\"642\":1,\"722\":1,\"741\":1,\"755\":1,\"799\":2,\"816\":1,\"863\":1,\"915\":1,\"920\":1}}],[\"粒度\",{\"1\":{\"243\":1,\"246\":1}}],[\"细化\",{\"1\":{\"281\":1,\"282\":4,\"901\":1}}],[\"细分\",{\"1\":{\"281\":1,\"282\":6,\"283\":2}}],[\"细\",{\"1\":{\"246\":1}}],[\"细粒度\",{\"1\":{\"243\":1,\"246\":1,\"273\":1,\"926\":1,\"929\":1}}],[\"细节\",{\"0\":{\"6\":1},\"1\":{\"54\":1,\"55\":1,\"126\":1,\"191\":1,\"218\":1,\"243\":1,\"246\":1,\"277\":1,\"284\":1,\"701\":1,\"910\":3,\"924\":2,\"925\":1,\"926\":2,\"938\":1,\"958\":2,\"961\":1,\"962\":1}}],[\"省略\",{\"1\":{\"242\":1,\"249\":1,\"583\":1,\"585\":1,\"589\":1,\"598\":2,\"611\":1,\"644\":2,\"682\":1,\"684\":1,\"707\":1,\"721\":2,\"735\":1,\"760\":1,\"781\":1,\"825\":1,\"939\":1}}],[\"困难\",{\"1\":{\"242\":1,\"355\":1,\"390\":1,\"940\":1}}],[\"困惑\",{\"1\":{\"174\":1}}],[\"者\",{\"1\":{\"242\":1}}],[\"骑\",{\"1\":{\"242\":1}}],[\"汽车\",{\"1\":{\"242\":1,\"379\":1,\"425\":1}}],[\"阈值\",{\"1\":{\"242\":1,\"299\":1,\"342\":2,\"417\":1,\"882\":1}}],[\"年龄\",{\"1\":{\"730\":1}}],[\"年月日\",{\"1\":{\"606\":1}}],[\"年\",{\"1\":{\"242\":1,\"922\":1}}],[\"纹理\",{\"1\":{\"242\":1,\"247\":1,\"270\":2,\"327\":1,\"400\":1,\"910\":1,\"958\":1}}],[\"局限\",{\"1\":{\"938\":1}}],[\"局限性\",{\"1\":{\"242\":1,\"451\":1}}],[\"局部变量\",{\"0\":{\"611\":1,\"612\":1,\"619\":1,\"620\":1},\"1\":{\"609\":4,\"611\":2,\"612\":14,\"613\":2,\"620\":2,\"621\":4,\"817\":1}}],[\"局部性\",{\"1\":{\"211\":1,\"863\":2}}],[\"局部\",{\"1\":{\"53\":1,\"141\":2,\"153\":2,\"193\":1,\"194\":1,\"217\":1,\"220\":6,\"221\":2,\"222\":6,\"223\":3,\"225\":3,\"226\":3,\"227\":2,\"228\":4,\"245\":2,\"246\":1,\"247\":1,\"259\":4,\"263\":1,\"282\":2,\"284\":1,\"312\":1,\"370\":1,\"400\":1,\"597\":1,\"722\":6,\"893\":3,\"928\":1,\"938\":1,\"940\":2,\"957\":1}}],[\"盒\",{\"1\":{\"237\":1}}],[\"拥挤\",{\"1\":{\"234\":1}}],[\"拥有\",{\"1\":{\"209\":1,\"379\":1}}],[\"鸟瞰图\",{\"1\":{\"233\":1}}],[\"初等\",{\"1\":{\"813\":1}}],[\"初值\",{\"0\":{\"552\":1},\"1\":{\"522\":1,\"573\":2,\"612\":5,\"659\":1,\"665\":1,\"682\":3,\"712\":4,\"714\":1,\"717\":1,\"718\":3,\"720\":1,\"744\":1,\"758\":2,\"826\":1,\"828\":1,\"829\":1}}],[\"初级阶段\",{\"1\":{\"229\":1}}],[\"初始值\",{\"1\":{\"573\":2,\"906\":1}}],[\"初始\",{\"0\":{\"294\":1,\"329\":1},\"1\":{\"51\":2,\"80\":2,\"281\":1,\"282\":1,\"294\":4,\"299\":1,\"310\":1,\"317\":1,\"329\":1,\"334\":1,\"411\":1,\"573\":2,\"793\":1}}],[\"初始状态\",{\"1\":{\"44\":1,\"906\":1}}],[\"初始化\",{\"0\":{\"548\":1,\"573\":1,\"659\":1,\"665\":1,\"682\":1,\"715\":1,\"719\":2,\"758\":1},\"1\":{\"5\":1,\"8\":1,\"10\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"27\":1,\"35\":1,\"36\":2,\"71\":3,\"96\":1,\"103\":1,\"137\":2,\"197\":1,\"198\":5,\"201\":1,\"502\":1,\"548\":1,\"559\":2,\"563\":1,\"573\":2,\"574\":1,\"612\":3,\"658\":2,\"659\":2,\"661\":1,\"665\":1,\"667\":1,\"672\":2,\"682\":1,\"683\":1,\"684\":2,\"688\":1,\"692\":1,\"696\":1,\"698\":2,\"709\":1,\"714\":3,\"715\":3,\"716\":1,\"717\":3,\"718\":3,\"719\":6,\"720\":2,\"729\":1,\"730\":2,\"735\":3,\"744\":4,\"745\":3,\"854\":2,\"929\":1}}],[\"丢掉\",{\"1\":{\"386\":1}}],[\"丢弃\",{\"1\":{\"229\":1,\"259\":1,\"263\":1,\"314\":1,\"320\":1,\"391\":1,\"392\":1,\"940\":1}}],[\"丢失\",{\"1\":{\"168\":1,\"217\":1,\"245\":1,\"246\":2,\"386\":2,\"923\":1,\"938\":3,\"951\":3}}],[\"尺寸\",{\"1\":{\"229\":1,\"288\":1,\"290\":1,\"294\":1,\"379\":1,\"392\":1,\"922\":2,\"928\":1}}],[\"尺度\",{\"1\":{\"53\":1,\"61\":1,\"63\":2,\"225\":1,\"228\":1,\"254\":1,\"260\":1,\"272\":1,\"288\":1,\"299\":1,\"312\":1,\"319\":1,\"332\":3,\"338\":1,\"370\":4,\"372\":2,\"379\":3,\"918\":1}}],[\"近期\",{\"1\":{\"891\":1}}],[\"近\",{\"1\":{\"312\":1}}],[\"近似\",{\"1\":{\"283\":1,\"292\":1,\"348\":1,\"451\":1,\"882\":1,\"904\":1}}],[\"近年来\",{\"1\":{\"229\":1}}],[\"近邻\",{\"1\":{\"227\":1,\"282\":1,\"317\":1}}],[\"１\",{\"1\":{\"229\":1}}],[\"残差\",{\"0\":{\"336\":1},\"1\":{\"228\":1,\"245\":1,\"282\":1,\"294\":1,\"310\":1,\"332\":1,\"873\":1}}],[\"４\",{\"1\":{\"228\":2}}],[\"制定\",{\"1\":{\"953\":2}}],[\"制作\",{\"1\":{\"228\":1}}],[\"制导\",{\"1\":{\"58\":1}}],[\"软件\",{\"1\":{\"747\":2}}],[\"软件设计\",{\"0\":{\"501\":1,\"502\":1},\"1\":{\"501\":1}}],[\"软件工程\",{\"1\":{\"44\":1}}],[\"软\",{\"1\":{\"228\":2,\"299\":1}}],[\"亲和点\",{\"1\":{\"228\":1}}],[\"亲和力\",{\"1\":{\"225\":1}}],[\"胶囊\",{\"1\":{\"228\":1}}],[\"矢量\",{\"1\":{\"228\":1}}],[\"矢量化\",{\"1\":{\"225\":1}}],[\"神经\",{\"1\":{\"340\":1}}],[\"神经元\",{\"1\":{\"227\":1,\"436\":3,\"437\":2,\"446\":1}}],[\"神经网络\",{\"1\":{\"218\":1,\"222\":1,\"226\":1,\"228\":1,\"246\":3,\"312\":1,\"359\":1,\"367\":1,\"377\":1,\"379\":2,\"380\":1,\"392\":1,\"404\":1,\"405\":1,\"408\":1,\"409\":1,\"436\":2,\"449\":1,\"922\":1,\"949\":1,\"955\":1,\"957\":1}}],[\"带噪\",{\"1\":{\"904\":1}}],[\"带入\",{\"1\":{\"869\":1,\"947\":1}}],[\"带虚\",{\"1\":{\"769\":1}}],[\"带参\",{\"1\":{\"718\":2}}],[\"带\",{\"0\":{\"718\":1},\"1\":{\"623\":1,\"718\":2,\"740\":1,\"793\":1}}],[\"带回\",{\"1\":{\"587\":1,\"589\":1,\"621\":1,\"689\":1,\"729\":2,\"826\":1,\"830\":1}}],[\"带来\",{\"1\":{\"226\":1,\"245\":1,\"259\":1,\"357\":1,\"379\":1}}],[\"带有\",{\"1\":{\"44\":1,\"199\":1,\"465\":2,\"595\":1,\"769\":1,\"938\":1,\"951\":1}}],[\"滤波\",{\"0\":{\"297\":1},\"1\":{\"226\":2,\"300\":1}}],[\"滤波器\",{\"1\":{\"222\":1,\"225\":1,\"226\":1}}],[\"凝聚\",{\"1\":{\"225\":1}}],[\"联编\",{\"1\":{\"770\":1}}],[\"联\",{\"1\":{\"770\":2}}],[\"联合\",{\"1\":{\"225\":1,\"246\":1,\"247\":2,\"262\":1,\"377\":1,\"859\":2,\"875\":1,\"889\":1}}],[\"联系\",{\"0\":{\"898\":1},\"1\":{\"126\":1,\"255\":1,\"621\":1,\"701\":1,\"858\":1,\"875\":1}}],[\"译码器\",{\"1\":{\"225\":1}}],[\"灵感\",{\"1\":{\"225\":1,\"263\":1,\"901\":1,\"957\":1}}],[\"灵活性\",{\"1\":{\"701\":1}}],[\"灵活\",{\"1\":{\"195\":1,\"198\":1,\"246\":1,\"337\":1,\"356\":1,\"371\":1,\"398\":3}}],[\"级\",{\"1\":{\"243\":3,\"245\":1,\"372\":1,\"379\":1,\"425\":1,\"863\":1,\"887\":2}}],[\"级联\",{\"1\":{\"225\":1}}],[\"级别\",{\"1\":{\"13\":2,\"227\":1,\"246\":1,\"259\":4,\"370\":1,\"402\":1,\"887\":1,\"935\":1}}],[\"粗糙\",{\"1\":{\"327\":1}}],[\"粗到\",{\"1\":{\"246\":1}}],[\"粗体\",{\"1\":{\"246\":1,\"280\":1}}],[\"粗化\",{\"1\":{\"225\":2,\"226\":1}}],[\"粗略地\",{\"1\":{\"398\":1}}],[\"粗略\",{\"1\":{\"222\":1,\"225\":1,\"423\":1}}],[\"属性\",{\"0\":{\"618\":1,\"751\":1},\"1\":{\"225\":1,\"273\":1,\"545\":2,\"609\":1,\"610\":2,\"680\":1,\"701\":3,\"703\":1,\"750\":1,\"751\":2,\"958\":1}}],[\"属于\",{\"1\":{\"36\":1,\"203\":1,\"268\":1,\"400\":1,\"451\":1,\"476\":2,\"544\":1,\"583\":1,\"604\":1,\"611\":2,\"612\":1,\"647\":1,\"705\":1,\"720\":1,\"721\":1,\"724\":1,\"744\":3,\"745\":4,\"770\":1,\"811\":1,\"890\":1}}],[\"激励函数\",{\"1\":{\"449\":1}}],[\"激进\",{\"1\":{\"386\":1,\"390\":2}}],[\"激光雷达\",{\"1\":{\"233\":1,\"245\":1}}],[\"激光\",{\"1\":{\"225\":1}}],[\"激活\",{\"0\":{\"434\":1,\"447\":1,\"449\":1},\"1\":{\"170\":1,\"220\":1,\"222\":1,\"223\":2,\"322\":1,\"399\":2,\"436\":3,\"437\":1,\"446\":1,\"449\":2,\"887\":1,\"891\":1,\"893\":2}}],[\"扰动\",{\"1\":{\"223\":1,\"904\":3,\"920\":1}}],[\"抵抗\",{\"1\":{\"223\":1}}],[\"晶格\",{\"1\":{\"223\":1,\"244\":1,\"246\":3}}],[\"块状\",{\"1\":{\"315\":1}}],[\"块\",{\"1\":{\"223\":1,\"229\":1,\"314\":2,\"317\":1,\"322\":4,\"419\":3,\"509\":1,\"619\":1,\"620\":1,\"849\":1}}],[\"校准\",{\"1\":{\"342\":1}}],[\"校正\",{\"1\":{\"223\":1,\"245\":1}}],[\"校验\",{\"1\":{\"3\":1,\"10\":2,\"485\":2}}],[\"傅里叶\",{\"1\":{\"223\":1}}],[\"傅立叶\",{\"1\":{\"222\":1}}],[\"沿\",{\"1\":{\"294\":1,\"299\":2,\"372\":2}}],[\"沿着\",{\"1\":{\"227\":1,\"299\":1,\"304\":1,\"334\":1,\"882\":1}}],[\"沿基\",{\"1\":{\"223\":1}}],[\"沿用至今\",{\"1\":{\"49\":1}}],[\"箱\",{\"1\":{\"223\":1}}],[\"少量\",{\"1\":{\"701\":1}}],[\"少数\",{\"1\":{\"254\":1}}],[\"少\",{\"1\":{\"222\":1,\"277\":1,\"370\":1,\"476\":1,\"762\":1}}],[\"积分\",{\"1\":{\"903\":1}}],[\"积\",{\"1\":{\"222\":1}}],[\"互换\",{\"1\":{\"600\":1}}],[\"互不\",{\"1\":{\"546\":1,\"620\":1,\"701\":1,\"818\":1}}],[\"互相联系\",{\"1\":{\"701\":1}}],[\"互相\",{\"1\":{\"222\":1,\"263\":1,\"583\":1,\"793\":1}}],[\"互斥\",{\"0\":{\"24\":1},\"1\":{\"24\":8,\"25\":3,\"34\":1,\"527\":3}}],[\"谐函数\",{\"1\":{\"222\":2}}],[\"谱域\",{\"0\":{\"226\":1},\"1\":{\"224\":1}}],[\"谱\",{\"1\":{\"222\":1,\"226\":4}}],[\"锚定\",{\"1\":{\"222\":1}}],[\"域表\",{\"1\":{\"756\":1}}],[\"域\",{\"0\":{\"225\":1},\"1\":{\"222\":1,\"224\":1,\"225\":1,\"226\":1,\"228\":1,\"245\":2,\"259\":1,\"312\":3,\"621\":1,\"756\":1,\"766\":1}}],[\"域名\",{\"1\":{\"41\":1}}],[\"针对\",{\"1\":{\"222\":1,\"259\":1,\"264\":1,\"276\":1,\"308\":1,\"312\":1,\"372\":1,\"417\":1,\"419\":2,\"480\":1,\"887\":1,\"938\":1,\"940\":1,\"945\":1,\"951\":1}}],[\"径向\",{\"1\":{\"222\":2,\"228\":1,\"342\":1}}],[\"插到\",{\"1\":{\"829\":1}}],[\"插\",{\"1\":{\"829\":1}}],[\"插拔\",{\"1\":{\"563\":1}}],[\"插值\",{\"1\":{\"222\":1,\"223\":2,\"246\":4,\"280\":1,\"963\":1}}],[\"插入\",{\"0\":{\"95\":1,\"823\":1,\"829\":1},\"1\":{\"32\":1,\"34\":2,\"38\":1,\"46\":1,\"69\":1,\"95\":5,\"96\":3,\"102\":1,\"512\":1,\"539\":3,\"559\":16,\"560\":1,\"565\":2,\"574\":3,\"624\":2,\"775\":3,\"781\":1,\"829\":19,\"830\":22}}],[\"测量\",{\"1\":{\"298\":1,\"299\":2,\"662\":1,\"690\":1}}],[\"测地\",{\"1\":{\"222\":1,\"312\":2}}],[\"测试\",{\"0\":{\"259\":1},\"1\":{\"168\":1,\"192\":1,\"199\":1,\"214\":1,\"229\":1,\"242\":2,\"246\":2,\"311\":1,\"793\":1,\"859\":1,\"873\":1}}],[\"测试用例\",{\"1\":{\"104\":1}}],[\"测试数据\",{\"1\":{\"99\":1}}],[\"乘除\",{\"1\":{\"813\":1}}],[\"乘\",{\"1\":{\"811\":1}}],[\"乘积\",{\"1\":{\"222\":2}}],[\"乘法\",{\"1\":{\"211\":1,\"222\":1}}],[\"展平\",{\"1\":{\"380\":2}}],[\"展开\",{\"1\":{\"311\":1,\"652\":1,\"938\":1,\"951\":1}}],[\"展开式\",{\"1\":{\"222\":2}}],[\"展示\",{\"1\":{\"192\":1}}],[\"泰勒\",{\"1\":{\"222\":2}}],[\"阶乘\",{\"1\":{\"612\":1}}],[\"阶跃\",{\"1\":{\"222\":2}}],[\"阶段\",{\"1\":{\"8\":1,\"35\":1,\"36\":1,\"53\":1,\"199\":1,\"200\":3,\"228\":1,\"281\":1,\"306\":1,\"314\":3,\"315\":3,\"316\":1,\"380\":1,\"392\":2,\"590\":1,\"612\":1,\"659\":1,\"770\":4,\"916\":1,\"925\":1}}],[\"蒙特卡罗\",{\"1\":{\"222\":1}}],[\"蒙特卡洛\",{\"1\":{\"222\":1,\"905\":1}}],[\"样本\",{\"1\":{\"222\":1,\"263\":1,\"268\":1,\"355\":9,\"356\":1,\"451\":2,\"841\":1,\"859\":1,\"868\":1,\"889\":1,\"893\":4,\"910\":1,\"952\":1}}],[\"约定\",{\"1\":{\"726\":1,\"826\":1}}],[\"约束\",{\"0\":{\"298\":1,\"299\":1},\"1\":{\"298\":1,\"299\":1,\"398\":1,\"949\":1}}],[\"约\",{\"1\":{\"222\":1,\"404\":1,\"417\":1,\"927\":1}}],[\"算力\",{\"1\":{\"922\":1}}],[\"算术\",{\"0\":{\"797\":2,\"798\":1},\"1\":{\"809\":1,\"810\":2,\"811\":1,\"813\":1}}],[\"算出\",{\"1\":{\"713\":1}}],[\"算\",{\"1\":{\"348\":3,\"379\":1,\"384\":1,\"534\":1,\"815\":1}}],[\"算子\",{\"1\":{\"222\":2,\"223\":2,\"307\":1,\"370\":4,\"371\":1,\"372\":3}}],[\"算法\",{\"0\":{\"66\":1,\"110\":1,\"133\":1,\"140\":1,\"260\":1,\"575\":1,\"576\":1},\"1\":{\"67\":4,\"69\":1,\"70\":1,\"71\":1,\"96\":1,\"97\":1,\"105\":1,\"110\":1,\"122\":1,\"128\":1,\"137\":2,\"146\":1,\"218\":1,\"222\":3,\"225\":2,\"260\":2,\"262\":4,\"300\":1,\"317\":3,\"393\":1,\"404\":1,\"417\":1,\"485\":1,\"503\":1,\"826\":1,\"827\":1,\"828\":1,\"829\":1,\"894\":1,\"905\":1,\"938\":1,\"951\":1}}],[\"器会\",{\"1\":{\"559\":1}}],[\"器则\",{\"1\":{\"314\":1}}],[\"器中\",{\"1\":{\"314\":1}}],[\"器\",{\"0\":{\"551\":1,\"575\":1},\"1\":{\"222\":1,\"284\":4,\"314\":3,\"316\":2,\"320\":4,\"322\":2,\"350\":2,\"539\":4,\"540\":2,\"541\":4,\"544\":1,\"545\":12,\"546\":1,\"548\":1,\"557\":1,\"559\":7,\"561\":2,\"563\":2,\"570\":1,\"575\":7,\"576\":1,\"859\":1,\"957\":1,\"963\":1}}],[\"周期\",{\"1\":{\"609\":3}}],[\"周期性\",{\"1\":{\"19\":1}}],[\"周围\",{\"1\":{\"222\":1,\"245\":1,\"284\":1,\"625\":1,\"887\":1,\"940\":1}}],[\"邻近\",{\"1\":{\"334\":2}}],[\"邻\",{\"1\":{\"226\":2,\"386\":1,\"393\":1,\"394\":1}}],[\"邻上\",{\"1\":{\"222\":2}}],[\"邻域\",{\"1\":{\"221\":1,\"223\":4,\"225\":5,\"226\":1,\"246\":1,\"254\":3,\"288\":1,\"299\":1,\"306\":1,\"312\":3,\"887\":2}}],[\"邻居\",{\"1\":{\"221\":1,\"303\":3,\"308\":1,\"312\":1,\"400\":2}}],[\"邻接矩阵\",{\"1\":{\"225\":1,\"226\":1}}],[\"邻接\",{\"1\":{\"134\":1,\"308\":3}}],[\"离群\",{\"1\":{\"299\":2}}],[\"离散\",{\"0\":{\"246\":1},\"1\":{\"244\":2,\"245\":2,\"246\":4,\"270\":1,\"299\":1,\"347\":2,\"348\":1,\"392\":3,\"425\":1,\"864\":3,\"897\":1}}],[\"离散卷积\",{\"0\":{\"223\":1},\"1\":{\"221\":3,\"223\":1,\"229\":1}}],[\"离线\",{\"1\":{\"226\":1}}],[\"离开\",{\"1\":{\"24\":1,\"722\":1,\"828\":1}}],[\"聚\",{\"1\":{\"225\":2}}],[\"聚类\",{\"1\":{\"225\":2,\"402\":1,\"884\":3}}],[\"聚集\",{\"1\":{\"220\":1,\"223\":1,\"225\":2,\"227\":1,\"228\":2,\"293\":1}}],[\"聚合\",{\"1\":{\"199\":2,\"217\":3,\"220\":1,\"225\":3,\"227\":1,\"228\":2,\"247\":1,\"303\":1,\"306\":1,\"308\":1,\"312\":2,\"370\":4,\"371\":1,\"372\":4,\"390\":1,\"391\":1,\"395\":1,\"399\":6,\"883\":2,\"893\":1}}],[\"倍数\",{\"1\":{\"413\":1,\"938\":2}}],[\"倍\",{\"1\":{\"220\":1,\"222\":1,\"249\":1,\"671\":1,\"811\":2}}],[\"微妙\",{\"1\":{\"935\":1}}],[\"微分\",{\"1\":{\"247\":1,\"392\":1}}],[\"微\",{\"1\":{\"220\":1}}],[\"微调\",{\"1\":{\"52\":2,\"259\":1,\"320\":1,\"372\":1,\"390\":1,\"396\":2,\"889\":1}}],[\"五行\",{\"1\":{\"830\":1}}],[\"五十个\",{\"1\":{\"730\":1}}],[\"五句\",{\"1\":{\"599\":1}}],[\"五个\",{\"1\":{\"220\":1,\"307\":1,\"649\":2,\"675\":1,\"690\":1}}],[\"五种\",{\"0\":{\"30\":1},\"1\":{\"97\":1}}],[\"叠加\",{\"1\":{\"220\":1,\"225\":1,\"867\":1}}],[\"领域\",{\"1\":{\"220\":2,\"223\":1,\"224\":1,\"225\":1,\"242\":1,\"246\":1,\"257\":3,\"263\":1,\"312\":2,\"315\":3,\"325\":2,\"379\":2}}],[\"领导者\",{\"1\":{\"33\":1}}],[\"典型\",{\"1\":{\"219\":1}}],[\"角\",{\"1\":{\"305\":3}}],[\"角点\",{\"1\":{\"218\":2}}],[\"角度\",{\"1\":{\"153\":1,\"223\":1,\"348\":1,\"355\":1,\"708\":2,\"938\":1}}],[\"角度看\",{\"1\":{\"44\":1}}],[\"划分\",{\"1\":{\"218\":1,\"223\":1,\"228\":2,\"246\":2,\"315\":5}}],[\"呈\",{\"1\":{\"218\":1,\"282\":1,\"386\":1}}],[\"呈现\",{\"1\":{\"44\":1,\"277\":1}}],[\"尽可能\",{\"1\":{\"348\":1,\"349\":1,\"859\":2,\"862\":1,\"908\":1,\"957\":1}}],[\"尽管\",{\"1\":{\"218\":1,\"254\":1,\"325\":1,\"348\":1,\"369\":1,\"372\":1,\"390\":1,\"940\":1}}],[\"尽头\",{\"1\":{\"137\":1}}],[\"判定\",{\"1\":{\"684\":1,\"788\":1}}],[\"判空\",{\"1\":{\"574\":1}}],[\"判别\",{\"1\":{\"217\":1,\"228\":1,\"284\":4,\"955\":1,\"957\":3,\"963\":1}}],[\"判断\",{\"1\":{\"38\":3,\"71\":3,\"72\":1,\"77\":1,\"81\":1,\"83\":3,\"86\":1,\"94\":2,\"103\":2,\"104\":1,\"107\":1,\"128\":1,\"134\":1,\"137\":1,\"138\":2,\"299\":1,\"542\":1,\"556\":1,\"571\":1,\"601\":1,\"665\":1,\"712\":1,\"714\":1,\"755\":1,\"781\":1,\"818\":2,\"819\":1,\"833\":3,\"860\":3,\"963\":1}}],[\"紧凑\",{\"1\":{\"217\":1,\"218\":1,\"228\":1,\"246\":1}}],[\"紧接着\",{\"1\":{\"41\":1}}],[\"素上\",{\"1\":{\"864\":1,\"922\":1}}],[\"素描\",{\"1\":{\"860\":1}}],[\"素\",{\"1\":{\"216\":1,\"228\":1,\"246\":2,\"280\":1}}],[\"评分\",{\"1\":{\"228\":2}}],[\"评估\",{\"1\":{\"214\":3,\"257\":3,\"323\":1,\"342\":3,\"451\":2,\"910\":3}}],[\"评价\",{\"0\":{\"214\":1,\"450\":1,\"451\":1},\"1\":{\"249\":1,\"257\":2,\"377\":1}}],[\"召回\",{\"1\":{\"214\":1,\"234\":1}}],[\"率\",{\"1\":{\"214\":2,\"234\":1,\"835\":1}}],[\"核对\",{\"1\":{\"226\":1}}],[\"核权\",{\"1\":{\"223\":2}}],[\"核为\",{\"1\":{\"223\":1}}],[\"核化\",{\"1\":{\"222\":1}}],[\"核由\",{\"1\":{\"222\":1}}],[\"核点\",{\"1\":{\"222\":2}}],[\"核\",{\"1\":{\"210\":2,\"211\":2,\"221\":3,\"222\":7,\"223\":5,\"225\":3,\"226\":1,\"227\":2,\"228\":4}}],[\"核中\",{\"1\":{\"210\":1}}],[\"核心层\",{\"1\":{\"222\":1,\"225\":1}}],[\"核心\",{\"1\":{\"192\":3,\"193\":1,\"220\":1,\"277\":1,\"865\":1,\"890\":1,\"922\":1,\"935\":1}}],[\"核心思想\",{\"1\":{\"22\":1,\"50\":1,\"52\":1,\"54\":1,\"55\":1,\"938\":1,\"939\":1,\"940\":1,\"951\":1}}],[\"橙色\",{\"1\":{\"210\":1}}],[\"假\",{\"1\":{\"808\":1,\"809\":1,\"810\":3,\"817\":2}}],[\"假定\",{\"1\":{\"528\":2,\"532\":1,\"902\":1}}],[\"假如\",{\"1\":{\"210\":1,\"676\":1,\"846\":1}}],[\"假设\",{\"0\":{\"334\":1},\"1\":{\"23\":1,\"82\":1,\"196\":1,\"201\":1,\"245\":1,\"290\":2,\"292\":2,\"299\":3,\"303\":2,\"308\":1,\"334\":1,\"355\":2,\"380\":1,\"530\":1,\"713\":1,\"730\":1,\"745\":1,\"827\":1,\"863\":1,\"868\":1,\"913\":1,\"917\":1}}],[\"失效\",{\"1\":{\"794\":1}}],[\"失真\",{\"1\":{\"342\":1}}],[\"失去\",{\"1\":{\"209\":1}}],[\"失败\",{\"1\":{\"23\":1,\"24\":1,\"94\":1,\"557\":2,\"561\":1,\"781\":3,\"793\":6}}],[\"塌缩\",{\"1\":{\"209\":1,\"390\":1}}],[\"六个\",{\"1\":{\"209\":1,\"223\":1,\"649\":1}}],[\"曲率\",{\"1\":{\"273\":1,\"284\":1}}],[\"曲面\",{\"1\":{\"208\":1,\"218\":1,\"303\":1,\"342\":1}}],[\"曲线\",{\"1\":{\"208\":1,\"214\":1,\"318\":2,\"872\":1}}],[\"冲突\",{\"1\":{\"204\":1,\"300\":1}}],[\"冲区\",{\"1\":{\"17\":1}}],[\"运动\",{\"1\":{\"955\":3}}],[\"运用\",{\"1\":{\"218\":1,\"807\":1}}],[\"运算器\",{\"1\":{\"613\":1}}],[\"运算符\",{\"0\":{\"512\":1,\"664\":1,\"711\":1,\"800\":1,\"801\":1,\"803\":1,\"805\":1,\"807\":1,\"808\":1,\"811\":1,\"812\":1,\"820\":1,\"821\":1,\"822\":1,\"823\":1},\"1\":{\"512\":4,\"534\":1,\"546\":1,\"601\":1,\"621\":1,\"623\":1,\"624\":2,\"654\":1,\"664\":2,\"666\":2,\"689\":1,\"695\":3,\"706\":2,\"709\":1,\"712\":2,\"714\":4,\"722\":3,\"724\":2,\"744\":1,\"745\":1,\"750\":1,\"757\":1,\"758\":3,\"760\":4,\"766\":1,\"775\":2,\"781\":3,\"793\":1,\"804\":1,\"805\":5,\"806\":1,\"807\":2,\"808\":1,\"809\":5,\"810\":10,\"811\":19,\"813\":3,\"814\":6,\"815\":3,\"826\":1}}],[\"运算\",{\"0\":{\"505\":1,\"676\":1,\"695\":1,\"795\":1,\"797\":1,\"798\":1,\"799\":1,\"802\":1,\"809\":1},\"1\":{\"210\":1,\"222\":2,\"301\":2,\"648\":1,\"695\":2,\"714\":1,\"798\":1,\"799\":1,\"809\":2,\"810\":1,\"814\":3,\"854\":2}}],[\"运算量\",{\"1\":{\"202\":1,\"875\":1}}],[\"运行\",{\"0\":{\"10\":1},\"1\":{\"4\":1,\"5\":2,\"8\":3,\"11\":1,\"30\":1,\"35\":2,\"70\":1,\"165\":2,\"175\":1,\"180\":1,\"192\":1,\"218\":1,\"502\":2,\"528\":1,\"529\":2,\"599\":1,\"612\":2,\"615\":1,\"671\":1,\"717\":1,\"769\":1,\"770\":5,\"830\":2,\"833\":1,\"841\":1,\"852\":1,\"882\":1}}],[\"′\",{\"1\":{\"201\":1,\"202\":1,\"282\":4,\"283\":1,\"372\":3,\"399\":8,\"446\":2}}],[\"旨在\",{\"1\":{\"201\":1,\"316\":1}}],[\"毫秒\",{\"1\":{\"199\":1,\"528\":2,\"529\":1,\"530\":1,\"531\":1}}],[\"隐\",{\"0\":{\"799\":1}}],[\"隐蔽\",{\"1\":{\"701\":3}}],[\"隐式\",{\"0\":{\"946\":1},\"1\":{\"277\":3,\"676\":1,\"736\":1}}],[\"隐藏\",{\"1\":{\"199\":1,\"391\":1,\"766\":1,\"852\":1,\"958\":3,\"959\":3,\"963\":1}}],[\"隐含地\",{\"1\":{\"707\":1}}],[\"隐含\",{\"1\":{\"192\":1}}],[\"扩\",{\"1\":{\"816\":1}}],[\"扩充\",{\"1\":{\"623\":1}}],[\"扩散\",{\"0\":{\"453\":1,\"896\":1,\"936\":1},\"1\":{\"453\":2,\"862\":1,\"864\":1,\"865\":1,\"867\":2,\"873\":1,\"887\":1,\"895\":2,\"897\":1,\"901\":1,\"904\":1,\"906\":1,\"907\":2,\"922\":5,\"924\":2,\"926\":1,\"928\":2,\"935\":3,\"936\":1,\"939\":1,\"940\":3,\"941\":1,\"947\":1}}],[\"扩展\",{\"1\":{\"199\":1,\"218\":1,\"229\":1,\"282\":1,\"313\":1,\"325\":1,\"369\":1,\"370\":2,\"372\":3,\"375\":1,\"577\":1,\"598\":3,\"614\":1,\"615\":1,\"616\":2,\"617\":1,\"676\":1,\"724\":1,\"750\":1,\"928\":1,\"935\":1}}],[\"扩大化\",{\"1\":{\"944\":1}}],[\"扩大\",{\"1\":{\"137\":1,\"211\":1,\"312\":1,\"370\":1,\"811\":2,\"883\":1,\"915\":1,\"920\":1}}],[\"据此\",{\"1\":{\"712\":1}}],[\"据说\",{\"1\":{\"537\":1}}],[\"据\",{\"1\":{\"198\":1}}],[\"准备\",{\"1\":{\"741\":1,\"793\":1}}],[\"准备就绪\",{\"1\":{\"38\":1}}],[\"准则\",{\"1\":{\"225\":1}}],[\"准确率\",{\"1\":{\"249\":1,\"857\":1}}],[\"准确\",{\"0\":{\"915\":1},\"1\":{\"217\":1,\"245\":1,\"299\":1,\"915\":1,\"916\":2,\"920\":1,\"959\":1}}],[\"准确度\",{\"1\":{\"214\":2,\"229\":2,\"342\":3}}],[\"准确性\",{\"1\":{\"198\":1}}],[\"客观\",{\"1\":{\"873\":1,\"875\":2}}],[\"客观性\",{\"1\":{\"198\":1}}],[\"客户\",{\"1\":{\"8\":2,\"19\":1,\"31\":2,\"32\":2,\"34\":2,\"35\":2}}],[\"客户端程序\",{\"1\":{\"41\":1}}],[\"客户端\",{\"1\":{\"3\":1,\"29\":1,\"30\":2,\"42\":2,\"43\":3,\"476\":11}}],[\"随\",{\"1\":{\"245\":1,\"246\":1,\"386\":1,\"693\":1,\"744\":1,\"961\":5}}],[\"随后\",{\"1\":{\"228\":1,\"307\":1}}],[\"随着\",{\"1\":{\"218\":1,\"282\":1,\"290\":1,\"379\":1,\"386\":1,\"399\":1,\"863\":1,\"938\":1,\"940\":1}}],[\"随机数\",{\"1\":{\"957\":1}}],[\"随机样本\",{\"1\":{\"905\":1}}],[\"随机性\",{\"1\":{\"873\":1,\"938\":1,\"940\":1,\"951\":1,\"952\":1}}],[\"随机噪声\",{\"1\":{\"864\":1,\"868\":1,\"958\":1}}],[\"随机变量\",{\"1\":{\"347\":9,\"348\":2,\"896\":1,\"958\":1}}],[\"随机\",{\"1\":{\"197\":1,\"198\":1,\"201\":1,\"222\":3,\"228\":2,\"259\":1,\"260\":1,\"263\":2,\"268\":1,\"284\":1,\"314\":1,\"411\":1,\"570\":1,\"868\":2,\"887\":1,\"893\":1,\"896\":1,\"906\":1,\"908\":1,\"913\":1,\"929\":1,\"935\":1,\"957\":1,\"959\":1,\"961\":1,\"962\":1}}],[\"随想录\",{\"0\":{\"101\":1},\"1\":{\"67\":1,\"103\":1,\"104\":1}}],[\"卷积\",{\"0\":{\"221\":1,\"222\":1,\"335\":1,\"834\":1},\"1\":{\"196\":1,\"197\":1,\"202\":1,\"205\":1,\"208\":1,\"209\":3,\"210\":8,\"211\":1,\"217\":1,\"218\":3,\"219\":1,\"220\":1,\"221\":4,\"222\":24,\"223\":11,\"225\":6,\"226\":5,\"227\":2,\"228\":2,\"229\":2,\"245\":2,\"246\":14,\"248\":1,\"256\":1,\"276\":2,\"282\":1,\"288\":1,\"294\":1,\"301\":3,\"303\":2,\"305\":1,\"306\":3,\"308\":1,\"309\":2,\"310\":1,\"312\":6,\"331\":1,\"340\":1,\"350\":1,\"359\":2,\"361\":1,\"366\":2,\"367\":1,\"369\":6,\"370\":6,\"371\":1,\"372\":8,\"379\":2,\"380\":2,\"398\":1,\"399\":1,\"401\":2,\"404\":1,\"405\":1,\"410\":1,\"415\":2,\"834\":1,\"928\":1,\"935\":1,\"958\":1,\"962\":1}}],[\"化对\",{\"1\":{\"928\":1}}],[\"化简\",{\"1\":{\"904\":1}}],[\"化层\",{\"1\":{\"311\":1}}],[\"化来\",{\"1\":{\"293\":1}}],[\"化伪影\",{\"1\":{\"246\":1}}],[\"化步骤\",{\"1\":{\"246\":1}}],[\"化为\",{\"1\":{\"228\":1,\"246\":1,\"299\":1}}],[\"化图\",{\"1\":{\"226\":1}}],[\"化带\",{\"1\":{\"222\":1}}],[\"化\",{\"0\":{\"246\":1,\"293\":1},\"1\":{\"196\":1,\"244\":2,\"245\":2,\"246\":2,\"285\":1,\"294\":1,\"347\":1,\"370\":1,\"392\":1,\"400\":1,\"597\":1,\"738\":1,\"739\":1,\"928\":1,\"935\":1,\"953\":1}}],[\"坐标\",{\"1\":{\"196\":1,\"203\":1,\"204\":1,\"205\":2,\"209\":1,\"210\":1,\"223\":3,\"225\":2,\"227\":1,\"270\":4,\"273\":1,\"298\":1,\"318\":1,\"319\":2,\"322\":4,\"323\":1,\"332\":1,\"887\":1}}],[\"颜色\",{\"1\":{\"196\":1,\"225\":1,\"270\":4,\"400\":1,\"837\":1,\"923\":2,\"940\":1,\"961\":1}}],[\"∈\",{\"1\":{\"196\":1,\"268\":1,\"280\":1,\"284\":2,\"338\":1,\"353\":1,\"363\":1,\"364\":1,\"366\":1,\"371\":2,\"372\":4,\"394\":8,\"395\":4,\"399\":1,\"446\":2,\"882\":1,\"897\":2,\"900\":1,\"902\":1,\"963\":2}}],[\"经济\",{\"1\":{\"922\":1}}],[\"经验\",{\"1\":{\"284\":1,\"528\":1,\"901\":1}}],[\"经典\",{\"1\":{\"283\":2,\"354\":1,\"355\":2,\"398\":1,\"860\":1}}],[\"经过\",{\"1\":{\"201\":1,\"259\":1,\"292\":1,\"315\":1,\"332\":2,\"334\":1,\"406\":1,\"670\":1,\"777\":1,\"875\":2}}],[\"经过训练\",{\"1\":{\"195\":1}}],[\"经常\",{\"1\":{\"10\":1,\"28\":1,\"69\":1,\"70\":1}}],[\"身份证\",{\"1\":{\"485\":1}}],[\"身份\",{\"1\":{\"195\":1,\"484\":1,\"961\":3}}],[\"捕获\",{\"1\":{\"195\":1,\"199\":1,\"201\":1,\"220\":3,\"222\":2,\"226\":1,\"228\":1,\"246\":1,\"259\":2,\"423\":1,\"925\":1,\"926\":1,\"957\":1}}],[\"捕捉到\",{\"1\":{\"315\":1}}],[\"捕捉\",{\"1\":{\"193\":1,\"194\":1,\"284\":1,\"530\":1,\"926\":1}}],[\"节约\",{\"1\":{\"613\":1,\"744\":1}}],[\"节省\",{\"1\":{\"234\":1,\"282\":1,\"785\":1,\"924\":1}}],[\"节\",{\"1\":{\"195\":3,\"227\":1,\"244\":1,\"406\":1,\"644\":1}}],[\"节点\",{\"0\":{\"80\":1,\"90\":1},\"1\":{\"69\":8,\"71\":17,\"72\":12,\"73\":1,\"77\":3,\"81\":2,\"82\":6,\"83\":1,\"85\":3,\"86\":13,\"88\":1,\"89\":2,\"90\":1,\"93\":10,\"94\":3,\"95\":6,\"96\":2,\"97\":61,\"98\":2,\"99\":1,\"100\":1,\"103\":33,\"110\":2,\"123\":1,\"218\":1,\"227\":15,\"398\":4,\"399\":12,\"400\":2,\"465\":1,\"714\":5,\"830\":8,\"963\":1}}],[\"描绘\",{\"1\":{\"195\":1}}],[\"描述\",{\"0\":{\"896\":1},\"1\":{\"30\":1,\"38\":3,\"44\":1,\"198\":1,\"225\":1,\"227\":1,\"228\":2,\"270\":1,\"419\":1,\"858\":1,\"859\":1,\"860\":1,\"889\":1,\"896\":1,\"901\":1}}],[\"描述符\",{\"0\":{\"17\":1,\"28\":1},\"1\":{\"16\":2,\"19\":2,\"28\":6,\"31\":1,\"38\":12,\"39\":3,\"217\":2,\"228\":1,\"288\":1,\"303\":1,\"492\":5}}],[\"虚实\",{\"1\":{\"524\":1,\"710\":1}}],[\"虚析构\",{\"0\":{\"771\":1},\"1\":{\"511\":1}}],[\"虚\",{\"0\":{\"511\":1,\"763\":1,\"764\":1,\"765\":1,\"767\":1,\"768\":1},\"1\":{\"511\":1,\"769\":35,\"770\":6}}],[\"虚空\",{\"1\":{\"423\":1}}],[\"虚线\",{\"1\":{\"195\":1,\"307\":1,\"963\":1}}],[\"虚拟内存\",{\"0\":{\"158\":1,\"169\":1},\"1\":{\"170\":1}}],[\"虚拟\",{\"1\":{\"103\":2,\"245\":2,\"586\":1,\"600\":3,\"738\":1,\"740\":2,\"741\":4,\"767\":1}}],[\"许多\",{\"1\":{\"195\":1,\"220\":1,\"228\":1,\"398\":1}}],[\"蓝色\",{\"1\":{\"195\":1,\"290\":1,\"307\":2,\"419\":1,\"963\":1}}],[\"调参\",{\"1\":{\"642\":1}}],[\"调度\",{\"1\":{\"500\":1}}],[\"调控\",{\"1\":{\"436\":1,\"938\":1,\"939\":2,\"940\":1}}],[\"调制\",{\"1\":{\"371\":2,\"372\":6}}],[\"调节\",{\"1\":{\"357\":2,\"369\":1,\"371\":1,\"436\":1,\"907\":1,\"935\":1}}],[\"调和\",{\"1\":{\"222\":1}}],[\"调优器\",{\"1\":{\"211\":1}}],[\"调整器\",{\"1\":{\"350\":1}}],[\"调整\",{\"1\":{\"193\":1,\"194\":1,\"283\":1,\"350\":1,\"356\":1,\"370\":1,\"372\":2,\"404\":1,\"748\":1,\"750\":3,\"844\":1,\"938\":2,\"955\":1,\"958\":1}}],[\"调用函数\",{\"1\":{\"38\":1,\"524\":1,\"584\":1,\"586\":1,\"587\":1,\"590\":1,\"599\":3,\"600\":4,\"609\":1,\"620\":1,\"671\":1,\"729\":1,\"735\":1,\"762\":1,\"781\":2}}],[\"调用者\",{\"1\":{\"30\":1}}],[\"调用\",{\"0\":{\"591\":1,\"592\":1},\"1\":{\"5\":1,\"8\":1,\"13\":1,\"20\":2,\"22\":2,\"23\":1,\"25\":1,\"30\":4,\"32\":2,\"35\":1,\"38\":3,\"39\":1,\"46\":1,\"70\":1,\"85\":2,\"103\":1,\"188\":1,\"500\":1,\"502\":1,\"529\":2,\"530\":4,\"531\":2,\"532\":1,\"544\":2,\"583\":7,\"584\":2,\"586\":4,\"587\":1,\"589\":2,\"591\":3,\"592\":4,\"594\":2,\"595\":2,\"596\":2,\"598\":3,\"599\":1,\"600\":1,\"601\":3,\"605\":2,\"606\":1,\"609\":2,\"611\":1,\"612\":7,\"654\":1,\"688\":2,\"690\":1,\"703\":1,\"705\":2,\"707\":2,\"708\":3,\"709\":1,\"710\":2,\"714\":2,\"717\":6,\"718\":2,\"720\":3,\"721\":1,\"722\":18,\"726\":5,\"729\":9,\"730\":3,\"732\":2,\"735\":2,\"736\":5,\"745\":4,\"766\":7,\"767\":2,\"769\":22,\"770\":7,\"781\":2,\"782\":1,\"793\":5,\"816\":2,\"827\":1,\"854\":1,\"855\":1}}],[\"采集\",{\"1\":{\"875\":1}}],[\"采取\",{\"1\":{\"303\":1}}],[\"采样率\",{\"1\":{\"193\":1,\"194\":1,\"928\":2}}],[\"采样\",{\"0\":{\"337\":1},\"1\":{\"193\":1,\"194\":1,\"198\":1,\"218\":2,\"220\":1,\"222\":4,\"225\":1,\"228\":1,\"229\":2,\"245\":1,\"247\":1,\"268\":1,\"270\":1,\"280\":1,\"299\":1,\"312\":14,\"317\":4,\"322\":1,\"331\":1,\"337\":1,\"369\":1,\"371\":8,\"372\":7,\"380\":1,\"392\":3,\"864\":1,\"868\":1,\"873\":2,\"884\":2,\"896\":1,\"897\":2,\"901\":1,\"902\":1,\"905\":1,\"908\":1,\"913\":1,\"928\":1,\"939\":1,\"959\":1}}],[\"采用\",{\"1\":{\"51\":1,\"53\":1,\"69\":3,\"95\":1,\"195\":1,\"211\":3,\"225\":1,\"227\":2,\"228\":1,\"246\":2,\"254\":1,\"273\":1,\"292\":1,\"293\":1,\"312\":1,\"314\":1,\"315\":1,\"319\":1,\"322\":2,\"327\":1,\"338\":1,\"340\":3,\"373\":1,\"391\":1,\"392\":5,\"394\":1,\"395\":2,\"399\":1,\"408\":1,\"409\":1,\"419\":1,\"446\":1,\"576\":3,\"595\":1,\"617\":1,\"718\":1,\"726\":1,\"730\":1,\"762\":2,\"798\":1,\"928\":4,\"929\":8,\"930\":1}}],[\"跨\",{\"1\":{\"193\":1,\"194\":2,\"265\":1,\"325\":1,\"888\":1}}],[\"遮挡\",{\"1\":{\"193\":1,\"228\":1,\"234\":1,\"245\":2,\"293\":1,\"300\":2}}],[\"八字\",{\"1\":{\"644\":1}}],[\"八进制\",{\"1\":{\"642\":1,\"648\":1}}],[\"八分\",{\"1\":{\"218\":2}}],[\"八叉树\",{\"1\":{\"218\":1,\"227\":3,\"282\":1}}],[\"八叉\",{\"1\":{\"218\":2}}],[\"八\",{\"1\":{\"193\":1,\"218\":1,\"227\":1}}],[\"增添\",{\"1\":{\"940\":1}}],[\"增倍\",{\"1\":{\"537\":1}}],[\"增\",{\"1\":{\"528\":1}}],[\"增益\",{\"1\":{\"357\":1}}],[\"增广\",{\"1\":{\"332\":1,\"355\":1}}],[\"增长\",{\"1\":{\"218\":1,\"379\":2,\"863\":2}}],[\"增强\",{\"0\":{\"269\":1},\"1\":{\"193\":1,\"198\":1,\"228\":1,\"261\":1,\"263\":4,\"268\":2,\"320\":2,\"327\":1,\"875\":3}}],[\"增加\",{\"0\":{\"539\":1},\"1\":{\"52\":1,\"137\":4,\"146\":1,\"282\":1,\"304\":1,\"355\":1,\"384\":2,\"386\":1,\"399\":2,\"425\":1,\"537\":1,\"542\":1,\"545\":2,\"621\":1,\"623\":1,\"639\":1,\"701\":2,\"748\":1,\"749\":4,\"750\":6,\"769\":1,\"810\":1,\"915\":1,\"920\":2,\"928\":2,\"938\":1}}],[\"驾驶\",{\"1\":{\"193\":1,\"242\":1,\"427\":1}}],[\"导数\",{\"1\":{\"904\":1}}],[\"导入\",{\"1\":{\"846\":2}}],[\"导向\",{\"1\":{\"227\":1}}],[\"导航\",{\"1\":{\"193\":1}}],[\"导致\",{\"1\":{\"19\":1,\"53\":1,\"82\":1,\"174\":2,\"202\":1,\"217\":1,\"246\":3,\"259\":1,\"270\":1,\"299\":1,\"356\":2,\"372\":1,\"386\":2,\"390\":2,\"419\":1,\"437\":2,\"451\":1,\"528\":1,\"529\":1,\"530\":1,\"577\":1,\"676\":1,\"677\":1,\"830\":1,\"843\":2,\"915\":1,\"938\":2,\"940\":1,\"951\":1,\"959\":1}}],[\"云来\",{\"1\":{\"327\":1}}],[\"云上\",{\"1\":{\"254\":1}}],[\"云体\",{\"1\":{\"228\":1,\"246\":1}}],[\"云以\",{\"1\":{\"220\":1}}],[\"云\",{\"1\":{\"193\":2,\"196\":1,\"228\":3,\"244\":1,\"245\":1,\"246\":1,\"260\":3,\"263\":1,\"268\":2,\"313\":1,\"315\":1,\"319\":1,\"320\":2,\"334\":1,\"342\":2,\"953\":2}}],[\"云中\",{\"1\":{\"193\":1,\"199\":2,\"224\":1,\"226\":1,\"228\":1,\"246\":1,\"247\":1,\"254\":1,\"273\":1,\"280\":1,\"327\":1,\"342\":2}}],[\"共性\",{\"1\":{\"750\":1}}],[\"共有\",{\"1\":{\"744\":1,\"745\":1}}],[\"共用\",{\"1\":{\"735\":1}}],[\"共\",{\"1\":{\"573\":1}}],[\"共同完成\",{\"1\":{\"864\":1}}],[\"共同提高\",{\"1\":{\"198\":1}}],[\"共同\",{\"1\":{\"192\":1,\"680\":1}}],[\"共享\",{\"1\":{\"8\":1,\"10\":1,\"25\":2,\"36\":2,\"37\":1,\"227\":1,\"228\":1,\"248\":1,\"288\":2,\"366\":2,\"372\":1,\"394\":1,\"410\":1,\"411\":1,\"415\":2,\"529\":3,\"530\":1,\"612\":3}}],[\"统称\",{\"1\":{\"904\":1}}],[\"统一\",{\"1\":{\"192\":2,\"193\":1,\"210\":1,\"247\":1,\"257\":1,\"300\":1,\"332\":1,\"563\":1,\"573\":1,\"609\":1,\"789\":1,\"895\":1}}],[\"统计学\",{\"1\":{\"905\":1}}],[\"统计\",{\"1\":{\"100\":1,\"210\":1,\"273\":1,\"299\":1,\"745\":2,\"759\":1,\"907\":1}}],[\"～\",{\"1\":{\"191\":1,\"357\":1,\"609\":1,\"612\":1,\"928\":2}}],[\"警告\",{\"1\":{\"191\":1}}],[\"弄清楚\",{\"1\":{\"959\":1}}],[\"弄\",{\"1\":{\"191\":1}}],[\"卸载\",{\"1\":{\"191\":1}}],[\"`\",{\"1\":{\"191\":4,\"471\":2,\"639\":2,\"781\":3,\"813\":2,\"814\":2,\"819\":4,\"852\":6}}],[\"’\",{\"1\":{\"191\":1,\"200\":1,\"290\":5,\"595\":1,\"648\":1,\"793\":1}}],[\"‘\",{\"1\":{\"191\":1,\"202\":2,\"595\":1,\"793\":1,\"872\":1,\"890\":1}}],[\"装\",{\"1\":{\"191\":2}}],[\"问你\",{\"1\":{\"191\":2}}],[\"问\",{\"1\":{\"191\":2}}],[\"问题\",{\"0\":{\"12\":1,\"62\":1,\"111\":1,\"117\":1,\"120\":1,\"124\":1,\"127\":1,\"145\":1,\"147\":1,\"149\":1,\"151\":1,\"157\":1,\"173\":1,\"187\":1,\"193\":1,\"406\":1,\"419\":1,\"485\":1,\"843\":1,\"863\":1,\"914\":1},\"1\":{\"5\":1,\"49\":1,\"53\":1,\"55\":1,\"85\":1,\"103\":1,\"110\":7,\"122\":1,\"125\":1,\"126\":1,\"128\":3,\"155\":1,\"166\":1,\"189\":1,\"193\":6,\"195\":1,\"199\":1,\"222\":1,\"228\":1,\"242\":1,\"245\":3,\"254\":3,\"257\":1,\"271\":1,\"273\":1,\"276\":1,\"292\":1,\"303\":1,\"315\":1,\"320\":2,\"322\":1,\"344\":1,\"357\":1,\"359\":2,\"366\":1,\"372\":2,\"379\":1,\"386\":1,\"392\":2,\"399\":1,\"419\":5,\"446\":2,\"451\":4,\"484\":1,\"502\":1,\"540\":1,\"563\":1,\"654\":2,\"666\":1,\"676\":3,\"737\":1,\"747\":1,\"750\":1,\"769\":1,\"830\":1,\"839\":1,\"843\":1,\"854\":1,\"857\":1,\"863\":1,\"864\":2,\"875\":4,\"891\":1,\"892\":1,\"893\":1,\"904\":1,\"922\":2,\"940\":2,\"957\":2}}],[\"甚至\",{\"1\":{\"191\":1,\"355\":3,\"357\":1,\"370\":1,\"599\":1,\"677\":1,\"684\":1,\"757\":1,\"922\":1,\"929\":1,\"947\":1}}],[\"骚\",{\"1\":{\"191\":1}}],[\"官网\",{\"1\":{\"191\":1,\"342\":1,\"845\":1}}],[\"官方\",{\"1\":{\"191\":1,\"304\":1,\"396\":1}}],[\"伟达\",{\"1\":{\"191\":1}}],[\"英语\",{\"1\":{\"658\":1}}],[\"英\",{\"1\":{\"191\":1}}],[\"英文字母\",{\"1\":{\"137\":1,\"139\":1}}],[\"账号\",{\"1\":{\"186\":1,\"485\":1}}],[\"登场\",{\"1\":{\"530\":1}}],[\"登陆\",{\"1\":{\"186\":1}}],[\"登录\",{\"1\":{\"3\":1,\"10\":3,\"19\":2,\"186\":1}}],[\"服务\",{\"1\":{\"186\":1,\"189\":1,\"875\":1}}],[\"服务器返回\",{\"1\":{\"42\":1,\"476\":1}}],[\"服务器发送\",{\"1\":{\"40\":1}}],[\"服务器端\",{\"1\":{\"10\":1,\"19\":1,\"43\":1,\"180\":1,\"476\":1}}],[\"服务器\",{\"0\":{\"29\":1,\"841\":1},\"1\":{\"3\":1,\"4\":1,\"8\":4,\"11\":2,\"19\":2,\"32\":1,\"35\":4,\"40\":1,\"41\":2,\"43\":5,\"44\":2,\"45\":1,\"476\":11,\"480\":1,\"484\":1,\"485\":1}}],[\"允许\",{\"1\":{\"186\":1,\"246\":1,\"301\":2,\"304\":1,\"307\":1,\"308\":2,\"492\":2,\"529\":1,\"545\":2,\"598\":1,\"601\":1,\"613\":1,\"652\":1,\"670\":1,\"671\":1,\"676\":1,\"745\":1,\"768\":1,\"769\":1}}],[\"喜欢\",{\"1\":{\"184\":1}}],[\"话\",{\"1\":{\"181\":2,\"714\":1,\"904\":1}}],[\"名加\",{\"1\":{\"766\":1}}],[\"名和域\",{\"1\":{\"745\":1}}],[\"名而\",{\"1\":{\"735\":1}}],[\"名前\",{\"1\":{\"706\":1,\"749\":1}}],[\"名命\",{\"0\":{\"657\":2}}],[\"名去\",{\"1\":{\"639\":1,\"766\":1}}],[\"名取\",{\"1\":{\"634\":1}}],[\"名为\",{\"1\":{\"246\":1}}],[\"名\",{\"0\":{\"634\":1,\"638\":1,\"639\":1,\"710\":1},\"1\":{\"184\":1,\"468\":1,\"585\":2,\"589\":1,\"590\":6,\"597\":2,\"600\":2,\"601\":3,\"605\":2,\"606\":1,\"620\":1,\"634\":2,\"635\":1,\"637\":3,\"639\":5,\"652\":1,\"685\":3,\"690\":1,\"692\":1,\"701\":1,\"709\":4,\"710\":2,\"714\":1,\"717\":1,\"718\":2,\"719\":1,\"724\":4,\"726\":1,\"729\":2,\"730\":1,\"732\":1,\"735\":3,\"738\":6,\"739\":6,\"740\":2,\"741\":11,\"744\":3,\"745\":7,\"749\":2,\"750\":1,\"755\":1,\"756\":3,\"757\":1,\"758\":1,\"760\":3,\"769\":3,\"770\":1}}],[\"名叫\",{\"1\":{\"182\":1}}],[\"名称\",{\"1\":{\"181\":2,\"385\":1,\"468\":1,\"625\":1,\"757\":1,\"859\":1}}],[\"名字\",{\"0\":{\"637\":1},\"1\":{\"172\":4,\"191\":2,\"459\":1,\"462\":2,\"527\":2,\"564\":1,\"590\":1,\"639\":1,\"650\":1,\"656\":1,\"694\":1,\"717\":1,\"720\":1,\"736\":1,\"738\":1,\"766\":2,\"769\":2,\"793\":1,\"835\":1,\"846\":3}}],[\"恢复\",{\"0\":{\"181\":1},\"1\":{\"852\":1,\"925\":1}}],[\"意味着\",{\"1\":{\"863\":1}}],[\"意思\",{\"1\":{\"175\":1,\"413\":1,\"476\":2,\"529\":1,\"575\":1,\"775\":1,\"801\":1,\"849\":1}}],[\"意义\",{\"1\":{\"13\":1,\"20\":1,\"103\":1,\"290\":1,\"322\":1,\"467\":1,\"676\":2,\"787\":1}}],[\"退出\",{\"1\":{\"175\":1,\"530\":2,\"624\":1,\"827\":1}}],[\"退格\",{\"1\":{\"102\":1}}],[\"碰到\",{\"1\":{\"175\":1}}],[\"光程\",{\"1\":{\"894\":1}}],[\"光线\",{\"1\":{\"340\":1,\"342\":1}}],[\"光栅\",{\"1\":{\"340\":1}}],[\"光照\",{\"1\":{\"300\":1,\"958\":1}}],[\"光度\",{\"0\":{\"299\":1},\"1\":{\"268\":1,\"270\":1,\"299\":1}}],[\"光标\",{\"1\":{\"175\":2}}],[\"光流\",{\"1\":{\"53\":1}}],[\"附\",{\"1\":{\"894\":1}}],[\"附给\",{\"1\":{\"586\":1}}],[\"附带\",{\"1\":{\"536\":1}}],[\"附近\",{\"1\":{\"299\":2,\"880\":1}}],[\"附上\",{\"1\":{\"174\":1,\"175\":1,\"304\":1,\"811\":1,\"841\":1,\"845\":1,\"875\":1}}],[\"附加\",{\"1\":{\"41\":1,\"42\":1,\"314\":1,\"559\":1}}],[\"遵循\",{\"1\":{\"174\":1,\"175\":1,\"220\":1,\"304\":1,\"306\":1,\"310\":1,\"811\":1,\"841\":1,\"845\":1,\"875\":1,\"953\":1}}],[\"学号\",{\"1\":{\"826\":1,\"828\":2,\"830\":1}}],[\"学过\",{\"1\":{\"527\":1}}],[\"学来\",{\"1\":{\"379\":1}}],[\"学生\",{\"1\":{\"354\":3,\"355\":1,\"730\":2,\"745\":3,\"825\":1,\"826\":1}}],[\"学术界\",{\"1\":{\"242\":1}}],[\"学者\",{\"1\":{\"174\":1}}],[\"学习\",{\"0\":{\"60\":1,\"61\":1,\"268\":1,\"270\":1,\"852\":1},\"1\":{\"49\":1,\"51\":2,\"64\":1,\"174\":1,\"182\":1,\"192\":1,\"195\":2,\"197\":1,\"201\":3,\"216\":1,\"218\":1,\"219\":1,\"220\":8,\"222\":9,\"223\":3,\"224\":1,\"225\":6,\"226\":4,\"227\":4,\"228\":8,\"229\":2,\"242\":2,\"246\":1,\"247\":3,\"248\":2,\"254\":1,\"255\":1,\"257\":2,\"259\":3,\"260\":3,\"262\":1,\"268\":4,\"271\":1,\"273\":5,\"282\":2,\"283\":1,\"301\":3,\"303\":2,\"307\":1,\"309\":1,\"311\":1,\"314\":3,\"315\":2,\"316\":3,\"319\":1,\"320\":2,\"322\":1,\"340\":1,\"342\":1,\"344\":1,\"348\":1,\"355\":1,\"359\":1,\"369\":2,\"371\":1,\"372\":1,\"390\":1,\"392\":3,\"402\":1,\"436\":1,\"437\":1,\"839\":1,\"852\":1,\"859\":2,\"860\":1,\"864\":1,\"875\":1,\"901\":1,\"912\":1,\"913\":2,\"925\":2,\"926\":1,\"928\":1,\"935\":1,\"952\":1,\"953\":4,\"957\":2,\"959\":1}}],[\"至关重要\",{\"1\":{\"322\":1,\"355\":1}}],[\"至\",{\"1\":{\"174\":1,\"357\":2,\"689\":1,\"922\":1,\"940\":1}}],[\"至少\",{\"1\":{\"103\":1,\"298\":1,\"370\":1,\"456\":1,\"545\":1,\"601\":1,\"709\":1}}],[\"博弈\",{\"1\":{\"957\":3}}],[\"博弈论\",{\"1\":{\"957\":1}}],[\"博主\",{\"1\":{\"174\":1,\"175\":1,\"304\":1,\"811\":1,\"841\":1,\"845\":1,\"875\":1}}],[\"博客园\",{\"1\":{\"303\":1,\"359\":1,\"406\":1,\"449\":2,\"895\":1,\"910\":1}}],[\"博客\",{\"1\":{\"53\":2,\"54\":5,\"102\":2,\"165\":2,\"182\":2,\"186\":2,\"255\":1,\"276\":2,\"303\":4,\"309\":2,\"317\":2,\"318\":2,\"359\":2,\"375\":2,\"401\":2,\"406\":2,\"503\":2,\"532\":2,\"535\":2,\"536\":2,\"544\":2,\"545\":2,\"572\":2,\"578\":2,\"801\":4,\"852\":2,\"872\":2,\"887\":2,\"911\":2,\"957\":2,\"959\":2}}],[\"版\",{\"1\":{\"406\":1}}],[\"版权\",{\"1\":{\"174\":2,\"175\":2,\"304\":2,\"811\":2,\"841\":2,\"845\":2,\"875\":2}}],[\"版本号\",{\"0\":{\"191\":1},\"1\":{\"42\":1}}],[\"版本\",{\"1\":{\"41\":2,\"42\":2,\"191\":1,\"198\":1,\"793\":1}}],[\"补码\",{\"1\":{\"633\":1}}],[\"补偿\",{\"1\":{\"202\":1}}],[\"补全\",{\"1\":{\"191\":1,\"424\":1,\"938\":2,\"940\":1,\"951\":2}}],[\"补充\",{\"1\":{\"174\":1}}],[\"补位\",{\"1\":{\"97\":2}}],[\"倒角\",{\"1\":{\"323\":1}}],[\"倒\",{\"1\":{\"174\":1}}],[\"倒数第\",{\"1\":{\"103\":1}}],[\"＝\",{\"1\":{\"174\":1}}],[\"显得\",{\"1\":{\"398\":1}}],[\"显现出来\",{\"1\":{\"355\":1}}],[\"显然\",{\"1\":{\"354\":1}}],[\"显著\",{\"1\":{\"254\":1,\"357\":1,\"893\":1,\"952\":1}}],[\"显着\",{\"1\":{\"246\":1,\"299\":1,\"935\":1}}],[\"显卡\",{\"0\":{\"191\":1}}],[\"显示文件\",{\"1\":{\"785\":1}}],[\"显示屏\",{\"1\":{\"785\":1}}],[\"显示器\",{\"1\":{\"776\":4,\"777\":2,\"781\":7,\"787\":1}}],[\"显示\",{\"1\":{\"174\":1,\"175\":1,\"177\":1,\"210\":1,\"229\":1,\"242\":1,\"254\":1,\"311\":1,\"370\":1,\"485\":1,\"528\":1,\"707\":1,\"776\":2,\"781\":2,\"785\":2,\"910\":1}}],[\"显式\",{\"0\":{\"941\":1},\"1\":{\"71\":3,\"228\":1,\"277\":3,\"720\":1,\"904\":1,\"941\":1,\"947\":1}}],[\"我\",{\"1\":{\"174\":2,\"530\":1,\"841\":1,\"852\":1,\"854\":1,\"860\":2}}],[\"我们\",{\"1\":{\"8\":1,\"10\":5,\"13\":1,\"19\":1,\"20\":1,\"22\":1,\"38\":1,\"39\":1,\"55\":2,\"69\":1,\"72\":2,\"85\":1,\"86\":2,\"93\":1,\"94\":1,\"126\":1,\"137\":7,\"191\":1,\"192\":2,\"195\":1,\"196\":1,\"198\":5,\"199\":1,\"201\":3,\"202\":2,\"208\":1,\"209\":1,\"210\":4,\"229\":1,\"242\":1,\"249\":1,\"268\":3,\"270\":5,\"273\":3,\"277\":2,\"280\":2,\"282\":5,\"283\":2,\"284\":5,\"290\":3,\"298\":1,\"299\":6,\"303\":4,\"305\":1,\"317\":1,\"325\":2,\"332\":5,\"347\":2,\"348\":5,\"349\":2,\"353\":1,\"354\":1,\"355\":3,\"370\":1,\"371\":2,\"391\":1,\"396\":3,\"446\":2,\"467\":1,\"476\":2,\"480\":1,\"528\":3,\"529\":1,\"530\":2,\"532\":2,\"563\":3,\"577\":1,\"833\":1,\"854\":1,\"859\":2,\"860\":2,\"882\":1,\"902\":1,\"904\":1,\"906\":3,\"913\":1,\"922\":1,\"923\":2,\"935\":10,\"938\":7,\"939\":2,\"940\":10,\"941\":4,\"944\":4,\"947\":2,\"949\":3,\"951\":6,\"953\":6,\"955\":3,\"957\":1}}],[\"乱码\",{\"1\":{\"174\":1}}],[\"跟踪\",{\"0\":{\"230\":1,\"240\":1},\"1\":{\"214\":3,\"242\":1}}],[\"跟踪器\",{\"1\":{\"214\":1}}],[\"跟\",{\"1\":{\"174\":1,\"184\":3,\"379\":1,\"860\":1}}],[\"跟着\",{\"1\":{\"97\":2}}],[\"副本\",{\"1\":{\"174\":1}}],[\"副产品\",{\"1\":{\"110\":1}}],[\"栏\",{\"1\":{\"170\":1}}],[\"说法\",{\"1\":{\"304\":1,\"347\":1}}],[\"说\",{\"1\":{\"169\":1,\"293\":1,\"298\":1,\"306\":1,\"379\":5,\"532\":1,\"665\":1,\"671\":1,\"690\":1,\"744\":1,\"745\":1,\"748\":1,\"923\":1}}],[\"说明\",{\"1\":{\"41\":9,\"42\":1,\"71\":1,\"75\":1,\"89\":1,\"168\":1,\"177\":1,\"314\":1,\"357\":1,\"370\":1,\"396\":1,\"476\":2,\"559\":1,\"573\":1,\"583\":1,\"586\":1,\"598\":1,\"600\":1,\"601\":1,\"605\":1,\"606\":1,\"607\":1,\"609\":1,\"611\":1,\"612\":1,\"613\":1,\"620\":1,\"621\":1,\"633\":1,\"665\":1,\"666\":1,\"670\":1,\"671\":1,\"672\":1,\"682\":1,\"688\":1,\"696\":1,\"703\":1,\"706\":1,\"708\":1,\"713\":1,\"717\":2,\"718\":1,\"721\":1,\"729\":1,\"739\":1,\"740\":1,\"744\":1,\"745\":1,\"749\":1,\"755\":1,\"756\":1,\"769\":1,\"793\":2,\"798\":1,\"810\":1,\"818\":1,\"825\":1,\"827\":1}}],[\"仓库\",{\"1\":{\"168\":1}}],[\"拉长\",{\"1\":{\"261\":1}}],[\"拉普拉斯\",{\"1\":{\"225\":1,\"226\":4}}],[\"拉\",{\"1\":{\"168\":1}}],[\"拉取\",{\"1\":{\"165\":1}}],[\"—\",{\"0\":{\"528\":2,\"529\":2,\"531\":2},\"1\":{\"166\":2,\"174\":16,\"175\":16,\"290\":2,\"292\":2,\"304\":16,\"350\":2,\"527\":2,\"530\":2,\"609\":4,\"621\":2,\"655\":6,\"691\":4,\"726\":4,\"756\":4,\"810\":6,\"811\":16,\"827\":2,\"836\":1,\"841\":16,\"845\":17,\"872\":2,\"873\":4,\"875\":16,\"910\":1,\"916\":8}}],[\"宿主机\",{\"1\":{\"184\":1}}],[\"宿主\",{\"1\":{\"165\":1,\"184\":1}}],[\"镜像\",{\"1\":{\"165\":3}}],[\"配件\",{\"1\":{\"961\":1}}],[\"配对\",{\"1\":{\"817\":2,\"858\":1,\"859\":1}}],[\"配置\",{\"0\":{\"186\":1},\"1\":{\"211\":1,\"375\":1}}],[\"配好\",{\"1\":{\"165\":1}}],[\"配合\",{\"1\":{\"27\":1,\"55\":1,\"769\":1}}],[\"别说\",{\"1\":{\"922\":1}}],[\"别忘了\",{\"1\":{\"704\":1}}],[\"别名\",{\"1\":{\"524\":1,\"634\":1,\"762\":1}}],[\"别\",{\"1\":{\"165\":1}}],[\"别人\",{\"1\":{\"165\":1}}],[\"别的\",{\"1\":{\"55\":1}}],[\"环边\",{\"1\":{\"303\":1}}],[\"环\",{\"1\":{\"303\":1}}],[\"环上\",{\"1\":{\"223\":1}}],[\"环境\",{\"0\":{\"165\":1,\"183\":1},\"1\":{\"164\":1,\"925\":1}}],[\"环形\",{\"1\":{\"103\":1,\"223\":1,\"283\":1}}],[\"\\\\\",{\"1\":{\"163\":1,\"175\":4,\"356\":1,\"358\":1,\"371\":1,\"545\":2,\"600\":2,\"612\":1,\"648\":7,\"649\":4,\"666\":1,\"682\":1,\"684\":8,\"685\":2,\"688\":1,\"689\":1,\"690\":1,\"695\":2,\"696\":1,\"698\":4,\"704\":2,\"706\":2,\"713\":2,\"722\":2,\"769\":7,\"781\":1,\"793\":5,\"818\":4,\"825\":1,\"827\":1,\"830\":1,\"846\":4,\"905\":2,\"963\":1}}],[\"赋给\",{\"1\":{\"642\":1,\"664\":1,\"676\":3,\"682\":2,\"688\":2,\"698\":1,\"724\":1,\"734\":1,\"735\":2,\"736\":1,\"755\":1,\"801\":1,\"804\":5,\"810\":1,\"826\":1,\"828\":1,\"829\":2,\"830\":1}}],[\"赋\",{\"1\":{\"612\":2,\"676\":1,\"724\":1,\"755\":1,\"758\":1,\"804\":2,\"806\":1,\"808\":1,\"829\":2}}],[\"赋予\",{\"0\":{\"162\":1,\"172\":1},\"1\":{\"225\":2,\"601\":1,\"659\":1,\"718\":1,\"766\":1,\"769\":1}}],[\"赋值\",{\"0\":{\"683\":1,\"688\":1,\"693\":1,\"723\":1,\"724\":1,\"728\":1,\"802\":2,\"803\":1,\"805\":1,\"806\":1},\"1\":{\"103\":1,\"574\":2,\"586\":2,\"605\":1,\"612\":4,\"665\":2,\"668\":3,\"670\":1,\"671\":1,\"673\":1,\"676\":8,\"682\":1,\"683\":5,\"684\":1,\"688\":4,\"693\":3,\"695\":1,\"696\":1,\"698\":1,\"712\":1,\"713\":2,\"717\":6,\"724\":8,\"725\":1,\"728\":3,\"729\":2,\"732\":1,\"735\":2,\"750\":1,\"755\":3,\"758\":2,\"801\":1,\"804\":3,\"805\":3,\"806\":6,\"807\":2,\"809\":1,\"810\":1,\"811\":1,\"813\":1,\"815\":1,\"825\":4,\"827\":1,\"828\":1,\"829\":1,\"830\":1}}],[\"硬核\",{\"1\":{\"921\":1}}],[\"硬\",{\"1\":{\"254\":1}}],[\"硬盘空间\",{\"1\":{\"170\":1}}],[\"硬盘\",{\"0\":{\"162\":1,\"172\":1},\"1\":{\"160\":1,\"169\":1,\"172\":8}}],[\"硬件\",{\"1\":{\"65\":1,\"663\":1}}],[\"硬件资源\",{\"1\":{\"8\":1,\"35\":1}}],[\"菜鸟\",{\"1\":{\"160\":1,\"833\":1}}],[\"脚本\",{\"0\":{\"173\":1},\"1\":{\"155\":1,\"174\":3,\"175\":3}}],[\"让\",{\"1\":{\"153\":1,\"174\":1,\"180\":1,\"184\":1,\"191\":1,\"261\":2,\"379\":2,\"471\":1,\"528\":1,\"615\":1,\"826\":1,\"906\":1,\"922\":1,\"939\":1,\"952\":1,\"957\":1,\"962\":1}}],[\"拖累\",{\"1\":{\"153\":1}}],[\"累计\",{\"1\":{\"745\":1,\"826\":1,\"830\":1}}],[\"累积\",{\"1\":{\"153\":2}}],[\"累加\",{\"1\":{\"100\":2,\"745\":4}}],[\"选\",{\"1\":{\"426\":1,\"961\":1}}],[\"选用\",{\"1\":{\"257\":1,\"263\":2}}],[\"选项\",{\"1\":{\"168\":1}}],[\"选取\",{\"1\":{\"153\":1,\"366\":1,\"410\":1,\"411\":1,\"415\":1,\"417\":2,\"738\":1,\"961\":1}}],[\"选择性\",{\"1\":{\"406\":2,\"436\":1}}],[\"选择\",{\"0\":{\"449\":1,\"817\":1,\"818\":1},\"1\":{\"110\":2,\"168\":1,\"198\":4,\"222\":3,\"228\":1,\"245\":1,\"246\":1,\"257\":1,\"259\":1,\"284\":1,\"304\":1,\"307\":1,\"308\":1,\"312\":2,\"317\":1,\"350\":2,\"391\":1,\"392\":5,\"400\":1,\"419\":1,\"423\":1,\"449\":1,\"456\":2,\"457\":1,\"467\":1,\"720\":1,\"750\":3,\"963\":1}}],[\"越强\",{\"1\":{\"959\":1}}],[\"越长\",{\"1\":{\"959\":1}}],[\"越早\",{\"1\":{\"938\":1}}],[\"越好\",{\"1\":{\"873\":2,\"928\":1}}],[\"越大\",{\"1\":{\"859\":1,\"928\":1,\"938\":1}}],[\"越多\",{\"1\":{\"355\":1,\"873\":1}}],[\"越有\",{\"1\":{\"355\":1}}],[\"越高\",{\"1\":{\"299\":1}}],[\"越\",{\"1\":{\"292\":2,\"299\":1,\"355\":4}}],[\"越小\",{\"1\":{\"292\":1}}],[\"越来越\",{\"1\":{\"153\":1,\"229\":1,\"799\":1}}],[\"越界\",{\"1\":{\"99\":1,\"574\":2}}],[\"立体\",{\"1\":{\"290\":1,\"298\":1,\"342\":1}}],[\"立方体\",{\"1\":{\"222\":1}}],[\"立刻\",{\"1\":{\"153\":1}}],[\"立即\",{\"1\":{\"30\":2,\"31\":1,\"39\":2,\"775\":1}}],[\"贪\",{\"1\":{\"153\":1}}],[\"贪心\",{\"0\":{\"140\":1},\"1\":{\"67\":1,\"141\":1,\"146\":1,\"153\":1}}],[\"格雷厄姆\",{\"1\":{\"246\":1}}],[\"格\",{\"1\":{\"223\":1}}],[\"格子\",{\"1\":{\"152\":2,\"246\":1}}],[\"格式文件\",{\"1\":{\"785\":1}}],[\"格式化\",{\"1\":{\"172\":1}}],[\"格式\",{\"0\":{\"778\":1},\"1\":{\"40\":1,\"175\":1,\"265\":1,\"597\":1,\"712\":1,\"713\":1,\"778\":2,\"781\":1,\"785\":1,\"788\":1,\"835\":1,\"860\":1}}],[\"稳定\",{\"1\":{\"261\":1,\"357\":1,\"372\":4,\"465\":2,\"925\":1,\"957\":2}}],[\"稳定性\",{\"1\":{\"53\":1}}],[\"稳步\",{\"1\":{\"246\":1}}],[\"稳健\",{\"1\":{\"218\":1,\"924\":1}}],[\"稳稳\",{\"1\":{\"148\":1}}],[\"收敛\",{\"0\":{\"446\":1},\"1\":{\"370\":1,\"399\":1,\"446\":1,\"864\":1,\"928\":1}}],[\"收敛性\",{\"1\":{\"319\":2}}],[\"收益\",{\"1\":{\"259\":1}}],[\"收集\",{\"1\":{\"148\":1,\"257\":1}}],[\"收到\",{\"1\":{\"30\":1}}],[\"拆解\",{\"1\":{\"941\":1,\"947\":1}}],[\"拆\",{\"1\":{\"148\":1,\"372\":1,\"922\":1}}],[\"拆开\",{\"1\":{\"104\":1}}],[\"利润\",{\"1\":{\"148\":4}}],[\"利用\",{\"0\":{\"764\":1,\"834\":1},\"1\":{\"19\":3,\"51\":1,\"52\":1,\"53\":1,\"80\":1,\"91\":1,\"94\":1,\"100\":1,\"192\":1,\"193\":1,\"194\":1,\"217\":1,\"218\":2,\"220\":3,\"223\":1,\"225\":2,\"226\":4,\"228\":2,\"234\":1,\"235\":1,\"245\":1,\"246\":2,\"247\":1,\"273\":1,\"294\":2,\"301\":1,\"312\":1,\"314\":1,\"316\":1,\"317\":1,\"320\":1,\"347\":1,\"348\":3,\"386\":1,\"392\":2,\"393\":1,\"396\":1,\"529\":1,\"717\":1,\"750\":1,\"887\":1,\"892\":1}}],[\"买卖\",{\"0\":{\"148\":1}}],[\"股票\",{\"0\":{\"147\":1,\"148\":1}}],[\"峰值\",{\"1\":{\"146\":1,\"299\":1,\"451\":1}}],[\"富余\",{\"1\":{\"143\":1}}],[\"负值\",{\"1\":{\"436\":1,\"437\":2}}],[\"负载\",{\"1\":{\"211\":1}}],[\"负数\",{\"1\":{\"153\":7}}],[\"负\",{\"1\":{\"143\":1,\"437\":1,\"689\":1,\"893\":1}}],[\"负责\",{\"1\":{\"31\":4,\"34\":1,\"189\":1,\"192\":1,\"354\":2,\"864\":1}}],[\"饼干\",{\"0\":{\"142\":1},\"1\":{\"142\":1}}],[\"感兴趣\",{\"1\":{\"332\":1,\"369\":1,\"889\":1}}],[\"感受\",{\"1\":{\"293\":1,\"294\":1,\"303\":1,\"451\":1,\"875\":1}}],[\"感觉\",{\"1\":{\"141\":1}}],[\"感知机\",{\"1\":{\"220\":1,\"322\":1}}],[\"感知器\",{\"1\":{\"201\":1,\"222\":1}}],[\"感知\",{\"0\":{\"925\":1},\"1\":{\"13\":3,\"201\":1,\"202\":1,\"211\":1,\"246\":1,\"307\":1,\"312\":3,\"372\":1,\"864\":2,\"910\":1,\"924\":1,\"925\":3,\"928\":2}}],[\"清理\",{\"1\":{\"714\":1,\"722\":1}}],[\"清空\",{\"1\":{\"574\":1,\"775\":1}}],[\"清除\",{\"1\":{\"540\":1,\"793\":1}}],[\"清华\",{\"1\":{\"360\":1,\"385\":1}}],[\"清洗\",{\"1\":{\"342\":1}}],[\"清楚\",{\"1\":{\"141\":2}}],[\"清晰性\",{\"1\":{\"621\":1}}],[\"清晰度\",{\"1\":{\"451\":1}}],[\"清晰\",{\"1\":{\"44\":1,\"745\":1}}],[\"符\",{\"1\":{\"647\":1,\"805\":2,\"810\":1}}],[\"符号长\",{\"1\":{\"633\":1}}],[\"符号\",{\"0\":{\"650\":1},\"1\":{\"139\":1,\"229\":1,\"242\":1,\"249\":1,\"277\":1,\"278\":1,\"282\":1,\"284\":3,\"353\":1,\"446\":1,\"633\":6,\"650\":2,\"662\":3,\"804\":1}}],[\"符合要求\",{\"1\":{\"137\":9}}],[\"符合条件\",{\"1\":{\"81\":1,\"85\":2,\"98\":2,\"110\":1,\"137\":1,\"833\":1}}],[\"符合\",{\"1\":{\"72\":1,\"98\":2,\"137\":1,\"451\":1,\"531\":1,\"563\":1,\"744\":1,\"902\":1,\"959\":1}}],[\"包\",{\"1\":{\"304\":1,\"500\":1}}],[\"包围\",{\"1\":{\"237\":1,\"404\":1,\"405\":1,\"408\":1,\"410\":2}}],[\"包括\",{\"1\":{\"138\":1,\"194\":1,\"211\":1,\"220\":1,\"245\":1,\"249\":2,\"254\":1,\"268\":1,\"315\":1,\"316\":1,\"342\":2,\"398\":1,\"399\":1,\"425\":1,\"545\":2,\"573\":1,\"583\":1,\"599\":1,\"604\":1,\"606\":1,\"611\":1,\"684\":1,\"685\":1,\"690\":1,\"696\":1,\"701\":1,\"707\":1,\"722\":1,\"724\":1,\"744\":1,\"750\":3,\"756\":1,\"759\":1,\"793\":2,\"825\":1,\"855\":1,\"875\":1,\"908\":1,\"958\":2}}],[\"包含\",{\"1\":{\"38\":1,\"44\":1,\"53\":1,\"103\":1,\"113\":1,\"126\":1,\"128\":1,\"137\":7,\"138\":1,\"196\":1,\"200\":1,\"232\":1,\"290\":1,\"293\":1,\"294\":1,\"303\":1,\"317\":1,\"322\":2,\"342\":4,\"411\":2,\"416\":1,\"419\":1,\"425\":1,\"545\":1,\"559\":1,\"571\":1,\"581\":1,\"592\":1,\"598\":1,\"606\":2,\"609\":1,\"616\":1,\"638\":2,\"647\":1,\"657\":1,\"675\":1,\"692\":1,\"696\":3,\"712\":1,\"722\":1,\"736\":1,\"738\":1,\"756\":1,\"781\":2,\"793\":1,\"825\":1,\"858\":1,\"940\":1,\"958\":1}}],[\"度以\",{\"1\":{\"864\":1}}],[\"度越\",{\"1\":{\"859\":1}}],[\"度量\",{\"1\":{\"223\":1,\"226\":1,\"342\":1,\"349\":1,\"402\":1}}],[\"度\",{\"1\":{\"137\":2,\"139\":1,\"214\":1,\"255\":2,\"342\":1,\"354\":1,\"393\":1,\"394\":4,\"395\":3,\"859\":4,\"864\":1,\"887\":3,\"924\":1}}],[\"度为\",{\"1\":{\"86\":2}}],[\"⻓\",{\"1\":{\"137\":2,\"139\":2}}],[\"⼊\",{\"1\":{\"137\":1}}],[\"键盘输入\",{\"1\":{\"685\":1,\"759\":1,\"781\":1}}],[\"键盘\",{\"1\":{\"685\":1,\"781\":4}}],[\"键值\",{\"1\":{\"545\":15,\"546\":1}}],[\"键\",{\"1\":{\"137\":2,\"204\":2,\"545\":1}}],[\"键入\",{\"1\":{\"10\":1}}],[\"短于\",{\"1\":{\"685\":1}}],[\"短程\",{\"1\":{\"371\":1}}],[\"短时\",{\"1\":{\"223\":1}}],[\"短\",{\"1\":{\"137\":1,\"347\":3,\"633\":2,\"642\":1}}],[\"⼝\",{\"1\":{\"137\":2,\"139\":1}}],[\"窗\",{\"1\":{\"137\":2,\"139\":1}}],[\"窗口\",{\"0\":{\"107\":1,\"136\":1},\"1\":{\"67\":1,\"102\":2,\"103\":1,\"107\":2,\"137\":9,\"210\":1,\"370\":1,\"379\":7,\"380\":2,\"384\":2,\"411\":1}}],[\"缩进\",{\"1\":{\"625\":1}}],[\"缩一缩\",{\"1\":{\"436\":1}}],[\"缩写\",{\"1\":{\"270\":1,\"687\":1,\"688\":1,\"689\":1,\"690\":1}}],[\"缩放\",{\"1\":{\"260\":1,\"301\":1,\"303\":1,\"370\":1,\"375\":2,\"859\":1}}],[\"缩\",{\"1\":{\"137\":1,\"139\":1}}],[\"缩小\",{\"1\":{\"94\":1,\"137\":1,\"198\":1,\"294\":1,\"391\":1,\"811\":2,\"944\":1}}],[\"⼦\",{\"1\":{\"137\":5}}],[\"⼩\",{\"1\":{\"137\":4,\"139\":1}}],[\"画热\",{\"1\":{\"836\":1}}],[\"画\",{\"1\":{\"380\":1,\"836\":1}}],[\"画成\",{\"1\":{\"379\":1}}],[\"画图\",{\"1\":{\"137\":1}}],[\"画出\",{\"1\":{\"126\":1}}],[\"步数\",{\"1\":{\"873\":1,\"906\":1,\"928\":1,\"938\":1}}],[\"步幅\",{\"1\":{\"331\":1}}],[\"步中\",{\"1\":{\"293\":1}}],[\"步长\",{\"1\":{\"273\":1,\"905\":1,\"913\":1}}],[\"步\",{\"1\":{\"137\":1,\"938\":2,\"951\":1}}],[\"步骤\",{\"1\":{\"51\":2,\"71\":3,\"94\":1,\"96\":1,\"97\":1,\"199\":2,\"225\":1,\"245\":2,\"282\":5,\"300\":1,\"319\":2,\"332\":1,\"350\":2,\"386\":1,\"394\":2,\"395\":1,\"399\":3,\"717\":1,\"864\":2,\"901\":1,\"909\":1,\"925\":1,\"940\":3}}],[\"轮到\",{\"1\":{\"528\":1}}],[\"轮次\",{\"1\":{\"338\":1}}],[\"轮\",{\"1\":{\"137\":1}}],[\"技巧\",{\"1\":{\"137\":1,\"392\":1,\"535\":1,\"891\":1}}],[\"技术\",{\"0\":{\"479\":1},\"1\":{\"3\":1,\"198\":1,\"234\":1,\"386\":1,\"392\":1,\"480\":1,\"492\":1,\"635\":1,\"747\":1,\"852\":1,\"910\":1}}],[\"⽤\",{\"1\":{\"137\":2}}],[\"答案\",{\"1\":{\"137\":1,\"138\":1,\"139\":1,\"347\":1,\"366\":1,\"577\":1}}],[\"涵盖\",{\"1\":{\"137\":2,\"257\":1}}],[\"课程表\",{\"0\":{\"135\":1}}],[\"撤回\",{\"1\":{\"128\":1}}],[\"撤销\",{\"0\":{\"711\":1,\"713\":1},\"1\":{\"110\":1,\"126\":3,\"713\":1,\"714\":1,\"722\":1,\"744\":1,\"828\":1}}],[\"彼此之间\",{\"1\":{\"128\":1}}],[\"研究者\",{\"1\":{\"370\":1}}],[\"研究课题\",{\"1\":{\"242\":1}}],[\"研究\",{\"1\":{\"128\":1,\"192\":1,\"242\":1,\"254\":3,\"257\":2,\"355\":1,\"356\":1,\"358\":1,\"370\":1,\"379\":1}}],[\"棋子\",{\"1\":{\"128\":2}}],[\"棋盘\",{\"0\":{\"127\":1},\"1\":{\"110\":1,\"128\":1}}],[\"攻击\",{\"1\":{\"128\":2}}],[\"国家\",{\"1\":{\"690\":3}}],[\"国际象棋\",{\"1\":{\"128\":1}}],[\"国土资源\",{\"1\":{\"58\":1}}],[\"彻底\",{\"1\":{\"126\":1}}],[\"授权\",{\"1\":{\"126\":1}}],[\"商业\",{\"1\":{\"126\":1}}],[\"归类\",{\"1\":{\"563\":2}}],[\"归纳\",{\"1\":{\"370\":1,\"372\":1,\"863\":1}}],[\"归一化\",{\"1\":{\"226\":1,\"259\":1,\"294\":2,\"319\":3,\"322\":1,\"371\":1,\"372\":4,\"859\":1,\"883\":1,\"903\":3,\"953\":1}}],[\"归\",{\"1\":{\"126\":1}}],[\"著作权\",{\"1\":{\"126\":1}}],[\"扣\",{\"1\":{\"126\":1}}],[\"力图\",{\"0\":{\"836\":1},\"1\":{\"832\":1,\"836\":2,\"837\":2}}],[\"力\",{\"1\":{\"126\":1,\"955\":1}}],[\"力扣\",{\"0\":{\"73\":1,\"74\":1,\"75\":1,\"78\":1,\"90\":1,\"91\":1,\"98\":1,\"107\":1,\"108\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"118\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"125\":1,\"126\":1,\"128\":1,\"129\":1,\"131\":1,\"132\":1,\"135\":1,\"137\":1,\"138\":1,\"139\":1,\"142\":1,\"143\":1,\"146\":1,\"148\":1,\"152\":1,\"153\":1,\"154\":1},\"1\":{\"70\":3,\"72\":8,\"85\":1,\"86\":2,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"99\":1,\"100\":4,\"102\":12,\"103\":6,\"104\":8,\"105\":6,\"106\":3,\"152\":1}}],[\"刚才\",{\"1\":{\"357\":1,\"829\":2,\"830\":1}}],[\"刚体\",{\"1\":{\"260\":1}}],[\"刚性\",{\"1\":{\"222\":1}}],[\"刚\",{\"1\":{\"126\":1,\"826\":1,\"828\":1}}],[\"刚刚\",{\"1\":{\"126\":3,\"168\":1}}],[\"住\",{\"1\":{\"126\":1,\"747\":1}}],[\"框内\",{\"1\":{\"402\":1}}],[\"框\",{\"1\":{\"199\":1,\"233\":1,\"242\":1,\"404\":1,\"405\":1,\"408\":1,\"410\":3,\"411\":1,\"413\":1}}],[\"框框\",{\"1\":{\"126\":1}}],[\"框架\",{\"0\":{\"29\":1},\"1\":{\"51\":3,\"128\":1,\"137\":1,\"195\":1,\"199\":3,\"247\":1,\"257\":1,\"259\":2,\"262\":2,\"268\":2,\"273\":1,\"344\":1,\"390\":1,\"940\":1}}],[\"剪掉\",{\"1\":{\"126\":1}}],[\"剪刀\",{\"1\":{\"126\":1}}],[\"剪枝\",{\"1\":{\"81\":1,\"98\":1,\"112\":1,\"113\":1,\"118\":1,\"126\":1,\"377\":1,\"386\":2,\"391\":2}}],[\"②\",{\"1\":{\"126\":3}}],[\"①\",{\"1\":{\"126\":3}}],[\"停用\",{\"1\":{\"171\":1}}],[\"停止\",{\"0\":{\"852\":1},\"1\":{\"126\":1,\"137\":1,\"694\":1,\"839\":1,\"852\":1}}],[\"停放\",{\"1\":{\"63\":1}}],[\"候选人\",{\"1\":{\"759\":2}}],[\"候选框\",{\"1\":{\"408\":1}}],[\"候选\",{\"1\":{\"126\":1,\"235\":2,\"392\":1}}],[\"逐位\",{\"1\":{\"863\":1}}],[\"逐步\",{\"1\":{\"314\":1}}],[\"逐\",{\"1\":{\"294\":1}}],[\"逐渐\",{\"1\":{\"242\":1,\"907\":1,\"938\":2,\"940\":2,\"951\":2}}],[\"逐点\",{\"1\":{\"196\":1,\"200\":1,\"248\":1}}],[\"逐个\",{\"1\":{\"126\":1,\"682\":1,\"685\":1,\"689\":1,\"781\":3}}],[\"逐层\",{\"1\":{\"72\":1,\"220\":1}}],[\"办法\",{\"1\":{\"126\":2,\"257\":1,\"356\":1,\"852\":1,\"863\":1}}],[\"漏掉\",{\"1\":{\"121\":2,\"122\":1}}],[\"漏检\",{\"1\":{\"60\":1,\"61\":1}}],[\"串行\",{\"1\":{\"406\":1,\"409\":1}}],[\"串联\",{\"1\":{\"404\":1,\"807\":1}}],[\"串\",{\"0\":{\"118\":1},\"1\":{\"137\":5,\"315\":1}}],[\"电话号码\",{\"0\":{\"114\":1}}],[\"理解能力\",{\"1\":{\"320\":1}}],[\"理解\",{\"1\":{\"112\":1,\"137\":1,\"174\":1,\"193\":1,\"290\":1,\"303\":1,\"315\":1,\"320\":1,\"322\":1,\"347\":1,\"348\":2,\"423\":1,\"668\":1,\"748\":1,\"859\":1,\"863\":1,\"958\":1}}],[\"理论依据\",{\"0\":{\"879\":1}}],[\"理论\",{\"0\":{\"69\":1},\"1\":{\"44\":1,\"53\":1,\"110\":1,\"220\":1,\"348\":1,\"467\":1,\"869\":1,\"895\":1}}],[\"容纳\",{\"1\":{\"775\":1}}],[\"容量\",{\"1\":{\"325\":1,\"437\":1,\"537\":2,\"542\":4,\"574\":2}}],[\"容易\",{\"1\":{\"112\":1,\"126\":3,\"355\":2,\"379\":1,\"485\":3,\"621\":1,\"730\":1,\"912\":1,\"915\":1,\"957\":2}}],[\"容器\",{\"0\":{\"184\":1},\"1\":{\"72\":1,\"165\":4,\"166\":2,\"177\":1,\"184\":4,\"186\":3,\"536\":2,\"537\":5,\"538\":9,\"539\":8,\"540\":7,\"541\":2,\"542\":4,\"543\":4,\"544\":1,\"545\":10,\"546\":11,\"556\":1,\"562\":1,\"563\":7,\"570\":2,\"574\":6,\"577\":5}}],[\"独一无二\",{\"1\":{\"485\":1}}],[\"独立性\",{\"1\":{\"228\":1}}],[\"独立\",{\"1\":{\"202\":1,\"220\":3,\"223\":1,\"228\":1,\"372\":2,\"492\":1,\"583\":1,\"590\":1,\"701\":1,\"816\":1,\"902\":1}}],[\"独\",{\"0\":{\"129\":1},\"1\":{\"110\":1}}],[\"独占\",{\"1\":{\"24\":1}}],[\"皇后\",{\"0\":{\"128\":1},\"1\":{\"110\":1,\"128\":8}}],[\"组中\",{\"1\":{\"372\":2}}],[\"组\",{\"1\":{\"288\":1,\"372\":5}}],[\"组织\",{\"1\":{\"203\":1,\"227\":1,\"318\":1,\"322\":1,\"390\":1,\"530\":1,\"785\":1}}],[\"组件\",{\"1\":{\"195\":1}}],[\"组合\",{\"0\":{\"111\":1,\"112\":1,\"113\":1,\"115\":1,\"116\":1,\"753\":1},\"1\":{\"110\":1,\"113\":4,\"115\":1,\"122\":1,\"357\":1,\"398\":1,\"469\":1,\"510\":1,\"756\":1,\"787\":1,\"793\":2,\"805\":1,\"959\":1,\"961\":2}}],[\"组成\",{\"0\":{\"3\":1},\"1\":{\"29\":1,\"41\":1,\"42\":2,\"137\":1,\"139\":1,\"196\":1,\"201\":2,\"220\":1,\"222\":1,\"225\":1,\"270\":1,\"310\":2,\"315\":1,\"322\":2,\"398\":1,\"423\":1,\"467\":1,\"581\":1,\"644\":1,\"657\":1,\"675\":1,\"684\":1,\"730\":2,\"959\":2}}],[\"波束\",{\"1\":{\"228\":2}}],[\"波兰\",{\"1\":{\"106\":1}}],[\"波动\",{\"1\":{\"53\":1}}],[\"逆时针\",{\"1\":{\"303\":1}}],[\"逆\",{\"1\":{\"106\":1,\"294\":1}}],[\"逆反\",{\"1\":{\"103\":1}}],[\"乐\",{\"1\":{\"106\":1}}],[\"几轮\",{\"1\":{\"843\":1}}],[\"几点\",{\"1\":{\"769\":1}}],[\"几处\",{\"1\":{\"577\":1}}],[\"几次\",{\"1\":{\"529\":1,\"873\":1}}],[\"几行\",{\"1\":{\"461\":1}}],[\"几乎\",{\"1\":{\"259\":1,\"935\":1}}],[\"几何变换\",{\"1\":{\"226\":1,\"260\":1}}],[\"几何\",{\"0\":{\"298\":1},\"1\":{\"209\":1,\"218\":1,\"220\":3,\"222\":2,\"223\":3,\"225\":3,\"243\":1,\"245\":3,\"246\":2,\"247\":4,\"270\":2,\"273\":3,\"277\":1,\"282\":1,\"298\":1,\"303\":1,\"315\":2,\"319\":5,\"327\":1}}],[\"几种\",{\"0\":{\"451\":1},\"1\":{\"106\":1,\"110\":3,\"217\":1,\"222\":1,\"244\":1,\"751\":1,\"755\":1,\"875\":1}}],[\"几个\",{\"0\":{\"842\":1},\"1\":{\"49\":1,\"193\":1,\"218\":1,\"229\":1,\"232\":1,\"244\":1,\"257\":2,\"301\":1,\"310\":1,\"325\":1,\"372\":1,\"380\":1,\"423\":1,\"546\":1,\"701\":1,\"781\":1,\"830\":1}}],[\"剑\",{\"1\":{\"105\":2}}],[\"四舍五入\",{\"1\":{\"419\":2}}],[\"四层\",{\"1\":{\"294\":1}}],[\"四次\",{\"1\":{\"282\":1}}],[\"四面体\",{\"1\":{\"277\":1,\"281\":1,\"282\":5}}],[\"四种\",{\"1\":{\"244\":1,\"610\":1}}],[\"四数\",{\"1\":{\"104\":2}}],[\"四个\",{\"1\":{\"41\":1,\"42\":1,\"262\":1,\"299\":2,\"303\":3,\"307\":1,\"308\":1,\"374\":1,\"380\":1,\"413\":1,\"675\":2,\"747\":1,\"762\":1,\"785\":1,\"830\":1}}],[\"赎金\",{\"1\":{\"104\":1}}],[\"'\",{\"1\":{\"104\":4,\"105\":14,\"106\":18,\"114\":16,\"119\":2,\"126\":2,\"128\":16,\"137\":8,\"163\":2,\"191\":40,\"208\":2,\"525\":4,\"583\":8,\"584\":2,\"586\":14,\"587\":2,\"589\":2,\"590\":8,\"595\":10,\"598\":2,\"599\":8,\"600\":8,\"601\":6,\"606\":2,\"607\":4,\"610\":10,\"611\":10,\"612\":10,\"615\":2,\"616\":2,\"619\":8,\"620\":8,\"621\":4,\"645\":2,\"647\":8,\"648\":23,\"649\":2,\"652\":4,\"654\":1,\"661\":4,\"662\":1,\"666\":4,\"670\":4,\"671\":4,\"672\":4,\"673\":2,\"677\":2,\"681\":4,\"682\":28,\"683\":52,\"684\":20,\"685\":4,\"687\":1,\"688\":3,\"689\":2,\"690\":2,\"691\":2,\"693\":2,\"695\":4,\"696\":2,\"698\":10,\"701\":10,\"702\":2,\"703\":6,\"704\":4,\"706\":4,\"707\":4,\"708\":2,\"709\":2,\"710\":4,\"712\":4,\"713\":10,\"714\":4,\"715\":4,\"717\":2,\"718\":2,\"720\":2,\"721\":4,\"722\":20,\"724\":2,\"726\":4,\"730\":4,\"735\":2,\"736\":2,\"738\":6,\"744\":10,\"745\":6,\"747\":2,\"748\":24,\"749\":4,\"758\":4,\"766\":4,\"769\":12,\"770\":10,\"776\":2,\"781\":2,\"782\":2,\"790\":2,\"791\":2,\"793\":2,\"798\":2,\"809\":2,\"817\":2,\"818\":10,\"825\":4,\"826\":2,\"827\":2,\"828\":2,\"830\":2,\"833\":2,\"834\":4,\"838\":4,\"840\":2,\"845\":2,\"852\":2,\"871\":1,\"889\":1,\"901\":1}}],[\"词是\",{\"1\":{\"860\":1}}],[\"词汇表\",{\"1\":{\"315\":2}}],[\"词\",{\"0\":{\"138\":1},\"1\":{\"104\":1,\"138\":9,\"379\":1,\"860\":1}}],[\"命名\",{\"1\":{\"192\":1,\"199\":1,\"354\":1,\"624\":1,\"662\":1}}],[\"命题\",{\"1\":{\"103\":1}}],[\"命令行\",{\"1\":{\"172\":1,\"191\":1}}],[\"命令\",{\"1\":{\"38\":1,\"160\":1,\"170\":1,\"171\":2,\"172\":1,\"174\":2,\"179\":1,\"181\":1,\"182\":1,\"651\":1}}],[\"路线\",{\"1\":{\"963\":1}}],[\"路由\",{\"1\":{\"228\":1}}],[\"路程\",{\"1\":{\"103\":1}}],[\"路径\",{\"0\":{\"82\":1,\"85\":1},\"1\":{\"82\":2,\"85\":5,\"110\":1,\"793\":2,\"835\":1}}],[\"各有\",{\"1\":{\"814\":1}}],[\"各异\",{\"1\":{\"789\":1}}],[\"各不相同\",{\"1\":{\"701\":1}}],[\"各层\",{\"1\":{\"290\":1}}],[\"各图\",{\"1\":{\"290\":1}}],[\"各\",{\"1\":{\"290\":1,\"292\":5,\"293\":1,\"299\":1,\"703\":1,\"825\":1,\"860\":1}}],[\"各点\",{\"1\":{\"227\":1}}],[\"各种\",{\"1\":{\"218\":1,\"220\":1,\"325\":2,\"527\":1,\"701\":1,\"875\":1,\"926\":1,\"935\":1,\"953\":1}}],[\"各自\",{\"1\":{\"103\":1,\"356\":1,\"413\":1,\"787\":1,\"859\":1,\"961\":1}}],[\"各个\",{\"1\":{\"38\":1,\"138\":1,\"210\":1,\"228\":1,\"290\":1,\"379\":1,\"391\":3,\"429\":1,\"546\":1,\"701\":1,\"744\":3,\"756\":1,\"759\":1,\"818\":1,\"825\":1,\"826\":1,\"827\":1}}],[\"面来\",{\"1\":{\"301\":1}}],[\"面格\",{\"1\":{\"246\":1}}],[\"面临\",{\"1\":{\"222\":1,\"875\":2}}],[\"面积\",{\"1\":{\"214\":1,\"411\":3}}],[\"面\",{\"1\":{\"107\":1,\"244\":1,\"293\":1,\"303\":3,\"304\":1,\"305\":2,\"308\":2}}],[\"面试题\",{\"0\":{\"473\":1},\"1\":{\"103\":1,\"473\":1,\"489\":1}}],[\"面向对象\",{\"0\":{\"508\":1,\"700\":1,\"701\":1},\"1\":{\"623\":2,\"701\":3,\"744\":1,\"747\":3}}],[\"面向\",{\"1\":{\"58\":1,\"787\":1}}],[\"⾜\",{\"1\":{\"103\":1}}],[\"⾏\",{\"1\":{\"103\":1}}],[\"改名字\",{\"1\":{\"846\":1}}],[\"改名\",{\"1\":{\"769\":1}}],[\"改成\",{\"1\":{\"741\":1,\"781\":1}}],[\"改用\",{\"1\":{\"476\":1}}],[\"改为\",{\"1\":{\"436\":1,\"541\":1,\"671\":1,\"719\":1,\"781\":3}}],[\"改善\",{\"1\":{\"282\":1,\"299\":1}}],[\"改进\",{\"1\":{\"195\":1,\"220\":1,\"227\":1,\"372\":1,\"419\":1}}],[\"改写\",{\"1\":{\"191\":1,\"399\":1}}],[\"改\",{\"1\":{\"103\":1,\"825\":1}}],[\"改变\",{\"1\":{\"44\":1,\"71\":1,\"349\":1,\"522\":3,\"525\":5,\"576\":1,\"586\":1,\"612\":1,\"621\":3,\"656\":1,\"661\":2,\"670\":6,\"671\":9,\"672\":5,\"673\":4,\"675\":3,\"688\":1,\"689\":1,\"693\":1,\"726\":1,\"741\":1,\"745\":1,\"828\":1,\"830\":1,\"890\":1,\"938\":1,\"961\":1}}],[\"⽌\",{\"1\":{\"103\":1}}],[\"尾部\",{\"1\":{\"572\":1}}],[\"尾\",{\"1\":{\"103\":1,\"541\":2,\"570\":2,\"827\":1}}],[\"翻倍\",{\"1\":{\"542\":1}}],[\"翻\",{\"1\":{\"103\":1}}],[\"翻转\",{\"0\":{\"76\":1},\"1\":{\"72\":1,\"103\":2,\"105\":1,\"143\":2,\"282\":1,\"576\":1}}],[\"杀死\",{\"1\":{\"841\":1,\"852\":2}}],[\"杀\",{\"1\":{\"102\":1,\"852\":1}}],[\"详情\",{\"1\":{\"841\":1}}],[\"详尽\",{\"1\":{\"425\":1}}],[\"详见\",{\"1\":{\"269\":1,\"570\":1}}],[\"详细信息\",{\"1\":{\"229\":1}}],[\"详细\",{\"1\":{\"102\":1,\"122\":1,\"201\":1,\"536\":1,\"935\":1,\"958\":1}}],[\"详解\",{\"1\":{\"11\":1,\"309\":1,\"317\":1,\"358\":1,\"366\":1,\"367\":1,\"375\":1,\"406\":1,\"535\":1}}],[\"螺旋\",{\"1\":{\"102\":2}}],[\"覆盖范围\",{\"1\":{\"152\":3}}],[\"覆盖\",{\"0\":{\"137\":1,\"168\":1},\"1\":{\"102\":1,\"137\":4,\"168\":1,\"175\":1,\"688\":1,\"750\":2,\"766\":1,\"769\":2,\"830\":1}}],[\"水果\",{\"1\":{\"102\":1}}],[\"水平\",{\"1\":{\"15\":1,\"39\":1,\"192\":1,\"320\":2,\"907\":1}}],[\"含噪\",{\"1\":{\"908\":1}}],[\"含义\",{\"1\":{\"312\":1,\"476\":2,\"525\":1,\"600\":1,\"601\":1,\"675\":1}}],[\"含有\",{\"1\":{\"138\":1,\"139\":1,\"534\":1,\"904\":1}}],[\"含\",{\"1\":{\"102\":1,\"137\":1,\"359\":1,\"781\":1}}],[\"零点\",{\"1\":{\"449\":2}}],[\"零\",{\"1\":{\"102\":1,\"210\":1,\"437\":1,\"451\":1,\"798\":1,\"810\":1,\"859\":1,\"864\":1,\"889\":1,\"929\":1,\"947\":1}}],[\"项中\",{\"1\":{\"756\":1}}],[\"项来\",{\"1\":{\"282\":1}}],[\"项\",{\"1\":{\"102\":1,\"105\":1,\"106\":1,\"759\":1,\"901\":1}}],[\"项目\",{\"0\":{\"3\":1},\"1\":{\"11\":1,\"19\":2}}],[\"快\",{\"1\":{\"449\":1,\"545\":1,\"788\":1,\"828\":1}}],[\"快照\",{\"1\":{\"245\":2}}],[\"快乐\",{\"1\":{\"104\":1}}],[\"快慢\",{\"1\":{\"102\":1}}],[\"快速访问\",{\"1\":{\"537\":1}}],[\"快速\",{\"1\":{\"63\":1,\"199\":1,\"211\":1,\"222\":1,\"245\":1,\"257\":1,\"303\":1,\"370\":1,\"537\":1,\"545\":1,\"725\":1}}],[\"移植\",{\"1\":{\"639\":1}}],[\"移植性\",{\"1\":{\"621\":1}}],[\"移位\",{\"1\":{\"245\":1,\"811\":3}}],[\"移\",{\"1\":{\"225\":1,\"828\":1}}],[\"移到\",{\"1\":{\"175\":2,\"793\":1,\"828\":1}}],[\"移出\",{\"1\":{\"137\":1}}],[\"移除\",{\"1\":{\"102\":1,\"103\":1,\"107\":1,\"570\":1}}],[\"移动\",{\"0\":{\"553\":1},\"1\":{\"43\":1,\"102\":1,\"137\":2,\"139\":1,\"211\":1,\"282\":1,\"379\":3,\"380\":1,\"548\":1,\"572\":1,\"575\":1,\"811\":1,\"891\":3}}],[\"题解\",{\"0\":{\"101\":1}}],[\"题目\",{\"0\":{\"141\":1,\"144\":1},\"1\":{\"89\":1}}],[\"维空间\",{\"1\":{\"318\":1}}],[\"维和\",{\"1\":{\"246\":1}}],[\"维\",{\"1\":{\"203\":2,\"304\":4,\"690\":2,\"923\":1}}],[\"维数\",{\"1\":{\"201\":1,\"208\":1,\"451\":1}}],[\"维度\",{\"0\":{\"149\":1},\"1\":{\"203\":1,\"228\":1,\"304\":8,\"350\":2,\"366\":1,\"372\":2,\"410\":1,\"415\":1,\"419\":1,\"849\":1,\"859\":1,\"882\":3,\"923\":2,\"928\":2,\"929\":2,\"938\":1,\"951\":1}}],[\"维持\",{\"1\":{\"100\":1,\"395\":1}}],[\"维护\",{\"1\":{\"10\":1,\"37\":1,\"71\":3,\"202\":1,\"612\":1,\"855\":2}}],[\"众数\",{\"1\":{\"100\":1}}],[\"差别\",{\"1\":{\"312\":1,\"938\":2}}],[\"差异\",{\"1\":{\"273\":1,\"292\":1,\"319\":1,\"323\":2,\"325\":1,\"391\":1,\"401\":1,\"451\":1,\"882\":1,\"893\":3}}],[\"差距\",{\"1\":{\"198\":1,\"259\":2,\"320\":2,\"325\":1,\"436\":1,\"908\":1}}],[\"差\",{\"1\":{\"100\":1,\"399\":1,\"451\":1,\"862\":2,\"875\":1,\"910\":2}}],[\"差值\",{\"1\":{\"81\":2,\"906\":1}}],[\"绝对值\",{\"1\":{\"143\":2}}],[\"绝对\",{\"1\":{\"100\":1,\"220\":1,\"322\":1,\"379\":1}}],[\"双引号\",{\"1\":{\"648\":1,\"649\":1}}],[\"双端\",{\"1\":{\"572\":1,\"573\":8}}],[\"双目\",{\"0\":{\"822\":1},\"1\":{\"512\":1,\"805\":1,\"810\":2,\"811\":1,\"814\":1}}],[\"双重\",{\"1\":{\"314\":2,\"320\":2,\"321\":1,\"322\":1,\"846\":1}}],[\"双边\",{\"1\":{\"246\":1}}],[\"双线性\",{\"1\":{\"217\":1}}],[\"双\",{\"0\":{\"100\":1},\"1\":{\"100\":1,\"102\":1,\"103\":1,\"104\":1,\"137\":1,\"290\":1,\"298\":1,\"314\":1,\"321\":1,\"364\":1,\"419\":1,\"573\":1,\"633\":1,\"806\":1,\"883\":1,\"884\":1,\"955\":1}}],[\"双向\",{\"1\":{\"20\":1,\"563\":1,\"607\":1}}],[\"！\",{\"1\":{\"99\":1,\"153\":1,\"165\":1,\"370\":1,\"528\":5,\"586\":1,\"606\":4,\"624\":1,\"654\":2,\"668\":1,\"703\":4,\"710\":1,\"717\":1,\"718\":6,\"732\":1,\"734\":1,\"744\":1,\"749\":2,\"757\":2,\"760\":2,\"766\":2,\"769\":8,\"781\":1,\"793\":4,\"830\":3}}],[\"形参均\",{\"1\":{\"721\":1}}],[\"形参表\",{\"1\":{\"597\":1,\"741\":1}}],[\"形参取\",{\"1\":{\"595\":2}}],[\"形参名\",{\"1\":{\"590\":1,\"721\":2}}],[\"形参值\",{\"1\":{\"586\":1}}],[\"形参上\",{\"1\":{\"586\":1,\"605\":1}}],[\"形参未\",{\"1\":{\"586\":1}}],[\"形参\",{\"0\":{\"595\":1},\"1\":{\"524\":2,\"525\":2,\"585\":1,\"586\":6,\"589\":1,\"590\":1,\"594\":1,\"595\":7,\"599\":1,\"606\":1,\"609\":1,\"611\":3,\"642\":2,\"671\":10,\"686\":1,\"690\":1,\"710\":2,\"718\":3,\"719\":1,\"729\":2,\"762\":4}}],[\"形参为\",{\"1\":{\"524\":1,\"762\":1}}],[\"形\",{\"1\":{\"318\":1,\"590\":1,\"621\":1}}],[\"形变\",{\"1\":{\"277\":1,\"369\":2,\"372\":1}}],[\"形状\",{\"1\":{\"214\":2,\"216\":1,\"217\":1,\"218\":5,\"220\":2,\"222\":2,\"225\":2,\"228\":2,\"229\":4,\"244\":1,\"245\":1,\"263\":1,\"273\":1,\"277\":2,\"280\":1,\"284\":2,\"303\":1,\"304\":1,\"311\":1,\"322\":1,\"392\":1,\"396\":1,\"398\":1,\"848\":2,\"875\":1,\"953\":6}}],[\"形成\",{\"1\":{\"138\":1,\"223\":1,\"290\":1,\"303\":1,\"314\":1,\"315\":1,\"398\":1,\"527\":1,\"701\":1,\"748\":2,\"768\":1}}],[\"形式参数\",{\"1\":{\"585\":1,\"586\":2,\"609\":1,\"620\":1}}],[\"形式\",{\"0\":{\"589\":1,\"645\":2,\"653\":1},\"1\":{\"99\":1,\"315\":1,\"323\":4,\"435\":1,\"525\":1,\"546\":1,\"590\":2,\"598\":1,\"600\":1,\"601\":1,\"607\":1,\"633\":1,\"640\":1,\"642\":1,\"645\":1,\"703\":1,\"719\":1,\"724\":1,\"725\":2,\"726\":1,\"729\":1,\"732\":1,\"734\":1,\"735\":1,\"739\":1,\"740\":1,\"741\":2,\"749\":1,\"766\":1,\"769\":1,\"779\":1,\"781\":1,\"782\":2,\"785\":5,\"787\":1,\"788\":1,\"793\":1,\"804\":2,\"806\":2,\"807\":1,\"810\":1,\"817\":1,\"818\":1,\"819\":1,\"864\":1,\"904\":1,\"925\":1,\"953\":1}}],[\"形态\",{\"1\":{\"63\":1,\"69\":1}}],[\"熔断\",{\"1\":{\"99\":1}}],[\"考虑一下\",{\"1\":{\"769\":1}}],[\"考虑\",{\"1\":{\"99\":1,\"104\":1,\"138\":1,\"201\":1,\"220\":1,\"259\":1,\"265\":1,\"295\":1,\"317\":1,\"322\":1,\"338\":1,\"353\":1,\"354\":1,\"391\":1,\"451\":2,\"480\":1,\"530\":1,\"701\":1,\"750\":1,\"769\":1,\"775\":1,\"828\":1,\"938\":1,\"940\":4,\"951\":1,\"955\":1}}],[\"验证\",{\"1\":{\"99\":1,\"199\":1,\"249\":1,\"325\":1,\"355\":1,\"370\":1,\"451\":1,\"559\":1}}],[\"寻找\",{\"1\":{\"98\":2,\"104\":1,\"137\":3,\"342\":2,\"616\":1,\"957\":1,\"959\":1}}],[\"搞清楚\",{\"1\":{\"97\":1}}],[\"令牌\",{\"1\":{\"322\":5,\"386\":1,\"391\":12,\"392\":2}}],[\"令人鼓舞\",{\"1\":{\"218\":1}}],[\"令人满意\",{\"1\":{\"199\":1,\"357\":2}}],[\"令\",{\"1\":{\"97\":2,\"103\":2,\"349\":1,\"826\":1,\"867\":2,\"900\":1}}],[\"令根\",{\"1\":{\"72\":1}}],[\"转变\",{\"1\":{\"940\":1}}],[\"转向\",{\"1\":{\"816\":1}}],[\"转义字符\",{\"0\":{\"648\":1},\"1\":{\"649\":1,\"793\":1}}],[\"转出去\",{\"1\":{\"599\":1}}],[\"转化成\",{\"1\":{\"366\":1,\"415\":1}}],[\"转化\",{\"1\":{\"209\":1,\"210\":2,\"223\":1,\"315\":1,\"318\":1,\"359\":1,\"399\":1,\"411\":1,\"419\":1,\"676\":1,\"750\":1,\"801\":1,\"864\":1}}],[\"转而\",{\"1\":{\"137\":1}}],[\"转载\",{\"1\":{\"126\":2,\"166\":1,\"174\":1,\"175\":1,\"304\":1,\"811\":1,\"841\":1,\"845\":1,\"875\":1}}],[\"转头\",{\"1\":{\"103\":1}}],[\"转换成\",{\"1\":{\"277\":1,\"315\":1,\"600\":1,\"676\":1,\"959\":1}}],[\"转换器\",{\"1\":{\"198\":1,\"396\":1}}],[\"转换\",{\"0\":{\"579\":1,\"627\":1},\"1\":{\"96\":1,\"100\":1,\"194\":1,\"197\":1,\"204\":1,\"223\":1,\"244\":1,\"246\":1,\"263\":1,\"290\":2,\"306\":1,\"307\":1,\"308\":1,\"315\":1,\"327\":1,\"344\":2,\"399\":1,\"436\":1,\"510\":1,\"512\":1,\"535\":10,\"586\":1,\"600\":1,\"666\":1,\"668\":1,\"676\":1,\"782\":2,\"785\":2,\"787\":2,\"788\":2,\"799\":4,\"801\":2,\"901\":1,\"958\":3}}],[\"转移性\",{\"1\":{\"257\":1}}],[\"转移\",{\"1\":{\"44\":2,\"97\":1,\"245\":1,\"560\":2,\"818\":1}}],[\"父类\",{\"1\":{\"701\":1,\"748\":4,\"769\":2}}],[\"父\",{\"1\":{\"95\":1,\"123\":1,\"748\":1}}],[\"递增\",{\"0\":{\"123\":1,\"131\":1},\"1\":{\"93\":1,\"99\":1}}],[\"递归函数\",{\"1\":{\"70\":3,\"85\":4,\"592\":1}}],[\"递归\",{\"0\":{\"70\":1,\"592\":1},\"1\":{\"70\":9,\"72\":6,\"77\":1,\"81\":1,\"82\":1,\"85\":7,\"91\":1,\"94\":2,\"95\":3,\"96\":1,\"97\":5,\"99\":2,\"100\":1,\"103\":8,\"110\":3,\"592\":2}}],[\"…\",{\"1\":{\"91\":2,\"304\":1,\"334\":1,\"347\":1,\"527\":2,\"530\":2,\"539\":2,\"542\":1,\"590\":8,\"611\":4,\"662\":6,\"682\":6,\"687\":4,\"707\":4,\"717\":4,\"718\":15,\"719\":2,\"741\":9,\"744\":2,\"755\":8,\"757\":14,\"758\":10,\"760\":11,\"762\":8,\"807\":4,\"811\":6,\"814\":8,\"817\":6,\"818\":11,\"825\":4,\"826\":6,\"846\":4,\"902\":1}}],[\"叶\",{\"0\":{\"90\":1},\"1\":{\"227\":1}}],[\"叶子\",{\"0\":{\"83\":1},\"1\":{\"69\":1,\"82\":2,\"83\":3,\"97\":5,\"218\":1,\"465\":5}}],[\"啊\",{\"1\":{\"89\":1}}],[\"查证\",{\"1\":{\"695\":1}}],[\"查看\",{\"1\":{\"170\":2,\"172\":2,\"182\":1,\"186\":2,\"852\":4}}],[\"查找\",{\"0\":{\"94\":1},\"1\":{\"89\":2,\"93\":1,\"94\":12,\"95\":1,\"102\":1,\"210\":1,\"220\":1,\"544\":2,\"545\":1,\"557\":2}}],[\"查询\",{\"1\":{\"10\":2,\"107\":1,\"192\":1,\"195\":2,\"197\":3,\"198\":9,\"199\":3,\"200\":2,\"201\":7,\"202\":2,\"210\":1,\"223\":1,\"254\":1,\"268\":3,\"457\":1}}],[\"底向上\",{\"1\":{\"89\":2}}],[\"底层\",{\"1\":{\"28\":1,\"245\":1,\"559\":1,\"563\":9,\"570\":2,\"577\":4,\"863\":1}}],[\"想当然\",{\"1\":{\"528\":1}}],[\"想法\",{\"1\":{\"292\":1}}],[\"想要\",{\"1\":{\"182\":1,\"380\":1,\"766\":1,\"857\":1,\"922\":1,\"938\":1,\"941\":1,\"944\":1,\"951\":1}}],[\"想不出\",{\"1\":{\"141\":1}}],[\"想象\",{\"1\":{\"126\":2}}],[\"想到\",{\"1\":{\"126\":2}}],[\"想\",{\"1\":{\"89\":1,\"141\":2,\"379\":1,\"456\":1,\"469\":1,\"528\":1,\"529\":1,\"546\":1,\"576\":1,\"615\":1,\"671\":1,\"713\":1,\"743\":1,\"769\":1,\"860\":2}}],[\"合同\",{\"1\":{\"527\":1}}],[\"合理\",{\"1\":{\"436\":1,\"750\":1,\"859\":1}}],[\"合在一起\",{\"1\":{\"409\":1,\"673\":1}}],[\"合成\",{\"1\":{\"245\":1,\"277\":2,\"859\":1,\"887\":1,\"890\":1,\"906\":1,\"910\":2,\"935\":3,\"940\":1}}],[\"合法性\",{\"1\":{\"590\":1}}],[\"合法\",{\"1\":{\"128\":1,\"467\":1,\"649\":1,\"670\":1,\"671\":4,\"738\":1,\"745\":1,\"766\":1}}],[\"合并\",{\"0\":{\"88\":1},\"1\":{\"88\":4,\"168\":1,\"209\":1,\"242\":1,\"246\":1,\"307\":1,\"308\":4,\"391\":2,\"714\":1,\"882\":1}}],[\"合适\",{\"1\":{\"69\":1,\"191\":1,\"246\":1,\"411\":1,\"825\":1}}],[\"闭\",{\"1\":{\"87\":1,\"112\":1,\"137\":1}}],[\"况且\",{\"1\":{\"85\":1}}],[\"呀\",{\"1\":{\"85\":1}}],[\"吧\",{\"1\":{\"85\":1,\"165\":1,\"852\":1}}],[\"他们\",{\"1\":{\"220\":1,\"226\":1,\"245\":1,\"356\":1,\"379\":2,\"648\":1}}],[\"他\",{\"1\":{\"85\":2,\"537\":1}}],[\"祖先\",{\"0\":{\"89\":1,\"90\":1,\"91\":1},\"1\":{\"85\":1,\"89\":1,\"90\":3,\"91\":2,\"100\":2}}],[\"公用\",{\"1\":{\"706\":1,\"709\":1,\"715\":1,\"735\":4,\"744\":2,\"745\":3,\"749\":1,\"781\":1}}],[\"公钥\",{\"1\":{\"485\":1}}],[\"公平\",{\"1\":{\"396\":1}}],[\"公式\",{\"1\":{\"299\":1,\"308\":1,\"451\":1,\"904\":1,\"908\":1,\"909\":1}}],[\"公开\",{\"1\":{\"254\":1,\"875\":1}}],[\"公共\",{\"0\":{\"89\":1,\"90\":1,\"91\":1},\"1\":{\"85\":1,\"89\":2,\"90\":3,\"91\":2,\"100\":2,\"748\":1}}],[\"公有\",{\"1\":{\"5\":1,\"36\":1,\"502\":1,\"612\":1,\"703\":1,\"709\":1,\"748\":1,\"752\":5}}],[\"型函数\",{\"1\":{\"735\":1}}],[\"型常\",{\"1\":{\"688\":1}}],[\"型\",{\"0\":{\"515\":1,\"648\":1,\"762\":1},\"1\":{\"85\":1,\"372\":1,\"379\":1,\"509\":1,\"522\":1,\"535\":16,\"583\":1,\"600\":1,\"612\":2,\"632\":3,\"633\":6,\"640\":2,\"642\":2,\"648\":1,\"665\":1,\"666\":1,\"671\":4,\"681\":1,\"738\":1,\"759\":1,\"798\":2,\"804\":6,\"810\":7}}],[\"计数\",{\"1\":{\"461\":1,\"635\":1,\"837\":1}}],[\"计数器\",{\"1\":{\"85\":3,\"137\":3}}],[\"计划\",{\"1\":{\"390\":1,\"395\":1}}],[\"计算误差\",{\"1\":{\"868\":1}}],[\"计算中心\",{\"1\":{\"399\":1}}],[\"计算公式\",{\"1\":{\"353\":1,\"446\":1}}],[\"计算成本\",{\"1\":{\"233\":1,\"246\":2,\"254\":1,\"293\":1,\"935\":1}}],[\"计算出来\",{\"1\":{\"223\":1,\"226\":1,\"227\":1,\"284\":1}}],[\"计算速度\",{\"1\":{\"222\":2}}],[\"计算机领域\",{\"1\":{\"527\":1}}],[\"计算机网络\",{\"0\":{\"487\":1}}],[\"计算机\",{\"1\":{\"193\":1,\"379\":1,\"398\":1,\"655\":2,\"656\":1,\"685\":1}}],[\"计算机科学\",{\"1\":{\"28\":1}}],[\"计算资源\",{\"1\":{\"62\":1,\"65\":1}}],[\"计算\",{\"0\":{\"295\":1},\"1\":{\"61\":1,\"62\":1,\"64\":1,\"65\":1,\"85\":1,\"153\":3,\"209\":2,\"210\":1,\"211\":1,\"214\":1,\"218\":2,\"222\":1,\"223\":1,\"225\":1,\"226\":2,\"227\":1,\"228\":1,\"234\":1,\"263\":1,\"268\":3,\"270\":2,\"280\":1,\"282\":2,\"284\":2,\"290\":1,\"292\":1,\"295\":1,\"299\":2,\"323\":3,\"348\":2,\"349\":1,\"353\":1,\"364\":1,\"370\":3,\"372\":1,\"379\":1,\"380\":1,\"384\":2,\"386\":2,\"391\":4,\"392\":1,\"394\":1,\"396\":1,\"436\":1,\"451\":1,\"589\":1,\"801\":1,\"807\":1,\"859\":1,\"863\":1,\"864\":1,\"868\":1,\"904\":2,\"922\":2,\"944\":3}}],[\"影响力\",{\"1\":{\"242\":1}}],[\"影响\",{\"1\":{\"82\":1,\"193\":1,\"202\":1,\"300\":1,\"306\":2,\"308\":1,\"322\":1,\"369\":1,\"399\":1,\"419\":1,\"446\":1,\"449\":1,\"586\":1,\"671\":1,\"710\":1,\"745\":1,\"818\":1,\"928\":1,\"938\":2,\"939\":1,\"951\":2}}],[\"\\\"\",{\"1\":{\"82\":22,\"105\":12,\"106\":20,\"114\":36,\"119\":6,\"137\":24,\"138\":28,\"139\":14,\"175\":2,\"186\":4,\"188\":4,\"259\":2,\"304\":6,\"305\":18,\"340\":2,\"528\":4,\"529\":4,\"530\":8,\"531\":8,\"534\":14,\"535\":2,\"545\":34,\"559\":10,\"568\":4,\"583\":2,\"586\":4,\"595\":4,\"599\":2,\"601\":6,\"605\":6,\"606\":10,\"612\":2,\"624\":2,\"625\":4,\"648\":1,\"649\":6,\"666\":4,\"668\":2,\"671\":2,\"684\":4,\"685\":2,\"687\":4,\"688\":6,\"689\":10,\"690\":4,\"692\":2,\"693\":6,\"695\":8,\"696\":10,\"698\":10,\"704\":6,\"706\":6,\"713\":2,\"717\":2,\"722\":14,\"724\":4,\"732\":4,\"745\":6,\"749\":10,\"758\":2,\"759\":8,\"769\":20,\"781\":38,\"793\":12,\"794\":2,\"807\":2,\"816\":2,\"817\":4,\"818\":8,\"827\":4,\"828\":6,\"830\":24,\"833\":2,\"835\":16,\"837\":8,\"840\":4,\"846\":16,\"868\":6,\"929\":24,\"958\":2}}],[\"否则\",{\"1\":{\"81\":1,\"103\":1,\"471\":1,\"529\":1,\"542\":1,\"544\":1,\"556\":1,\"567\":1,\"601\":1,\"606\":1,\"654\":1,\"689\":1,\"707\":1,\"709\":1,\"724\":1,\"735\":1,\"748\":1,\"760\":1,\"818\":1}}],[\"^\",{\"0\":{\"436\":1},\"1\":{\"80\":2,\"174\":2,\"268\":2,\"354\":2,\"356\":1,\"394\":1,\"446\":1,\"449\":1,\"545\":1,\"642\":4,\"811\":8,\"852\":1,\"904\":4,\"907\":1}}],[\"目数\",{\"0\":{\"812\":1,\"814\":1},\"1\":{\"811\":1}}],[\"目前\",{\"1\":{\"221\":1,\"257\":2,\"750\":1,\"869\":1,\"875\":1,\"929\":1}}],[\"目录\",{\"0\":{\"175\":1},\"1\":{\"172\":1,\"175\":1,\"191\":1}}],[\"目的\",{\"1\":{\"80\":1,\"294\":1,\"304\":1,\"311\":1,\"314\":1,\"315\":1,\"349\":1,\"392\":1,\"769\":1,\"859\":1,\"902\":1,\"953\":1,\"957\":1}}],[\"目标\",{\"0\":{\"60\":1,\"231\":1,\"240\":1,\"918\":1},\"1\":{\"25\":2,\"49\":1,\"50\":1,\"55\":2,\"62\":2,\"63\":4,\"64\":1,\"65\":2,\"85\":1,\"193\":1,\"198\":1,\"214\":5,\"242\":2,\"244\":1,\"254\":1,\"259\":1,\"270\":1,\"273\":3,\"284\":1,\"288\":1,\"290\":1,\"308\":1,\"314\":1,\"323\":1,\"344\":3,\"353\":4,\"354\":7,\"355\":3,\"370\":1,\"386\":1,\"392\":1,\"402\":1,\"404\":1,\"405\":1,\"406\":1,\"410\":1,\"411\":1,\"419\":1,\"426\":1,\"427\":1,\"428\":1,\"436\":1,\"534\":1,\"626\":2,\"708\":1,\"736\":1,\"785\":1,\"859\":2,\"862\":2,\"889\":1,\"904\":1,\"906\":1,\"913\":2,\"941\":2,\"953\":1}}],[\"×\",{\"1\":{\"80\":1,\"128\":1,\"196\":1,\"254\":1,\"284\":4,\"353\":1,\"355\":2,\"357\":2,\"361\":3,\"366\":3,\"371\":1,\"372\":3,\"394\":1,\"411\":3,\"417\":2,\"419\":6,\"428\":1,\"446\":1,\"451\":1,\"882\":4,\"883\":3,\"884\":3,\"910\":2,\"922\":2,\"928\":4}}],[\"排斥\",{\"1\":{\"793\":1}}],[\"排在\",{\"1\":{\"690\":1}}],[\"排名\",{\"1\":{\"200\":1,\"202\":2}}],[\"排行榜\",{\"1\":{\"192\":1}}],[\"排列\",{\"0\":{\"124\":1,\"125\":1,\"126\":1},\"1\":{\"110\":3,\"125\":1,\"138\":1,\"314\":2}}],[\"排个序\",{\"1\":{\"100\":1}}],[\"排除\",{\"1\":{\"77\":3,\"417\":1,\"904\":1}}],[\"排序\",{\"0\":{\"133\":1,\"134\":1,\"318\":1,\"466\":1,\"467\":1,\"468\":1,\"469\":1},\"1\":{\"67\":1,\"80\":1,\"93\":1,\"100\":1,\"104\":1,\"122\":1,\"126\":3,\"228\":2,\"303\":3,\"305\":2,\"308\":2,\"312\":1,\"314\":2,\"315\":9,\"318\":1,\"322\":1,\"323\":1,\"355\":2,\"398\":1,\"417\":1,\"457\":2,\"463\":1,\"467\":2,\"468\":2,\"469\":7,\"537\":1,\"545\":1,\"546\":2,\"576\":5,\"695\":1,\"829\":1}}],[\"搜索算法\",{\"1\":{\"406\":1}}],[\"搜索\",{\"0\":{\"91\":1,\"92\":1,\"98\":1},\"1\":{\"73\":2,\"75\":2,\"85\":3,\"91\":1,\"93\":4,\"94\":7,\"95\":6,\"96\":11,\"97\":9,\"99\":3,\"100\":4,\"102\":1,\"125\":1,\"126\":12,\"165\":1,\"211\":1,\"227\":1,\"254\":2,\"374\":1,\"375\":1,\"392\":2,\"406\":1,\"465\":2,\"471\":2,\"485\":1,\"530\":1,\"863\":1}}],[\"怎么办\",{\"0\":{\"852\":1},\"1\":{\"852\":2}}],[\"怎么\",{\"1\":{\"72\":1,\"530\":1}}],[\"叉\",{\"0\":{\"74\":1},\"1\":{\"72\":1,\"193\":1,\"218\":1,\"227\":1}}],[\"求余\",{\"1\":{\"811\":1}}],[\"求解\",{\"1\":{\"806\":1,\"807\":3,\"808\":2,\"813\":1,\"817\":1,\"875\":1}}],[\"求得\",{\"1\":{\"347\":1}}],[\"求和\",{\"1\":{\"223\":1,\"228\":1}}],[\"求值\",{\"1\":{\"106\":1,\"589\":1,\"807\":1}}],[\"求右子\",{\"1\":{\"80\":1}}],[\"求\",{\"0\":{\"917\":1},\"1\":{\"72\":1,\"80\":2,\"82\":1,\"90\":1,\"294\":2,\"332\":1,\"451\":1,\"595\":2,\"601\":3,\"718\":1,\"811\":1,\"868\":1}}],[\"求出\",{\"1\":{\"72\":1,\"81\":1}}],[\"总参\",{\"1\":{\"927\":1}}],[\"总分\",{\"1\":{\"745\":2}}],[\"总用\",{\"1\":{\"717\":1}}],[\"总之\",{\"1\":{\"595\":1,\"666\":1,\"799\":1,\"935\":1}}],[\"总而言之\",{\"1\":{\"372\":1}}],[\"总共\",{\"1\":{\"305\":1,\"425\":1,\"882\":1}}],[\"总数\",{\"1\":{\"282\":1,\"322\":1,\"371\":1,\"562\":1}}],[\"总的来说\",{\"1\":{\"248\":1,\"250\":1,\"257\":1,\"419\":1}}],[\"总体而言\",{\"1\":{\"245\":1,\"246\":1}}],[\"总体\",{\"1\":{\"214\":1,\"249\":1}}],[\"总长度\",{\"1\":{\"138\":1}}],[\"总结\",{\"0\":{\"265\":1,\"312\":1,\"577\":1,\"639\":1,\"741\":1,\"865\":1,\"920\":1,\"935\":1},\"1\":{\"85\":1,\"102\":1,\"125\":1,\"210\":1,\"220\":1,\"257\":1,\"268\":1,\"451\":1,\"529\":1,\"578\":1,\"639\":1,\"769\":1,\"804\":1,\"811\":1,\"897\":1}}],[\"总和\",{\"0\":{\"85\":1,\"113\":1,\"115\":1,\"116\":1},\"1\":{\"85\":2,\"115\":1,\"122\":1,\"153\":2}}],[\"总\",{\"1\":{\"72\":1}}],[\"总是\",{\"1\":{\"30\":1,\"348\":1,\"395\":1,\"583\":1,\"691\":1,\"817\":1,\"939\":1}}],[\"法线\",{\"1\":{\"273\":1,\"334\":1}}],[\"法\",{\"1\":{\"72\":1,\"110\":2,\"218\":1,\"270\":2,\"283\":1,\"957\":1}}],[\"列举\",{\"1\":{\"755\":1}}],[\"列中\",{\"1\":{\"469\":1,\"859\":2}}],[\"列对\",{\"1\":{\"468\":1}}],[\"列字\",{\"1\":{\"462\":1}}],[\"列而\",{\"1\":{\"460\":1}}],[\"列名\",{\"1\":{\"458\":1,\"462\":1,\"468\":1}}],[\"列出\",{\"1\":{\"179\":1,\"755\":1}}],[\"列\",{\"0\":{\"457\":1,\"458\":1,\"459\":1,\"468\":1},\"1\":{\"128\":1,\"457\":1,\"459\":3,\"460\":1,\"461\":1,\"462\":2,\"467\":1,\"468\":1,\"469\":4,\"471\":1,\"690\":1,\"735\":2}}],[\"列表\",{\"0\":{\"554\":1},\"1\":{\"110\":1,\"113\":2,\"126\":5,\"165\":1,\"559\":1,\"729\":1,\"849\":2,\"889\":1}}],[\"列为\",{\"1\":{\"72\":1,\"210\":3}}],[\"列数\",{\"1\":{\"10\":1,\"536\":1,\"848\":1}}],[\"依靠\",{\"1\":{\"370\":1,\"411\":1,\"684\":1}}],[\"依据\",{\"1\":{\"355\":1,\"500\":1}}],[\"依赖\",{\"1\":{\"357\":1,\"370\":3,\"371\":1,\"372\":1,\"436\":1,\"451\":1,\"949\":1}}],[\"依赖性\",{\"1\":{\"246\":1,\"370\":1}}],[\"依赖于\",{\"1\":{\"199\":1,\"222\":1,\"312\":1,\"399\":1,\"955\":1}}],[\"依次\",{\"1\":{\"72\":2,\"96\":2,\"781\":1,\"813\":1,\"827\":1}}],[\"依然\",{\"1\":{\"51\":1,\"254\":1,\"357\":1,\"485\":1,\"940\":3,\"941\":1,\"961\":1}}],[\"入\",{\"1\":{\"654\":1}}],[\"入射\",{\"1\":{\"307\":1}}],[\"入口\",{\"1\":{\"107\":2,\"676\":1,\"735\":4,\"769\":1}}],[\"入队\",{\"1\":{\"72\":2}}],[\"入栈\",{\"1\":{\"71\":3}}],[\"广告\",{\"1\":{\"485\":2}}],[\"广义\",{\"1\":{\"222\":1,\"246\":1,\"308\":1}}],[\"广泛应用\",{\"1\":{\"372\":1}}],[\"广泛\",{\"1\":{\"193\":1,\"242\":1,\"527\":1,\"863\":1}}],[\"广度\",{\"1\":{\"72\":1,\"73\":1,\"75\":1}}],[\"广播\",{\"1\":{\"25\":1}}],[\"辅助\",{\"1\":{\"72\":1,\"386\":1,\"892\":1,\"893\":2,\"928\":1}}],[\"太高\",{\"1\":{\"938\":1,\"951\":1}}],[\"太小\",{\"1\":{\"417\":1}}],[\"太多\",{\"1\":{\"411\":1,\"437\":1,\"955\":1}}],[\"太大\",{\"1\":{\"379\":1,\"449\":1}}],[\"太阳\",{\"1\":{\"375\":1}}],[\"太\",{\"1\":{\"72\":1,\"390\":1}}],[\"太重\",{\"1\":{\"55\":1}}],[\"知乎\",{\"1\":{\"208\":1,\"255\":1,\"256\":1,\"273\":1,\"276\":1,\"303\":1,\"312\":1,\"359\":2,\"367\":1,\"369\":1,\"370\":1,\"392\":2,\"465\":1,\"536\":1,\"862\":2,\"884\":1,\"889\":1,\"891\":1,\"894\":1,\"910\":2,\"936\":1,\"938\":1,\"947\":1,\"951\":1,\"958\":1}}],[\"知识\",{\"0\":{\"350\":1,\"351\":1},\"1\":{\"71\":1,\"174\":1,\"327\":1,\"350\":1,\"354\":4,\"355\":11,\"356\":1,\"358\":1,\"377\":1,\"386\":1}}],[\"知道\",{\"1\":{\"30\":1,\"38\":1,\"137\":1,\"610\":1,\"635\":1,\"769\":1,\"826\":1,\"859\":1}}],[\"压栈\",{\"1\":{\"589\":1}}],[\"压入\",{\"0\":{\"565\":1},\"1\":{\"71\":2,\"106\":1}}],[\"压缩率\",{\"1\":{\"928\":2}}],[\"压缩比\",{\"1\":{\"392\":1}}],[\"压缩\",{\"0\":{\"393\":1,\"925\":1,\"926\":1},\"1\":{\"65\":1,\"293\":1,\"377\":1,\"391\":3,\"395\":1,\"923\":2,\"925\":4,\"928\":1,\"935\":1,\"938\":1}}],[\"尝试\",{\"1\":{\"71\":1,\"354\":1,\"449\":3,\"529\":2}}],[\"顶部\",{\"1\":{\"566\":1,\"567\":1}}],[\"顶行\",{\"1\":{\"311\":1}}],[\"顶点\",{\"1\":{\"222\":1,\"223\":1,\"224\":1,\"225\":4,\"226\":2,\"277\":1,\"280\":1,\"281\":1,\"282\":9,\"283\":1,\"284\":2,\"301\":1,\"303\":1}}],[\"顶\",{\"1\":{\"71\":2,\"106\":1}}],[\"弹\",{\"1\":{\"71\":2,\"106\":1}}],[\"弹出\",{\"0\":{\"566\":1},\"1\":{\"71\":1,\"107\":3,\"566\":2}}],[\"序号\",{\"1\":{\"209\":1,\"210\":5,\"693\":1,\"781\":2}}],[\"序\",{\"1\":{\"70\":1,\"86\":9,\"97\":2}}],[\"序列\",{\"0\":{\"123\":1,\"131\":1,\"145\":1,\"146\":1,\"316\":1},\"1\":{\"34\":1,\"86\":20,\"93\":1,\"96\":1,\"118\":1,\"139\":1,\"146\":1,\"228\":2,\"304\":7,\"314\":5,\"315\":4,\"316\":3,\"318\":1,\"323\":1,\"344\":3,\"379\":3,\"398\":3,\"537\":3,\"648\":1,\"863\":4,\"864\":3}}],[\"举例\",{\"0\":{\"769\":1},\"1\":{\"70\":1,\"304\":1,\"419\":1,\"524\":1,\"583\":1,\"595\":1,\"599\":1,\"601\":1,\"613\":1,\"671\":1,\"672\":1,\"673\":1,\"689\":1,\"690\":2,\"695\":1,\"707\":1,\"709\":1,\"713\":2,\"722\":1,\"724\":1,\"729\":1,\"730\":1,\"739\":1,\"745\":2,\"749\":1,\"759\":1,\"762\":3,\"808\":1,\"827\":1,\"828\":1}}],[\"举个\",{\"1\":{\"20\":1,\"55\":1}}],[\"溢出\",{\"1\":{\"70\":2,\"104\":1,\"691\":1,\"804\":1,\"811\":1}}],[\"栈内\",{\"1\":{\"577\":1}}],[\"栈是\",{\"1\":{\"577\":1}}],[\"栈为\",{\"1\":{\"568\":1}}],[\"栈不为\",{\"1\":{\"71\":2,\"568\":1}}],[\"栈顶\",{\"0\":{\"567\":1},\"1\":{\"71\":5,\"106\":1,\"566\":1,\"567\":1}}],[\"栈\",{\"0\":{\"106\":1,\"563\":1},\"1\":{\"70\":3,\"71\":8,\"72\":1,\"102\":1,\"106\":1,\"563\":8,\"564\":1,\"567\":1,\"570\":1,\"577\":1,\"722\":1}}],[\"终\",{\"1\":{\"103\":1}}],[\"终止\",{\"1\":{\"70\":4,\"72\":1,\"88\":1,\"96\":1,\"99\":1,\"100\":1,\"103\":1,\"110\":1,\"121\":1,\"938\":2}}],[\"终端\",{\"1\":{\"38\":1,\"172\":1,\"175\":2,\"840\":1,\"852\":2}}],[\"明文\",{\"1\":{\"484\":1,\"485\":1}}],[\"明确规定\",{\"1\":{\"467\":1}}],[\"明确\",{\"1\":{\"70\":1,\"254\":1,\"436\":1,\"457\":1}}],[\"明显\",{\"1\":{\"38\":1,\"357\":1,\"938\":1,\"940\":1}}],[\"哪里\",{\"1\":{\"829\":1,\"830\":1}}],[\"哪\",{\"1\":{\"601\":1,\"613\":1,\"708\":1,\"818\":1}}],[\"哪种\",{\"1\":{\"563\":1}}],[\"哪些地方\",{\"1\":{\"126\":1}}],[\"哪些\",{\"0\":{\"480\":1,\"484\":1,\"485\":1},\"1\":{\"70\":1,\"125\":1,\"202\":1,\"307\":2,\"308\":1}}],[\"哪个\",{\"1\":{\"37\":1,\"38\":2,\"203\":1,\"303\":1,\"587\":2,\"612\":1,\"770\":2,\"811\":1}}],[\"缺失\",{\"1\":{\"938\":1,\"959\":1}}],[\"缺省\",{\"1\":{\"563\":2,\"577\":1,\"757\":1,\"793\":1}}],[\"缺乏\",{\"1\":{\"257\":2,\"259\":1,\"315\":2,\"370\":1,\"875\":1}}],[\"缺少\",{\"1\":{\"257\":1}}],[\"缺陷\",{\"1\":{\"69\":1,\"484\":1}}],[\"缺点\",{\"0\":{\"437\":1},\"1\":{\"13\":1,\"20\":1,\"199\":2,\"390\":1,\"451\":1,\"769\":1,\"787\":1,\"788\":1,\"824\":1,\"858\":1,\"912\":2,\"938\":1}}],[\"」\",{\"1\":{\"69\":1,\"86\":4,\"126\":1,\"137\":5,\"174\":1,\"175\":1,\"304\":1,\"476\":13,\"480\":1,\"485\":5,\"811\":1,\"841\":1,\"845\":1,\"875\":1}}],[\"「\",{\"1\":{\"69\":1,\"86\":4,\"126\":1,\"137\":5,\"174\":1,\"175\":1,\"304\":1,\"476\":13,\"480\":1,\"485\":5,\"811\":1,\"841\":1,\"845\":1,\"875\":1}}],[\"充足\",{\"1\":{\"863\":1}}],[\"充分发挥\",{\"1\":{\"859\":1}}],[\"充分考虑\",{\"1\":{\"750\":1}}],[\"充分\",{\"1\":{\"220\":1,\"227\":1,\"358\":1,\"907\":1}}],[\"充分利用\",{\"1\":{\"69\":1,\"222\":1,\"225\":1,\"242\":1,\"245\":1}}],[\"充当\",{\"1\":{\"34\":1,\"195\":1}}],[\"满载\",{\"1\":{\"864\":1,\"922\":1}}],[\"满足条件\",{\"1\":{\"833\":1}}],[\"满足\",{\"1\":{\"113\":1,\"202\":2,\"298\":1,\"304\":1,\"366\":1,\"415\":1,\"500\":1,\"574\":1,\"769\":1,\"833\":1}}],[\"满\",{\"1\":{\"69\":1,\"777\":1}}],[\"满意\",{\"1\":{\"51\":1}}],[\"尤其\",{\"1\":{\"69\":1,\"410\":1}}],[\"$\",{\"1\":{\"69\":2,\"174\":2,\"175\":1,\"191\":9,\"197\":2,\"282\":2,\"292\":2,\"298\":4,\"332\":2,\"338\":2,\"356\":2,\"371\":4,\"394\":2,\"399\":4,\"902\":2,\"905\":4,\"963\":4}}],[\"右向左\",{\"1\":{\"815\":1}}],[\"右向\",{\"1\":{\"815\":1}}],[\"右移\",{\"1\":{\"811\":4}}],[\"右值\",{\"1\":{\"806\":5}}],[\"右端\",{\"1\":{\"595\":1}}],[\"右图\",{\"1\":{\"419\":1}}],[\"右键\",{\"1\":{\"172\":2}}],[\"右开\",{\"1\":{\"103\":1}}],[\"右中\",{\"1\":{\"100\":1}}],[\"右闭\",{\"1\":{\"96\":1,\"538\":1}}],[\"右边\",{\"1\":{\"91\":1,\"595\":1,\"815\":1,\"960\":1}}],[\"右侧\",{\"1\":{\"72\":2,\"97\":1,\"210\":1,\"735\":1}}],[\"右子树\",{\"1\":{\"77\":3}}],[\"右子\",{\"1\":{\"71\":6,\"86\":4,\"93\":3,\"94\":1,\"95\":1,\"97\":8}}],[\"右\",{\"1\":{\"69\":1,\"72\":1,\"76\":1,\"77\":2,\"80\":1,\"85\":2,\"93\":1,\"97\":8,\"98\":1,\"100\":1,\"106\":2,\"589\":1,\"689\":1,\"799\":1,\"805\":1}}],[\"∗\",{\"1\":{\"69\":2,\"394\":2}}],[\"孩子\",{\"1\":{\"69\":2,\"72\":2,\"75\":2,\"85\":5,\"97\":18,\"98\":2,\"110\":1}}],[\"左上角\",{\"1\":{\"959\":1}}],[\"左移\",{\"1\":{\"811\":4}}],[\"左向右\",{\"1\":{\"809\":1,\"815\":2}}],[\"左值\",{\"1\":{\"688\":1,\"806\":3}}],[\"左端\",{\"1\":{\"598\":1}}],[\"左开\",{\"1\":{\"538\":1}}],[\"左面\",{\"1\":{\"97\":3}}],[\"左闭\",{\"1\":{\"96\":1,\"103\":1}}],[\"左边\",{\"1\":{\"91\":1,\"97\":2,\"633\":1,\"661\":1,\"740\":1,\"811\":1,\"940\":1,\"960\":1}}],[\"左下角\",{\"0\":{\"84\":1}}],[\"左侧\",{\"1\":{\"83\":1,\"97\":2,\"311\":1,\"806\":1}}],[\"左右\",{\"1\":{\"72\":1,\"75\":1,\"77\":1,\"81\":1,\"82\":1,\"85\":1,\"86\":1,\"89\":2,\"90\":1,\"97\":5,\"137\":1,\"298\":1}}],[\"左子树\",{\"1\":{\"77\":3,\"93\":1}}],[\"左子\",{\"1\":{\"71\":7,\"80\":1,\"81\":1,\"86\":4,\"93\":2,\"94\":1,\"95\":1,\"97\":9}}],[\"左\",{\"0\":{\"83\":1},\"1\":{\"69\":1,\"76\":1,\"77\":2,\"83\":3,\"85\":2,\"93\":1,\"94\":1,\"97\":10,\"98\":1,\"100\":2,\"105\":1,\"106\":3,\"589\":1,\"666\":1,\"689\":1,\"803\":1,\"811\":1,\"815\":2,\"958\":1}}],[\"手\",{\"1\":{\"485\":1}}],[\"手动\",{\"1\":{\"423\":1,\"707\":2,\"801\":1,\"844\":1,\"852\":1}}],[\"手段\",{\"1\":{\"402\":1}}],[\"手臂\",{\"1\":{\"398\":1}}],[\"手柄\",{\"1\":{\"311\":1}}],[\"手册\",{\"1\":{\"69\":1,\"71\":1,\"503\":1}}],[\"手工\",{\"0\":{\"60\":1},\"1\":{\"55\":1,\"228\":1}}],[\"树来\",{\"1\":{\"227\":2}}],[\"树结构\",{\"1\":{\"218\":3}}],[\"树形\",{\"1\":{\"126\":1,\"748\":1}}],[\"树呢\",{\"1\":{\"99\":1}}],[\"树头\",{\"1\":{\"97\":1}}],[\"树中\",{\"1\":{\"94\":1,\"95\":3,\"96\":2,\"97\":6,\"100\":1,\"168\":1}}],[\"树根\",{\"1\":{\"94\":1,\"95\":1}}],[\"树为\",{\"1\":{\"94\":1,\"95\":1,\"96\":1,\"97\":4}}],[\"树时\",{\"1\":{\"93\":1}}],[\"树行\",{\"1\":{\"72\":1}}],[\"树入\",{\"1\":{\"71\":2}}],[\"树不为\",{\"1\":{\"71\":2,\"93\":2,\"94\":1,\"95\":1}}],[\"树\",{\"0\":{\"74\":1,\"78\":1,\"91\":1,\"92\":1,\"98\":1},\"1\":{\"69\":1,\"71\":10,\"72\":1,\"80\":2,\"81\":3,\"86\":8,\"88\":3,\"93\":7,\"94\":3,\"95\":2,\"96\":8,\"97\":17,\"99\":2,\"100\":4,\"110\":1,\"193\":1,\"218\":1,\"227\":3,\"503\":1}}],[\"树上\",{\"1\":{\"38\":1,\"93\":2,\"126\":1}}],[\"二位\",{\"1\":{\"648\":1}}],[\"二义性\",{\"1\":{\"595\":1,\"676\":1}}],[\"二者\",{\"1\":{\"398\":1,\"525\":1,\"710\":1}}],[\"二面角\",{\"1\":{\"305\":1}}],[\"二十面\",{\"1\":{\"223\":1}}],[\"二值化\",{\"1\":{\"223\":1}}],[\"二元\",{\"1\":{\"218\":1,\"353\":1,\"354\":2,\"355\":1}}],[\"二\",{\"1\":{\"174\":1,\"350\":1,\"545\":1,\"862\":1,\"915\":1}}],[\"二分\",{\"1\":{\"102\":2,\"199\":1,\"200\":1}}],[\"二分法\",{\"1\":{\"94\":1,\"96\":1}}],[\"二叉\",{\"0\":{\"91\":1,\"92\":1,\"98\":1},\"1\":{\"81\":1,\"93\":5,\"94\":5,\"95\":6,\"96\":11,\"97\":7,\"99\":3,\"100\":4}}],[\"二叉树\",{\"0\":{\"68\":1,\"73\":1,\"75\":1,\"76\":1,\"77\":1,\"80\":1,\"81\":1,\"82\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"100\":1,\"109\":1},\"1\":{\"67\":1,\"69\":9,\"70\":3,\"71\":7,\"72\":10,\"80\":2,\"81\":5,\"82\":1,\"83\":1,\"85\":6,\"86\":26,\"89\":2,\"91\":2,\"93\":4,\"94\":2,\"95\":1,\"100\":3,\"503\":1}}],[\"二维\",{\"1\":{\"72\":1,\"102\":2,\"208\":2,\"221\":1,\"223\":1,\"228\":2,\"235\":1,\"290\":2,\"305\":1,\"331\":1,\"536\":1,\"682\":1,\"690\":4,\"837\":1}}],[\"二进制\",{\"0\":{\"782\":1},\"1\":{\"23\":1,\"246\":1,\"354\":1,\"626\":1,\"633\":3,\"782\":4,\"785\":3,\"788\":1,\"793\":5,\"811\":1}}],[\"滑动\",{\"0\":{\"107\":1,\"136\":1},\"1\":{\"67\":1,\"102\":2,\"107\":2,\"137\":1,\"411\":1}}],[\"创造\",{\"1\":{\"639\":1,\"924\":1}}],[\"创新\",{\"0\":{\"65\":1,\"276\":1,\"952\":1},\"1\":{\"225\":1,\"419\":1,\"958\":1}}],[\"创建对象\",{\"1\":{\"720\":1}}],[\"创建\",{\"0\":{\"96\":1,\"165\":1,\"179\":1,\"184\":1,\"549\":1},\"1\":{\"4\":2,\"5\":4,\"8\":2,\"11\":2,\"22\":1,\"27\":1,\"35\":1,\"36\":1,\"46\":1,\"95\":1,\"96\":2,\"102\":1,\"170\":4,\"172\":1,\"305\":1,\"307\":1,\"492\":1,\"502\":4,\"536\":1,\"538\":3,\"545\":1,\"548\":1,\"570\":1,\"612\":1}}],[\"视差\",{\"1\":{\"298\":1}}],[\"视角\",{\"1\":{\"260\":4,\"261\":2,\"262\":2,\"288\":1,\"290\":1,\"342\":1}}],[\"视锥\",{\"0\":{\"235\":1},\"1\":{\"232\":1,\"235\":1,\"290\":1}}],[\"视点\",{\"1\":{\"228\":2,\"245\":1,\"246\":1,\"300\":2}}],[\"视作\",{\"1\":{\"209\":1}}],[\"视为\",{\"1\":{\"202\":1,\"224\":1,\"263\":1,\"301\":1,\"344\":2,\"398\":5}}],[\"视觉污染\",{\"1\":{\"485\":1}}],[\"视觉\",{\"1\":{\"193\":1,\"370\":1,\"372\":1,\"379\":3,\"380\":1,\"396\":1,\"398\":2}}],[\"视图\",{\"0\":{\"217\":1,\"233\":1},\"1\":{\"72\":1,\"216\":1,\"217\":9,\"228\":4,\"232\":1,\"233\":2,\"234\":1,\"244\":1,\"245\":6,\"247\":3,\"262\":2,\"263\":4,\"265\":1,\"268\":10,\"298\":4,\"300\":1,\"332\":6}}],[\"视场\",{\"1\":{\"64\":1}}],[\"视频\",{\"1\":{\"53\":1,\"246\":1,\"423\":1}}],[\"抗干扰能力\",{\"1\":{\"63\":1}}],[\"位\",{\"1\":{\"633\":1,\"663\":2,\"722\":1,\"793\":1,\"804\":1,\"805\":1,\"811\":3}}],[\"位数\",{\"1\":{\"633\":1}}],[\"位移\",{\"1\":{\"384\":1}}],[\"位姿\",{\"1\":{\"290\":1}}],[\"位于\",{\"1\":{\"63\":1,\"223\":1,\"226\":1,\"469\":1,\"471\":1}}],[\"位置\",{\"0\":{\"915\":1},\"1\":{\"43\":1,\"53\":1,\"95\":1,\"97\":8,\"102\":1,\"128\":1,\"137\":2,\"138\":2,\"172\":1,\"209\":2,\"210\":6,\"220\":2,\"222\":4,\"227\":2,\"228\":1,\"235\":1,\"245\":1,\"265\":1,\"268\":1,\"282\":3,\"283\":1,\"284\":3,\"290\":5,\"322\":5,\"332\":2,\"344\":1,\"371\":2,\"372\":4,\"398\":2,\"410\":1,\"411\":1,\"461\":1,\"471\":1,\"522\":1,\"534\":3,\"539\":4,\"540\":1,\"541\":3,\"544\":1,\"545\":2,\"559\":3,\"574\":3,\"575\":1,\"583\":2,\"589\":1,\"590\":1,\"621\":1,\"672\":1,\"684\":1,\"793\":2,\"816\":1,\"829\":6,\"830\":4,\"887\":1,\"961\":2}}],[\"平差法\",{\"1\":{\"894\":1}}],[\"平\",{\"1\":{\"299\":1}}],[\"平稳\",{\"1\":{\"246\":1}}],[\"平面\",{\"1\":{\"245\":2,\"290\":2,\"299\":1,\"342\":1,\"423\":1}}],[\"平行\",{\"1\":{\"228\":1,\"583\":1,\"620\":1}}],[\"平滑\",{\"1\":{\"226\":1,\"294\":1,\"399\":2,\"891\":1,\"892\":1,\"893\":1}}],[\"平移\",{\"1\":{\"222\":1,\"260\":1,\"301\":1,\"303\":1,\"413\":1,\"863\":1}}],[\"平均法\",{\"1\":{\"218\":1}}],[\"平均\",{\"1\":{\"195\":1,\"214\":9,\"223\":2,\"225\":1,\"229\":2,\"246\":1,\"249\":1,\"270\":1,\"306\":1,\"310\":1,\"347\":6,\"745\":1,\"873\":1,\"882\":2,\"884\":2,\"891\":4}}],[\"平均值\",{\"1\":{\"72\":2,\"227\":1,\"300\":1,\"308\":1,\"451\":2,\"848\":3,\"868\":1}}],[\"平方\",{\"1\":{\"102\":1,\"379\":1,\"386\":1,\"863\":1,\"904\":1}}],[\"平衡\",{\"0\":{\"81\":1},\"1\":{\"63\":1,\"81\":2,\"96\":1,\"227\":1,\"254\":1,\"386\":1,\"429\":1}}],[\"平台\",{\"1\":{\"62\":1,\"65\":1}}],[\"需用\",{\"1\":{\"825\":1}}],[\"需\",{\"1\":{\"347\":2,\"349\":1,\"370\":1,\"476\":1,\"484\":1,\"573\":1,\"701\":2,\"745\":1}}],[\"需求量\",{\"1\":{\"370\":1}}],[\"需求\",{\"0\":{\"63\":1},\"1\":{\"184\":1,\"366\":1,\"415\":1}}],[\"需要\",{\"0\":{\"182\":1},\"1\":{\"5\":2,\"8\":2,\"10\":3,\"13\":3,\"17\":2,\"19\":1,\"25\":1,\"27\":1,\"28\":1,\"30\":2,\"34\":1,\"35\":1,\"38\":3,\"39\":1,\"55\":4,\"63\":2,\"69\":1,\"70\":2,\"72\":1,\"75\":1,\"85\":10,\"86\":1,\"94\":2,\"99\":1,\"103\":3,\"112\":1,\"125\":1,\"170\":1,\"172\":2,\"184\":1,\"186\":1,\"199\":1,\"202\":1,\"209\":1,\"210\":2,\"220\":1,\"226\":1,\"229\":1,\"237\":1,\"243\":1,\"250\":3,\"254\":3,\"259\":2,\"260\":1,\"282\":1,\"290\":1,\"306\":1,\"342\":2,\"357\":1,\"366\":2,\"370\":1,\"372\":1,\"384\":3,\"386\":1,\"390\":1,\"391\":3,\"392\":1,\"394\":1,\"406\":2,\"409\":1,\"415\":1,\"464\":1,\"471\":1,\"476\":2,\"484\":1,\"492\":1,\"500\":1,\"502\":2,\"530\":1,\"541\":1,\"566\":2,\"589\":3,\"595\":1,\"598\":1,\"606\":1,\"612\":1,\"614\":1,\"617\":1,\"621\":1,\"668\":1,\"690\":1,\"693\":1,\"695\":2,\"705\":1,\"707\":2,\"714\":1,\"717\":2,\"721\":1,\"729\":5,\"730\":1,\"745\":1,\"748\":1,\"750\":1,\"751\":1,\"766\":1,\"769\":3,\"775\":1,\"776\":1,\"778\":1,\"781\":1,\"785\":1,\"801\":1,\"824\":2,\"854\":2,\"855\":2,\"858\":1,\"860\":1,\"863\":1,\"864\":1,\"875\":1,\"902\":1,\"904\":1,\"912\":1,\"922\":1,\"928\":1,\"935\":2,\"938\":1,\"940\":2,\"941\":1,\"957\":1,\"959\":2}}],[\"冗余\",{\"1\":{\"62\":1,\"65\":1,\"398\":1,\"750\":1,\"925\":1}}],[\"旋转\",{\"1\":{\"62\":1,\"65\":1,\"105\":1,\"220\":1,\"222\":4,\"223\":3,\"225\":2,\"228\":2,\"233\":1,\"260\":1,\"301\":1,\"303\":1}}],[\"长方体\",{\"1\":{\"718\":1}}],[\"长双\",{\"1\":{\"633\":1,\"644\":1}}],[\"长期\",{\"1\":{\"612\":1}}],[\"长\",{\"1\":{\"348\":1,\"417\":1,\"633\":1,\"642\":2}}],[\"长程\",{\"1\":{\"246\":1,\"370\":2,\"371\":2,\"372\":1}}],[\"长距离\",{\"1\":{\"242\":1,\"370\":1}}],[\"长度\",{\"0\":{\"690\":1},\"1\":{\"72\":1,\"102\":1,\"103\":1,\"137\":1,\"139\":6,\"146\":1,\"228\":1,\"347\":3,\"348\":4,\"349\":1,\"379\":3,\"386\":1,\"390\":1,\"534\":1,\"662\":1,\"682\":4,\"683\":1,\"684\":4,\"685\":3,\"690\":2,\"693\":3,\"696\":2,\"804\":1,\"824\":2,\"828\":1,\"830\":1,\"863\":4,\"929\":2,\"959\":2}}],[\"长宽\",{\"1\":{\"62\":1,\"65\":1,\"411\":2,\"413\":1,\"718\":2}}],[\"长时间\",{\"1\":{\"19\":2}}],[\"密切相关\",{\"1\":{\"312\":2}}],[\"密集点\",{\"1\":{\"245\":1}}],[\"密集\",{\"1\":{\"63\":2,\"218\":2,\"246\":4,\"259\":1,\"344\":1,\"370\":1,\"379\":1,\"380\":1,\"423\":1,\"426\":1,\"436\":1,\"935\":1}}],[\"密度梯度\",{\"1\":{\"904\":3,\"909\":1}}],[\"密度估计\",{\"1\":{\"222\":1}}],[\"密度\",{\"0\":{\"915\":1},\"1\":{\"62\":1,\"64\":1,\"65\":1,\"193\":2,\"194\":1,\"222\":3,\"320\":1,\"325\":1,\"869\":1,\"917\":1,\"959\":1}}],[\"密码\",{\"1\":{\"10\":5,\"186\":4}}],[\"难求\",{\"1\":{\"903\":1}}],[\"难度\",{\"0\":{\"150\":1},\"1\":{\"260\":1,\"355\":3}}],[\"难点\",{\"0\":{\"64\":1},\"1\":{\"65\":1,\"104\":1,\"193\":1,\"355\":1}}],[\"难\",{\"1\":{\"61\":1}}],[\"难以克服\",{\"1\":{\"370\":1}}],[\"难以\",{\"1\":{\"60\":1,\"221\":1,\"322\":1,\"788\":1,\"893\":1}}],[\"适配器\",{\"1\":{\"563\":1,\"577\":1}}],[\"适合\",{\"1\":{\"69\":1,\"72\":1,\"234\":1,\"245\":1}}],[\"适应能力\",{\"1\":{\"63\":1}}],[\"适应\",{\"1\":{\"61\":1,\"193\":2,\"194\":1,\"211\":2,\"228\":1,\"245\":1,\"246\":1,\"369\":1,\"370\":2,\"371\":1,\"372\":1}}],[\"适用\",{\"1\":{\"28\":1,\"60\":1,\"198\":1,\"246\":1,\"262\":1,\"534\":1,\"600\":1,\"757\":1,\"938\":1,\"952\":1}}],[\"易读性\",{\"1\":{\"769\":1}}],[\"易\",{\"1\":{\"61\":1,\"953\":1}}],[\"易虚警\",{\"1\":{\"60\":1}}],[\"易懂\",{\"1\":{\"44\":1,\"938\":1}}],[\"弱\",{\"1\":{\"60\":1,\"61\":1}}],[\"瓶颈\",{\"1\":{\"60\":1,\"61\":1}}],[\"现用\",{\"1\":{\"769\":1}}],[\"现场\",{\"1\":{\"609\":1}}],[\"现象\",{\"1\":{\"379\":1,\"399\":1,\"528\":1}}],[\"现实\",{\"1\":{\"193\":1}}],[\"现\",{\"1\":{\"137\":1}}],[\"现有\",{\"1\":{\"64\":2,\"197\":1,\"199\":2,\"222\":1,\"228\":1,\"234\":1,\"235\":1,\"242\":2,\"250\":1,\"254\":3,\"436\":1,\"793\":1}}],[\"现状\",{\"0\":{\"59\":1}}],[\"现在\",{\"1\":{\"20\":1,\"43\":1,\"182\":1,\"210\":1,\"290\":1,\"379\":2,\"613\":1,\"616\":1,\"829\":1,\"875\":1,\"941\":1,\"944\":2}}],[\"飞机\",{\"1\":{\"58\":1}}],[\"舰船\",{\"1\":{\"58\":1}}],[\"机密性\",{\"1\":{\"485\":1}}],[\"机\",{\"1\":{\"404\":1}}],[\"机器人\",{\"1\":{\"193\":1}}],[\"机器\",{\"0\":{\"60\":1},\"1\":{\"184\":1,\"228\":1,\"348\":1}}],[\"机场\",{\"1\":{\"58\":1,\"63\":1,\"245\":1,\"246\":1}}],[\"机制\",{\"0\":{\"26\":1},\"1\":{\"10\":1,\"22\":2,\"25\":1,\"26\":1,\"27\":2,\"51\":2,\"193\":2,\"194\":2,\"195\":1,\"199\":1,\"201\":1,\"254\":2,\"357\":1,\"370\":3,\"399\":2,\"436\":1,\"449\":1,\"485\":1,\"492\":4,\"623\":1,\"701\":1,\"747\":1,\"748\":1,\"882\":1,\"935\":1}}],[\"z2\",{\"1\":{\"961\":1}}],[\"zt\",{\"1\":{\"867\":5}}],[\"zz\",{\"1\":{\"852\":1}}],[\"zy\",{\"1\":{\"845\":1}}],[\"zi\",{\"1\":{\"353\":2,\"913\":1}}],[\"zj\",{\"1\":{\"353\":1}}],[\"zaheer\",{\"1\":{\"220\":1}}],[\"zn\",{\"1\":{\"203\":1}}],[\"z1\",{\"1\":{\"203\":1,\"961\":1,\"963\":2}}],[\"zl\",{\"1\":{\"201\":1}}],[\"z\",{\"1\":{\"196\":1,\"200\":1,\"202\":2,\"203\":1,\"318\":1,\"399\":1,\"446\":1,\"469\":2,\"587\":2,\"615\":3,\"647\":2,\"867\":3,\"869\":7,\"901\":3,\"903\":2,\"904\":1,\"905\":1,\"953\":1,\"958\":5,\"959\":4}}],[\"zero\",{\"1\":{\"170\":1,\"857\":1,\"858\":1,\"876\":1,\"889\":2}}],[\"zoukankan\",{\"1\":{\"166\":1}}],[\"zq\",{\"1\":{\"56\":1}}],[\"zp\",{\"1\":{\"56\":1}}],[\"zhu\",{\"1\":{\"342\":1}}],[\"zhao\",{\"1\":{\"228\":1}}],[\"zhang\",{\"1\":{\"223\":1,\"758\":1}}],[\"zhihu\",{\"1\":{\"208\":1,\"255\":1,\"256\":1,\"273\":1,\"276\":1,\"303\":1,\"312\":1,\"359\":2,\"367\":1,\"369\":1,\"370\":1,\"392\":2,\"465\":1,\"536\":1,\"862\":2,\"884\":1,\"889\":1,\"891\":1,\"894\":1,\"910\":2,\"936\":1,\"938\":1,\"947\":1,\"951\":1,\"958\":1}}],[\"zh\",{\"1\":{\"41\":2}}],[\"yam\",{\"1\":{\"957\":1}}],[\"yang\",{\"1\":{\"217\":1,\"910\":2,\"911\":2}}],[\"y0\",{\"1\":{\"907\":1,\"908\":1}}],[\"yref\",{\"1\":{\"862\":1}}],[\"yt\",{\"1\":{\"908\":1,\"909\":1}}],[\"ytar\",{\"1\":{\"862\":1}}],[\"yticklabels\",{\"1\":{\"837\":2}}],[\"y2\",{\"1\":{\"451\":3}}],[\"yolact\",{\"1\":{\"402\":1}}],[\"yolo\",{\"1\":{\"402\":1}}],[\"yourself\",{\"1\":{\"856\":1}}],[\"your\",{\"1\":{\"179\":1}}],[\"you\",{\"1\":{\"82\":1,\"191\":2,\"856\":1}}],[\"yw1\",{\"1\":{\"399\":1}}],[\"yj\",{\"1\":{\"395\":2}}],[\"yeam\",{\"1\":{\"757\":1}}],[\"year\",{\"1\":{\"606\":4,\"637\":1}}],[\"years\",{\"1\":{\"261\":1}}],[\"yet\",{\"1\":{\"427\":1}}],[\"yes\",{\"1\":{\"186\":1,\"689\":2}}],[\"yn\",{\"1\":{\"203\":1}}],[\"y1\",{\"1\":{\"203\":1}}],[\"y\",{\"1\":{\"196\":1,\"203\":1,\"290\":2,\"299\":1,\"363\":1,\"364\":1,\"366\":2,\"371\":1,\"372\":1,\"399\":2,\"411\":1,\"413\":1,\"451\":20,\"587\":2,\"600\":2,\"606\":2,\"615\":3,\"654\":6,\"682\":1,\"738\":6,\"740\":2,\"801\":3,\"817\":3,\"854\":2,\"855\":2,\"892\":1,\"907\":1,\"944\":3,\"947\":4}}],[\"yq\",{\"1\":{\"56\":1}}],[\"yp\",{\"1\":{\"56\":1}}],[\"≤\",{\"1\":{\"56\":3,\"366\":1,\"435\":1}}],[\"−\",{\"1\":{\"56\":3,\"69\":1,\"201\":1,\"290\":1,\"298\":2,\"304\":2,\"332\":1,\"334\":1,\"338\":1,\"347\":2,\"348\":3,\"349\":9,\"354\":1,\"355\":2,\"356\":2,\"357\":1,\"371\":3,\"399\":1,\"446\":2,\"451\":6,\"633\":3,\"862\":1,\"867\":18,\"869\":96,\"896\":2,\"897\":33,\"899\":1,\"900\":11,\"901\":2,\"903\":1,\"904\":10,\"917\":8,\"918\":1,\"940\":1,\"947\":3}}],[\"∣\",{\"1\":{\"56\":6,\"298\":4,\"304\":4,\"349\":6,\"354\":4,\"399\":1,\"451\":11,\"869\":5,\"897\":7,\"904\":31,\"944\":1,\"947\":4}}],[\"​\",{\"1\":{\"56\":8,\"72\":3,\"197\":4,\"201\":2,\"202\":1,\"203\":20,\"278\":1,\"280\":2,\"281\":1,\"282\":38,\"283\":3,\"284\":7,\"290\":6,\"292\":3,\"298\":5,\"323\":4,\"332\":15,\"334\":2,\"338\":10,\"342\":4,\"347\":9,\"348\":5,\"349\":17,\"350\":3,\"353\":10,\"354\":6,\"355\":4,\"356\":2,\"357\":1,\"363\":5,\"364\":6,\"366\":5,\"371\":13,\"372\":19,\"394\":14,\"395\":31,\"399\":30,\"435\":2,\"451\":63,\"583\":4,\"587\":2,\"589\":6,\"598\":1,\"599\":1,\"612\":3,\"621\":1,\"623\":1,\"624\":2,\"625\":1,\"626\":1,\"633\":1,\"634\":1,\"635\":2,\"637\":1,\"649\":6,\"650\":1,\"654\":3,\"658\":3,\"659\":2,\"661\":4,\"665\":1,\"668\":3,\"670\":6,\"672\":1,\"676\":3,\"682\":1,\"683\":1,\"692\":2,\"693\":5,\"694\":1,\"695\":10,\"698\":3,\"704\":1,\"706\":1,\"707\":1,\"708\":2,\"709\":2,\"712\":1,\"714\":21,\"717\":2,\"718\":1,\"719\":1,\"720\":1,\"721\":2,\"726\":1,\"728\":2,\"730\":2,\"732\":1,\"735\":1,\"738\":1,\"739\":1,\"744\":2,\"745\":2,\"755\":8,\"757\":1,\"759\":1,\"761\":1,\"769\":55,\"770\":11,\"777\":2,\"780\":1,\"781\":3,\"782\":10,\"785\":2,\"793\":1,\"798\":1,\"799\":2,\"801\":2,\"809\":8,\"810\":1,\"816\":4,\"817\":5,\"818\":14,\"819\":4,\"825\":15,\"826\":20,\"830\":5,\"862\":6,\"867\":53,\"869\":246,\"882\":2,\"884\":3,\"896\":11,\"897\":127,\"899\":12,\"900\":92,\"901\":12,\"902\":2,\"903\":7,\"904\":87,\"907\":2,\"913\":7,\"917\":33,\"918\":11,\"938\":1,\"940\":1,\"941\":1,\"944\":4,\"947\":16,\"951\":1,\"961\":6,\"963\":2}}],[\"首字\",{\"1\":{\"657\":1}}],[\"首部\",{\"1\":{\"581\":1,\"585\":1,\"586\":1,\"590\":1,\"597\":1,\"598\":1,\"718\":1,\"719\":1,\"769\":2}}],[\"首\",{\"1\":{\"541\":1,\"676\":1,\"690\":1,\"712\":2}}],[\"首尾\",{\"1\":{\"537\":1}}],[\"首次\",{\"1\":{\"257\":1}}],[\"首个\",{\"1\":{\"55\":1,\"370\":1}}],[\"首先\",{\"1\":{\"10\":1,\"45\":1,\"51\":1,\"77\":1,\"89\":1,\"97\":1,\"171\":1,\"209\":1,\"210\":2,\"217\":1,\"218\":1,\"220\":1,\"225\":2,\"227\":1,\"228\":3,\"232\":1,\"234\":1,\"235\":1,\"242\":1,\"245\":4,\"246\":3,\"282\":1,\"284\":1,\"303\":1,\"366\":1,\"380\":1,\"386\":1,\"402\":2,\"404\":1,\"408\":1,\"410\":1,\"417\":1,\"449\":1,\"529\":1,\"859\":1,\"887\":1,\"940\":1}}],[\"子类\",{\"1\":{\"701\":1,\"748\":5}}],[\"子句\",{\"0\":{\"471\":1,\"472\":1},\"1\":{\"467\":9,\"469\":1,\"471\":5,\"818\":6}}],[\"子集\",{\"0\":{\"120\":1,\"121\":1,\"122\":1},\"1\":{\"110\":2,\"222\":2,\"244\":1,\"249\":1,\"315\":1,\"386\":2,\"391\":2,\"394\":2,\"545\":1}}],[\"子串\",{\"0\":{\"137\":1,\"139\":1},\"1\":{\"102\":1,\"118\":1,\"137\":7,\"138\":7,\"139\":6}}],[\"子树移\",{\"1\":{\"97\":1}}],[\"子树均\",{\"1\":{\"97\":1}}],[\"子树\",{\"0\":{\"79\":1},\"1\":{\"71\":1,\"81\":2,\"82\":1,\"89\":1,\"97\":1}}],[\"子\",{\"0\":{\"123\":1,\"131\":1,\"153\":1},\"1\":{\"55\":1,\"82\":1,\"86\":1,\"93\":2,\"97\":2,\"102\":1,\"103\":1,\"137\":2,\"139\":1,\"208\":2,\"222\":1,\"223\":1,\"225\":1,\"227\":2,\"228\":2,\"246\":2,\"254\":1,\"256\":1,\"288\":1,\"372\":1,\"391\":1,\"395\":1,\"748\":2,\"958\":1}}],[\"球形\",{\"1\":{\"227\":1,\"244\":1,\"245\":1}}],[\"球谐\",{\"1\":{\"222\":1}}],[\"球\",{\"1\":{\"222\":2,\"223\":1,\"228\":1}}],[\"球面表示\",{\"1\":{\"245\":1}}],[\"球面\",{\"1\":{\"222\":4,\"223\":4,\"227\":1,\"245\":1}}],[\"球体\",{\"1\":{\"222\":3}}],[\"球员\",{\"1\":{\"55\":2}}],[\"球拍\",{\"1\":{\"55\":3}}],[\"瑕疵\",{\"1\":{\"55\":1}}],[\"打小\",{\"1\":{\"406\":1}}],[\"打成\",{\"1\":{\"379\":1}}],[\"打佬虎\",{\"1\":{\"359\":1}}],[\"打印\",{\"1\":{\"174\":1,\"624\":1,\"666\":2,\"785\":2}}],[\"打\",{\"1\":{\"55\":1}}],[\"打开\",{\"0\":{\"792\":1,\"793\":1},\"1\":{\"28\":2,\"38\":2,\"172\":1,\"174\":1,\"175\":1,\"781\":12,\"782\":2,\"793\":29}}],[\"切成\",{\"1\":{\"849\":1}}],[\"切分\",{\"1\":{\"398\":1}}],[\"切线\",{\"1\":{\"245\":2}}],[\"切\",{\"1\":{\"226\":2,\"245\":1}}],[\"切出\",{\"1\":{\"118\":1}}],[\"切割\",{\"1\":{\"110\":2,\"849\":3}}],[\"切片\",{\"1\":{\"64\":1,\"372\":1}}],[\"切回\",{\"1\":{\"55\":1}}],[\"切换\",{\"1\":{\"55\":1}}],[\"精巧\",{\"1\":{\"938\":1,\"951\":1}}],[\"精心设计\",{\"1\":{\"750\":1}}],[\"精度\",{\"1\":{\"63\":1,\"193\":1,\"214\":8,\"217\":1,\"245\":1,\"337\":1,\"342\":3,\"370\":1,\"390\":1,\"633\":2,\"644\":1}}],[\"精准\",{\"1\":{\"63\":1}}],[\"精细化\",{\"1\":{\"938\":1}}],[\"精细\",{\"1\":{\"55\":1,\"64\":1,\"220\":1,\"250\":1,\"277\":2,\"327\":1,\"337\":1,\"423\":1}}],[\"精确\",{\"1\":{\"53\":1,\"199\":1,\"214\":1,\"250\":1,\"419\":1}}],[\"根\",{\"1\":{\"69\":1,\"71\":3,\"72\":1,\"73\":1,\"82\":1,\"85\":1,\"86\":10,\"93\":3,\"95\":1,\"96\":1,\"97\":2,\"227\":3}}],[\"根本\",{\"1\":{\"55\":1,\"745\":1}}],[\"根据\",{\"0\":{\"836\":1},\"1\":{\"4\":1,\"11\":1,\"30\":1,\"38\":1,\"44\":2,\"86\":1,\"89\":1,\"91\":1,\"93\":1,\"94\":2,\"96\":1,\"97\":2,\"103\":1,\"184\":1,\"193\":1,\"194\":1,\"198\":1,\"205\":1,\"210\":2,\"219\":1,\"221\":1,\"223\":2,\"225\":1,\"227\":1,\"228\":1,\"232\":1,\"237\":1,\"243\":1,\"244\":1,\"282\":1,\"284\":1,\"308\":2,\"312\":1,\"314\":1,\"318\":1,\"332\":1,\"375\":1,\"400\":1,\"410\":1,\"446\":1,\"471\":1,\"559\":1,\"590\":1,\"599\":1,\"600\":1,\"601\":1,\"609\":1,\"610\":1,\"682\":1,\"684\":1,\"713\":1,\"729\":1,\"748\":1,\"769\":1,\"776\":1,\"785\":1,\"817\":1,\"818\":1,\"824\":1,\"832\":1,\"837\":1,\"867\":1,\"869\":1,\"884\":1,\"887\":1,\"915\":1,\"949\":1,\"958\":1,\"961\":1}}],[\"员配\",{\"1\":{\"55\":1}}],[\"规定\",{\"1\":{\"374\":1,\"601\":1,\"684\":1,\"703\":1}}],[\"规则化\",{\"1\":{\"904\":1}}],[\"规则性\",{\"1\":{\"211\":1}}],[\"规则\",{\"0\":{\"657\":1},\"1\":{\"86\":4,\"110\":3,\"128\":1,\"223\":2,\"370\":1,\"374\":1,\"375\":2,\"398\":1,\"563\":1,\"586\":1,\"689\":1,\"755\":1}}],[\"规模\",{\"1\":{\"55\":1,\"325\":1,\"599\":2,\"707\":2}}],[\"规范化\",{\"1\":{\"645\":1}}],[\"规范\",{\"1\":{\"49\":1,\"247\":1}}],[\"慢\",{\"1\":{\"55\":1}}],[\"工业界\",{\"1\":{\"242\":1}}],[\"工程\",{\"1\":{\"65\":1,\"211\":1}}],[\"工具\",{\"1\":{\"55\":7,\"174\":1,\"527\":1,\"705\":2}}],[\"工作\",{\"0\":{\"877\":1,\"886\":1,\"898\":1},\"1\":{\"3\":1,\"4\":1,\"8\":1,\"11\":1,\"13\":3,\"15\":1,\"31\":3,\"32\":2,\"34\":5,\"38\":3,\"46\":2,\"168\":1,\"211\":1,\"217\":1,\"220\":1,\"225\":1,\"248\":2,\"254\":1,\"257\":1,\"276\":1,\"282\":1,\"312\":1,\"357\":1,\"379\":2,\"436\":1,\"476\":1,\"563\":1,\"714\":1,\"722\":1,\"750\":1,\"793\":2,\"794\":2,\"889\":1,\"895\":1,\"901\":2,\"929\":2,\"935\":4,\"938\":1,\"940\":2,\"951\":1,\"955\":1}}],[\"探讨\",{\"1\":{\"863\":1}}],[\"探究\",{\"1\":{\"54\":1}}],[\"探索\",{\"1\":{\"52\":1,\"271\":1,\"325\":1,\"370\":3,\"379\":1,\"865\":1,\"935\":1,\"955\":1}}],[\"连通\",{\"1\":{\"887\":1}}],[\"连在一起\",{\"1\":{\"380\":1,\"465\":1}}],[\"连贯\",{\"1\":{\"318\":1}}],[\"连续函数\",{\"1\":{\"222\":1}}],[\"连续\",{\"0\":{\"222\":1},\"1\":{\"153\":7,\"221\":3,\"222\":2,\"229\":1,\"246\":1,\"270\":1,\"294\":1,\"310\":1,\"572\":1,\"577\":4,\"825\":1,\"897\":1,\"959\":1}}],[\"连同\",{\"1\":{\"54\":1}}],[\"连接点\",{\"1\":{\"225\":1}}],[\"连接起来\",{\"1\":{\"103\":1,\"225\":1,\"829\":1,\"830\":1}}],[\"连接数\",{\"1\":{\"10\":3}}],[\"连接\",{\"0\":{\"180\":1,\"183\":1,\"687\":1},\"1\":{\"8\":1,\"10\":9,\"19\":5,\"20\":1,\"29\":1,\"30\":1,\"31\":3,\"34\":2,\"35\":1,\"38\":1,\"39\":1,\"41\":1,\"46\":1,\"164\":1,\"186\":1,\"189\":1,\"222\":1,\"223\":1,\"225\":2,\"226\":1,\"227\":2,\"228\":3,\"246\":1,\"281\":2,\"304\":3,\"306\":1,\"310\":2,\"322\":1,\"351\":1,\"366\":2,\"370\":1,\"380\":1,\"398\":1,\"399\":1,\"408\":1,\"410\":1,\"415\":2,\"419\":1,\"465\":1,\"484\":1,\"492\":1,\"626\":1,\"687\":2,\"695\":3,\"826\":3,\"828\":1,\"959\":1}}],[\"连接池\",{\"0\":{\"10\":1},\"1\":{\"3\":1,\"10\":3}}],[\"?\",{\"0\":{\"321\":5},\"1\":{\"54\":1,\"72\":1,\"103\":1,\"104\":1,\"105\":1,\"137\":1,\"174\":1,\"197\":1,\"283\":2,\"304\":11,\"538\":1,\"543\":2,\"577\":1,\"587\":1,\"615\":1,\"670\":2,\"738\":2,\"740\":1,\"793\":6,\"800\":5,\"808\":3,\"811\":1,\"814\":1}}],[\"》\",{\"1\":{\"54\":1,\"201\":1,\"626\":2,\"872\":1}}],[\"《\",{\"1\":{\"54\":1,\"201\":1,\"872\":1}}],[\"】\",{\"1\":{\"54\":1,\"166\":1,\"392\":1,\"535\":1,\"884\":1,\"889\":1,\"891\":1,\"959\":1}}],[\"【\",{\"1\":{\"54\":1,\"166\":1,\"392\":1,\"535\":1,\"884\":1,\"889\":1,\"891\":1,\"959\":1}}],[\"流对\",{\"1\":{\"794\":2}}],[\"流所\",{\"1\":{\"794\":1}}],[\"流都\",{\"1\":{\"790\":1}}],[\"流向\",{\"1\":{\"790\":2,\"793\":1}}],[\"流类\",{\"1\":{\"781\":1,\"791\":2,\"793\":3}}],[\"流时\",{\"1\":{\"776\":1}}],[\"流在\",{\"1\":{\"775\":1}}],[\"流是\",{\"1\":{\"775\":1}}],[\"流中\",{\"1\":{\"775\":3,\"776\":2}}],[\"流中用\",{\"1\":{\"685\":1}}],[\"流来\",{\"1\":{\"247\":1,\"776\":1,\"790\":1}}],[\"流水线\",{\"1\":{\"235\":1}}],[\"流形\",{\"1\":{\"208\":2,\"246\":2,\"303\":6,\"308\":1,\"340\":1}}],[\"流\",{\"0\":{\"241\":1,\"773\":1,\"774\":1,\"775\":1,\"776\":1,\"777\":1,\"780\":1,\"783\":1,\"789\":2,\"790\":1,\"823\":1},\"1\":{\"53\":1,\"242\":1,\"247\":1,\"337\":1,\"492\":1,\"512\":1,\"623\":1,\"624\":1,\"774\":1,\"775\":2,\"776\":1,\"777\":1,\"778\":1,\"780\":3,\"781\":14,\"782\":2,\"786\":1,\"789\":2,\"790\":5,\"791\":4,\"793\":11,\"794\":3,\"816\":2,\"953\":1}}],[\"流程\",{\"0\":{\"45\":1,\"46\":1,\"404\":1,\"408\":1,\"505\":1,\"795\":1},\"1\":{\"32\":1,\"34\":2,\"45\":1,\"191\":2,\"210\":1,\"235\":1,\"260\":1,\"316\":2,\"599\":1,\"722\":1,\"818\":1,\"864\":1}}],[\"启发\",{\"1\":{\"53\":1,\"228\":1,\"372\":2,\"375\":1,\"402\":2}}],[\"启动\",{\"1\":{\"8\":1,\"35\":1,\"186\":1,\"528\":1}}],[\"受控\",{\"0\":{\"936\":1},\"1\":{\"453\":1,\"936\":1,\"938\":1,\"951\":1}}],[\"受此\",{\"1\":{\"372\":1}}],[\"受益\",{\"1\":{\"199\":1,\"372\":1}}],[\"受到重视\",{\"1\":{\"242\":1}}],[\"受到\",{\"1\":{\"193\":1,\"229\":1,\"235\":1,\"246\":1}}],[\"受\",{\"1\":{\"53\":1,\"228\":1,\"306\":1,\"372\":1,\"402\":2,\"769\":1,\"893\":1}}],[\"帧\",{\"1\":{\"53\":1,\"199\":1,\"423\":1,\"835\":1}}],[\"掩盖\",{\"1\":{\"939\":1}}],[\"掩蔽\",{\"1\":{\"270\":3,\"314\":1}}],[\"掩膜\",{\"1\":{\"55\":1}}],[\"掩模\",{\"1\":{\"53\":1,\"201\":2,\"273\":2}}],[\"掩码\",{\"1\":{\"49\":1,\"53\":4,\"192\":1,\"195\":1,\"197\":1,\"199\":2,\"201\":1,\"272\":1,\"314\":3,\"320\":2,\"321\":1,\"322\":3,\"342\":1,\"384\":1,\"392\":2,\"940\":9}}],[\"估计值\",{\"1\":{\"270\":1}}],[\"估计\",{\"0\":{\"241\":1,\"294\":1,\"915\":1},\"1\":{\"53\":3,\"198\":1,\"202\":1,\"222\":2,\"242\":1,\"273\":1,\"294\":1,\"298\":2,\"299\":4,\"300\":1,\"342\":4,\"426\":1,\"887\":1,\"895\":1,\"904\":3,\"909\":1,\"915\":1,\"916\":2,\"917\":2,\"920\":5}}],[\"陷入\",{\"1\":{\"53\":1,\"103\":1}}],[\"整张\",{\"1\":{\"873\":1}}],[\"整形\",{\"1\":{\"648\":1,\"676\":1}}],[\"整型\",{\"0\":{\"642\":1},\"1\":{\"611\":1,\"632\":1,\"633\":7,\"635\":2,\"638\":3,\"640\":1,\"642\":4,\"665\":1,\"670\":1,\"671\":1,\"675\":7,\"676\":2,\"712\":1,\"755\":1,\"781\":1,\"798\":2,\"804\":5,\"818\":1}}],[\"整\",{\"1\":{\"359\":1}}],[\"整体\",{\"0\":{\"314\":1},\"1\":{\"148\":1,\"198\":1,\"200\":1,\"210\":1,\"214\":1,\"254\":1,\"322\":1,\"683\":1,\"740\":1,\"806\":1,\"863\":1}}],[\"整个\",{\"1\":{\"93\":1,\"103\":1,\"137\":1,\"199\":1,\"227\":1,\"311\":1,\"372\":1,\"609\":1,\"612\":1,\"620\":1,\"683\":3,\"685\":1,\"807\":3,\"808\":2,\"893\":1}}],[\"整棵\",{\"1\":{\"85\":2}}],[\"整除\",{\"1\":{\"69\":1,\"843\":1,\"845\":1}}],[\"整合\",{\"0\":{\"830\":1},\"1\":{\"53\":1,\"322\":1,\"344\":1,\"830\":2}}],[\"整数\",{\"1\":{\"28\":1,\"128\":1,\"601\":5,\"642\":1,\"644\":1,\"676\":2,\"689\":1,\"712\":3,\"729\":1,\"755\":3,\"781\":4,\"785\":1,\"787\":1,\"810\":1,\"811\":1,\"837\":1,\"844\":1,\"849\":1}}],[\"稀释\",{\"1\":{\"53\":2}}],[\"稀疏\",{\"0\":{\"436\":1},\"1\":{\"53\":2,\"193\":1,\"196\":1,\"200\":1,\"202\":3,\"204\":1,\"208\":2,\"209\":4,\"210\":1,\"211\":3,\"228\":1,\"246\":14,\"247\":1,\"256\":1,\"273\":1,\"312\":2,\"315\":1,\"317\":2,\"370\":1,\"372\":1,\"436\":6,\"437\":1,\"887\":1}}],[\"低下\",{\"1\":{\"959\":1}}],[\"低通滤波器\",{\"1\":{\"938\":1,\"951\":1}}],[\"低频\",{\"1\":{\"938\":2,\"939\":3,\"951\":2}}],[\"低维\",{\"1\":{\"922\":1}}],[\"低且\",{\"1\":{\"805\":1,\"910\":1}}],[\"低分辨率\",{\"1\":{\"246\":1,\"329\":1,\"909\":1,\"961\":1}}],[\"低阶\",{\"1\":{\"223\":1}}],[\"低级\",{\"0\":{\"788\":1},\"1\":{\"222\":1,\"320\":2,\"786\":1}}],[\"低于\",{\"1\":{\"208\":1,\"386\":1,\"809\":1}}],[\"低到\",{\"1\":{\"89\":1}}],[\"低\",{\"0\":{\"915\":1},\"1\":{\"62\":1,\"64\":1,\"65\":1,\"69\":1,\"222\":1,\"246\":1,\"293\":1,\"299\":1,\"355\":1,\"417\":1,\"451\":1,\"545\":1,\"804\":1,\"807\":1,\"939\":1}}],[\"低层\",{\"1\":{\"53\":1,\"400\":1}}],[\"低效\",{\"1\":{\"10\":1,\"38\":1}}],[\"侧重于\",{\"1\":{\"53\":1,\"354\":1}}],[\"层数\",{\"1\":{\"929\":1}}],[\"层为\",{\"1\":{\"410\":1}}],[\"层外\",{\"1\":{\"380\":1}}],[\"层级\",{\"1\":{\"379\":1,\"380\":2}}],[\"层面\",{\"1\":{\"373\":1,\"863\":1}}],[\"层上\",{\"1\":{\"366\":1,\"415\":1}}],[\"层以\",{\"1\":{\"227\":1}}],[\"层中\",{\"1\":{\"226\":1,\"228\":1}}],[\"层来\",{\"1\":{\"220\":1,\"247\":1}}],[\"层次性\",{\"1\":{\"227\":1}}],[\"层次结构\",{\"1\":{\"220\":1,\"222\":1,\"225\":1,\"227\":1,\"282\":1,\"748\":2}}],[\"层次\",{\"1\":{\"220\":2,\"225\":1,\"226\":1,\"227\":1,\"282\":2,\"451\":1,\"741\":1,\"751\":1,\"766\":2,\"769\":2}}],[\"层次化\",{\"1\":{\"218\":1,\"225\":1}}],[\"层序\",{\"0\":{\"72\":1},\"1\":{\"72\":8,\"77\":1,\"84\":1,\"85\":2}}],[\"层\",{\"1\":{\"53\":3,\"72\":1,\"86\":1,\"110\":1,\"201\":7,\"220\":9,\"222\":3,\"223\":2,\"225\":2,\"226\":2,\"227\":2,\"228\":3,\"246\":1,\"288\":1,\"310\":6,\"322\":1,\"350\":5,\"351\":1,\"364\":1,\"366\":3,\"369\":1,\"380\":6,\"408\":1,\"410\":1,\"415\":3,\"419\":1,\"449\":1,\"485\":1,\"854\":1,\"882\":2,\"892\":1,\"928\":1,\"958\":1,\"959\":1}}],[\"得票\",{\"1\":{\"759\":1}}],[\"得益于\",{\"1\":{\"246\":1}}],[\"得出\",{\"1\":{\"229\":1,\"349\":1}}],[\"得分\",{\"1\":{\"227\":1,\"392\":1,\"395\":1,\"451\":1}}],[\"得\",{\"1\":{\"53\":1,\"218\":1,\"332\":1}}],[\"得到\",{\"1\":{\"34\":1,\"49\":2,\"51\":2,\"72\":1,\"93\":1,\"96\":1,\"100\":1,\"192\":1,\"210\":2,\"220\":1,\"222\":1,\"223\":1,\"228\":1,\"242\":2,\"263\":1,\"284\":1,\"290\":6,\"293\":2,\"294\":2,\"299\":1,\"315\":1,\"321\":1,\"322\":1,\"332\":1,\"337\":2,\"358\":1,\"372\":1,\"380\":1,\"386\":1,\"391\":1,\"404\":1,\"410\":1,\"417\":1,\"419\":6,\"451\":2,\"461\":1,\"480\":1,\"587\":1,\"594\":1,\"595\":1,\"687\":1,\"690\":1,\"713\":1,\"729\":1,\"785\":1,\"801\":1,\"807\":1,\"810\":1,\"854\":1,\"858\":1,\"859\":1,\"864\":1,\"867\":1,\"868\":1,\"884\":1,\"892\":1,\"893\":1,\"904\":1,\"906\":3,\"908\":1,\"909\":1,\"913\":1,\"928\":2,\"929\":5,\"940\":1,\"958\":1,\"959\":3,\"961\":1,\"963\":1}}],[\"普适\",{\"1\":{\"863\":1}}],[\"普遍存在\",{\"1\":{\"53\":1}}],[\"普通\",{\"0\":{\"605\":1,\"647\":1,\"729\":1},\"1\":{\"8\":1,\"37\":4,\"80\":1,\"100\":1,\"369\":1,\"396\":1,\"605\":1,\"606\":1,\"612\":4,\"617\":1,\"671\":3,\"706\":1,\"707\":1,\"720\":1,\"721\":1,\"729\":4,\"734\":1,\"735\":3,\"745\":1,\"769\":1}}],[\"早\",{\"1\":{\"480\":1}}],[\"早期\",{\"1\":{\"53\":4,\"218\":1,\"246\":1,\"770\":1,\"915\":1,\"929\":1}}],[\"早晚\",{\"1\":{\"53\":2}}],[\"骨干网\",{\"1\":{\"53\":1}}],[\"骨干\",{\"1\":{\"53\":1,\"198\":1,\"379\":1}}],[\"阅读\",{\"1\":{\"53\":1,\"54\":2,\"276\":1,\"369\":1,\"401\":1,\"590\":1,\"785\":2,\"872\":1}}],[\"论文\",{\"1\":{\"53\":1,\"54\":4,\"193\":2,\"269\":1,\"273\":1,\"276\":1,\"293\":1,\"315\":1,\"319\":1,\"320\":4,\"322\":1,\"360\":1,\"361\":1,\"369\":2,\"379\":2,\"385\":2,\"401\":1,\"865\":1,\"872\":1,\"887\":1,\"928\":3,\"935\":1,\"938\":2,\"951\":1}}],[\"条边\",{\"1\":{\"301\":2,\"303\":1,\"308\":2}}],[\"条\",{\"1\":{\"53\":1}}],[\"条件\",{\"0\":{\"25\":1,\"808\":2,\"948\":1},\"1\":{\"25\":6,\"27\":1,\"70\":3,\"72\":2,\"88\":1,\"96\":1,\"99\":1,\"100\":1,\"103\":3,\"104\":1,\"110\":1,\"113\":1,\"121\":1,\"122\":1,\"225\":1,\"245\":1,\"246\":1,\"277\":1,\"423\":1,\"453\":1,\"471\":2,\"500\":1,\"599\":1,\"770\":1,\"808\":2,\"811\":1,\"813\":1,\"814\":1,\"818\":1,\"819\":1,\"826\":1,\"833\":2,\"865\":1,\"901\":3,\"935\":3,\"940\":1,\"941\":1,\"947\":3,\"952\":1,\"953\":2}}],[\"推动\",{\"1\":{\"257\":1}}],[\"推断\",{\"1\":{\"246\":1,\"426\":1,\"961\":1}}],[\"推出\",{\"1\":{\"141\":1,\"153\":1}}],[\"推导\",{\"1\":{\"103\":1,\"917\":1,\"949\":1}}],[\"推理\",{\"0\":{\"417\":1,\"909\":1},\"1\":{\"52\":1,\"62\":1,\"65\":1,\"198\":1,\"199\":1,\"200\":1,\"211\":1,\"220\":2,\"246\":1,\"250\":1,\"273\":1,\"390\":1,\"392\":4,\"395\":1,\"396\":1,\"417\":1,\"860\":1,\"864\":1,\"889\":1,\"915\":1,\"916\":1,\"922\":1,\"935\":1}}],[\"推荐\",{\"1\":{\"38\":1,\"531\":1}}],[\"冻结\",{\"1\":{\"52\":1,\"929\":1}}],[\"策略\",{\"1\":{\"52\":1,\"53\":1,\"195\":1,\"198\":1,\"211\":1,\"225\":1,\"246\":1,\"314\":3,\"320\":3,\"321\":2,\"322\":1,\"327\":1,\"370\":1,\"386\":3,\"392\":2,\"395\":1,\"887\":1}}],[\"迭代法\",{\"1\":{\"72\":1}}],[\"迭代\",{\"0\":{\"71\":1,\"337\":1,\"551\":1,\"575\":1,\"937\":1},\"1\":{\"52\":2,\"53\":1,\"72\":1,\"82\":1,\"84\":1,\"85\":1,\"95\":1,\"99\":2,\"227\":1,\"261\":1,\"282\":1,\"332\":2,\"337\":1,\"338\":2,\"399\":1,\"539\":4,\"540\":2,\"541\":4,\"544\":1,\"545\":13,\"546\":1,\"548\":1,\"557\":1,\"559\":8,\"561\":2,\"563\":2,\"570\":1,\"575\":7,\"864\":1,\"884\":2,\"907\":1,\"909\":1,\"913\":1,\"922\":1,\"940\":2}}],[\"效果\",{\"1\":{\"52\":1,\"65\":1,\"257\":2,\"262\":1,\"276\":1,\"356\":1,\"357\":3,\"370\":1,\"449\":1,\"858\":1,\"893\":1,\"906\":1,\"928\":4}}],[\"效率高\",{\"1\":{\"13\":1,\"560\":1,\"712\":1,\"762\":2,\"788\":1}}],[\"效率\",{\"1\":{\"8\":1,\"13\":2,\"20\":1,\"35\":1,\"38\":1,\"53\":1,\"69\":1,\"94\":1,\"194\":1,\"222\":1,\"246\":1,\"254\":1,\"355\":1,\"379\":1,\"465\":2,\"539\":1,\"542\":1,\"545\":1,\"599\":1,\"663\":1,\"708\":1,\"787\":1,\"922\":1,\"959\":1}}],[\"背景色\",{\"1\":{\"961\":1}}],[\"背景\",{\"1\":{\"52\":1,\"202\":1,\"234\":1,\"386\":1,\"412\":1,\"416\":3,\"423\":1,\"425\":1,\"893\":3}}],[\"施加影响\",{\"1\":{\"938\":1}}],[\"施加\",{\"1\":{\"52\":1,\"938\":1}}],[\"强弱\",{\"1\":{\"938\":1}}],[\"强调\",{\"1\":{\"747\":1}}],[\"强化\",{\"1\":{\"392\":1}}],[\"强迫\",{\"1\":{\"259\":1,\"263\":1}}],[\"强度\",{\"0\":{\"916\":1},\"1\":{\"225\":1,\"308\":2,\"916\":1}}],[\"强\",{\"1\":{\"220\":1,\"228\":1,\"621\":1}}],[\"强制\",{\"0\":{\"168\":1,\"481\":1,\"613\":1,\"801\":1},\"1\":{\"51\":1,\"246\":2,\"437\":1,\"480\":1,\"485\":1,\"600\":1,\"666\":1,\"668\":1,\"676\":2,\"755\":1,\"801\":2,\"811\":1,\"893\":1}}],[\"强大\",{\"1\":{\"13\":1,\"325\":1,\"379\":1,\"712\":1,\"953\":1}}],[\"匹配\",{\"0\":{\"394\":1},\"1\":{\"51\":1,\"105\":1,\"106\":2,\"168\":1,\"174\":1,\"195\":1,\"199\":1,\"200\":1,\"202\":1,\"255\":1,\"260\":2,\"268\":1,\"288\":3,\"299\":1,\"332\":1,\"342\":5,\"350\":1,\"386\":1,\"393\":1,\"394\":4,\"395\":1,\"460\":1,\"461\":1,\"534\":1,\"589\":1,\"601\":1,\"642\":1,\"755\":1,\"818\":2,\"843\":1,\"859\":8,\"860\":1,\"901\":1}}],[\"作形\",{\"1\":{\"671\":1}}],[\"作\",{\"1\":{\"600\":1,\"615\":2,\"616\":1,\"671\":1,\"762\":1}}],[\"作用\",{\"0\":{\"447\":1,\"652\":1,\"768\":1},\"1\":{\"191\":1,\"244\":1,\"255\":1,\"270\":1,\"306\":1,\"344\":2,\"355\":1,\"356\":1,\"419\":1,\"525\":1,\"527\":1,\"535\":1,\"583\":1,\"587\":1,\"589\":1,\"590\":1,\"600\":1,\"617\":1,\"619\":1,\"623\":1,\"687\":1,\"688\":2,\"689\":1,\"690\":1,\"695\":1,\"701\":1,\"722\":2,\"745\":1,\"769\":2,\"777\":1,\"793\":2,\"816\":1,\"819\":1,\"887\":1,\"958\":1}}],[\"作用域\",{\"1\":{\"22\":1,\"509\":1,\"598\":3,\"609\":1,\"610\":1,\"614\":2,\"615\":1,\"616\":2,\"617\":1,\"619\":7,\"706\":4,\"722\":2,\"740\":1,\"741\":3,\"744\":4,\"745\":1,\"811\":1}}],[\"作者\",{\"1\":{\"53\":3,\"126\":3,\"257\":3,\"261\":1,\"263\":2,\"305\":1,\"306\":1,\"308\":2,\"312\":2,\"370\":1,\"372\":4,\"373\":1,\"379\":3,\"384\":1,\"398\":1,\"399\":2,\"863\":1,\"940\":1}}],[\"作为\",{\"0\":{\"552\":1,\"710\":1,\"762\":1},\"1\":{\"51\":1,\"52\":1,\"53\":3,\"55\":1,\"95\":1,\"192\":1,\"195\":2,\"197\":1,\"199\":1,\"209\":1,\"218\":1,\"220\":3,\"222\":2,\"223\":1,\"225\":3,\"228\":2,\"229\":1,\"263\":1,\"270\":2,\"280\":1,\"284\":1,\"300\":1,\"308\":1,\"322\":2,\"348\":1,\"350\":2,\"354\":1,\"359\":1,\"372\":2,\"379\":2,\"392\":1,\"394\":2,\"402\":1,\"446\":1,\"449\":1,\"476\":1,\"528\":1,\"545\":1,\"559\":1,\"570\":1,\"573\":3,\"577\":1,\"589\":2,\"595\":2,\"635\":1,\"649\":1,\"665\":1,\"668\":1,\"671\":1,\"676\":1,\"684\":1,\"688\":1,\"707\":1,\"709\":1,\"710\":2,\"735\":1,\"736\":1,\"741\":1,\"745\":1,\"748\":1,\"755\":1,\"756\":1,\"762\":4,\"769\":1,\"782\":1,\"793\":1,\"801\":1,\"806\":3,\"816\":1,\"825\":1,\"828\":1,\"864\":1,\"892\":1,\"901\":1,\"907\":1,\"953\":1}}],[\"训练样本\",{\"1\":{\"261\":1,\"353\":1,\"355\":5}}],[\"训练\",{\"0\":{\"259\":1,\"287\":1,\"842\":1,\"846\":1,\"852\":1,\"908\":1},\"1\":{\"51\":1,\"52\":1,\"54\":1,\"192\":2,\"195\":3,\"198\":3,\"199\":1,\"200\":1,\"201\":1,\"203\":1,\"211\":1,\"220\":1,\"225\":1,\"228\":1,\"246\":2,\"257\":3,\"259\":5,\"260\":1,\"261\":4,\"262\":2,\"272\":1,\"277\":1,\"314\":4,\"315\":2,\"316\":2,\"319\":3,\"320\":2,\"321\":1,\"323\":1,\"329\":1,\"338\":1,\"349\":2,\"355\":4,\"370\":5,\"372\":3,\"379\":1,\"390\":2,\"396\":1,\"406\":2,\"409\":1,\"410\":1,\"411\":3,\"416\":1,\"417\":1,\"436\":2,\"449\":1,\"451\":2,\"839\":2,\"843\":2,\"845\":1,\"852\":3,\"857\":2,\"858\":4,\"859\":7,\"860\":2,\"863\":1,\"864\":3,\"873\":1,\"875\":4,\"887\":2,\"907\":2,\"908\":2,\"910\":2,\"912\":1,\"922\":2,\"928\":5,\"929\":6,\"930\":2,\"935\":4,\"938\":1,\"941\":2,\"953\":1,\"957\":5,\"963\":1}}],[\"错位\",{\"1\":{\"64\":1,\"202\":1}}],[\"错\",{\"1\":{\"51\":1,\"188\":1}}],[\"错误处理\",{\"1\":{\"714\":1}}],[\"错误码\",{\"1\":{\"476\":4}}],[\"错误\",{\"1\":{\"28\":1,\"43\":3,\"70\":1,\"174\":2,\"175\":1,\"245\":1,\"299\":1,\"348\":2,\"386\":1,\"471\":1,\"476\":5,\"522\":1,\"536\":1,\"540\":2,\"541\":1,\"606\":2,\"649\":1,\"654\":1,\"661\":1,\"668\":1,\"671\":1,\"673\":2,\"683\":2,\"688\":2,\"693\":1,\"720\":1,\"744\":1,\"755\":1,\"776\":2,\"777\":1,\"793\":2,\"830\":1,\"833\":1,\"852\":1,\"915\":1}}],[\"错误信息\",{\"1\":{\"4\":1,\"11\":1,\"776\":1,\"781\":1}}],[\"部件\",{\"0\":{\"253\":1},\"1\":{\"243\":2,\"425\":1}}],[\"部署\",{\"1\":{\"61\":1,\"65\":1}}],[\"部位\",{\"1\":{\"51\":1}}],[\"部分\",{\"0\":{\"533\":1,\"846\":1},\"1\":{\"4\":1,\"11\":1,\"41\":3,\"42\":3,\"51\":2,\"85\":1,\"86\":1,\"210\":1,\"222\":5,\"228\":1,\"246\":1,\"270\":1,\"306\":2,\"307\":3,\"308\":1,\"315\":1,\"342\":1,\"356\":1,\"359\":1,\"372\":1,\"379\":1,\"380\":1,\"386\":1,\"395\":1,\"398\":3,\"409\":1,\"419\":1,\"436\":2,\"460\":1,\"572\":1,\"585\":2,\"644\":2,\"645\":4,\"701\":1,\"750\":1,\"761\":1,\"769\":2,\"804\":1,\"825\":1,\"839\":1,\"906\":1,\"940\":2,\"958\":2,\"959\":1,\"961\":9,\"962\":1}}],[\"修复\",{\"1\":{\"935\":2}}],[\"修饰\",{\"1\":{\"661\":1,\"662\":1}}],[\"修饰符\",{\"1\":{\"633\":2}}],[\"修订\",{\"1\":{\"417\":1}}],[\"修剪\",{\"0\":{\"98\":1},\"1\":{\"386\":2,\"391\":6,\"396\":2}}],[\"修修补补\",{\"1\":{\"54\":1}}],[\"修正\",{\"0\":{\"416\":1,\"435\":1},\"1\":{\"51\":4,\"322\":1,\"405\":1,\"408\":1,\"410\":2,\"413\":2,\"416\":5,\"417\":2,\"887\":1}}],[\"修改\",{\"0\":{\"160\":1,\"163\":1},\"1\":{\"16\":2,\"20\":1,\"38\":2,\"55\":1,\"160\":2,\"168\":3,\"172\":1,\"186\":1,\"201\":1,\"524\":1,\"525\":1,\"530\":1,\"545\":2,\"546\":1,\"575\":2,\"693\":1,\"710\":1,\"769\":1,\"938\":1,\"940\":2}}],[\"泛化\",{\"1\":{\"49\":1,\"325\":1,\"863\":2,\"875\":1,\"926\":1}}],[\"预估\",{\"1\":{\"947\":2}}],[\"预想\",{\"1\":{\"529\":1}}],[\"预算\",{\"1\":{\"386\":1}}],[\"预\",{\"0\":{\"259\":1,\"846\":1},\"1\":{\"257\":3,\"259\":4,\"261\":3,\"262\":1,\"272\":1,\"314\":4,\"315\":2,\"316\":2,\"320\":2,\"321\":1,\"329\":1,\"372\":1,\"379\":1,\"390\":1,\"839\":1,\"857\":1,\"929\":2,\"935\":1}}],[\"预定\",{\"1\":{\"201\":1,\"315\":2,\"344\":1,\"371\":1,\"775\":1}}],[\"预处理\",{\"1\":{\"65\":1,\"581\":1,\"624\":1,\"626\":1,\"651\":1,\"652\":1}}],[\"预期\",{\"1\":{\"65\":1,\"121\":1,\"528\":1,\"531\":1}}],[\"预测值\",{\"1\":{\"868\":1}}],[\"预测\",{\"1\":{\"49\":1,\"54\":2,\"55\":6,\"199\":2,\"200\":2,\"202\":2,\"227\":1,\"237\":1,\"245\":2,\"246\":2,\"270\":1,\"273\":4,\"281\":1,\"282\":1,\"283\":1,\"284\":4,\"311\":2,\"314\":2,\"320\":1,\"322\":6,\"323\":3,\"332\":1,\"337\":1,\"338\":1,\"342\":3,\"344\":1,\"353\":1,\"355\":4,\"379\":1,\"380\":1,\"392\":2,\"419\":1,\"859\":4,\"860\":2,\"887\":1,\"891\":1,\"904\":1,\"906\":1,\"907\":1,\"930\":1,\"949\":1}}],[\"预先\",{\"1\":{\"10\":2,\"19\":2,\"347\":1,\"411\":1}}],[\"原样\",{\"1\":{\"785\":1,\"804\":1}}],[\"原则\",{\"1\":{\"721\":1,\"744\":1,\"766\":1}}],[\"原值\",{\"1\":{\"612\":2,\"671\":1,\"676\":1}}],[\"原型\",{\"1\":{\"570\":1,\"571\":1,\"590\":4,\"595\":1,\"598\":7,\"619\":1,\"620\":3,\"686\":1,\"687\":1,\"688\":1,\"689\":1,\"690\":1,\"706\":1,\"718\":1,\"782\":1}}],[\"原有\",{\"1\":{\"395\":1,\"793\":1,\"938\":1}}],[\"原理\",{\"1\":{\"290\":1,\"416\":1,\"769\":1,\"862\":1,\"891\":1,\"894\":1,\"901\":1}}],[\"原\",{\"1\":{\"288\":1,\"419\":1,\"728\":1,\"801\":1,\"864\":1,\"938\":1}}],[\"原本\",{\"1\":{\"209\":1,\"916\":2}}],[\"原文\",{\"1\":{\"174\":2,\"175\":2,\"304\":2,\"811\":2,\"841\":2,\"845\":2,\"862\":1,\"875\":2}}],[\"原创\",{\"1\":{\"174\":1,\"175\":1,\"304\":1,\"811\":1,\"841\":1,\"845\":1,\"875\":1}}],[\"原始数据\",{\"1\":{\"436\":1,\"904\":1}}],[\"原始\",{\"0\":{\"388\":1},\"1\":{\"103\":5,\"228\":1,\"244\":1,\"246\":2,\"268\":1,\"270\":1,\"273\":1,\"288\":2,\"311\":1,\"356\":1,\"372\":1,\"395\":1,\"887\":1,\"893\":1,\"906\":1,\"922\":1,\"923\":1,\"925\":2}}],[\"原来\",{\"1\":{\"103\":1,\"399\":2,\"794\":1,\"828\":1,\"862\":1,\"923\":1}}],[\"原地\",{\"1\":{\"86\":1,\"87\":1,\"105\":1}}],[\"原因\",{\"0\":{\"188\":1},\"1\":{\"49\":1,\"174\":1,\"175\":2,\"209\":1,\"257\":1,\"293\":1,\"355\":1,\"357\":1,\"409\":1,\"528\":1,\"529\":1,\"540\":1,\"712\":1,\"830\":1,\"854\":1}}],[\"原图\",{\"1\":{\"49\":1,\"419\":2,\"862\":1,\"873\":2,\"917\":1,\"938\":3,\"939\":1,\"940\":2,\"951\":2}}],[\"原子\",{\"1\":{\"23\":2,\"24\":2,\"528\":1}}],[\"深\",{\"1\":{\"959\":1}}],[\"深入\",{\"1\":{\"940\":1}}],[\"深层次\",{\"1\":{\"959\":1}}],[\"深层\",{\"1\":{\"288\":1,\"400\":1}}],[\"深刻\",{\"1\":{\"202\":1}}],[\"深远影响\",{\"1\":{\"49\":1}}],[\"深度图\",{\"0\":{\"294\":1,\"297\":1,\"300\":1,\"329\":1},\"1\":{\"263\":1,\"294\":7,\"299\":2,\"300\":2,\"327\":2,\"329\":1,\"334\":1,\"337\":2,\"426\":1}}],[\"深度\",{\"0\":{\"61\":1,\"73\":1,\"74\":1,\"75\":1,\"852\":1},\"1\":{\"49\":1,\"51\":2,\"64\":1,\"72\":1,\"73\":2,\"75\":1,\"80\":2,\"81\":1,\"90\":4,\"126\":1,\"218\":1,\"220\":1,\"225\":1,\"229\":1,\"245\":2,\"254\":1,\"259\":1,\"262\":1,\"277\":2,\"290\":10,\"291\":1,\"292\":4,\"293\":1,\"294\":4,\"295\":1,\"298\":6,\"299\":8,\"300\":3,\"332\":2,\"337\":1,\"338\":1,\"342\":1,\"370\":1,\"390\":1,\"426\":1,\"436\":2,\"839\":1,\"852\":1,\"957\":1,\"958\":1}}],[\"产生\",{\"1\":{\"49\":1,\"126\":4,\"217\":1,\"225\":1,\"228\":1,\"261\":1,\"273\":1,\"294\":1,\"306\":1,\"308\":2,\"342\":1,\"357\":1,\"372\":1,\"471\":1,\"529\":1,\"654\":1,\"701\":1,\"710\":1,\"730\":1,\"748\":1,\"768\":1,\"860\":1,\"922\":1,\"940\":1}}],[\"贡献\",{\"0\":{\"194\":1,\"405\":1,\"409\":1},\"1\":{\"49\":1,\"257\":1,\"262\":1,\"312\":1,\"409\":1,\"865\":1,\"935\":2}}],[\"开来\",{\"1\":{\"750\":1}}],[\"开辟\",{\"1\":{\"621\":1,\"712\":5,\"713\":5,\"714\":2,\"744\":1,\"824\":1,\"825\":1,\"826\":4,\"830\":3}}],[\"开头\",{\"1\":{\"581\":1,\"624\":2,\"642\":2,\"648\":1,\"651\":1,\"692\":1,\"741\":1,\"744\":1}}],[\"开通\",{\"1\":{\"563\":1}}],[\"开业\",{\"1\":{\"476\":1}}],[\"开发\",{\"1\":{\"229\":1,\"371\":1}}],[\"开\",{\"1\":{\"225\":1}}],[\"开创性\",{\"1\":{\"217\":1,\"220\":1,\"248\":1}}],[\"开销\",{\"1\":{\"211\":1,\"218\":1,\"599\":1,\"707\":2,\"710\":1,\"762\":2,\"769\":2}}],[\"开放\",{\"1\":{\"186\":1}}],[\"开机\",{\"1\":{\"170\":1,\"191\":1}}],[\"开源\",{\"1\":{\"55\":1,\"271\":1,\"359\":1,\"871\":1,\"874\":1,\"901\":1,\"929\":1}}],[\"开山\",{\"1\":{\"49\":1}}],[\"开始运行\",{\"1\":{\"744\":1}}],[\"开始\",{\"1\":{\"8\":1,\"35\":1,\"39\":1,\"53\":1,\"71\":1,\"96\":1,\"103\":1,\"112\":1,\"125\":1,\"137\":2,\"138\":1,\"139\":1,\"152\":1,\"153\":2,\"191\":2,\"254\":1,\"370\":1,\"461\":3,\"527\":1,\"534\":1,\"542\":1,\"575\":2,\"583\":1,\"609\":2,\"614\":1,\"621\":1,\"625\":1,\"693\":1,\"782\":1,\"793\":1,\"816\":1,\"818\":1,\"828\":1,\"906\":1,\"939\":1,\"940\":1,\"958\":1}}],[\"引起\",{\"1\":{\"229\":1,\"246\":1,\"386\":1}}],[\"引导\",{\"0\":{\"941\":1,\"943\":1},\"1\":{\"198\":1,\"453\":1,\"864\":1,\"941\":1,\"944\":3,\"945\":2,\"947\":3}}],[\"引入\",{\"0\":{\"766\":1},\"1\":{\"49\":1,\"193\":1,\"194\":1,\"201\":1,\"220\":1,\"222\":1,\"245\":3,\"246\":4,\"270\":1,\"273\":2,\"276\":1,\"320\":1,\"322\":1,\"347\":1,\"350\":1,\"370\":2,\"390\":2,\"392\":1,\"436\":1,\"676\":1,\"928\":1,\"953\":1,\"962\":1}}],[\"引用\",{\"0\":{\"524\":1,\"666\":1,\"683\":1,\"692\":1,\"702\":1,\"709\":1},\"1\":{\"28\":1,\"82\":1,\"319\":1,\"462\":2,\"524\":10,\"525\":3,\"541\":2,\"605\":5,\"606\":10,\"612\":1,\"615\":4,\"617\":3,\"620\":1,\"621\":1,\"623\":1,\"676\":1,\"683\":1,\"703\":1,\"709\":4,\"726\":1,\"736\":2,\"744\":8,\"745\":13,\"757\":1,\"758\":1,\"760\":1,\"762\":2,\"768\":1,\"769\":2,\"770\":1,\"811\":1}}],[\"图大\",{\"0\":{\"946\":1}}],[\"图里\",{\"1\":{\"940\":1}}],[\"图文\",{\"1\":{\"859\":7}}],[\"图后\",{\"1\":{\"419\":1,\"940\":1}}],[\"图时\",{\"1\":{\"419\":1}}],[\"图是\",{\"1\":{\"398\":1,\"419\":1}}],[\"图来\",{\"1\":{\"379\":1}}],[\"图下\",{\"1\":{\"291\":1}}],[\"图则\",{\"1\":{\"291\":1}}],[\"图层\",{\"1\":{\"290\":1}}],[\"图间\",{\"1\":{\"288\":1}}],[\"图谱\",{\"1\":{\"226\":1}}],[\"图上\",{\"1\":{\"226\":1,\"292\":1,\"411\":1,\"419\":2}}],[\"图形\",{\"1\":{\"225\":1,\"226\":1,\"282\":1,\"283\":1,\"301\":1,\"398\":2,\"683\":1}}],[\"图示\",{\"1\":{\"221\":1}}],[\"图式\",{\"1\":{\"219\":1}}],[\"图无环\",{\"1\":{\"134\":1}}],[\"图中\",{\"1\":{\"126\":2,\"290\":1,\"332\":1,\"380\":1,\"398\":1,\"887\":1}}],[\"图论\",{\"1\":{\"72\":1}}],[\"图片\",{\"1\":{\"52\":1,\"290\":2,\"379\":4,\"380\":2,\"398\":6,\"404\":2,\"451\":19,\"835\":3,\"860\":1,\"875\":1,\"888\":1,\"906\":1,\"922\":2,\"923\":1,\"938\":1,\"949\":1,\"951\":2,\"952\":1,\"957\":1,\"961\":2}}],[\"图像编辑\",{\"0\":{\"937\":1}}],[\"图像编码\",{\"1\":{\"864\":1}}],[\"图像压缩\",{\"1\":{\"928\":1}}],[\"图像匹配\",{\"1\":{\"860\":1}}],[\"图像处理\",{\"1\":{\"325\":1}}],[\"图像\",{\"0\":{\"421\":1,\"936\":1,\"941\":1,\"943\":1},\"1\":{\"51\":1,\"53\":5,\"62\":1,\"64\":1,\"65\":1,\"221\":1,\"228\":1,\"233\":1,\"235\":1,\"242\":2,\"244\":1,\"245\":5,\"246\":1,\"247\":1,\"263\":1,\"273\":1,\"288\":10,\"290\":3,\"292\":1,\"294\":1,\"298\":1,\"301\":1,\"305\":1,\"312\":1,\"332\":3,\"334\":1,\"342\":2,\"344\":1,\"359\":2,\"370\":1,\"377\":1,\"379\":2,\"380\":2,\"398\":3,\"401\":1,\"406\":1,\"417\":2,\"419\":1,\"422\":1,\"423\":2,\"425\":2,\"426\":1,\"451\":2,\"453\":1,\"857\":1,\"858\":1,\"859\":10,\"860\":6,\"862\":3,\"863\":5,\"864\":5,\"875\":5,\"887\":4,\"889\":4,\"890\":1,\"891\":1,\"893\":2,\"907\":1,\"908\":4,\"909\":3,\"910\":4,\"922\":10,\"924\":2,\"925\":3,\"926\":5,\"928\":5,\"935\":5,\"936\":1,\"938\":7,\"939\":1,\"940\":6,\"944\":4,\"949\":1,\"951\":5,\"955\":2,\"957\":1,\"958\":5,\"961\":3,\"963\":1}}],[\"图\",{\"0\":{\"224\":1,\"225\":1,\"226\":1},\"1\":{\"49\":2,\"55\":1,\"123\":1,\"126\":2,\"201\":1,\"218\":1,\"220\":1,\"224\":3,\"225\":5,\"226\":10,\"229\":3,\"232\":1,\"248\":1,\"276\":1,\"282\":1,\"288\":4,\"290\":2,\"292\":1,\"294\":4,\"299\":3,\"303\":1,\"307\":1,\"331\":1,\"332\":1,\"338\":1,\"350\":3,\"359\":5,\"372\":1,\"377\":1,\"380\":1,\"386\":1,\"391\":3,\"392\":1,\"398\":6,\"399\":3,\"419\":5,\"530\":1,\"852\":1,\"859\":1,\"860\":1,\"862\":1,\"873\":1,\"887\":1,\"901\":1,\"922\":1,\"935\":1,\"938\":2,\"940\":1,\"951\":1,\"955\":1,\"958\":1,\"959\":1,\"960\":1}}],[\"概括\",{\"1\":{\"863\":1,\"904\":1}}],[\"概述\",{\"1\":{\"174\":1}}],[\"概率密度\",{\"1\":{\"904\":1}}],[\"概率密度函数\",{\"0\":{\"903\":1},\"1\":{\"903\":1}}],[\"概率模型\",{\"1\":{\"901\":1,\"903\":1}}],[\"概率分布\",{\"1\":{\"218\":1,\"299\":2,\"348\":1,\"349\":2,\"451\":1,\"902\":1,\"913\":1}}],[\"概率\",{\"1\":{\"49\":1,\"191\":1,\"237\":1,\"284\":1,\"293\":1,\"294\":3,\"299\":13,\"347\":1,\"351\":1,\"353\":3,\"354\":5,\"449\":1,\"451\":1,\"843\":1,\"860\":1,\"957\":1}}],[\"概念\",{\"0\":{\"537\":1,\"656\":1,\"661\":1,\"748\":1,\"767\":1,\"784\":1},\"1\":{\"28\":2,\"270\":1,\"313\":1,\"325\":1,\"599\":1,\"612\":1,\"613\":1,\"617\":1,\"707\":1,\"708\":2,\"720\":1,\"724\":1,\"726\":1,\"735\":1,\"776\":1,\"779\":1,\"782\":1,\"889\":2,\"926\":1}}],[\"|\",{\"1\":{\"48\":1,\"69\":1,\"71\":3,\"72\":2,\"85\":2,\"86\":2,\"89\":2,\"99\":6,\"100\":2,\"103\":8,\"106\":14,\"123\":2,\"126\":2,\"146\":2,\"160\":1,\"170\":1,\"181\":1,\"186\":1,\"191\":88,\"192\":1,\"198\":1,\"211\":2,\"256\":1,\"262\":1,\"266\":1,\"271\":1,\"272\":1,\"273\":2,\"313\":1,\"342\":2,\"343\":1,\"359\":1,\"397\":1,\"473\":1,\"503\":1,\"781\":5,\"793\":9,\"794\":1,\"810\":4,\"811\":3,\"833\":1,\"841\":1,\"852\":1,\"856\":2,\"862\":3,\"864\":1,\"871\":1,\"890\":1,\"910\":1,\"911\":1,\"939\":1,\"940\":1,\"944\":2,\"945\":1,\"947\":2,\"959\":2}}],[\"遥感\",{\"0\":{\"57\":1},\"1\":{\"47\":1,\"63\":1,\"64\":2}}],[\"架构设计\",{\"1\":{\"320\":1}}],[\"架构\",{\"0\":{\"195\":1,\"314\":1,\"874\":1},\"1\":{\"47\":1,\"64\":1,\"200\":1,\"201\":1,\"246\":1,\"320\":2,\"322\":1,\"392\":2,\"398\":1,\"410\":1,\"864\":2,\"928\":1,\"935\":1}}],[\"跳步\",{\"1\":{\"901\":1}}],[\"跳过\",{\"1\":{\"828\":1}}],[\"跳跃\",{\"0\":{\"152\":1},\"1\":{\"152\":1}}],[\"跳\",{\"1\":{\"115\":1,\"118\":1,\"152\":1}}],[\"跳转\",{\"1\":{\"46\":1,\"476\":2}}],[\"跳出\",{\"1\":{\"20\":1,\"818\":1}}],[\"讲到\",{\"1\":{\"958\":1}}],[\"讲解\",{\"1\":{\"122\":1,\"419\":1,\"545\":1}}],[\"讲过\",{\"1\":{\"72\":1}}],[\"讲\",{\"1\":{\"46\":3,\"380\":1}}],[\"封\",{\"1\":{\"747\":1}}],[\"封住\",{\"1\":{\"563\":1}}],[\"封闭\",{\"1\":{\"44\":1,\"621\":1,\"953\":1}}],[\"封装\",{\"0\":{\"27\":1},\"1\":{\"4\":1,\"11\":1,\"27\":4,\"32\":1,\"34\":2,\"44\":1,\"583\":1,\"701\":8,\"744\":1,\"925\":1}}],[\"拒绝\",{\"1\":{\"43\":1,\"536\":1}}],[\"种类\",{\"1\":{\"691\":1}}],[\"种\",{\"1\":{\"43\":1,\"97\":1,\"257\":1,\"411\":2,\"657\":1,\"704\":1}}],[\"文\",{\"1\":{\"944\":1}}],[\"文字\",{\"1\":{\"944\":1}}],[\"文生\",{\"0\":{\"946\":1},\"1\":{\"922\":1}}],[\"文威\",{\"2\":{\"870\":1}}],[\"文和图\",{\"1\":{\"864\":1}}],[\"文中\",{\"1\":{\"411\":1}}],[\"文献\",{\"1\":{\"222\":1,\"228\":1,\"254\":1,\"270\":1}}],[\"文档\",{\"1\":{\"174\":2}}],[\"文章\",{\"1\":{\"49\":1,\"52\":2,\"54\":3,\"174\":1,\"175\":1,\"304\":1,\"344\":1,\"811\":1,\"841\":1,\"845\":1,\"875\":1,\"887\":1}}],[\"文本文件\",{\"1\":{\"785\":1}}],[\"文本\",{\"1\":{\"42\":1,\"255\":2,\"422\":1,\"654\":3,\"858\":2,\"859\":9,\"860\":5,\"862\":3,\"864\":1,\"888\":1,\"889\":1,\"926\":1,\"929\":4,\"935\":1,\"940\":1,\"944\":2,\"945\":1}}],[\"文件名\",{\"1\":{\"793\":2}}],[\"文件传输\",{\"1\":{\"788\":1}}],[\"文件格式\",{\"1\":{\"175\":1}}],[\"文件夹\",{\"0\":{\"160\":1},\"1\":{\"172\":1,\"184\":1}}],[\"文件系统\",{\"1\":{\"38\":2}}],[\"文件\",{\"0\":{\"17\":1,\"28\":1,\"163\":1,\"175\":1,\"615\":1,\"616\":1,\"781\":1,\"782\":1,\"783\":2,\"789\":2,\"790\":1,\"791\":2,\"792\":1,\"793\":1,\"794\":1},\"1\":{\"4\":1,\"10\":1,\"11\":1,\"13\":1,\"19\":2,\"28\":9,\"29\":1,\"30\":2,\"31\":1,\"38\":14,\"39\":3,\"168\":2,\"170\":4,\"171\":2,\"172\":1,\"174\":4,\"175\":4,\"191\":3,\"342\":2,\"476\":1,\"492\":5,\"528\":1,\"529\":1,\"583\":1,\"596\":2,\"597\":4,\"598\":9,\"614\":1,\"615\":1,\"616\":7,\"617\":8,\"619\":1,\"620\":1,\"621\":2,\"624\":1,\"626\":4,\"639\":1,\"692\":1,\"722\":2,\"741\":3,\"757\":1,\"776\":2,\"781\":45,\"782\":13,\"784\":2,\"785\":13,\"787\":1,\"789\":3,\"790\":13,\"791\":13,\"793\":70,\"794\":13,\"826\":1}}],[\"日常\",{\"1\":{\"535\":1}}],[\"日期\",{\"1\":{\"42\":1,\"606\":1}}],[\"日志\",{\"0\":{\"4\":1,\"11\":1},\"1\":{\"4\":4,\"11\":5}}],[\"码值\",{\"1\":{\"689\":1}}],[\"码是\",{\"1\":{\"318\":1}}],[\"码为\",{\"1\":{\"42\":1}}],[\"码\",{\"0\":{\"43\":1,\"476\":1},\"1\":{\"42\":1,\"43\":1,\"318\":1,\"476\":7,\"647\":2,\"648\":1,\"785\":1,\"804\":1,\"963\":1}}],[\"协商\",{\"0\":{\"482\":1},\"1\":{\"480\":1}}],[\"协方差\",{\"1\":{\"225\":1,\"451\":3}}],[\"协调\",{\"1\":{\"217\":1,\"500\":1}}],[\"协议\",{\"1\":{\"42\":1,\"174\":1,\"175\":1,\"304\":1,\"475\":1,\"476\":1,\"480\":1,\"484\":3,\"485\":2,\"811\":1,\"841\":1,\"845\":1,\"875\":1}}],[\"协同\",{\"1\":{\"29\":1,\"33\":1}}],[\">\",{\"1\":{\"42\":7,\"70\":6,\"71\":22,\"72\":111,\"73\":7,\"74\":1,\"75\":13,\"76\":4,\"77\":8,\"78\":6,\"80\":9,\"81\":2,\"82\":44,\"83\":20,\"84\":6,\"85\":31,\"86\":9,\"87\":11,\"88\":8,\"89\":2,\"90\":8,\"91\":13,\"94\":5,\"95\":8,\"96\":6,\"97\":24,\"98\":12,\"99\":15,\"100\":31,\"102\":6,\"103\":88,\"104\":51,\"105\":7,\"106\":4,\"107\":5,\"112\":6,\"113\":5,\"114\":3,\"115\":7,\"116\":9,\"118\":6,\"119\":5,\"121\":8,\"122\":9,\"123\":10,\"125\":9,\"126\":11,\"128\":10,\"137\":4,\"138\":4,\"139\":4,\"142\":2,\"143\":3,\"146\":3,\"148\":1,\"152\":3,\"153\":2,\"168\":1,\"186\":4,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"299\":1,\"435\":1,\"524\":1,\"528\":6,\"529\":6,\"530\":6,\"531\":7,\"534\":2,\"535\":2,\"536\":1,\"538\":6,\"539\":4,\"540\":4,\"541\":5,\"542\":5,\"543\":4,\"544\":3,\"545\":19,\"547\":1,\"548\":6,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"554\":1,\"559\":2,\"563\":2,\"564\":1,\"570\":2,\"571\":1,\"573\":8,\"576\":4,\"581\":1,\"583\":1,\"584\":1,\"587\":2,\"589\":1,\"595\":9,\"598\":2,\"599\":3,\"600\":9,\"601\":4,\"605\":1,\"606\":1,\"612\":2,\"615\":2,\"624\":4,\"626\":5,\"663\":1,\"666\":1,\"667\":1,\"671\":1,\"676\":1,\"683\":1,\"685\":2,\"686\":2,\"689\":3,\"690\":4,\"692\":1,\"694\":2,\"695\":13,\"697\":1,\"698\":2,\"709\":9,\"713\":7,\"714\":1,\"721\":1,\"722\":2,\"724\":1,\"732\":2,\"738\":4,\"739\":2,\"740\":6,\"741\":7,\"745\":3,\"759\":4,\"760\":8,\"769\":7,\"770\":1,\"778\":1,\"781\":17,\"799\":2,\"808\":1,\"809\":12,\"811\":7,\"813\":1,\"817\":2,\"818\":1,\"825\":4,\"826\":20,\"827\":8,\"828\":11,\"829\":33,\"830\":56,\"841\":1,\"848\":1,\"896\":2,\"928\":1}}],[\"<\",{\"1\":{\"42\":7,\"70\":3,\"71\":9,\"72\":58,\"73\":2,\"75\":2,\"80\":4,\"81\":1,\"82\":9,\"84\":2,\"85\":7,\"86\":8,\"87\":9,\"90\":2,\"91\":2,\"93\":2,\"94\":2,\"95\":2,\"96\":2,\"97\":1,\"98\":2,\"99\":6,\"100\":11,\"102\":11,\"103\":5,\"104\":43,\"105\":9,\"106\":6,\"107\":6,\"112\":7,\"113\":7,\"114\":4,\"115\":9,\"116\":10,\"118\":7,\"119\":5,\"121\":8,\"122\":8,\"123\":10,\"125\":10,\"126\":10,\"128\":10,\"137\":12,\"138\":8,\"139\":6,\"142\":5,\"143\":3,\"146\":5,\"148\":2,\"152\":5,\"153\":2,\"168\":1,\"298\":2,\"304\":2,\"366\":1,\"437\":1,\"524\":5,\"528\":13,\"529\":13,\"530\":23,\"531\":24,\"534\":2,\"535\":4,\"536\":1,\"538\":6,\"539\":4,\"540\":4,\"541\":9,\"542\":14,\"543\":4,\"544\":2,\"545\":45,\"547\":1,\"548\":6,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"554\":1,\"559\":2,\"563\":2,\"564\":1,\"567\":2,\"568\":4,\"570\":2,\"571\":1,\"573\":8,\"576\":12,\"581\":1,\"583\":5,\"584\":1,\"587\":1,\"589\":1,\"595\":13,\"598\":2,\"599\":7,\"600\":19,\"601\":13,\"605\":17,\"606\":27,\"612\":18,\"613\":1,\"615\":5,\"621\":8,\"624\":10,\"666\":25,\"667\":1,\"668\":2,\"671\":7,\"683\":7,\"685\":8,\"686\":2,\"687\":2,\"689\":5,\"690\":15,\"692\":1,\"694\":2,\"695\":18,\"697\":1,\"698\":18,\"704\":18,\"706\":18,\"707\":2,\"709\":11,\"713\":13,\"714\":2,\"718\":12,\"721\":1,\"722\":28,\"724\":13,\"732\":12,\"734\":4,\"738\":4,\"739\":2,\"740\":5,\"741\":7,\"745\":22,\"749\":30,\"755\":2,\"759\":15,\"760\":4,\"769\":34,\"775\":4,\"778\":1,\"781\":83,\"793\":4,\"804\":4,\"806\":2,\"809\":4,\"810\":4,\"811\":14,\"816\":3,\"817\":12,\"818\":8,\"825\":9,\"826\":1,\"827\":23,\"828\":17,\"829\":2,\"830\":69,\"841\":1}}],[\"dwdx\",{\"1\":{\"897\":1}}],[\"dw\",{\"1\":{\"897\":3,\"900\":1}}],[\"ds\",{\"1\":{\"696\":1}}],[\"d3\",{\"1\":{\"600\":2}}],[\"db\",{\"1\":{\"451\":1}}],[\"d0\",{\"1\":{\"446\":1}}],[\"dlg\",{\"1\":{\"359\":2}}],[\"dkd\",{\"1\":{\"356\":1,\"357\":9,\"358\":1}}],[\"dkl\",{\"1\":{\"349\":3,\"451\":3}}],[\"dx\",{\"1\":{\"349\":1,\"897\":3,\"900\":1,\"904\":2}}],[\"dtd\",{\"1\":{\"900\":2}}],[\"dt\",{\"1\":{\"897\":3,\"900\":1}}],[\"dtype\",{\"1\":{\"848\":2}}],[\"dtps\",{\"1\":{\"392\":3}}],[\"dtu\",{\"0\":{\"342\":1},\"1\":{\"342\":4}}],[\"dti\",{\"1\":{\"226\":1}}],[\"dgt\",{\"1\":{\"338\":1}}],[\"dgcnn\",{\"0\":{\"275\":1},\"1\":{\"225\":3,\"276\":2,\"340\":1,\"401\":2}}],[\"drift\",{\"1\":{\"897\":1}}],[\"driving\",{\"1\":{\"427\":4}}],[\"driven\",{\"0\":{\"945\":1},\"1\":{\"945\":2}}],[\"drive\",{\"1\":{\"427\":1}}],[\"drag\",{\"0\":{\"954\":1}}],[\"draggan\",{\"1\":{\"454\":1}}],[\"dramatically\",{\"1\":{\"429\":1}}],[\"dreproj\",{\"1\":{\"298\":1}}],[\"dropout\",{\"1\":{\"877\":7}}],[\"drop\",{\"1\":{\"263\":2,\"845\":5}}],[\"d2\",{\"1\":{\"290\":2,\"600\":2}}],[\"d129aac5cc5\",{\"1\":{\"528\":2,\"529\":3,\"530\":1,\"531\":1}}],[\"d1\",{\"1\":{\"290\":2,\"292\":2,\"298\":4,\"446\":1,\"600\":2,\"606\":6}}],[\"dm\",{\"1\":{\"935\":1}}],[\"dmtet\",{\"0\":{\"277\":1},\"1\":{\"277\":1,\"282\":1,\"340\":1}}],[\"dmfv\",{\"1\":{\"228\":1}}],[\"dynamics\",{\"0\":{\"905\":1}}],[\"dynamicvit\",{\"1\":{\"390\":1,\"392\":2}}],[\"dynamic\",{\"1\":{\"275\":1,\"609\":1,\"770\":1}}],[\"dcnv2\",{\"0\":{\"371\":1},\"1\":{\"370\":1,\"371\":1,\"372\":4}}],[\"dcnv3\",{\"0\":{\"372\":1},\"1\":{\"370\":3,\"372\":1,\"373\":1}}],[\"dcn\",{\"0\":{\"370\":1},\"1\":{\"361\":3,\"372\":1}}],[\"dcnn\",{\"1\":{\"228\":2}}],[\"dcv\",{\"1\":{\"359\":1}}],[\"dcontextnet\",{\"1\":{\"227\":1}}],[\"dpointcapsnet\",{\"1\":{\"228\":1}}],[\"dpams\",{\"1\":{\"225\":1}}],[\"dpam\",{\"1\":{\"225\":2}}],[\"dummy\",{\"1\":{\"840\":9}}],[\"dummyhead\",{\"1\":{\"103\":26}}],[\"duration\",{\"1\":{\"609\":3,\"835\":5}}],[\"during\",{\"1\":{\"321\":1}}],[\"due\",{\"1\":{\"380\":2}}],[\"dual\",{\"0\":{\"320\":1,\"321\":1},\"1\":{\"314\":2,\"321\":2}}],[\"duan\",{\"1\":{\"220\":1}}],[\"df\",{\"1\":{\"172\":1}}],[\"dfs\",{\"1\":{\"85\":4,\"90\":5,\"96\":4,\"100\":4}}],[\"ddd\",{\"1\":{\"648\":1}}],[\"ddim\",{\"1\":{\"453\":1}}],[\"ddpm\",{\"0\":{\"906\":1,\"948\":1,\"949\":1},\"1\":{\"453\":1,\"900\":2,\"901\":1,\"910\":1,\"917\":1,\"930\":2,\"938\":2,\"940\":1,\"941\":1,\"945\":1,\"947\":1,\"951\":2,\"952\":3}}],[\"ddq\",{\"0\":{\"433\":1}}],[\"dd\",{\"1\":{\"170\":1,\"648\":1,\"757\":1}}],[\"dall\",{\"1\":{\"864\":1,\"922\":1}}],[\"day\",{\"1\":{\"606\":4,\"637\":1}}],[\"dark\",{\"1\":{\"354\":1,\"355\":1}}],[\"daniel\",{\"1\":{\"218\":1}}],[\"dai\",{\"1\":{\"126\":4,\"247\":1}}],[\"dat\",{\"1\":{\"781\":31,\"793\":8,\"794\":3}}],[\"dataloader\",{\"1\":{\"845\":2}}],[\"dataset\",{\"1\":{\"343\":2,\"422\":6,\"423\":3,\"424\":1,\"425\":1,\"426\":1,\"427\":5,\"428\":2,\"429\":2,\"845\":3}}],[\"datasets\",{\"1\":{\"261\":1,\"427\":2}}],[\"data\",{\"1\":{\"54\":2,\"184\":1,\"208\":1,\"342\":2,\"426\":5,\"577\":1,\"785\":1,\"837\":2,\"838\":1,\"844\":1,\"845\":2,\"910\":1,\"911\":1,\"959\":1}}],[\"date\",{\"1\":{\"42\":2,\"606\":27,\"637\":3,\"757\":4}}],[\"difussion\",{\"0\":{\"867\":1}}],[\"diffumask\",{\"1\":{\"888\":2}}],[\"diffumasks\",{\"0\":{\"888\":1}}],[\"diffuse\",{\"1\":{\"876\":1}}],[\"diffusionclip\",{\"1\":{\"862\":1}}],[\"diffusioncllp\",{\"0\":{\"862\":1}}],[\"diffusion\",{\"0\":{\"866\":1,\"897\":1,\"911\":1,\"921\":1,\"924\":1,\"938\":1,\"940\":1,\"942\":1,\"944\":1,\"945\":1,\"947\":1,\"950\":2,\"951\":1,\"953\":1},\"1\":{\"453\":1,\"862\":1,\"864\":4,\"865\":1,\"868\":1,\"876\":1,\"877\":1,\"888\":1,\"894\":1,\"897\":1,\"901\":2,\"910\":2,\"921\":3,\"922\":6,\"924\":2,\"928\":1,\"929\":3,\"935\":1,\"938\":1,\"940\":1,\"944\":1,\"945\":3,\"947\":2,\"951\":1,\"953\":1}}],[\"diffseg\",{\"0\":{\"876\":1},\"1\":{\"453\":1}}],[\"differential\",{\"0\":{\"895\":1},\"1\":{\"895\":1,\"939\":1}}],[\"differentiable\",{\"0\":{\"290\":1}}],[\"different\",{\"1\":{\"361\":1,\"429\":1}}],[\"diff\",{\"1\":{\"312\":1}}],[\"dict\",{\"1\":{\"846\":21}}],[\"diaplay\",{\"1\":{\"722\":1}}],[\"diamond\",{\"1\":{\"682\":1,\"683\":2}}],[\"dino\",{\"0\":{\"432\":1}}],[\"divisible\",{\"1\":{\"845\":2}}],[\"divides\",{\"1\":{\"366\":1}}],[\"divided\",{\"1\":{\"314\":1}}],[\"diverse\",{\"1\":{\"427\":1}}],[\"diversity\",{\"1\":{\"427\":1}}],[\"divergence\",{\"1\":{\"349\":1,\"354\":1}}],[\"dihedral\",{\"1\":{\"305\":1}}],[\"dims\",{\"1\":{\"305\":5}}],[\"dim\",{\"1\":{\"304\":5,\"344\":10,\"848\":4,\"849\":2,\"868\":1,\"877\":14}}],[\"dimensional\",{\"1\":{\"208\":4,\"312\":1}}],[\"dimension\",{\"1\":{\"208\":1}}],[\"direction\",{\"1\":{\"322\":1}}],[\"directly\",{\"1\":{\"202\":1}}],[\"directory\",{\"0\":{\"166\":1},\"1\":{\"166\":1,\"175\":1}}],[\"discriminative\",{\"1\":{\"956\":1}}],[\"discriminator\",{\"0\":{\"284\":1},\"1\":{\"957\":1}}],[\"disco\",{\"1\":{\"864\":1,\"922\":1}}],[\"disentangled\",{\"1\":{\"195\":1}}],[\"dispaly\",{\"1\":{\"769\":1,\"770\":1}}],[\"dispaly1\",{\"1\":{\"769\":1}}],[\"disp\",{\"1\":{\"184\":1}}],[\"display1\",{\"1\":{\"605\":3}}],[\"display\",{\"0\":{\"157\":1,\"187\":1},\"1\":{\"188\":1,\"189\":2,\"605\":9,\"606\":14,\"704\":1,\"706\":5,\"707\":3,\"708\":1,\"709\":1,\"722\":2,\"749\":2,\"769\":19,\"781\":2}}],[\"diskname\",{\"1\":{\"160\":1}}],[\"distortion\",{\"1\":{\"872\":2}}],[\"distinct\",{\"1\":{\"460\":4}}],[\"distill\",{\"1\":{\"359\":2}}],[\"distillation\",{\"0\":{\"345\":1,\"352\":1,\"356\":1},\"1\":{\"354\":2,\"358\":1,\"377\":1}}],[\"distribution\",{\"1\":{\"191\":1,\"910\":1,\"911\":1}}],[\"distribute\",{\"1\":{\"54\":2}}],[\"distance\",{\"1\":{\"49\":1,\"884\":2}}],[\"digits\",{\"1\":{\"114\":7}}],[\"di\",{\"1\":{\"81\":1,\"290\":1,\"292\":1,\"298\":1}}],[\"d\",{\"0\":{\"56\":1,\"196\":1,\"212\":1,\"231\":1,\"240\":1,\"241\":1,\"244\":1,\"278\":1,\"284\":1,\"330\":2,\"341\":1,\"953\":1},\"1\":{\"47\":1,\"180\":1,\"184\":1,\"191\":1,\"192\":2,\"195\":5,\"196\":2,\"197\":1,\"198\":7,\"199\":6,\"200\":1,\"201\":1,\"214\":6,\"217\":1,\"218\":1,\"221\":1,\"222\":6,\"223\":2,\"227\":2,\"228\":2,\"229\":1,\"235\":4,\"242\":5,\"244\":1,\"245\":8,\"246\":10,\"247\":9,\"256\":1,\"257\":4,\"259\":1,\"261\":3,\"262\":4,\"266\":2,\"270\":1,\"272\":1,\"273\":2,\"277\":5,\"284\":1,\"290\":10,\"291\":1,\"292\":3,\"293\":4,\"294\":2,\"298\":1,\"299\":6,\"303\":3,\"304\":2,\"313\":1,\"321\":2,\"332\":1,\"337\":1,\"338\":1,\"340\":4,\"342\":5,\"343\":1,\"370\":1,\"377\":1,\"398\":1,\"411\":1,\"422\":1,\"426\":3,\"595\":3,\"600\":3,\"606\":7,\"676\":1,\"835\":1,\"837\":1,\"859\":6,\"877\":3,\"945\":1,\"953\":1,\"957\":4,\"963\":1}}],[\"dog\",{\"1\":{\"860\":1}}],[\"document\",{\"1\":{\"905\":1}}],[\"documentation\",{\"1\":{\"836\":1,\"845\":1}}],[\"docker\",{\"0\":{\"164\":1,\"165\":1,\"183\":1},\"1\":{\"164\":1,\"165\":6,\"166\":1,\"184\":3,\"186\":2}}],[\"door\",{\"1\":{\"427\":1}}],[\"does\",{\"1\":{\"309\":1}}],[\"dot\",{\"1\":{\"305\":2,\"859\":3}}],[\"domain\",{\"1\":{\"259\":2,\"864\":1,\"952\":1}}],[\"downsampling\",{\"1\":{\"928\":1}}],[\"down\",{\"1\":{\"191\":2,\"402\":1}}],[\"dos\",{\"1\":{\"174\":3}}],[\"double\",{\"1\":{\"72\":4,\"535\":3,\"600\":2,\"632\":2,\"633\":2,\"644\":2,\"665\":1,\"666\":2,\"741\":1,\"798\":2,\"799\":1,\"801\":1,\"804\":1}}],[\"do\",{\"1\":{\"46\":1,\"825\":1,\"827\":2,\"830\":1}}],[\"deartifacts\",{\"1\":{\"875\":1}}],[\"dead\",{\"1\":{\"530\":2}}],[\"dehze\",{\"1\":{\"875\":1}}],[\"deblur\",{\"1\":{\"875\":1}}],[\"deblurring\",{\"0\":{\"871\":1},\"1\":{\"453\":1,\"871\":2}}],[\"denote\",{\"1\":{\"945\":1}}],[\"denoise\",{\"1\":{\"875\":1}}],[\"denoiser\",{\"1\":{\"874\":1}}],[\"denoising\",{\"0\":{\"866\":1,\"938\":1,\"940\":1,\"951\":1},\"1\":{\"910\":2,\"938\":1,\"940\":1,\"951\":1}}],[\"density\",{\"1\":{\"904\":2}}],[\"denseclip\",{\"1\":{\"889\":1}}],[\"densely\",{\"1\":{\"426\":1}}],[\"densepose\",{\"1\":{\"422\":1}}],[\"densepoint\",{\"1\":{\"222\":1}}],[\"dense\",{\"1\":{\"380\":1,\"422\":1,\"426\":1,\"889\":2,\"956\":1}}],[\"derived\",{\"1\":{\"748\":1}}],[\"deq\",{\"1\":{\"574\":20,\"575\":6,\"576\":10}}],[\"dequeue\",{\"1\":{\"570\":1,\"572\":1}}],[\"deque\",{\"0\":{\"572\":1},\"1\":{\"107\":2,\"563\":4,\"572\":2,\"573\":10,\"574\":1,\"576\":1,\"577\":10}}],[\"demo4\",{\"0\":{\"531\":1},\"1\":{\"531\":3,\"532\":1}}],[\"demo3\",{\"1\":{\"530\":4}}],[\"demo2\",{\"0\":{\"529\":1},\"1\":{\"529\":4}}],[\"demo\",{\"1\":{\"528\":3,\"529\":3,\"530\":1,\"531\":1}}],[\"demo1\",{\"0\":{\"528\":1},\"1\":{\"528\":4}}],[\"demonstrated\",{\"1\":{\"309\":1}}],[\"deit\",{\"1\":{\"388\":1}}],[\"decoupled\",{\"0\":{\"345\":1,\"352\":1,\"356\":1},\"1\":{\"358\":1,\"377\":1}}],[\"decoding\",{\"1\":{\"309\":1}}],[\"decoder\",{\"0\":{\"197\":1,\"201\":1,\"320\":1},\"1\":{\"195\":2,\"200\":1,\"314\":1,\"321\":1,\"344\":3,\"877\":1,\"928\":2}}],[\"decor\",{\"1\":{\"284\":1}}],[\"deem\",{\"1\":{\"261\":1}}],[\"deeper\",{\"1\":{\"380\":1}}],[\"deepsets\",{\"1\":{\"220\":1}}],[\"deep\",{\"0\":{\"49\":1,\"212\":1},\"1\":{\"49\":1,\"277\":1,\"350\":1,\"928\":1}}],[\"delnum\",{\"1\":{\"830\":6}}],[\"del\",{\"1\":{\"828\":1,\"830\":5}}],[\"delta\",{\"1\":{\"371\":1}}],[\"delimiter\",{\"1\":{\"105\":2}}],[\"deleteatindex\",{\"1\":{\"103\":1}}],[\"delete\",{\"0\":{\"711\":1,\"713\":1},\"1\":{\"97\":4,\"103\":7,\"532\":1,\"623\":1,\"712\":2,\"713\":5,\"714\":4,\"722\":1}}],[\"deletenode\",{\"1\":{\"97\":3}}],[\"detr\",{\"0\":{\"344\":1,\"431\":1},\"1\":{\"344\":9,\"377\":1}}],[\"detection\",{\"1\":{\"357\":2,\"367\":1,\"422\":4,\"428\":2}}],[\"detector\",{\"1\":{\"273\":1,\"357\":1}}],[\"detectcycle\",{\"1\":{\"103\":2}}],[\"detail\",{\"1\":{\"427\":1}}],[\"details\",{\"1\":{\"54\":1,\"174\":1,\"175\":1,\"304\":1,\"811\":1,\"841\":1,\"845\":1,\"855\":1,\"875\":1}}],[\"detached\",{\"1\":{\"8\":1}}],[\"detach\",{\"1\":{\"8\":1}}],[\"de\",{\"1\":{\"82\":1}}],[\"depthwise\",{\"1\":{\"372\":1}}],[\"depthcontrast\",{\"0\":{\"262\":1},\"1\":{\"259\":1}}],[\"depth\",{\"0\":{\"286\":1,\"426\":1},\"1\":{\"54\":1,\"72\":20,\"75\":10,\"114\":5,\"297\":1,\"426\":7}}],[\"define\",{\"0\":{\"662\":1},\"1\":{\"581\":1,\"650\":1,\"651\":1,\"653\":1,\"654\":3,\"662\":1,\"825\":1}}],[\"definition\",{\"1\":{\"70\":1,\"72\":1}}],[\"defomable\",{\"0\":{\"365\":1}}],[\"deformable\",{\"0\":{\"361\":1,\"362\":1,\"364\":1,\"369\":2},\"1\":{\"360\":1,\"361\":2,\"369\":1}}],[\"deformsslice\",{\"1\":{\"246\":1}}],[\"defferrard\",{\"1\":{\"226\":1}}],[\"def\",{\"1\":{\"114\":2,\"304\":2,\"305\":3,\"344\":2,\"834\":1,\"835\":1,\"837\":1,\"848\":1,\"854\":2,\"855\":1,\"868\":1,\"877\":3}}],[\"default\",{\"1\":{\"54\":2,\"818\":6,\"845\":1}}],[\"deflate\",{\"1\":{\"41\":1}}],[\"desc\",{\"1\":{\"469\":6}}],[\"descriptions\",{\"1\":{\"422\":1}}],[\"descriptor\",{\"1\":{\"28\":1}}],[\"destiny\",{\"1\":{\"845\":1}}],[\"destructor\",{\"0\":{\"722\":1},\"1\":{\"722\":1}}],[\"destroy\",{\"1\":{\"27\":1}}],[\"destory\",{\"1\":{\"23\":1,\"24\":1,\"25\":1}}],[\"device\",{\"1\":{\"845\":1,\"846\":1,\"868\":2}}],[\"dev\",{\"1\":{\"10\":1,\"170\":1,\"172\":2,\"852\":1}}],[\"正反\",{\"1\":{\"884\":1}}],[\"正比\",{\"1\":{\"883\":1}}],[\"正在\",{\"1\":{\"841\":1}}],[\"正负\",{\"1\":{\"813\":1,\"814\":1}}],[\"正整数\",{\"1\":{\"595\":1,\"689\":1}}],[\"正向\",{\"1\":{\"541\":1,\"545\":3}}],[\"正忙\",{\"1\":{\"476\":1}}],[\"正态分布\",{\"1\":{\"451\":2,\"901\":1,\"928\":1}}],[\"正切\",{\"1\":{\"449\":1}}],[\"正值\",{\"1\":{\"437\":1}}],[\"正如\",{\"1\":{\"332\":1}}],[\"正弦\",{\"1\":{\"322\":1}}],[\"正则\",{\"0\":{\"293\":1},\"1\":{\"244\":1,\"285\":1,\"293\":1,\"294\":1,\"299\":1,\"928\":2,\"935\":1}}],[\"正\",{\"1\":{\"148\":1,\"263\":1,\"268\":1,\"446\":1,\"893\":2}}],[\"正是\",{\"1\":{\"126\":2,\"750\":1}}],[\"正好\",{\"1\":{\"85\":1}}],[\"正确\",{\"1\":{\"51\":1,\"53\":2,\"290\":1,\"342\":1,\"348\":1,\"476\":1,\"500\":1,\"528\":1,\"540\":1,\"559\":1,\"595\":2,\"616\":1,\"683\":2,\"720\":1,\"755\":1,\"830\":1,\"859\":1,\"860\":1}}],[\"正常\",{\"0\":{\"842\":1},\"1\":{\"43\":2,\"476\":1,\"485\":1,\"590\":1,\"624\":1,\"712\":1,\"843\":1}}],[\"正文\",{\"1\":{\"42\":3}}],[\"正式\",{\"1\":{\"8\":1,\"35\":1,\"55\":1,\"606\":3,\"767\":1}}],[\"消失\",{\"0\":{\"448\":1},\"1\":{\"446\":3,\"612\":1}}],[\"消融\",{\"1\":{\"355\":1}}],[\"消耗\",{\"1\":{\"222\":2,\"406\":1}}],[\"消除\",{\"1\":{\"204\":1,\"283\":1,\"303\":1,\"312\":1,\"342\":2,\"372\":1}}],[\"消消\",{\"1\":{\"106\":1}}],[\"消息\",{\"1\":{\"42\":2,\"44\":1,\"53\":1,\"174\":1,\"701\":5,\"769\":1}}],[\"消息报\",{\"1\":{\"42\":4}}],[\"消费者\",{\"1\":{\"4\":1,\"11\":1}}],[\"叫作\",{\"1\":{\"344\":1}}],[\"叫做\",{\"1\":{\"93\":1,\"379\":2,\"411\":1,\"537\":1}}],[\"叫\",{\"1\":{\"41\":1,\"85\":1,\"399\":1,\"891\":1}}],[\"媒体\",{\"1\":{\"41\":2}}],[\"代换\",{\"1\":{\"652\":2}}],[\"代沟\",{\"1\":{\"386\":1}}],[\"代价\",{\"0\":{\"292\":1,\"293\":1},\"1\":{\"293\":3,\"332\":1,\"337\":1}}],[\"代表作\",{\"1\":{\"402\":3}}],[\"代表性\",{\"1\":{\"228\":1,\"244\":1}}],[\"代表\",{\"1\":{\"128\":1,\"160\":1,\"195\":1,\"214\":2,\"242\":1,\"290\":1,\"292\":1,\"347\":3,\"379\":1,\"399\":1,\"600\":1,\"619\":1,\"620\":1,\"634\":2,\"635\":1,\"637\":1,\"676\":3,\"688\":1,\"689\":1,\"690\":1,\"801\":1,\"810\":1,\"835\":1,\"904\":1,\"957\":3,\"959\":1,\"961\":1}}],[\"代替\",{\"1\":{\"97\":6,\"246\":1,\"395\":1,\"599\":1,\"600\":1,\"623\":1,\"634\":1,\"662\":1,\"725\":1,\"925\":1}}],[\"代理\",{\"1\":{\"41\":3,\"476\":1}}],[\"代码\",{\"0\":{\"101\":1,\"168\":1,\"624\":1,\"625\":1},\"1\":{\"27\":2,\"30\":4,\"34\":1,\"44\":1,\"67\":1,\"103\":1,\"104\":1,\"153\":1,\"168\":5,\"342\":2,\"344\":1,\"359\":1,\"360\":1,\"385\":1,\"396\":1,\"500\":1,\"528\":1,\"529\":1,\"530\":3,\"531\":1,\"534\":1,\"535\":1,\"573\":1,\"599\":1,\"624\":1,\"701\":1,\"708\":5,\"736\":1,\"781\":1,\"785\":2,\"833\":3,\"854\":1,\"894\":1}}],[\"代码段\",{\"1\":{\"24\":3,\"26\":1,\"708\":2}}],[\"%\",{\"1\":{\"41\":1,\"104\":2,\"105\":1,\"143\":1,\"199\":1,\"242\":1,\"249\":1,\"254\":2,\"261\":4,\"355\":8,\"357\":4,\"370\":6,\"436\":1,\"798\":1,\"801\":1,\"805\":2,\"811\":1,\"835\":1,\"922\":1,\"957\":1}}],[\"kwargs\",{\"1\":{\"837\":1}}],[\"kws\",{\"1\":{\"837\":2}}],[\"k2\",{\"1\":{\"451\":2}}],[\"k1\",{\"1\":{\"451\":2}}],[\"kk\",{\"1\":{\"391\":1}}],[\"kullback\",{\"1\":{\"349\":1}}],[\"kumawat\",{\"1\":{\"223\":1}}],[\"kl\",{\"0\":{\"346\":1,\"349\":1},\"1\":{\"349\":7,\"354\":3,\"358\":2,\"451\":1,\"882\":1,\"884\":3,\"928\":3}}],[\"knowledge\",{\"1\":{\"354\":3,\"355\":1,\"358\":1}}],[\"knolwdge\",{\"0\":{\"345\":1,\"352\":1,\"356\":1},\"1\":{\"377\":1}}],[\"knn\",{\"1\":{\"245\":1,\"254\":1,\"312\":1,\"317\":2}}],[\"kst\",{\"1\":{\"334\":1}}],[\"ksem\",{\"1\":{\"197\":2}}],[\"kill\",{\"1\":{\"841\":1,\"852\":4}}],[\"kinect\",{\"1\":{\"426\":2}}],[\"kins\",{\"1\":{\"197\":2}}],[\"kitti\",{\"1\":{\"242\":4}}],[\"kd\",{\"1\":{\"227\":3,\"354\":4,\"355\":3,\"356\":2,\"357\":3}}],[\"kcnet\",{\"1\":{\"225\":1}}],[\"kpconv\",{\"1\":{\"222\":1}}],[\"k\",{\"0\":{\"108\":1,\"143\":1},\"1\":{\"103\":8,\"105\":6,\"107\":6,\"110\":1,\"112\":9,\"113\":6,\"143\":5,\"152\":5,\"197\":2,\"201\":1,\"222\":2,\"226\":3,\"227\":3,\"261\":2,\"304\":2,\"317\":2,\"334\":2,\"357\":1,\"366\":6,\"370\":1,\"371\":9,\"372\":5,\"391\":3,\"392\":2,\"411\":4,\"422\":13,\"425\":1,\"427\":1,\"428\":2,\"451\":2,\"599\":3,\"654\":1,\"846\":8,\"913\":1}}],[\"kexue\",{\"1\":{\"862\":2}}],[\"kernel\",{\"1\":{\"304\":1,\"834\":4}}],[\"kernels\",{\"1\":{\"192\":1,\"195\":2}}],[\"keypoints\",{\"1\":{\"422\":3}}],[\"keys\",{\"1\":{\"195\":1,\"846\":2}}],[\"key\",{\"1\":{\"97\":6,\"195\":1,\"209\":1,\"422\":1,\"544\":1,\"545\":10,\"846\":14,\"930\":1}}],[\"keepdim\",{\"1\":{\"848\":1}}],[\"keep\",{\"1\":{\"41\":2}}],[\"kmp\",{\"0\":{\"66\":1},\"1\":{\"67\":1,\"105\":1}}],[\"khtml\",{\"1\":{\"41\":1}}],[\"x8\",{\"1\":{\"961\":1}}],[\"x86\",{\"1\":{\"191\":3}}],[\"x768\",{\"1\":{\"929\":3}}],[\"x512\",{\"1\":{\"922\":1,\"928\":1}}],[\"x64x4\",{\"1\":{\"928\":1}}],[\"x64\",{\"1\":{\"922\":1,\"961\":1}}],[\"xt\",{\"1\":{\"867\":12,\"869\":47,\"896\":5,\"897\":82,\"899\":4,\"900\":24,\"901\":3,\"906\":1,\"917\":9,\"940\":2,\"941\":1,\"944\":2,\"947\":9}}],[\"xticklabels\",{\"1\":{\"837\":2}}],[\"xdd\",{\"1\":{\"648\":1}}],[\"xy\",{\"1\":{\"451\":2}}],[\"x0\",{\"1\":{\"446\":1,\"867\":2,\"868\":1,\"869\":13,\"873\":1,\"896\":2,\"899\":2,\"900\":2,\"901\":1,\"906\":1,\"917\":4}}],[\"xwin\",{\"1\":{\"399\":1}}],[\"xj\",{\"1\":{\"394\":3,\"395\":3,\"399\":1}}],[\"x32\",{\"1\":{\"961\":1}}],[\"x3\",{\"1\":{\"380\":1}}],[\"x4\",{\"1\":{\"380\":2,\"961\":1}}],[\"xgen\",{\"1\":{\"862\":1}}],[\"xg\",{\"1\":{\"372\":2}}],[\"xk\",{\"1\":{\"268\":1}}],[\"xref\",{\"1\":{\"862\":1}}],[\"xr\",{\"1\":{\"268\":1}}],[\"x256\",{\"1\":{\"922\":2,\"928\":1}}],[\"x20\",{\"1\":{\"642\":1}}],[\"x2\",{\"1\":{\"260\":2,\"347\":1,\"451\":3,\"902\":1}}],[\"xn\",{\"1\":{\"203\":1,\"347\":1,\"902\":1}}],[\"x16\",{\"1\":{\"961\":1}}],[\"x1024\",{\"1\":{\"922\":1,\"961\":1}}],[\"x12\",{\"1\":{\"648\":1}}],[\"x1\",{\"1\":{\"203\":1,\"260\":2,\"347\":1,\"446\":1,\"896\":1,\"902\":1}}],[\"x11\",{\"1\":{\"189\":1}}],[\"xconfig\",{\"1\":{\"191\":2}}],[\"xcb\",{\"0\":{\"157\":1,\"187\":1},\"1\":{\"188\":3,\"189\":2}}],[\"xserver\",{\"1\":{\"189\":1}}],[\"xorg\",{\"1\":{\"189\":3}}],[\"xiaolincoding\",{\"1\":{\"473\":1}}],[\"xit\",{\"1\":{\"394\":1}}],[\"xinjieyuan\",{\"1\":{\"304\":1}}],[\"xie\",{\"1\":{\"228\":1}}],[\"xiongchun11\",{\"1\":{\"175\":1}}],[\"xi\",{\"1\":{\"82\":1,\"347\":3,\"394\":2,\"395\":5,\"399\":15,\"902\":1,\"913\":2}}],[\"xq\",{\"1\":{\"56\":1}}],[\"xp\",{\"1\":{\"56\":1,\"332\":2}}],[\"xx\",{\"1\":{\"43\":5,\"174\":1,\"476\":5}}],[\"x\",{\"1\":{\"41\":1,\"69\":2,\"70\":4,\"103\":4,\"182\":1,\"191\":1,\"196\":1,\"203\":1,\"223\":1,\"260\":1,\"268\":1,\"280\":2,\"281\":1,\"282\":1,\"284\":1,\"290\":4,\"299\":1,\"304\":23,\"317\":2,\"344\":2,\"347\":10,\"348\":22,\"349\":29,\"363\":1,\"364\":1,\"366\":2,\"371\":2,\"394\":2,\"399\":2,\"411\":1,\"413\":1,\"435\":4,\"437\":1,\"446\":6,\"451\":21,\"543\":2,\"574\":5,\"587\":2,\"595\":1,\"600\":2,\"601\":1,\"615\":3,\"642\":1,\"654\":2,\"738\":6,\"740\":2,\"801\":4,\"814\":1,\"817\":4,\"834\":4,\"841\":1,\"854\":2,\"855\":2,\"868\":6,\"869\":1,\"877\":13,\"896\":1,\"897\":7,\"900\":1,\"902\":3,\"903\":4,\"904\":58,\"905\":3,\"906\":1,\"907\":1,\"908\":1,\"909\":1,\"913\":5,\"918\":4,\"944\":1,\"945\":1,\"957\":3}}],[\"97\",{\"1\":{\"647\":1,\"781\":2}}],[\"977.\",{\"1\":{\"102\":1}}],[\"987655\",{\"1\":{\"600\":1}}],[\"98.\",{\"1\":{\"99\":1}}],[\"95165265\",{\"1\":{\"855\":1}}],[\"95\",{\"1\":{\"254\":1,\"436\":1,\"818\":1}}],[\"99\",{\"1\":{\"242\":1,\"428\":1}}],[\"9917\",{\"1\":{\"126\":2}}],[\"94\",{\"1\":{\"228\":1}}],[\"94.\",{\"1\":{\"70\":1}}],[\"93\",{\"1\":{\"228\":1}}],[\"93.\",{\"0\":{\"119\":1}}],[\"92\",{\"1\":{\"228\":1}}],[\"91\",{\"1\":{\"228\":1,\"344\":1,\"422\":2}}],[\"90\",{\"1\":{\"647\":1,\"781\":1,\"935\":1}}],[\"90.\",{\"0\":{\"122\":1}}],[\"904.\",{\"1\":{\"102\":1}}],[\"9.\",{\"0\":{\"81\":1}}],[\"9\",{\"1\":{\"41\":1,\"42\":1,\"44\":1,\"72\":2,\"97\":1,\"113\":2,\"114\":2,\"254\":1,\"357\":1,\"411\":3,\"417\":1,\"612\":1,\"647\":1,\"811\":1,\"841\":1,\"852\":3}}],[\"89\",{\"1\":{\"745\":1}}],[\"89.2\",{\"1\":{\"370\":1}}],[\"84.9\",{\"1\":{\"370\":1}}],[\"84\",{\"1\":{\"228\":1,\"818\":1,\"927\":1}}],[\"844.\",{\"1\":{\"102\":1}}],[\"83\",{\"1\":{\"228\":1,\"422\":2}}],[\"87\",{\"1\":{\"228\":1}}],[\"8737\",{\"1\":{\"81\":1}}],[\"88\",{\"1\":{\"228\":1}}],[\"8888\",{\"1\":{\"165\":5}}],[\"8192\",{\"1\":{\"928\":1}}],[\"81\",{\"1\":{\"228\":1,\"422\":1}}],[\"85\",{\"1\":{\"228\":1,\"818\":1}}],[\"860\",{\"1\":{\"927\":1}}],[\"86\",{\"1\":{\"228\":1}}],[\"82\",{\"1\":{\"228\":1}}],[\"800\",{\"1\":{\"344\":1}}],[\"80\",{\"1\":{\"227\":1,\"422\":2,\"484\":1,\"781\":2}}],[\"8.\",{\"0\":{\"80\":1}}],[\"8\",{\"1\":{\"41\":2,\"42\":3,\"44\":1,\"97\":3,\"114\":2,\"188\":1,\"234\":1,\"249\":2,\"254\":1,\"288\":1,\"344\":1,\"423\":1,\"601\":1,\"612\":2,\"623\":1,\"633\":4,\"741\":1,\"804\":1,\"807\":2,\"811\":1,\"882\":3,\"928\":1,\"959\":1,\"961\":1}}],[\"gwpscut\",{\"1\":{\"872\":1}}],[\"g3\",{\"1\":{\"600\":2}}],[\"g3d\",{\"1\":{\"225\":1}}],[\"g2\",{\"1\":{\"600\":2,\"897\":15}}],[\"g1\",{\"1\":{\"600\":2}}],[\"gcc\",{\"1\":{\"589\":1}}],[\"gcn\",{\"0\":{\"359\":1},\"1\":{\"282\":2,\"283\":1,\"359\":3,\"377\":1,\"398\":1,\"401\":1}}],[\"gnn\",{\"0\":{\"397\":1},\"1\":{\"359\":1,\"377\":1,\"397\":1,\"399\":2}}],[\"gpt\",{\"1\":{\"313\":1,\"320\":1,\"325\":1}}],[\"gpus\",{\"1\":{\"211\":1}}],[\"gpu\",{\"0\":{\"852\":1},\"1\":{\"55\":1,\"210\":1,\"245\":1,\"839\":1,\"852\":5}}],[\"glide\",{\"1\":{\"929\":1,\"947\":1}}],[\"glu\",{\"1\":{\"877\":1}}],[\"glob\",{\"1\":{\"835\":1}}],[\"globally\",{\"1\":{\"380\":1}}],[\"global\",{\"0\":{\"306\":1},\"1\":{\"621\":1,\"892\":1}}],[\"glx\",{\"1\":{\"166\":1}}],[\"gib\",{\"1\":{\"852\":3}}],[\"gif\",{\"0\":{\"835\":1},\"1\":{\"832\":1,\"835\":8}}],[\"given\",{\"1\":{\"304\":1,\"366\":1,\"854\":1,\"945\":1}}],[\"github\",{\"1\":{\"208\":1,\"229\":1,\"277\":1,\"301\":1,\"312\":1,\"313\":1,\"340\":1,\"360\":1,\"385\":1,\"429\":1,\"864\":1,\"877\":1,\"887\":2,\"888\":1,\"889\":1,\"891\":1,\"901\":1,\"910\":1,\"921\":1}}],[\"git\",{\"0\":{\"167\":1,\"168\":1},\"1\":{\"168\":6,\"185\":1}}],[\"gated\",{\"1\":{\"877\":2}}],[\"gateway\",{\"1\":{\"476\":1}}],[\"gans\",{\"0\":{\"942\":1,\"950\":1},\"1\":{\"912\":1,\"956\":1}}],[\"gan\",{\"0\":{\"954\":1,\"957\":1,\"958\":1},\"1\":{\"284\":1,\"454\":1,\"722\":1,\"769\":1,\"864\":2,\"875\":1,\"890\":1,\"924\":1,\"925\":1,\"928\":1,\"955\":2,\"957\":10,\"958\":1}}],[\"gap\",{\"1\":{\"259\":2,\"261\":1,\"875\":1}}],[\"goto\",{\"1\":{\"819\":1}}],[\"google\",{\"1\":{\"375\":1}}],[\"good\",{\"1\":{\"261\":1}}],[\"going\",{\"1\":{\"344\":1}}],[\"goes\",{\"1\":{\"42\":1}}],[\"gss\",{\"1\":{\"220\":1}}],[\"gsa\",{\"1\":{\"220\":1}}],[\"guard\",{\"0\":{\"530\":1,\"531\":1,\"532\":1},\"1\":{\"530\":2,\"531\":6,\"532\":5}}],[\"guaranteeing\",{\"1\":{\"305\":1}}],[\"gumbel\",{\"1\":{\"220\":1,\"392\":4}}],[\"gui\",{\"1\":{\"81\":1,\"188\":1}}],[\"guidance\",{\"0\":{\"944\":1,\"947\":1},\"1\":{\"54\":4,\"864\":1,\"942\":1,\"944\":1,\"947\":2,\"950\":1}}],[\"guided\",{\"0\":{\"950\":1},\"1\":{\"53\":1,\"350\":2,\"862\":1,\"889\":1,\"939\":1}}],[\"gt\",{\"1\":{\"202\":1,\"295\":1}}],[\"gb\",{\"1\":{\"170\":1,\"342\":6}}],[\"g\",{\"1\":{\"142\":5,\"196\":1,\"282\":2,\"309\":1,\"370\":1,\"372\":8,\"380\":1,\"399\":9,\"451\":6,\"600\":3,\"834\":1,\"837\":1,\"875\":1,\"897\":8,\"900\":5,\"957\":4,\"963\":1}}],[\"ghi\",{\"1\":{\"114\":2}}],[\"grid\",{\"1\":{\"884\":1}}],[\"gradients\",{\"1\":{\"910\":1,\"911\":1}}],[\"gradient\",{\"1\":{\"904\":1}}],[\"grad\",{\"1\":{\"818\":1}}],[\"grade\",{\"1\":{\"818\":2}}],[\"grad1\",{\"1\":{\"769\":7}}],[\"graduate\",{\"1\":{\"769\":6}}],[\"grained\",{\"1\":{\"429\":1}}],[\"grass\",{\"1\":{\"422\":2}}],[\"gray\",{\"1\":{\"380\":1}}],[\"graphconv\",{\"1\":{\"399\":1}}],[\"graphs\",{\"1\":{\"359\":1}}],[\"graph\",{\"1\":{\"49\":1,\"275\":1,\"309\":1,\"359\":6,\"397\":1,\"399\":1,\"840\":1}}],[\"group\",{\"1\":{\"220\":1,\"314\":1,\"372\":1,\"880\":1,\"881\":1}}],[\"ground\",{\"1\":{\"52\":1,\"284\":1,\"412\":2}}],[\"grep\",{\"1\":{\"170\":1,\"186\":1,\"191\":1,\"841\":1,\"852\":1}}],[\"gmt\",{\"1\":{\"42\":1}}],[\"gzip\",{\"1\":{\"41\":1}}],[\"ge\",{\"1\":{\"732\":1}}],[\"gelu\",{\"0\":{\"443\":1},\"1\":{\"373\":1}}],[\"gender\",{\"1\":{\"704\":3,\"706\":3}}],[\"gentle\",{\"1\":{\"359\":1}}],[\"general\",{\"1\":{\"380\":1}}],[\"generalized\",{\"0\":{\"205\":1}}],[\"generation\",{\"0\":{\"323\":1,\"953\":1},\"1\":{\"864\":1,\"953\":1}}],[\"generative\",{\"0\":{\"895\":1},\"1\":{\"313\":1,\"895\":1,\"910\":1,\"911\":2,\"912\":1}}],[\"generator\",{\"0\":{\"322\":1},\"1\":{\"314\":2,\"322\":1,\"845\":1,\"957\":1}}],[\"generate\",{\"1\":{\"202\":1,\"411\":1}}],[\"geographic\",{\"1\":{\"427\":1}}],[\"geometric\",{\"1\":{\"273\":2}}],[\"geomae\",{\"0\":{\"273\":1},\"1\":{\"273\":1}}],[\"geoconv\",{\"1\":{\"223\":1}}],[\"gecko\",{\"1\":{\"41\":1}}],[\"getline\",{\"1\":{\"781\":2}}],[\"getoffset\",{\"1\":{\"210\":6}}],[\"getsum\",{\"1\":{\"104\":2}}],[\"getintersectionnode\",{\"1\":{\"103\":1}}],[\"getminimumdifference\",{\"1\":{\"100\":1}}],[\"getnewpackage\",{\"1\":{\"44\":2}}],[\"get\",{\"0\":{\"477\":1},\"1\":{\"41\":5,\"103\":1,\"166\":2,\"178\":1,\"185\":4,\"186\":1,\"189\":1,\"191\":1,\"305\":6,\"732\":7,\"735\":4,\"781\":5}}],[\"79\",{\"1\":{\"227\":1}}],[\"768\",{\"1\":{\"929\":1}}],[\"76\",{\"1\":{\"226\":1}}],[\"76.3\",{\"1\":{\"357\":1}}],[\"76.0\",{\"1\":{\"254\":1}}],[\"76.\",{\"0\":{\"137\":1},\"1\":{\"102\":1}}],[\"75\",{\"1\":{\"226\":1}}],[\"74.8\",{\"1\":{\"357\":2}}],[\"74\",{\"1\":{\"226\":1,\"657\":1}}],[\"736.00\",{\"1\":{\"852\":1}}],[\"73.6\",{\"1\":{\"357\":1}}],[\"73\",{\"1\":{\"226\":1}}],[\"72\",{\"1\":{\"226\":1}}],[\"71\",{\"1\":{\"226\":2}}],[\"78\",{\"1\":{\"227\":1,\"745\":1}}],[\"78832947\",{\"1\":{\"175\":1}}],[\"78.\",{\"0\":{\"121\":1}}],[\"77\",{\"1\":{\"226\":1,\"929\":6}}],[\"777\",{\"1\":{\"160\":2}}],[\"77.\",{\"0\":{\"112\":1}}],[\"70\",{\"1\":{\"222\":1,\"226\":1,\"745\":1,\"818\":1}}],[\"707.\",{\"1\":{\"103\":1}}],[\"704.\",{\"1\":{\"102\":1}}],[\"701.\",{\"1\":{\"95\":1}}],[\"700.\",{\"1\":{\"94\":1}}],[\"7.4\",{\"1\":{\"594\":2}}],[\"7.\",{\"0\":{\"77\":1,\"462\":1,\"525\":1},\"1\":{\"191\":1,\"232\":1}}],[\"7\",{\"1\":{\"41\":2,\"42\":1,\"44\":1,\"72\":2,\"97\":6,\"114\":2,\"116\":1,\"233\":1,\"235\":1,\"612\":2,\"615\":1,\"623\":1,\"739\":1,\"741\":1,\"755\":1,\"811\":1,\"874\":1}}],[\"613\",{\"1\":{\"429\":1}}],[\"61\",{\"1\":{\"225\":1}}],[\"69\",{\"1\":{\"222\":1}}],[\"68.17\",{\"1\":{\"261\":1}}],[\"68.35\",{\"1\":{\"261\":1}}],[\"68\",{\"1\":{\"222\":1,\"225\":1}}],[\"6795935\",{\"1\":{\"905\":1}}],[\"675\",{\"1\":{\"429\":1}}],[\"67\",{\"1\":{\"222\":1,\"225\":1}}],[\"66.1\",{\"1\":{\"261\":1}}],[\"66.7\",{\"1\":{\"261\":1}}],[\"66\",{\"1\":{\"222\":1,\"225\":1,\"642\":1,\"730\":1}}],[\"65.4\",{\"1\":{\"370\":2}}],[\"65\",{\"1\":{\"222\":1,\"225\":1,\"325\":1,\"647\":1,\"781\":1}}],[\"63\",{\"1\":{\"222\":1,\"225\":1}}],[\"637.\",{\"1\":{\"72\":1}}],[\"62\",{\"1\":{\"222\":1,\"225\":1}}],[\"64\",{\"1\":{\"191\":3,\"222\":2,\"225\":1,\"663\":1,\"840\":2,\"874\":1,\"882\":2,\"883\":4,\"884\":5,\"922\":1,\"928\":1,\"935\":1,\"961\":1}}],[\"6000\",{\"1\":{\"417\":1}}],[\"600\",{\"1\":{\"170\":1}}],[\"60\",{\"1\":{\"104\":1,\"225\":3,\"417\":1,\"807\":2,\"818\":1}}],[\"6.5\",{\"1\":{\"594\":4}}],[\"6.3\",{\"1\":{\"342\":2}}],[\"6.6\",{\"1\":{\"182\":1}}],[\"6.\",{\"0\":{\"76\":1,\"99\":1,\"130\":1,\"182\":1,\"461\":1,\"524\":1},\"1\":{\"191\":1}}],[\"6.0\",{\"1\":{\"41\":1}}],[\"6\",{\"1\":{\"41\":2,\"42\":1,\"44\":1,\"54\":2,\"114\":2,\"116\":2,\"125\":1,\"138\":2,\"196\":2,\"218\":1,\"249\":1,\"257\":1,\"338\":1,\"344\":2,\"357\":1,\"419\":7,\"451\":2,\"545\":1,\"623\":1,\"672\":1,\"690\":1,\"741\":1,\"769\":1,\"807\":2,\"811\":1,\"818\":1,\"928\":1,\"953\":1,\"955\":1}}],[\"314159\",{\"1\":{\"645\":1}}],[\"31.4159\",{\"1\":{\"645\":1}}],[\"31\",{\"1\":{\"595\":1}}],[\"38308388\",{\"1\":{\"845\":1}}],[\"383.\",{\"1\":{\"104\":1}}],[\"381\",{\"1\":{\"429\":1}}],[\"36\",{\"1\":{\"270\":1}}],[\"33.3\",{\"1\":{\"769\":1}}],[\"33\",{\"1\":{\"220\":1,\"729\":2,\"825\":1}}],[\"332.\",{\"0\":{\"132\":1}}],[\"32768\",{\"1\":{\"859\":1}}],[\"328\",{\"1\":{\"422\":1}}],[\"32\",{\"1\":{\"191\":2,\"220\":2,\"288\":4,\"291\":2,\"292\":2,\"293\":1,\"312\":1,\"633\":1,\"642\":2,\"663\":1,\"781\":1,\"863\":2,\"874\":1,\"882\":2,\"961\":1}}],[\"394\",{\"1\":{\"718\":1}}],[\"39\",{\"1\":{\"422\":1}}],[\"390.77.\",{\"1\":{\"191\":2}}],[\"39.\",{\"0\":{\"115\":1}}],[\"370\",{\"1\":{\"428\":1}}],[\"376.\",{\"0\":{\"146\":1}}],[\"37.\",{\"0\":{\"129\":1}}],[\"340\",{\"1\":{\"428\":1}}],[\"34\",{\"1\":{\"220\":1,\"318\":1,\"718\":2,\"730\":3}}],[\"347.\",{\"0\":{\"108\":1}}],[\"344.\",{\"1\":{\"105\":1}}],[\"349.\",{\"1\":{\"104\":1}}],[\"35.\",{\"1\":{\"102\":1}}],[\"304\",{\"1\":{\"476\":1}}],[\"300\",{\"1\":{\"417\":1,\"882\":1}}],[\"30\",{\"1\":{\"104\":1,\"261\":1,\"396\":1,\"419\":1,\"423\":1,\"599\":1,\"650\":2,\"673\":1,\"687\":1,\"690\":7,\"757\":1,\"782\":2}}],[\"302\",{\"1\":{\"43\":1,\"476\":2}}],[\"301\",{\"1\":{\"43\":1,\"476\":2}}],[\"3.5\",{\"1\":{\"595\":1}}],[\"3.5.21022\",{\"1\":{\"41\":1}}],[\"3.14\",{\"1\":{\"804\":1}}],[\"3.14159\",{\"1\":{\"645\":1,\"712\":2}}],[\"3.1.2\",{\"0\":{\"218\":1}}],[\"3.1.1\",{\"0\":{\"217\":1}}],[\"3.1\",{\"0\":{\"216\":1,\"334\":1},\"1\":{\"473\":1}}],[\"3.4\",{\"1\":{\"195\":2}}],[\"3.3\",{\"0\":{\"336\":1},\"1\":{\"195\":2}}],[\"3.2.5\",{\"0\":{\"228\":1}}],[\"3.2.4\",{\"0\":{\"227\":1}}],[\"3.2.3\",{\"0\":{\"224\":1}}],[\"3.2.2\",{\"0\":{\"221\":1}}],[\"3.2.1\",{\"0\":{\"220\":1}}],[\"3.2\",{\"0\":{\"219\":1,\"335\":1},\"1\":{\"195\":2,\"595\":1}}],[\"3.87\",{\"1\":{\"355\":1}}],[\"3.8\",{\"1\":{\"192\":1}}],[\"3.\",{\"0\":{\"71\":1,\"95\":1,\"120\":1,\"139\":1,\"179\":1,\"211\":1,\"215\":1,\"333\":1,\"458\":1,\"469\":1,\"521\":1,\"532\":1,\"750\":1,\"869\":1},\"1\":{\"191\":2}}],[\"3.0.04506.648\",{\"1\":{\"41\":1}}],[\"3\",{\"0\":{\"56\":1,\"196\":1,\"212\":1,\"231\":1,\"240\":1,\"241\":1,\"244\":1,\"278\":1,\"284\":1,\"330\":1,\"341\":1,\"953\":1},\"1\":{\"41\":2,\"42\":1,\"43\":1,\"44\":1,\"47\":1,\"54\":2,\"72\":2,\"82\":2,\"97\":1,\"98\":3,\"114\":2,\"119\":2,\"121\":13,\"137\":2,\"138\":1,\"139\":5,\"192\":2,\"195\":5,\"196\":2,\"197\":1,\"198\":5,\"199\":6,\"200\":1,\"203\":1,\"205\":1,\"208\":1,\"214\":6,\"217\":1,\"218\":1,\"220\":1,\"221\":1,\"222\":5,\"223\":1,\"226\":1,\"227\":1,\"228\":2,\"229\":1,\"235\":1,\"242\":7,\"244\":2,\"245\":4,\"246\":9,\"247\":5,\"256\":1,\"257\":6,\"259\":1,\"261\":2,\"262\":5,\"266\":2,\"270\":1,\"272\":1,\"273\":2,\"277\":5,\"288\":1,\"290\":1,\"293\":3,\"294\":1,\"299\":1,\"304\":7,\"305\":3,\"308\":1,\"312\":1,\"313\":1,\"332\":4,\"334\":1,\"337\":1,\"340\":4,\"342\":5,\"343\":1,\"344\":1,\"361\":6,\"377\":1,\"380\":1,\"392\":1,\"399\":1,\"419\":1,\"422\":1,\"426\":4,\"451\":1,\"457\":1,\"476\":1,\"532\":2,\"538\":16,\"539\":5,\"540\":3,\"541\":3,\"543\":9,\"545\":1,\"559\":2,\"560\":2,\"565\":2,\"570\":1,\"571\":1,\"573\":4,\"583\":2,\"589\":3,\"595\":1,\"598\":1,\"600\":1,\"612\":4,\"617\":2,\"623\":1,\"624\":1,\"654\":4,\"657\":1,\"658\":1,\"661\":1,\"664\":3,\"668\":1,\"673\":1,\"676\":1,\"683\":2,\"685\":1,\"687\":1,\"690\":7,\"693\":1,\"695\":1,\"704\":1,\"709\":1,\"713\":1,\"714\":1,\"721\":1,\"722\":1,\"724\":1,\"729\":1,\"730\":3,\"741\":1,\"745\":2,\"755\":1,\"759\":3,\"769\":3,\"781\":2,\"804\":1,\"805\":6,\"806\":2,\"807\":3,\"808\":2,\"811\":2,\"818\":1,\"819\":1,\"825\":1,\"826\":1,\"828\":1,\"840\":1,\"854\":1,\"923\":1,\"928\":1,\"953\":1}}],[\"jaritz\",{\"1\":{\"247\":1}}],[\"java\",{\"1\":{\"126\":2,\"545\":9}}],[\"jun\",{\"1\":{\"397\":1}}],[\"just\",{\"1\":{\"309\":1}}],[\"jupyter\",{\"1\":{\"165\":1}}],[\"jump\",{\"1\":{\"152\":4}}],[\"jpeg\",{\"0\":{\"163\":1}}],[\"jpg\",{\"1\":{\"41\":2,\"163\":3}}],[\"john\",{\"1\":{\"160\":1}}],[\"joint\",{\"0\":{\"385\":1},\"1\":{\"385\":1,\"390\":1}}],[\"join\",{\"1\":{\"8\":1,\"528\":2,\"529\":2,\"530\":2,\"531\":2}}],[\"jkl\",{\"1\":{\"114\":2}}],[\"j\",{\"1\":{\"103\":1,\"104\":19,\"105\":9,\"118\":4,\"128\":8,\"142\":5,\"268\":1,\"332\":4,\"353\":1,\"366\":4,\"394\":6,\"395\":8,\"399\":1,\"451\":3,\"599\":3,\"635\":3,\"683\":5,\"759\":6}}],[\"jiwoon\",{\"1\":{\"887\":1}}],[\"jie\",{\"1\":{\"82\":1}}],[\"jing\",{\"1\":{\"82\":1}}],[\"jin40789108\",{\"1\":{\"81\":1}}],[\"头里\",{\"1\":{\"476\":1}}],[\"头发\",{\"1\":{\"55\":3,\"910\":1,\"959\":3,\"961\":1}}],[\"头\",{\"1\":{\"42\":4,\"53\":1,\"103\":12,\"200\":1,\"322\":3,\"372\":1,\"392\":2,\"476\":2,\"541\":1,\"698\":1,\"825\":1,\"826\":1,\"827\":2,\"828\":1,\"829\":1,\"830\":3}}],[\"头部\",{\"1\":{\"41\":3,\"398\":1,\"480\":1,\"572\":1,\"574\":2,\"829\":2,\"830\":2}}],[\"头文件\",{\"0\":{\"547\":1},\"1\":{\"10\":1,\"536\":1,\"589\":1,\"624\":1,\"692\":1,\"695\":1,\"707\":1,\"757\":1,\"775\":1,\"778\":1,\"780\":1,\"781\":4,\"789\":1}}],[\"行止\",{\"1\":{\"578\":1}}],[\"行是\",{\"1\":{\"469\":1}}],[\"行天下\",{\"1\":{\"449\":1}}],[\"行人\",{\"1\":{\"242\":1,\"379\":2}}],[\"行首\",{\"1\":{\"175\":2}}],[\"行以\",{\"1\":{\"174\":1}}],[\"行尾\",{\"1\":{\"174\":2}}],[\"行程\",{\"0\":{\"132\":1}}],[\"行为\",{\"1\":{\"42\":2,\"461\":1,\"500\":1,\"701\":4}}],[\"行\",{\"0\":{\"460\":1},\"1\":{\"41\":3,\"42\":3,\"128\":1,\"171\":1,\"460\":1,\"461\":7,\"471\":3,\"623\":1,\"690\":1,\"848\":1,\"859\":2}}],[\"行数\",{\"1\":{\"10\":1,\"536\":1}}],[\"识别\",{\"1\":{\"40\":1,\"58\":1,\"217\":1,\"218\":1,\"228\":1,\"254\":1,\"273\":1,\"282\":2,\"398\":1,\"606\":1,\"613\":1,\"858\":1,\"893\":1}}],[\"端网络\",{\"1\":{\"245\":1}}],[\"端口号\",{\"1\":{\"484\":2}}],[\"端口映射\",{\"1\":{\"184\":2}}],[\"端口\",{\"1\":{\"165\":3,\"184\":4,\"186\":2,\"484\":1}}],[\"端到\",{\"0\":{\"61\":1},\"1\":{\"195\":1,\"199\":1,\"225\":1,\"226\":1,\"228\":1}}],[\"端的\",{\"1\":{\"40\":1,\"107\":1,\"195\":1,\"199\":1,\"220\":1,\"226\":1,\"410\":1}}],[\"端\",{\"0\":{\"61\":1},\"1\":{\"40\":2,\"46\":2,\"192\":1,\"199\":2,\"220\":1,\"225\":1,\"228\":1,\"245\":1,\"410\":1,\"500\":1,\"573\":1,\"953\":2}}],[\"浏览器\",{\"1\":{\"40\":3,\"41\":1,\"46\":2,\"476\":1}}],[\"特例\",{\"1\":{\"398\":1,\"701\":1}}],[\"特别\",{\"1\":{\"198\":1,\"250\":1,\"282\":1,\"301\":1,\"379\":1,\"386\":1}}],[\"特点\",{\"1\":{\"126\":1,\"193\":1,\"315\":1,\"429\":1,\"701\":2,\"747\":1,\"819\":1,\"825\":1}}],[\"特性\",{\"0\":{\"478\":1},\"1\":{\"93\":2,\"370\":1,\"371\":1,\"372\":1,\"399\":1,\"537\":1,\"546\":1,\"624\":1,\"748\":4,\"750\":1,\"769\":1,\"825\":1,\"863\":1,\"893\":1,\"961\":1}}],[\"特征值\",{\"1\":{\"290\":2,\"292\":2}}],[\"特征描述\",{\"1\":{\"256\":1}}],[\"特征向量\",{\"1\":{\"194\":1,\"218\":1,\"226\":2,\"280\":1,\"281\":1,\"284\":1,\"308\":1}}],[\"特征提取\",{\"0\":{\"288\":1,\"331\":1},\"1\":{\"53\":1,\"228\":2,\"257\":1,\"268\":1,\"304\":1,\"319\":1,\"332\":1,\"350\":2,\"405\":1,\"408\":1,\"409\":1,\"859\":1}}],[\"特征\",{\"0\":{\"60\":1,\"61\":1,\"289\":1,\"291\":1,\"305\":1,\"330\":1,\"332\":1},\"1\":{\"53\":12,\"60\":1,\"64\":1,\"193\":1,\"195\":4,\"196\":1,\"197\":1,\"198\":2,\"199\":2,\"200\":4,\"201\":4,\"202\":2,\"203\":1,\"209\":2,\"216\":1,\"217\":5,\"219\":1,\"220\":12,\"222\":4,\"223\":10,\"224\":1,\"225\":10,\"226\":3,\"227\":9,\"228\":16,\"229\":1,\"232\":1,\"233\":1,\"246\":4,\"247\":9,\"248\":2,\"259\":4,\"262\":1,\"263\":4,\"268\":1,\"270\":3,\"273\":3,\"276\":1,\"280\":1,\"282\":1,\"288\":9,\"290\":5,\"291\":1,\"292\":4,\"294\":1,\"301\":3,\"303\":4,\"304\":1,\"305\":2,\"306\":1,\"307\":1,\"308\":11,\"312\":2,\"316\":1,\"319\":1,\"331\":1,\"332\":10,\"350\":1,\"357\":6,\"358\":1,\"366\":4,\"370\":2,\"371\":1,\"372\":2,\"379\":4,\"380\":1,\"390\":1,\"395\":2,\"398\":1,\"399\":5,\"400\":1,\"404\":2,\"406\":2,\"408\":2,\"409\":1,\"410\":2,\"411\":1,\"415\":4,\"419\":11,\"436\":5,\"437\":2,\"451\":3,\"662\":1,\"671\":1,\"701\":3,\"747\":1,\"748\":1,\"859\":4,\"928\":1,\"929\":7,\"930\":1,\"955\":3,\"959\":8,\"960\":1,\"961\":3}}],[\"特定\",{\"1\":{\"52\":2,\"192\":1,\"217\":1,\"228\":1,\"301\":1,\"306\":1,\"656\":1,\"875\":1,\"904\":1}}],[\"特有\",{\"1\":{\"40\":1,\"273\":1,\"312\":1}}],[\"特殊字符\",{\"1\":{\"657\":1}}],[\"特殊\",{\"1\":{\"23\":1,\"308\":1,\"668\":1,\"676\":1,\"717\":1,\"722\":1,\"726\":1,\"736\":1,\"744\":1}}],[\"报错\",{\"0\":{\"842\":1},\"1\":{\"104\":1,\"106\":1,\"166\":1,\"175\":1,\"567\":1,\"595\":1,\"695\":1,\"757\":1,\"843\":1}}],[\"报文\",{\"0\":{\"41\":1,\"42\":1,\"46\":1},\"1\":{\"40\":6,\"41\":1,\"43\":1,\"45\":1,\"46\":2,\"476\":3,\"484\":3}}],[\"报文格式\",{\"0\":{\"40\":1}}],[\"报告\",{\"1\":{\"39\":1}}],[\"期望\",{\"1\":{\"39\":1,\"294\":3,\"308\":1,\"348\":5,\"349\":1,\"528\":1,\"904\":1}}],[\"期间\",{\"1\":{\"20\":1,\"30\":1,\"195\":1,\"198\":2,\"200\":1,\"321\":1,\"609\":1,\"612\":1,\"656\":1,\"661\":1,\"671\":1,\"767\":1,\"859\":1}}],[\"另辟蹊径\",{\"1\":{\"910\":1}}],[\"另行\",{\"1\":{\"594\":1}}],[\"另一端\",{\"1\":{\"563\":1}}],[\"另一方面\",{\"1\":{\"246\":1,\"356\":1,\"357\":1}}],[\"另有\",{\"1\":{\"396\":1}}],[\"另外\",{\"1\":{\"281\":1,\"321\":1,\"379\":1,\"589\":1,\"789\":1}}],[\"另\",{\"0\":{\"79\":1},\"1\":{\"39\":1,\"228\":1,\"290\":2,\"298\":1,\"308\":1,\"310\":1,\"355\":1,\"476\":1,\"534\":1,\"538\":1,\"539\":1,\"574\":1,\"583\":2,\"591\":1,\"598\":1,\"606\":1,\"607\":1,\"609\":1,\"616\":2,\"668\":1,\"688\":1,\"717\":1,\"758\":1,\"801\":1,\"826\":1,\"865\":1,\"935\":1,\"947\":1}}],[\"又称\",{\"1\":{\"599\":1}}],[\"又\",{\"1\":{\"39\":1,\"55\":2,\"85\":1,\"126\":1,\"168\":1,\"254\":1,\"380\":1,\"411\":1,\"419\":2,\"592\":1,\"595\":1,\"597\":1,\"639\":1,\"661\":1,\"738\":1,\"748\":2,\"768\":1,\"770\":1,\"782\":2,\"807\":1,\"810\":1,\"829\":1,\"863\":1,\"869\":1}}],[\"出比\",{\"1\":{\"924\":1}}],[\"出发\",{\"1\":{\"862\":1,\"913\":1}}],[\"出发点\",{\"0\":{\"857\":1}}],[\"出热\",{\"1\":{\"837\":1}}],[\"出新\",{\"1\":{\"748\":1}}],[\"出于\",{\"1\":{\"311\":1}}],[\"出处\",{\"1\":{\"126\":1,\"174\":1,\"175\":1,\"304\":1,\"811\":1,\"841\":1,\"845\":1,\"875\":1}}],[\"出口\",{\"1\":{\"107\":1}}],[\"出\",{\"1\":{\"86\":1,\"107\":1,\"137\":1,\"228\":1,\"246\":1,\"284\":2,\"325\":1,\"342\":1,\"436\":1,\"459\":1,\"467\":1,\"500\":1,\"893\":1,\"910\":1,\"939\":1}}],[\"出栈\",{\"1\":{\"71\":2,\"106\":1}}],[\"出在\",{\"1\":{\"55\":1}}],[\"出错\",{\"1\":{\"43\":1,\"175\":1,\"476\":1,\"600\":1,\"606\":2,\"621\":1,\"745\":1,\"776\":1,\"830\":1}}],[\"出现\",{\"0\":{\"188\":1},\"1\":{\"39\":2,\"43\":1,\"85\":1,\"137\":5,\"139\":1,\"146\":1,\"175\":2,\"290\":1,\"459\":1,\"528\":2,\"540\":3,\"558\":2,\"559\":1,\"615\":1,\"620\":1,\"623\":1,\"652\":1,\"661\":1,\"667\":1,\"676\":2,\"689\":3,\"691\":1,\"703\":1,\"704\":1,\"721\":3,\"724\":1,\"766\":1,\"769\":2,\"806\":1,\"814\":1,\"818\":2,\"833\":1,\"852\":1,\"854\":1,\"922\":1}}],[\"出来\",{\"1\":{\"13\":1,\"44\":1,\"82\":1,\"102\":1,\"342\":2,\"348\":3,\"379\":1,\"384\":1,\"666\":1,\"755\":2,\"906\":1,\"940\":1}}],[\"边框\",{\"0\":{\"416\":1},\"1\":{\"344\":1,\"413\":1,\"416\":4,\"417\":3}}],[\"边长\",{\"1\":{\"305\":1}}],[\"边界\",{\"1\":{\"199\":1,\"242\":1,\"246\":1,\"294\":3,\"299\":1,\"303\":1,\"417\":1}}],[\"边\",{\"1\":{\"85\":1,\"224\":1,\"225\":2,\"226\":1,\"276\":1,\"282\":1,\"301\":1,\"303\":2,\"308\":7,\"312\":4,\"340\":1,\"417\":1}}],[\"边缘\",{\"0\":{\"335\":1},\"1\":{\"39\":1,\"53\":4,\"103\":1,\"223\":2,\"225\":3,\"226\":1,\"303\":2,\"307\":7,\"308\":5,\"311\":5,\"401\":1,\"451\":1}}],[\"边沿\",{\"1\":{\"15\":1}}],[\"建模\",{\"1\":{\"220\":1,\"223\":1,\"228\":1,\"340\":1,\"379\":1,\"863\":2,\"864\":1,\"902\":1,\"947\":1,\"953\":1}}],[\"建议性\",{\"0\":{\"613\":1},\"1\":{\"233\":1,\"599\":1}}],[\"建议\",{\"0\":{\"232\":1},\"1\":{\"38\":1,\"232\":3,\"234\":1,\"237\":1,\"242\":1,\"250\":2,\"621\":1,\"676\":1}}],[\"建立\",{\"0\":{\"209\":1,\"210\":1,\"714\":1},\"1\":{\"10\":1,\"31\":1,\"36\":1,\"38\":3,\"96\":1,\"191\":1,\"210\":1,\"220\":2,\"222\":1,\"226\":1,\"270\":1,\"282\":1,\"283\":1,\"484\":1,\"600\":1,\"612\":1,\"701\":2,\"710\":1,\"714\":7,\"717\":6,\"718\":4,\"720\":4,\"722\":2,\"726\":1,\"729\":4,\"730\":1,\"732\":1,\"738\":1,\"744\":1,\"748\":2,\"781\":1,\"793\":5,\"794\":1,\"825\":1,\"826\":4,\"827\":1,\"830\":1,\"859\":1,\"887\":1}}],[\"比率\",{\"1\":{\"392\":1,\"436\":1}}],[\"比例\",{\"1\":{\"342\":2,\"386\":1,\"392\":1,\"938\":1,\"939\":1}}],[\"比特\",{\"1\":{\"315\":1,\"633\":1}}],[\"比旧\",{\"1\":{\"301\":1}}],[\"比雪夫\",{\"1\":{\"226\":2}}],[\"比\",{\"1\":{\"50\":1,\"53\":2,\"62\":1,\"65\":1,\"126\":1,\"261\":1,\"305\":1,\"325\":1,\"355\":1,\"369\":1,\"370\":2,\"411\":2,\"446\":1,\"545\":1,\"560\":1,\"807\":1,\"809\":1,\"828\":1,\"829\":2,\"846\":1,\"910\":1,\"922\":1,\"923\":1,\"929\":1,\"935\":1}}],[\"比较简单\",{\"1\":{\"399\":1}}],[\"比较\",{\"0\":{\"662\":1,\"689\":1,\"727\":1},\"1\":{\"38\":1,\"69\":2,\"94\":1,\"95\":1,\"99\":1,\"102\":1,\"106\":1,\"107\":1,\"126\":2,\"229\":1,\"249\":1,\"259\":1,\"262\":1,\"396\":3,\"451\":1,\"476\":1,\"572\":1,\"576\":1,\"612\":1,\"639\":1,\"668\":1,\"676\":4,\"689\":9,\"690\":1,\"695\":2,\"755\":3,\"776\":1,\"809\":3,\"829\":1,\"922\":1,\"928\":1,\"938\":1,\"960\":2}}],[\"比如说\",{\"1\":{\"379\":3}}],[\"比如\",{\"1\":{\"13\":1,\"30\":2,\"44\":1,\"51\":1,\"184\":1,\"262\":1,\"344\":1,\"398\":1,\"419\":1,\"480\":1,\"485\":3,\"846\":1,\"854\":1,\"922\":1,\"923\":1,\"928\":1,\"929\":2,\"940\":1,\"958\":1,\"959\":1,\"961\":1,\"963\":1}}],[\"小学生\",{\"1\":{\"801\":1}}],[\"小数点\",{\"1\":{\"645\":1}}],[\"小数\",{\"0\":{\"644\":1},\"1\":{\"644\":1,\"804\":1,\"837\":1}}],[\"小括号\",{\"1\":{\"625\":1}}],[\"小时\",{\"1\":{\"599\":1,\"928\":1}}],[\"小雨\",{\"1\":{\"572\":1}}],[\"小林\",{\"1\":{\"473\":1}}],[\"小块\",{\"1\":{\"398\":3}}],[\"小兔\",{\"1\":{\"317\":1}}],[\"小鸟\",{\"1\":{\"303\":1}}],[\"小点\",{\"1\":{\"254\":1}}],[\"小结\",{\"0\":{\"229\":1,\"242\":1,\"249\":1,\"254\":1,\"525\":1,\"618\":1,\"674\":1,\"675\":1,\"676\":1}}],[\"小熊\",{\"1\":{\"175\":1}}],[\"小康\",{\"1\":{\"165\":1}}],[\"小孩\",{\"1\":{\"142\":1}}],[\"小写字母\",{\"1\":{\"138\":1,\"781\":4}}],[\"小黑\",{\"1\":{\"102\":1}}],[\"小于\",{\"1\":{\"81\":1,\"93\":1,\"97\":1,\"107\":1,\"299\":1,\"645\":1,\"676\":1,\"682\":1,\"689\":1,\"809\":1,\"882\":1}}],[\"小\",{\"1\":{\"38\":1,\"53\":1,\"55\":1,\"107\":2,\"142\":1,\"153\":1,\"222\":1,\"228\":1,\"229\":1,\"290\":1,\"299\":1,\"315\":1,\"325\":1,\"348\":1,\"355\":1,\"375\":1,\"379\":2,\"536\":1,\"576\":2,\"690\":1,\"707\":1,\"799\":1,\"859\":1,\"862\":1,\"873\":1,\"904\":1,\"908\":1,\"916\":1,\"922\":3,\"923\":1,\"928\":5}}],[\"较长\",{\"1\":{\"928\":1}}],[\"较强\",{\"1\":{\"916\":1}}],[\"较弱\",{\"1\":{\"893\":1,\"916\":1}}],[\"较慢\",{\"1\":{\"446\":1,\"787\":1}}],[\"较为简单\",{\"1\":{\"399\":1}}],[\"较差\",{\"1\":{\"242\":1,\"928\":1}}],[\"较大\",{\"1\":{\"54\":1,\"259\":1,\"625\":1,\"808\":1,\"928\":1}}],[\"较\",{\"0\":{\"915\":1},\"1\":{\"38\":1,\"222\":1,\"228\":1,\"246\":1,\"254\":1,\"257\":1,\"293\":1,\"299\":1,\"542\":1,\"545\":1,\"707\":1,\"712\":1,\"805\":1,\"928\":3}}],[\"较少\",{\"1\":{\"32\":1,\"322\":1}}],[\"监督\",{\"0\":{\"255\":1,\"259\":1},\"1\":{\"225\":5,\"228\":4,\"245\":1,\"257\":3,\"261\":1,\"262\":1,\"272\":1,\"273\":2,\"282\":1,\"340\":1,\"888\":1,\"892\":1,\"949\":1,\"953\":2,\"955\":3}}],[\"监测\",{\"1\":{\"38\":2,\"58\":1}}],[\"监听\",{\"1\":{\"31\":1,\"34\":2,\"38\":1,\"186\":1,\"492\":1}}],[\"反之\",{\"1\":{\"545\":1,\"568\":1,\"873\":1}}],[\"反映\",{\"1\":{\"451\":1}}],[\"反应\",{\"1\":{\"334\":1,\"701\":1}}],[\"反应堆\",{\"0\":{\"34\":1},\"1\":{\"34\":2}}],[\"反池\",{\"1\":{\"311\":1}}],[\"反池化\",{\"1\":{\"309\":1}}],[\"反\",{\"1\":{\"309\":2,\"648\":1}}],[\"反作用\",{\"1\":{\"259\":1}}],[\"反倒\",{\"1\":{\"259\":1}}],[\"反投影\",{\"1\":{\"246\":1,\"247\":1}}],[\"反馈\",{\"1\":{\"227\":1,\"228\":2}}],[\"反例\",{\"1\":{\"141\":1}}],[\"反转\",{\"1\":{\"103\":7,\"105\":3,\"576\":1}}],[\"反中序\",{\"1\":{\"100\":1}}],[\"反过来\",{\"1\":{\"88\":1}}],[\"反向\",{\"1\":{\"51\":2,\"282\":1,\"284\":1,\"446\":1,\"541\":3,\"575\":2,\"906\":1,\"907\":1}}],[\"反而\",{\"1\":{\"38\":1}}],[\"此参数\",{\"1\":{\"849\":2}}],[\"此虚\",{\"1\":{\"769\":1}}],[\"此基础\",{\"1\":{\"732\":1}}],[\"此类\",{\"1\":{\"606\":1,\"611\":1,\"741\":1}}],[\"此键\",{\"1\":{\"545\":1}}],[\"此后\",{\"1\":{\"522\":1,\"661\":1}}],[\"此处\",{\"1\":{\"299\":1}}],[\"此外\",{\"1\":{\"202\":1,\"217\":1,\"222\":1,\"225\":1,\"245\":1,\"246\":4,\"247\":1,\"299\":1,\"320\":1,\"325\":1,\"357\":2,\"386\":2,\"527\":1,\"600\":1,\"620\":1,\"683\":1,\"749\":1,\"798\":1,\"935\":1,\"940\":1}}],[\"此\",{\"1\":{\"38\":1,\"39\":1,\"168\":1,\"229\":1,\"307\":1,\"314\":1,\"332\":2,\"337\":1,\"371\":1,\"460\":1,\"461\":1,\"524\":1,\"598\":2,\"604\":1,\"609\":1,\"620\":1,\"670\":1,\"671\":1,\"707\":1,\"714\":3,\"744\":2,\"767\":1,\"769\":2,\"781\":1,\"793\":3,\"818\":1,\"825\":1,\"826\":1,\"830\":1,\"849\":1,\"925\":1}}],[\"此时\",{\"1\":{\"30\":1,\"39\":2,\"77\":2,\"89\":1,\"97\":2,\"103\":2,\"137\":1,\"179\":1,\"184\":1,\"314\":1,\"372\":1,\"530\":1,\"540\":1,\"595\":1,\"598\":1,\"600\":4,\"607\":1,\"617\":1,\"671\":3,\"710\":1,\"717\":2,\"720\":1,\"721\":1,\"793\":2,\"794\":1,\"798\":1,\"826\":3,\"829\":1,\"923\":1,\"928\":4,\"930\":1,\"961\":1}}],[\"活跃\",{\"1\":{\"38\":2}}],[\"活动\",{\"0\":{\"19\":1},\"1\":{\"3\":1,\"19\":1}}],[\"场\",{\"1\":{\"222\":1,\"278\":1,\"284\":3}}],[\"场景\",{\"0\":{\"241\":1,\"244\":1},\"1\":{\"38\":1,\"58\":1,\"60\":1,\"218\":1,\"234\":1,\"242\":1,\"243\":1,\"257\":1,\"259\":2,\"271\":1,\"294\":1,\"327\":1,\"332\":1,\"342\":1,\"423\":1,\"425\":1,\"426\":1,\"875\":1,\"938\":1}}],[\"场合\",{\"1\":{\"31\":1}}],[\"异质\",{\"1\":{\"824\":1}}],[\"异或\",{\"1\":{\"811\":1}}],[\"异同\",{\"1\":{\"570\":1}}],[\"异位\",{\"0\":{\"138\":1},\"1\":{\"104\":1,\"138\":9}}],[\"异构\",{\"1\":{\"53\":1}}],[\"异常\",{\"1\":{\"38\":1,\"299\":1,\"530\":3,\"531\":1,\"541\":1,\"574\":1,\"624\":1,\"833\":2}}],[\"异步\",{\"1\":{\"4\":2,\"11\":2,\"13\":10,\"30\":5,\"31\":1,\"32\":1,\"33\":1,\"34\":8}}],[\"体系\",{\"1\":{\"750\":1}}],[\"体系结构\",{\"1\":{\"228\":1}}],[\"体是\",{\"1\":{\"717\":1,\"720\":1}}],[\"体中\",{\"1\":{\"717\":1,\"756\":1}}],[\"体中用\",{\"1\":{\"607\":1,\"719\":1}}],[\"体外\",{\"1\":{\"707\":1,\"744\":1}}],[\"体现\",{\"1\":{\"701\":1,\"750\":3,\"939\":1}}],[\"体等\",{\"1\":{\"590\":1,\"619\":1}}],[\"体时\",{\"1\":{\"290\":1,\"757\":1}}],[\"体积\",{\"1\":{\"223\":2,\"244\":1,\"246\":4,\"281\":1,\"282\":1,\"332\":1,\"595\":1,\"718\":2,\"724\":2}}],[\"体素化\",{\"0\":{\"218\":1},\"1\":{\"196\":1,\"247\":1,\"284\":1,\"426\":1}}],[\"体素\",{\"1\":{\"193\":1,\"218\":4,\"225\":1,\"246\":11,\"262\":1,\"270\":1,\"332\":1}}],[\"体\",{\"0\":{\"289\":1,\"291\":1,\"292\":1,\"293\":1,\"637\":1,\"732\":1,\"756\":1,\"759\":1,\"760\":1,\"762\":1},\"1\":{\"38\":2,\"216\":1,\"246\":1,\"280\":1,\"290\":1,\"293\":4,\"294\":2,\"299\":2,\"337\":1,\"581\":1,\"599\":1,\"600\":3,\"621\":1,\"637\":2,\"703\":1,\"709\":1,\"713\":5,\"719\":1,\"756\":8,\"757\":12,\"758\":4,\"759\":1,\"760\":5,\"762\":7,\"769\":2,\"825\":1,\"830\":1}}],[\"体验\",{\"1\":{\"10\":1}}],[\"索引\",{\"0\":{\"227\":1,\"465\":1},\"1\":{\"38\":1,\"137\":1,\"138\":6,\"218\":1,\"219\":1,\"227\":1,\"246\":1,\"394\":1,\"534\":1,\"545\":1,\"570\":1,\"864\":1}}],[\"外接\",{\"1\":{\"892\":1}}],[\"外存\",{\"1\":{\"785\":1,\"790\":2}}],[\"外对\",{\"1\":{\"581\":1}}],[\"外观\",{\"1\":{\"247\":2}}],[\"外部\",{\"0\":{\"596\":1,\"598\":1,\"614\":1,\"616\":1,\"617\":1},\"1\":{\"184\":1,\"186\":1,\"500\":1,\"590\":1,\"597\":1,\"598\":4,\"610\":2,\"614\":2,\"615\":1,\"616\":5,\"617\":7,\"621\":1,\"659\":1,\"701\":2,\"784\":1}}],[\"外面\",{\"1\":{\"121\":1,\"122\":1,\"590\":1,\"718\":1}}],[\"外\",{\"0\":{\"740\":1},\"1\":{\"38\":1,\"228\":1,\"354\":1,\"717\":2,\"735\":1,\"741\":1,\"745\":1,\"928\":1}}],[\"外界\",{\"1\":{\"5\":1,\"502\":1,\"701\":1,\"705\":1}}],[\"黑白\",{\"1\":{\"923\":1}}],[\"黑名单\",{\"1\":{\"191\":1}}],[\"黑树\",{\"1\":{\"38\":1}}],[\"黑\",{\"1\":{\"38\":1}}],[\"红线\",{\"1\":{\"299\":1}}],[\"红色\",{\"1\":{\"195\":1,\"210\":1}}],[\"红黑书\",{\"1\":{\"38\":1}}],[\"红黑树\",{\"1\":{\"38\":2}}],[\"红\",{\"1\":{\"38\":2}}],[\"传送\",{\"1\":{\"701\":1,\"782\":2,\"804\":1}}],[\"传输\",{\"1\":{\"475\":1,\"484\":4,\"485\":1,\"787\":1,\"788\":1,\"889\":1}}],[\"传达\",{\"1\":{\"355\":1}}],[\"传感器\",{\"1\":{\"254\":1,\"271\":1,\"342\":1}}],[\"传递性\",{\"1\":{\"748\":1}}],[\"传递数据\",{\"1\":{\"589\":1}}],[\"传递\",{\"1\":{\"192\":1,\"355\":2,\"356\":1,\"358\":1,\"524\":1,\"584\":2,\"586\":3,\"607\":1,\"621\":1,\"718\":1,\"721\":1,\"729\":1,\"730\":2,\"736\":1,\"762\":2,\"827\":1,\"864\":1}}],[\"传统\",{\"0\":{\"60\":1},\"1\":{\"51\":2,\"288\":1,\"344\":2,\"359\":1,\"373\":1,\"399\":1,\"857\":1,\"910\":1,\"958\":1}}],[\"传播\",{\"1\":{\"51\":5,\"282\":1,\"284\":1,\"399\":1,\"406\":1,\"446\":1,\"887\":2}}],[\"传来\",{\"1\":{\"38\":1}}],[\"传给\",{\"1\":{\"38\":1,\"710\":1,\"729\":1,\"762\":1,\"827\":1}}],[\"传入\",{\"1\":{\"13\":1,\"25\":1,\"51\":1,\"81\":1,\"88\":1,\"530\":1,\"559\":3,\"837\":1}}],[\"线索\",{\"1\":{\"227\":2}}],[\"线性组合\",{\"1\":{\"906\":1,\"960\":1}}],[\"线性代数\",{\"1\":{\"537\":1}}],[\"线性变换\",{\"1\":{\"380\":1}}],[\"线性关系\",{\"1\":{\"372\":1}}],[\"线性插值\",{\"1\":{\"246\":1,\"290\":1,\"364\":1,\"419\":1,\"883\":1,\"884\":1,\"955\":1,\"963\":1}}],[\"线性\",{\"0\":{\"435\":1,\"440\":1},\"1\":{\"201\":1,\"270\":1,\"322\":1,\"372\":1,\"379\":1,\"436\":2,\"537\":1,\"859\":3}}],[\"线性表\",{\"1\":{\"38\":1}}],[\"线程\",{\"0\":{\"7\":1,\"8\":1,\"35\":1,\"500\":1},\"1\":{\"3\":2,\"4\":3,\"5\":2,\"8\":8,\"10\":2,\"11\":3,\"23\":1,\"24\":1,\"25\":4,\"26\":1,\"29\":1,\"30\":1,\"31\":3,\"32\":1,\"34\":6,\"39\":7,\"46\":2,\"492\":3,\"499\":1,\"500\":6,\"502\":2,\"528\":10,\"529\":9,\"530\":7,\"531\":2,\"532\":1}}],[\"仍然\",{\"1\":{\"229\":1,\"254\":1,\"325\":1,\"386\":1,\"612\":1,\"617\":1,\"670\":1,\"673\":1,\"826\":1,\"829\":1,\"892\":1,\"893\":1}}],[\"仍\",{\"1\":{\"36\":1,\"229\":1,\"242\":1,\"257\":1,\"612\":1}}],[\"编写\",{\"1\":{\"854\":1}}],[\"编号\",{\"1\":{\"781\":1}}],[\"编\",{\"1\":{\"770\":2}}],[\"编解码器\",{\"1\":{\"864\":1}}],[\"编解码\",{\"1\":{\"228\":1}}],[\"编辑器\",{\"1\":{\"810\":1}}],[\"编辑\",{\"1\":{\"172\":1,\"174\":2}}],[\"编码器\",{\"1\":{\"194\":1,\"198\":2,\"220\":2,\"225\":2,\"228\":1,\"246\":1,\"272\":1,\"273\":1,\"280\":1,\"293\":1,\"310\":1,\"859\":3,\"862\":4,\"864\":2,\"925\":3,\"935\":1}}],[\"编码\",{\"1\":{\"41\":1,\"42\":1,\"218\":1,\"222\":1,\"225\":1,\"228\":3,\"246\":1,\"260\":1,\"268\":2,\"277\":2,\"288\":1,\"293\":1,\"318\":4,\"322\":3,\"344\":1,\"347\":5,\"348\":7,\"349\":2,\"859\":1,\"862\":2,\"864\":3,\"923\":1,\"928\":1}}],[\"编译器\",{\"1\":{\"589\":1,\"590\":1,\"663\":1,\"740\":1,\"757\":1}}],[\"编译系统\",{\"0\":{\"613\":1},\"1\":{\"586\":1,\"590\":2,\"595\":1,\"598\":1,\"599\":2,\"601\":1,\"606\":1,\"611\":1,\"613\":1,\"616\":1,\"620\":1,\"714\":1,\"722\":1,\"726\":1,\"730\":1,\"732\":1,\"735\":1,\"736\":1,\"738\":1,\"755\":1,\"766\":1,\"769\":1,\"770\":1}}],[\"编译\",{\"0\":{\"626\":1},\"1\":{\"36\":1,\"38\":1,\"590\":2,\"599\":2,\"600\":1,\"606\":1,\"612\":3,\"614\":1,\"617\":1,\"626\":2,\"649\":1,\"659\":1,\"690\":1,\"707\":1,\"739\":1,\"770\":2,\"825\":1}}],[\"编程技术\",{\"1\":{\"748\":1}}],[\"编程语言\",{\"1\":{\"527\":1}}],[\"编程\",{\"0\":{\"29\":1,\"33\":1},\"1\":{\"13\":2,\"19\":1,\"33\":1,\"44\":2,\"527\":1,\"528\":1,\"530\":1}}],[\"拷贝\",{\"0\":{\"550\":1},\"1\":{\"36\":1,\"38\":1,\"532\":1,\"548\":1,\"612\":1,\"710\":3,\"729\":1}}],[\"拷贝到\",{\"1\":{\"30\":1,\"38\":1}}],[\"声明\",{\"0\":{\"590\":1,\"605\":1,\"613\":1,\"614\":1,\"615\":1,\"616\":1,\"617\":1,\"634\":1,\"637\":1,\"638\":1,\"639\":1,\"665\":1,\"702\":1,\"703\":1,\"738\":1,\"749\":1},\"1\":{\"36\":2,\"37\":1,\"123\":1,\"174\":2,\"175\":2,\"304\":2,\"522\":1,\"524\":2,\"541\":1,\"581\":2,\"583\":4,\"585\":3,\"586\":1,\"589\":2,\"590\":7,\"594\":1,\"595\":4,\"598\":4,\"599\":5,\"600\":1,\"601\":2,\"604\":1,\"605\":3,\"606\":18,\"607\":5,\"609\":1,\"611\":2,\"612\":4,\"614\":1,\"615\":6,\"616\":3,\"617\":4,\"620\":2,\"634\":1,\"637\":2,\"638\":3,\"639\":4,\"658\":1,\"665\":2,\"666\":1,\"671\":2,\"687\":1,\"689\":1,\"690\":2,\"691\":1,\"703\":5,\"704\":3,\"706\":1,\"707\":5,\"708\":1,\"713\":1,\"715\":1,\"717\":7,\"718\":1,\"720\":1,\"721\":5,\"722\":2,\"724\":1,\"726\":1,\"730\":1,\"732\":1,\"738\":3,\"741\":1,\"744\":2,\"745\":4,\"749\":5,\"750\":4,\"755\":4,\"756\":5,\"757\":3,\"758\":1,\"762\":3,\"767\":1,\"769\":18,\"770\":1,\"793\":1,\"811\":2,\"816\":2,\"841\":2,\"845\":2,\"875\":2}}],[\"权威机构\",{\"1\":{\"484\":1}}],[\"权值\",{\"1\":{\"222\":1,\"372\":4}}],[\"权重\",{\"0\":{\"846\":2},\"1\":{\"210\":4,\"222\":3,\"223\":3,\"354\":1,\"355\":5,\"357\":1,\"369\":1,\"371\":1,\"372\":1,\"395\":5,\"399\":1,\"839\":2,\"846\":2,\"883\":1,\"891\":2,\"928\":1}}],[\"权衡\",{\"0\":{\"149\":1},\"1\":{\"955\":1}}],[\"权限\",{\"0\":{\"160\":1,\"162\":1,\"172\":1,\"752\":1},\"1\":{\"36\":1,\"160\":2,\"170\":1,\"172\":1,\"191\":1,\"612\":1,\"705\":1,\"752\":2}}],[\"权\",{\"1\":{\"34\":1}}],[\"顺序排列\",{\"1\":{\"318\":1}}],[\"顺序存储\",{\"1\":{\"69\":3}}],[\"顺序\",{\"1\":{\"34\":1,\"69\":1,\"71\":1,\"82\":1,\"113\":1,\"138\":1,\"201\":1,\"228\":1,\"303\":2,\"305\":1,\"306\":3,\"308\":1,\"314\":1,\"315\":1,\"318\":1,\"322\":1,\"457\":1,\"459\":2,\"467\":2,\"469\":2,\"500\":1,\"528\":1,\"537\":2,\"589\":4,\"590\":1,\"601\":1,\"611\":1,\"690\":1,\"703\":1,\"722\":2,\"755\":1,\"762\":1,\"775\":1,\"781\":1,\"807\":1}}],[\"按列求\",{\"1\":{\"848\":1}}],[\"按行求\",{\"1\":{\"848\":1}}],[\"按位\",{\"1\":{\"811\":6}}],[\"按姓\",{\"1\":{\"468\":1}}],[\"按\",{\"0\":{\"468\":1},\"1\":{\"82\":1,\"100\":1,\"110\":3,\"191\":8,\"303\":1,\"306\":1,\"307\":1,\"314\":1,\"451\":1,\"468\":3,\"589\":1,\"610\":1,\"682\":1,\"689\":1,\"690\":1,\"695\":1,\"725\":1,\"755\":1,\"785\":2,\"787\":1,\"813\":1}}],[\"按照\",{\"1\":{\"34\":1,\"40\":1,\"51\":1,\"70\":1,\"80\":1,\"94\":1,\"96\":1,\"128\":1,\"196\":1,\"228\":1,\"314\":1,\"315\":1,\"318\":1,\"396\":1,\"417\":1,\"469\":1,\"537\":1,\"586\":1,\"599\":1,\"639\":2,\"689\":1,\"736\":1,\"755\":2,\"766\":1,\"769\":1,\"798\":1,\"804\":1,\"810\":1,\"813\":1,\"817\":1,\"829\":1,\"849\":1,\"860\":1}}],[\"按天\",{\"1\":{\"4\":1,\"11\":1}}],[\"没问\",{\"1\":{\"191\":1}}],[\"没写\",{\"1\":{\"70\":1}}],[\"没\",{\"1\":{\"36\":1,\"97\":1,\"379\":1,\"485\":4,\"612\":1,\"684\":1,\"846\":1,\"852\":1}}],[\"没用\",{\"0\":{\"34\":1}}],[\"没有\",{\"0\":{\"175\":1},\"1\":{\"5\":1,\"17\":2,\"19\":2,\"23\":1,\"30\":2,\"32\":1,\"37\":2,\"49\":1,\"55\":1,\"70\":1,\"82\":2,\"85\":1,\"86\":1,\"103\":1,\"104\":1,\"137\":1,\"166\":1,\"170\":1,\"172\":1,\"175\":1,\"177\":1,\"186\":1,\"191\":2,\"220\":1,\"229\":1,\"242\":1,\"245\":1,\"249\":1,\"254\":1,\"257\":1,\"259\":1,\"273\":1,\"299\":1,\"355\":1,\"356\":1,\"359\":1,\"370\":1,\"379\":1,\"380\":1,\"384\":2,\"419\":1,\"437\":1,\"449\":1,\"451\":1,\"457\":1,\"465\":1,\"476\":1,\"502\":1,\"527\":1,\"528\":1,\"530\":2,\"534\":1,\"539\":1,\"544\":1,\"545\":1,\"559\":2,\"563\":1,\"577\":3,\"584\":1,\"589\":1,\"605\":1,\"612\":2,\"620\":1,\"625\":1,\"633\":1,\"654\":1,\"662\":2,\"667\":1,\"676\":2,\"684\":1,\"690\":1,\"698\":1,\"703\":2,\"706\":2,\"713\":2,\"717\":4,\"720\":1,\"721\":1,\"722\":3,\"726\":1,\"745\":2,\"750\":1,\"769\":4,\"810\":1,\"824\":1,\"825\":1,\"826\":1,\"830\":1,\"854\":1,\"858\":1,\"884\":1,\"940\":3,\"949\":1,\"955\":1,\"957\":1}}],[\"#\",{\"0\":{\"34\":2,\"662\":1},\"1\":{\"165\":2,\"168\":2,\"170\":4,\"171\":3,\"175\":3,\"184\":3,\"191\":16,\"229\":1,\"294\":3,\"304\":11,\"305\":1,\"344\":1,\"524\":1,\"528\":8,\"529\":9,\"530\":7,\"531\":7,\"535\":2,\"536\":1,\"538\":2,\"539\":2,\"540\":2,\"541\":2,\"542\":2,\"543\":2,\"545\":3,\"547\":1,\"573\":1,\"576\":2,\"581\":3,\"583\":1,\"584\":1,\"589\":1,\"595\":1,\"598\":2,\"599\":1,\"600\":1,\"601\":1,\"605\":1,\"606\":1,\"612\":2,\"615\":1,\"624\":2,\"647\":1,\"650\":1,\"651\":1,\"653\":1,\"654\":3,\"662\":1,\"666\":1,\"667\":1,\"671\":1,\"683\":1,\"686\":2,\"690\":2,\"692\":1,\"695\":2,\"697\":1,\"698\":2,\"709\":1,\"713\":1,\"721\":1,\"722\":2,\"724\":1,\"745\":1,\"759\":2,\"769\":2,\"778\":1,\"781\":6,\"825\":2,\"826\":1,\"827\":1,\"828\":1,\"830\":2,\"834\":1,\"835\":1,\"838\":1,\"840\":2,\"846\":4,\"854\":2,\"855\":2,\"859\":14,\"868\":7,\"877\":3,\"929\":4}}],[\"半径\",{\"1\":{\"887\":1}}],[\"半路\",{\"1\":{\"102\":1}}],[\"半\",{\"0\":{\"34\":2},\"1\":{\"33\":2,\"34\":9}}],[\"涉及\",{\"1\":{\"33\":1,\"392\":1}}],[\"但\",{\"1\":{\"33\":1,\"36\":1,\"37\":2,\"38\":1,\"195\":1,\"198\":1,\"218\":1,\"293\":1,\"299\":2,\"301\":1,\"306\":1,\"312\":3,\"322\":1,\"325\":1,\"342\":1,\"344\":1,\"348\":1,\"355\":1,\"370\":1,\"372\":2,\"380\":1,\"386\":1,\"390\":4,\"449\":1,\"471\":1,\"476\":3,\"485\":3,\"525\":1,\"545\":1,\"575\":1,\"601\":1,\"612\":3,\"757\":1,\"769\":1,\"863\":3,\"875\":1,\"910\":1,\"938\":2,\"940\":3,\"951\":1,\"957\":1,\"959\":1,\"960\":1}}],[\"但是\",{\"1\":{\"13\":1,\"30\":1,\"99\":1,\"103\":1,\"104\":1,\"126\":3,\"175\":1,\"191\":1,\"210\":1,\"217\":1,\"220\":1,\"235\":1,\"254\":2,\"355\":1,\"357\":1,\"369\":1,\"379\":2,\"446\":1,\"451\":1,\"459\":1,\"476\":1,\"528\":1,\"530\":2,\"583\":1,\"591\":1,\"596\":1,\"606\":1,\"612\":1,\"621\":1,\"624\":1,\"639\":1,\"642\":1,\"644\":1,\"650\":1,\"668\":1,\"670\":1,\"671\":1,\"672\":1,\"676\":2,\"701\":1,\"703\":1,\"707\":1,\"708\":1,\"713\":1,\"714\":1,\"715\":1,\"718\":1,\"720\":1,\"722\":1,\"726\":1,\"741\":1,\"744\":2,\"750\":1,\"769\":2,\"785\":2,\"793\":1,\"804\":2,\"826\":1,\"904\":1,\"928\":1,\"929\":1,\"940\":2,\"949\":1,\"957\":1,\"958\":1,\"959\":1,\"961\":2}}],[\"往往\",{\"0\":{\"915\":1},\"1\":{\"349\":3,\"372\":1,\"400\":1,\"563\":1,\"684\":1,\"863\":1,\"912\":1,\"922\":2,\"929\":1,\"940\":1}}],[\"往后\",{\"1\":{\"103\":1}}],[\"往前\",{\"1\":{\"100\":1}}],[\"往右\",{\"1\":{\"94\":1}}],[\"往\",{\"1\":{\"32\":1,\"34\":1,\"94\":1,\"539\":6,\"589\":1,\"666\":1,\"799\":1,\"827\":1}}],[\"睡眠\",{\"1\":{\"32\":1,\"34\":1}}],[\"仅靠\",{\"1\":{\"953\":1}}],[\"仅取\",{\"1\":{\"804\":1}}],[\"仅以\",{\"1\":{\"174\":1}}],[\"仅\",{\"1\":{\"31\":1,\"38\":1,\"53\":1,\"138\":1,\"195\":1,\"198\":1,\"246\":1,\"271\":1,\"273\":1,\"369\":1,\"370\":1,\"380\":1,\"390\":1,\"392\":1,\"395\":1,\"469\":1,\"530\":1,\"534\":1,\"621\":1,\"717\":1,\"799\":1,\"864\":1,\"882\":1,\"887\":1,\"905\":1}}],[\"仅仅\",{\"1\":{\"13\":1,\"38\":1,\"174\":1,\"261\":1,\"262\":1,\"398\":1,\"436\":1,\"530\":1,\"737\":1,\"917\":1}}],[\"均衡点\",{\"1\":{\"957\":2}}],[\"均衡\",{\"1\":{\"957\":2}}],[\"均方\",{\"1\":{\"451\":1}}],[\"均值\",{\"1\":{\"223\":1,\"451\":4,\"897\":1}}],[\"均匀分布\",{\"1\":{\"228\":1,\"901\":1,\"959\":2}}],[\"均匀\",{\"1\":{\"193\":1,\"223\":2,\"228\":1,\"308\":1,\"312\":1,\"317\":1,\"901\":1,\"959\":1}}],[\"均\",{\"1\":{\"31\":2,\"93\":3,\"137\":1,\"210\":1,\"220\":1,\"226\":1,\"270\":1,\"372\":1,\"781\":1,\"826\":1,\"929\":1}}],[\"耗时\",{\"1\":{\"30\":1,\"31\":1,\"199\":1,\"406\":2}}],[\"解读\",{\"1\":{\"862\":1,\"889\":1,\"921\":1}}],[\"解开\",{\"1\":{\"436\":1}}],[\"解离\",{\"1\":{\"436\":1}}],[\"解码\",{\"1\":{\"201\":1,\"293\":1}}],[\"解码器\",{\"1\":{\"192\":1,\"194\":1,\"195\":2,\"197\":1,\"199\":1,\"200\":1,\"201\":7,\"293\":1,\"310\":1,\"314\":1,\"320\":1,\"322\":1,\"864\":1,\"925\":1,\"935\":1}}],[\"解\",{\"1\":{\"195\":1,\"357\":3,\"446\":1,\"959\":2}}],[\"解数\",{\"0\":{\"129\":1},\"1\":{\"110\":1}}],[\"解决问题\",{\"1\":{\"852\":1}}],[\"解决办法\",{\"1\":{\"175\":1,\"460\":1}}],[\"解决方案\",{\"0\":{\"844\":1,\"845\":1},\"1\":{\"128\":1}}],[\"解决\",{\"0\":{\"157\":1,\"187\":1,\"189\":1,\"193\":1,\"485\":1},\"1\":{\"110\":2,\"137\":1,\"169\":1,\"174\":1,\"189\":1,\"192\":1,\"193\":2,\"195\":2,\"199\":1,\"222\":1,\"226\":1,\"228\":1,\"242\":1,\"245\":1,\"292\":1,\"303\":1,\"308\":1,\"318\":1,\"320\":1,\"322\":1,\"325\":1,\"372\":1,\"386\":1,\"392\":1,\"451\":1,\"484\":1,\"485\":5,\"600\":1,\"654\":1,\"736\":1,\"737\":1,\"745\":1,\"747\":1,\"750\":1,\"769\":1,\"830\":1,\"857\":1,\"858\":1,\"863\":1,\"892\":1,\"893\":1,\"915\":1,\"916\":1,\"922\":2,\"957\":1}}],[\"解法\",{\"1\":{\"104\":1,\"128\":1}}],[\"解析度\",{\"1\":{\"862\":1}}],[\"解析\",{\"1\":{\"46\":2,\"284\":1}}],[\"解释\",{\"1\":{\"30\":1,\"137\":3,\"138\":2,\"139\":3,\"222\":1,\"304\":1,\"570\":1,\"571\":1,\"782\":1}}],[\"解锁\",{\"1\":{\"24\":1,\"25\":2,\"27\":1}}],[\"廖\",{\"1\":{\"30\":1}}],[\"向下\",{\"1\":{\"828\":1}}],[\"向队\",{\"1\":{\"570\":2}}],[\"向量\",{\"1\":{\"199\":2,\"200\":1,\"201\":6,\"202\":2,\"210\":1,\"218\":2,\"228\":2,\"270\":2,\"315\":1,\"322\":2,\"404\":1,\"451\":2,\"537\":2,\"541\":2,\"543\":4,\"573\":1,\"574\":1,\"859\":3,\"862\":2,\"864\":3,\"907\":1,\"923\":1,\"925\":1,\"947\":1,\"959\":1}}],[\"向\",{\"1\":{\"30\":2,\"39\":1,\"40\":1,\"103\":1,\"211\":1,\"224\":1,\"225\":1,\"394\":1,\"399\":1,\"436\":1,\"484\":1,\"534\":1,\"545\":2,\"572\":1,\"586\":1,\"621\":1,\"685\":1,\"701\":2,\"730\":1,\"776\":1,\"777\":2,\"781\":4,\"791\":1,\"793\":1,\"798\":1,\"799\":1,\"803\":1,\"811\":1,\"815\":1,\"854\":1,\"938\":11,\"939\":3,\"940\":11,\"951\":9}}],[\"再有\",{\"1\":{\"769\":1}}],[\"再用\",{\"1\":{\"756\":1}}],[\"再加\",{\"1\":{\"688\":1,\"769\":1}}],[\"再下\",{\"1\":{\"539\":1}}],[\"再也不会\",{\"1\":{\"437\":1}}],[\"再来\",{\"1\":{\"174\":1}}],[\"再求\",{\"1\":{\"90\":1,\"100\":1,\"451\":1,\"807\":2}}],[\"再\",{\"1\":{\"30\":2,\"38\":1,\"77\":1,\"85\":1,\"122\":1,\"123\":1,\"143\":1,\"175\":1,\"191\":1,\"282\":1,\"299\":1,\"366\":1,\"380\":2,\"399\":1,\"402\":2,\"408\":1,\"419\":1,\"468\":1,\"540\":1,\"692\":1,\"701\":2,\"721\":1,\"729\":1,\"748\":1,\"757\":2,\"769\":1,\"775\":1,\"781\":4,\"799\":1,\"801\":1,\"806\":1,\"819\":1,\"826\":3,\"829\":1,\"846\":2,\"852\":1,\"864\":1,\"875\":1,\"922\":2,\"938\":4,\"940\":1,\"947\":1,\"951\":3,\"958\":1}}],[\"再次\",{\"1\":{\"19\":1,\"25\":1,\"39\":1,\"476\":1,\"852\":1}}],[\"偏置\",{\"1\":{\"370\":1,\"372\":1,\"863\":3}}],[\"偏差\",{\"1\":{\"51\":1,\"53\":1}}],[\"偏移量\",{\"1\":{\"223\":1,\"282\":1,\"371\":1,\"372\":1,\"411\":1}}],[\"偏移\",{\"1\":{\"30\":1,\"369\":1,\"371\":2,\"372\":1,\"419\":1}}],[\"偏低\",{\"1\":{\"20\":1}}],[\"字节数\",{\"1\":{\"633\":1,\"676\":1,\"769\":1,\"782\":1,\"811\":1}}],[\"字节\",{\"1\":{\"633\":1,\"649\":5,\"684\":1,\"762\":1,\"781\":2,\"782\":2,\"785\":4,\"787\":1,\"788\":2,\"793\":3,\"810\":1}}],[\"字面\",{\"1\":{\"529\":1,\"640\":2,\"676\":1}}],[\"字段\",{\"1\":{\"476\":1}}],[\"字形\",{\"1\":{\"446\":1}}],[\"字符\",{\"0\":{\"139\":1,\"646\":1,\"647\":1,\"679\":1,\"680\":1,\"685\":1,\"698\":1,\"779\":1},\"1\":{\"137\":16,\"139\":5,\"174\":2,\"175\":1,\"534\":2,\"602\":1,\"612\":1,\"633\":2,\"638\":2,\"640\":1,\"647\":4,\"648\":5,\"649\":2,\"657\":1,\"680\":2,\"682\":4,\"683\":1,\"684\":9,\"685\":7,\"686\":1,\"687\":3,\"688\":12,\"689\":4,\"690\":4,\"691\":1,\"693\":5,\"695\":1,\"696\":2,\"697\":2,\"698\":9,\"712\":2,\"781\":14,\"782\":3,\"785\":5,\"787\":2,\"804\":3,\"809\":1,\"818\":1}}],[\"字符串\",{\"0\":{\"105\":1,\"138\":1,\"535\":1,\"649\":1,\"679\":1,\"684\":2,\"686\":1,\"687\":1,\"688\":1,\"689\":1,\"690\":1,\"691\":2,\"692\":1,\"693\":1,\"694\":1,\"695\":1,\"696\":1,\"697\":1},\"1\":{\"102\":1,\"105\":5,\"106\":1,\"110\":1,\"114\":1,\"137\":16,\"138\":4,\"139\":1,\"534\":8,\"535\":2,\"602\":1,\"623\":1,\"639\":1,\"652\":2,\"653\":1,\"662\":1,\"666\":2,\"668\":1,\"684\":10,\"685\":8,\"686\":1,\"687\":3,\"688\":6,\"689\":4,\"690\":4,\"691\":3,\"692\":2,\"693\":5,\"694\":2,\"695\":8,\"696\":15,\"697\":5,\"698\":10,\"787\":1}}],[\"字母组合\",{\"0\":{\"114\":1}}],[\"字母\",{\"0\":{\"138\":1},\"1\":{\"104\":1,\"138\":2,\"600\":1,\"642\":2,\"645\":1,\"657\":2,\"690\":1,\"695\":1,\"781\":7}}],[\"字\",{\"1\":{\"30\":1,\"480\":1}}],[\"复习\",{\"1\":{\"735\":1}}],[\"复合\",{\"0\":{\"805\":1},\"1\":{\"611\":2,\"620\":5,\"781\":1,\"805\":2,\"816\":3,\"817\":1}}],[\"复原\",{\"0\":{\"119\":1}}],[\"复制出\",{\"1\":{\"725\":4,\"728\":1}}],[\"复制到\",{\"1\":{\"688\":3,\"690\":1}}],[\"复制\",{\"0\":{\"723\":1,\"725\":1,\"726\":1,\"728\":1,\"729\":1,\"804\":1},\"1\":{\"82\":1,\"174\":1,\"291\":1,\"538\":2,\"695\":1,\"698\":1,\"724\":1,\"725\":1,\"726\":7,\"728\":1,\"729\":9,\"883\":1}}],[\"复用\",{\"1\":{\"30\":3}}],[\"复杂度\",{\"1\":{\"20\":1,\"61\":1,\"62\":1,\"64\":1,\"65\":1,\"80\":3,\"125\":2,\"137\":1,\"193\":1,\"194\":1,\"211\":1,\"372\":1,\"379\":1,\"380\":1,\"384\":1,\"863\":1}}],[\"复杂\",{\"1\":{\"13\":2,\"58\":1,\"60\":1,\"234\":1,\"259\":1,\"436\":1,\"599\":1,\"735\":1,\"863\":1,\"904\":2,\"905\":1}}],[\"驱动\",{\"0\":{\"161\":1,\"191\":1},\"1\":{\"30\":3,\"191\":8}}],[\"未配对\",{\"1\":{\"817\":1}}],[\"未指定\",{\"1\":{\"793\":1}}],[\"未定义\",{\"1\":{\"615\":1}}],[\"未找到\",{\"1\":{\"476\":1}}],[\"未修改\",{\"1\":{\"476\":1}}],[\"未知\",{\"1\":{\"459\":1}}],[\"未\",{\"1\":{\"30\":1,\"202\":1,\"265\":1,\"271\":1,\"282\":1,\"322\":1,\"351\":1,\"359\":1,\"395\":1,\"457\":1,\"529\":1,\"530\":1,\"531\":1,\"546\":1,\"609\":1,\"677\":1,\"871\":1,\"874\":1,\"889\":1,\"901\":1,\"940\":4}}],[\"未命名\",{\"1\":{\"23\":1}}],[\"区内\",{\"1\":{\"612\":1}}],[\"区间\",{\"0\":{\"151\":1},\"1\":{\"87\":1,\"96\":2,\"98\":2,\"103\":2,\"112\":1,\"137\":1,\"290\":1,\"294\":1,\"538\":1}}],[\"区域\",{\"0\":{\"232\":1},\"1\":{\"50\":1,\"52\":1,\"55\":4,\"64\":1,\"195\":1,\"217\":2,\"227\":1,\"228\":5,\"232\":2,\"235\":2,\"237\":1,\"242\":1,\"284\":1,\"308\":3,\"332\":2,\"367\":1,\"369\":2,\"402\":1,\"404\":2,\"419\":2,\"427\":1,\"887\":4,\"891\":1,\"893\":9,\"915\":1,\"916\":2,\"920\":1,\"940\":8,\"945\":1,\"961\":1}}],[\"区\",{\"1\":{\"36\":1,\"609\":1,\"612\":1,\"830\":1}}],[\"区分\",{\"0\":{\"752\":1},\"1\":{\"30\":1,\"37\":1,\"217\":1,\"250\":2,\"353\":1,\"402\":1,\"457\":1,\"612\":1,\"647\":1,\"750\":1,\"766\":1,\"790\":1,\"893\":1}}],[\"区别\",{\"0\":{\"13\":1,\"484\":1},\"1\":{\"5\":1,\"115\":1,\"348\":1,\"502\":1,\"523\":1,\"544\":1,\"546\":1,\"570\":1,\"574\":1,\"676\":1,\"686\":1,\"735\":1,\"744\":1,\"745\":1,\"748\":1,\"781\":1,\"800\":1,\"864\":1,\"947\":1}}],[\"检索\",{\"0\":{\"455\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"466\":1},\"1\":{\"456\":2,\"459\":1,\"460\":1,\"461\":1,\"463\":2,\"467\":1,\"468\":1,\"469\":1,\"471\":1,\"889\":1}}],[\"检验\",{\"1\":{\"451\":1}}],[\"检测器\",{\"1\":{\"235\":2,\"242\":2,\"273\":1}}],[\"检测\",{\"0\":{\"60\":1,\"230\":1,\"231\":1,\"430\":1},\"1\":{\"30\":2,\"39\":2,\"47\":1,\"49\":1,\"58\":1,\"63\":1,\"64\":1,\"198\":2,\"199\":2,\"214\":1,\"242\":5,\"262\":1,\"264\":1,\"344\":3,\"358\":1,\"370\":1,\"377\":1,\"379\":1,\"402\":4,\"404\":2,\"406\":1,\"410\":1,\"422\":1,\"425\":1,\"427\":3,\"428\":1,\"451\":1,\"684\":1,\"875\":1}}],[\"检查\",{\"0\":{\"177\":1},\"1\":{\"30\":1,\"99\":1,\"174\":1,\"191\":1,\"298\":1,\"574\":2,\"590\":2,\"667\":1,\"714\":1,\"770\":1,\"828\":3,\"829\":1,\"830\":2}}],[\"动力\",{\"1\":{\"949\":1}}],[\"动力学\",{\"1\":{\"897\":1,\"909\":1,\"913\":1}}],[\"动如脱兔\",{\"1\":{\"887\":1}}],[\"动画\",{\"1\":{\"835\":1}}],[\"动机\",{\"1\":{\"379\":1,\"380\":1}}],[\"动作\",{\"1\":{\"30\":1,\"500\":1}}],[\"动态图\",{\"1\":{\"276\":2,\"401\":1}}],[\"动态变化\",{\"1\":{\"69\":1,\"436\":1}}],[\"动态\",{\"0\":{\"332\":1,\"611\":1,\"714\":1,\"763\":1,\"764\":1,\"770\":1,\"826\":1},\"1\":{\"20\":1,\"193\":1,\"194\":1,\"225\":3,\"228\":1,\"254\":1,\"276\":1,\"332\":2,\"370\":1,\"423\":1,\"511\":1,\"537\":3,\"609\":9,\"610\":1,\"611\":2,\"612\":2,\"701\":1,\"714\":5,\"722\":1,\"769\":2,\"770\":4,\"824\":1,\"826\":1,\"828\":1,\"835\":1,\"889\":1}}],[\"动态分配\",{\"0\":{\"711\":1},\"1\":{\"8\":1,\"35\":1,\"677\":1,\"724\":1}}],[\"必需\",{\"1\":{\"467\":1,\"624\":1}}],[\"必定\",{\"1\":{\"91\":2,\"799\":1}}],[\"必要\",{\"1\":{\"53\":1,\"254\":1,\"612\":1,\"748\":1,\"793\":1,\"925\":1}}],[\"必须\",{\"1\":{\"30\":1,\"39\":2,\"40\":1,\"41\":2,\"42\":1,\"43\":1,\"137\":1,\"139\":1,\"304\":4,\"305\":1,\"349\":1,\"456\":1,\"469\":2,\"563\":1,\"571\":1,\"572\":1,\"583\":1,\"584\":1,\"586\":1,\"589\":1,\"595\":3,\"605\":2,\"606\":1,\"642\":1,\"657\":1,\"658\":1,\"661\":1,\"665\":1,\"672\":1,\"688\":1,\"692\":2,\"706\":1,\"707\":1,\"717\":1,\"720\":1,\"724\":1,\"728\":1,\"741\":1,\"748\":1,\"762\":1,\"769\":1,\"789\":1,\"790\":1,\"791\":1,\"818\":1,\"824\":1,\"828\":1,\"829\":1,\"859\":1,\"925\":1,\"926\":1}}],[\"必然\",{\"1\":{\"20\":1,\"70\":1}}],[\"业务\",{\"1\":{\"29\":1,\"31\":2}}],[\"逻辑运算\",{\"0\":{\"810\":1}}],[\"逻辑值\",{\"1\":{\"809\":1}}],[\"逻辑关系\",{\"1\":{\"69\":1}}],[\"逻辑\",{\"0\":{\"810\":1},\"1\":{\"29\":3,\"31\":2,\"33\":1,\"34\":1,\"44\":4,\"70\":1,\"72\":2,\"77\":1,\"81\":1,\"89\":1,\"97\":1,\"104\":1,\"563\":1,\"708\":1,\"745\":1,\"810\":13,\"811\":1,\"813\":1,\"904\":1}}],[\"例证\",{\"1\":{\"708\":1}}],[\"例求\",{\"1\":{\"612\":1}}],[\"例\",{\"1\":{\"468\":1,\"535\":1,\"594\":1,\"595\":2,\"600\":2,\"606\":1,\"612\":1,\"615\":1,\"621\":1,\"642\":1,\"648\":1,\"665\":1,\"668\":1,\"670\":1,\"676\":1,\"683\":2,\"687\":1,\"688\":1,\"690\":1,\"695\":1,\"698\":2,\"712\":1,\"713\":1,\"714\":1,\"718\":1,\"721\":2,\"725\":2,\"730\":2,\"738\":1,\"740\":1,\"744\":2,\"745\":1,\"755\":1,\"760\":1,\"766\":1,\"769\":1,\"781\":1,\"801\":1,\"806\":1,\"807\":2,\"809\":2,\"810\":1,\"811\":1,\"817\":4,\"818\":1,\"825\":1}}],[\"例如\",{\"1\":{\"28\":1,\"53\":1,\"106\":1,\"174\":1,\"208\":1,\"222\":1,\"233\":1,\"242\":1,\"244\":1,\"246\":1,\"254\":2,\"303\":3,\"306\":1,\"311\":1,\"355\":4,\"358\":1,\"392\":1,\"398\":1,\"400\":1,\"426\":1,\"468\":1,\"492\":1,\"527\":1,\"534\":1,\"565\":1,\"567\":1,\"570\":1,\"589\":1,\"590\":1,\"597\":1,\"617\":1,\"642\":1,\"688\":1,\"722\":2,\"730\":1,\"736\":1,\"744\":1,\"750\":1,\"770\":1,\"787\":1,\"833\":1,\"860\":2,\"863\":2,\"910\":1,\"947\":1}}],[\"例子\",{\"0\":{\"99\":1,\"838\":1},\"1\":{\"20\":1,\"22\":1,\"55\":1,\"419\":1,\"467\":1,\"469\":1,\"527\":1,\"528\":1,\"530\":1,\"598\":1,\"600\":1,\"781\":1,\"793\":1,\"830\":1,\"940\":1}}],[\"¹\",{\"1\":{\"28\":1,\"492\":1}}],[\"标的\",{\"1\":{\"537\":1}}],[\"标有\",{\"1\":{\"396\":1}}],[\"标量\",{\"1\":{\"222\":1,\"371\":2,\"372\":1,\"907\":1}}],[\"标志\",{\"0\":{\"684\":1},\"1\":{\"209\":1,\"684\":1}}],[\"标记\",{\"1\":{\"71\":1,\"81\":1,\"245\":1,\"246\":1,\"321\":2,\"396\":1,\"889\":1}}],[\"标签\",{\"1\":{\"64\":1,\"204\":1,\"232\":1,\"245\":2,\"246\":2,\"338\":1,\"355\":1,\"359\":1,\"416\":1,\"425\":1,\"859\":1,\"860\":1,\"887\":4,\"893\":1}}],[\"标好\",{\"1\":{\"55\":2}}],[\"标注\",{\"1\":{\"51\":2,\"55\":6,\"126\":4,\"245\":1,\"858\":1}}],[\"标准差\",{\"1\":{\"928\":1}}],[\"标准偏差\",{\"1\":{\"299\":1}}],[\"标准化\",{\"1\":{\"227\":1}}],[\"标准\",{\"0\":{\"602\":1,\"773\":1,\"774\":1,\"778\":1,\"780\":1},\"1\":{\"28\":4,\"201\":1,\"214\":4,\"222\":1,\"227\":1,\"228\":1,\"229\":1,\"246\":2,\"248\":1,\"500\":1,\"534\":1,\"583\":1,\"623\":1,\"666\":1,\"676\":1,\"691\":1,\"692\":1,\"704\":1,\"721\":1,\"756\":1,\"775\":1,\"776\":2,\"777\":1,\"781\":5,\"789\":1,\"828\":2,\"859\":1,\"901\":1,\"906\":3,\"928\":1}}],[\"标识符\",{\"0\":{\"657\":1},\"1\":{\"509\":4,\"597\":1,\"619\":1,\"633\":1,\"634\":1,\"652\":2,\"653\":1,\"657\":1,\"738\":1,\"806\":1}}],[\"标识\",{\"1\":{\"8\":1,\"545\":1,\"649\":1,\"811\":1}}],[\"表情\",{\"1\":{\"958\":1}}],[\"表尾\",{\"1\":{\"825\":3,\"828\":1,\"829\":2}}],[\"表列\",{\"1\":{\"585\":1,\"589\":2,\"595\":1}}],[\"表名\",{\"0\":{\"462\":1},\"1\":{\"462\":1,\"471\":1}}],[\"表征\",{\"1\":{\"398\":1,\"944\":3}}],[\"表格\",{\"1\":{\"357\":1}}],[\"表现力\",{\"1\":{\"953\":1}}],[\"表现形式\",{\"1\":{\"701\":1}}],[\"表现\",{\"1\":{\"262\":1,\"325\":2,\"344\":1,\"500\":1,\"910\":2,\"955\":1}}],[\"表面积\",{\"1\":{\"282\":1}}],[\"表面\",{\"1\":{\"245\":3,\"270\":4,\"273\":1,\"277\":1,\"280\":1,\"281\":1,\"282\":5,\"283\":2,\"284\":2,\"285\":1,\"312\":2,\"959\":1}}],[\"表将\",{\"1\":{\"210\":1}}],[\"表对\",{\"0\":{\"719\":1},\"1\":{\"126\":1,\"744\":1}}],[\"表达\",{\"1\":{\"257\":1,\"372\":1}}],[\"表达式\",{\"0\":{\"796\":1,\"797\":1,\"802\":1,\"806\":1,\"807\":1,\"808\":1,\"809\":1,\"810\":1},\"1\":{\"106\":3,\"355\":1,\"586\":2,\"587\":1,\"589\":2,\"676\":1,\"801\":2,\"806\":7,\"807\":14,\"808\":11,\"809\":6,\"810\":4,\"813\":1,\"816\":2,\"817\":7,\"818\":6,\"819\":3,\"833\":2,\"949\":1,\"953\":1}}],[\"表达能力\",{\"1\":{\"60\":1,\"320\":1,\"372\":1}}],[\"表更\",{\"1\":{\"104\":1}}],[\"表示法\",{\"1\":{\"303\":1}}],[\"表示\",{\"0\":{\"217\":1,\"218\":1},\"1\":{\"43\":2,\"49\":1,\"53\":1,\"69\":1,\"81\":1,\"103\":3,\"115\":1,\"170\":2,\"193\":4,\"194\":2,\"196\":1,\"201\":1,\"203\":4,\"208\":1,\"209\":2,\"216\":2,\"217\":2,\"218\":4,\"220\":5,\"221\":2,\"222\":1,\"227\":2,\"228\":5,\"229\":4,\"242\":2,\"244\":2,\"245\":2,\"246\":7,\"249\":1,\"254\":1,\"259\":4,\"262\":3,\"268\":1,\"270\":2,\"273\":1,\"277\":1,\"288\":1,\"300\":1,\"303\":1,\"305\":1,\"308\":1,\"314\":3,\"315\":2,\"316\":4,\"320\":3,\"322\":3,\"323\":2,\"332\":7,\"334\":2,\"338\":3,\"353\":4,\"354\":3,\"371\":4,\"372\":5,\"391\":3,\"392\":2,\"394\":2,\"396\":1,\"398\":10,\"419\":1,\"451\":1,\"476\":15,\"534\":2,\"564\":1,\"583\":2,\"598\":1,\"600\":1,\"606\":1,\"615\":1,\"624\":2,\"633\":3,\"637\":1,\"642\":3,\"645\":1,\"648\":2,\"650\":1,\"652\":1,\"663\":1,\"664\":2,\"665\":1,\"675\":1,\"684\":1,\"690\":1,\"698\":1,\"701\":1,\"706\":2,\"713\":1,\"738\":1,\"740\":2,\"749\":2,\"760\":1,\"793\":4,\"799\":2,\"810\":1,\"811\":5,\"816\":1,\"826\":1,\"837\":2,\"845\":1,\"859\":2,\"893\":1,\"902\":1,\"904\":1,\"922\":1,\"923\":3,\"925\":2,\"947\":1,\"953\":2,\"959\":1,\"963\":8}}],[\"表明\",{\"1\":{\"42\":1,\"325\":1,\"355\":2,\"545\":1,\"935\":1}}],[\"表中\",{\"1\":{\"32\":1,\"34\":1,\"229\":1,\"457\":1,\"459\":1,\"471\":1,\"559\":1,\"719\":1,\"793\":1}}],[\"表\",{\"0\":{\"104\":1,\"209\":1},\"1\":{\"28\":1,\"32\":1,\"134\":1,\"137\":3,\"209\":3,\"210\":5,\"220\":1,\"229\":1,\"242\":2,\"254\":1,\"355\":1,\"357\":1,\"456\":1,\"459\":1,\"465\":1,\"545\":2,\"671\":1,\"719\":1,\"741\":1,\"755\":1,\"756\":2,\"769\":1,\"910\":1,\"928\":1}}],[\"表述\",{\"1\":{\"28\":1,\"354\":4}}],[\"术语\",{\"1\":{\"28\":1,\"208\":1}}],[\"bxt\",{\"1\":{\"869\":1}}],[\"bg\",{\"1\":{\"696\":1}}],[\"bdd100k\",{\"0\":{\"427\":1},\"1\":{\"427\":3}}],[\"bt\",{\"1\":{\"354\":1}}],[\"bb\",{\"1\":{\"757\":1}}],[\"bboxes\",{\"1\":{\"344\":1}}],[\"bbox\",{\"1\":{\"344\":2}}],[\"bbbbb\",{\"1\":{\"139\":1}}],[\"bcl\",{\"1\":{\"246\":2}}],[\"bn\",{\"1\":{\"203\":1}}],[\"b1\",{\"1\":{\"203\":1}}],[\"birthday\",{\"1\":{\"757\":3}}],[\"bird\",{\"1\":{\"429\":1,\"860\":4}}],[\"bicycle\",{\"1\":{\"422\":1}}],[\"bias\",{\"1\":{\"304\":3}}],[\"bite\",{\"1\":{\"633\":1}}],[\"bit\",{\"1\":{\"191\":2,\"218\":1,\"229\":1,\"313\":1}}],[\"binding\",{\"1\":{\"770\":5}}],[\"bins\",{\"1\":{\"366\":1}}],[\"bin\",{\"0\":{\"175\":1},\"1\":{\"165\":2,\"174\":1,\"175\":2,\"366\":3,\"841\":2}}],[\"binarytreepaths\",{\"1\":{\"82\":5}}],[\"binary\",{\"1\":{\"70\":1,\"81\":2,\"82\":1,\"93\":1,\"782\":1,\"793\":4}}],[\"beat\",{\"0\":{\"942\":1,\"950\":1}}],[\"best\",{\"1\":{\"846\":1}}],[\"bestrivern\",{\"1\":{\"309\":1}}],[\"behavior\",{\"1\":{\"701\":1}}],[\"beijing\",{\"1\":{\"689\":1}}],[\"belong\",{\"1\":{\"422\":1,\"429\":1}}],[\"beyond\",{\"1\":{\"344\":1}}],[\"benchmark\",{\"1\":{\"342\":1,\"427\":1}}],[\"better\",{\"0\":{\"369\":1},\"1\":{\"314\":1,\"369\":1}}],[\"between\",{\"1\":{\"261\":1,\"305\":1,\"422\":1}}],[\"been\",{\"1\":{\"261\":1,\"426\":1}}],[\"bev\",{\"0\":{\"238\":1},\"1\":{\"233\":1,\"237\":1,\"242\":2}}],[\"be\",{\"1\":{\"188\":1,\"293\":1,\"427\":1,\"845\":1,\"942\":1,\"956\":1}}],[\"because\",{\"1\":{\"188\":1,\"201\":1,\"208\":1}}],[\"begin\",{\"1\":{\"71\":1,\"72\":1,\"86\":7,\"87\":3,\"100\":2,\"104\":6,\"105\":8,\"106\":1,\"116\":1,\"122\":1,\"126\":1,\"142\":2,\"143\":1,\"538\":2,\"539\":3,\"540\":3,\"541\":2,\"543\":1,\"545\":3,\"548\":1,\"551\":1,\"559\":1,\"561\":1,\"573\":2,\"575\":1,\"576\":4}}],[\"blending\",{\"1\":{\"945\":1}}],[\"blended\",{\"0\":{\"945\":1},\"1\":{\"945\":2}}],[\"blur\",{\"1\":{\"834\":1}}],[\"blob\",{\"1\":{\"877\":1}}],[\"block\",{\"1\":{\"373\":1,\"380\":4,\"399\":1,\"529\":1,\"619\":1,\"929\":1}}],[\"blog\",{\"1\":{\"54\":5,\"174\":1,\"175\":1,\"304\":1,\"811\":1,\"841\":1,\"845\":1,\"855\":1,\"875\":1}}],[\"blacklist\",{\"1\":{\"191\":4}}],[\"blkid\",{\"1\":{\"172\":1}}],[\"bs\",{\"1\":{\"170\":1,\"354\":1,\"696\":1}}],[\"bst\",{\"1\":{\"91\":1}}],[\"bfs\",{\"1\":{\"85\":1}}],[\"bundle\",{\"1\":{\"894\":2}}],[\"bucket\",{\"0\":{\"562\":1},\"1\":{\"562\":1}}],[\"build\",{\"1\":{\"427\":1}}],[\"builds\",{\"1\":{\"380\":1}}],[\"buildtree\",{\"1\":{\"86\":3}}],[\"but\",{\"1\":{\"191\":7,\"854\":1}}],[\"buddy\",{\"1\":{\"54\":2}}],[\"buffer\",{\"1\":{\"46\":2,\"782\":3}}],[\"byte\",{\"1\":{\"633\":1}}],[\"by\",{\"1\":{\"52\":2,\"81\":1,\"82\":1,\"126\":2,\"174\":1,\"175\":1,\"202\":1,\"235\":1,\"304\":1,\"309\":1,\"380\":1,\"426\":3,\"427\":1,\"467\":2,\"468\":1,\"469\":4,\"471\":2,\"811\":1,\"841\":1,\"845\":3,\"852\":1,\"856\":1,\"875\":1,\"904\":1,\"910\":1,\"911\":1,\"959\":1}}],[\"bar\",{\"1\":{\"868\":4}}],[\"ball\",{\"1\":{\"254\":1}}],[\"balanced\",{\"1\":{\"81\":2}}],[\"batchsize\",{\"1\":{\"868\":1}}],[\"batchz\",{\"1\":{\"844\":1}}],[\"batchnorm\",{\"1\":{\"310\":1}}],[\"batch\",{\"0\":{\"842\":2},\"1\":{\"203\":3,\"220\":1,\"304\":1,\"839\":1,\"843\":3,\"845\":9,\"859\":3,\"868\":3}}],[\"basictransformerblock\",{\"1\":{\"877\":1}}],[\"basic\",{\"1\":{\"373\":1}}],[\"bashr\",{\"0\":{\"175\":1}}],[\"bash\",{\"1\":{\"155\":1,\"165\":2,\"174\":1,\"175\":4,\"177\":1,\"184\":1,\"852\":1}}],[\"based\",{\"0\":{\"895\":1,\"897\":1,\"904\":1,\"911\":1},\"1\":{\"232\":3,\"263\":4,\"265\":2,\"305\":1,\"314\":1,\"344\":1,\"367\":1,\"402\":1,\"422\":1,\"427\":1,\"453\":1,\"895\":1,\"904\":1,\"911\":1,\"912\":1,\"913\":1}}],[\"base\",{\"1\":{\"103\":1,\"305\":1,\"748\":1,\"874\":1}}],[\"ba\",{\"1\":{\"138\":1}}],[\"bac\",{\"1\":{\"138\":1}}],[\"backbone\",{\"1\":{\"257\":2,\"344\":2,\"380\":1,\"846\":2}}],[\"backtrack\",{\"1\":{\"113\":3,\"114\":3,\"115\":4,\"116\":3,\"118\":4}}],[\"backtracking\",{\"1\":{\"110\":2,\"112\":3,\"125\":3,\"126\":3,\"128\":3}}],[\"back\",{\"1\":{\"70\":1,\"71\":3,\"72\":16,\"82\":5,\"85\":3,\"99\":1,\"100\":4,\"102\":4,\"104\":2,\"105\":2,\"107\":5,\"112\":3,\"113\":3,\"114\":3,\"115\":3,\"116\":3,\"118\":4,\"119\":6,\"121\":7,\"122\":6,\"123\":7,\"125\":3,\"126\":3,\"128\":1,\"138\":1,\"534\":4,\"539\":4,\"540\":6,\"541\":4,\"542\":1,\"570\":3,\"574\":3}}],[\"backpropagating\",{\"0\":{\"51\":1,\"52\":1},\"1\":{\"51\":2}}],[\"banc\",{\"1\":{\"137\":2}}],[\"baidu\",{\"1\":{\"55\":1}}],[\"bad\",{\"0\":{\"174\":1},\"1\":{\"43\":1,\"174\":1,\"476\":2}}],[\"brithday\",{\"1\":{\"757\":1}}],[\"brownian\",{\"1\":{\"897\":1}}],[\"browser\",{\"1\":{\"424\":1}}],[\"broadcast\",{\"1\":{\"25\":1}}],[\"branch\",{\"1\":{\"168\":1}}],[\"brs\",{\"0\":{\"52\":1}}],[\"breakdown\",{\"1\":{\"261\":1}}],[\"break\",{\"1\":{\"44\":2,\"86\":1,\"100\":1,\"104\":4,\"119\":1,\"818\":5,\"819\":1}}],[\"b\",{\"1\":{\"44\":4,\"78\":2,\"100\":2,\"103\":12,\"104\":1,\"137\":1,\"139\":1,\"143\":2,\"196\":1,\"203\":1,\"221\":1,\"232\":1,\"234\":1,\"303\":3,\"304\":2,\"305\":6,\"307\":2,\"314\":2,\"321\":2,\"353\":1,\"354\":1,\"361\":1,\"370\":5,\"380\":3,\"391\":1,\"451\":1,\"465\":6,\"573\":4,\"576\":2,\"589\":1,\"595\":13,\"597\":1,\"598\":1,\"599\":3,\"600\":3,\"601\":13,\"607\":2,\"611\":3,\"612\":6,\"615\":6,\"670\":2,\"672\":1,\"673\":2,\"683\":6,\"695\":1,\"726\":4,\"738\":2,\"741\":1,\"744\":2,\"759\":1,\"782\":3,\"798\":3,\"805\":2,\"806\":3,\"808\":3,\"809\":9,\"814\":1,\"816\":1,\"818\":3,\"825\":7,\"869\":1,\"927\":1,\"935\":1,\"958\":3,\"959\":1,\"961\":13}}],[\"boosted\",{\"1\":{\"428\":1}}],[\"boolalpha\",{\"1\":{\"810\":1}}],[\"bool\",{\"1\":{\"27\":2,\"77\":5,\"78\":3,\"81\":1,\"85\":2,\"99\":5,\"100\":1,\"104\":3,\"106\":1,\"118\":1,\"119\":1,\"125\":2,\"126\":2,\"128\":1,\"143\":1,\"152\":1,\"542\":1,\"559\":2,\"576\":1,\"632\":1,\"810\":3,\"837\":1,\"845\":1,\"848\":1}}],[\"box4\",{\"1\":{\"721\":1}}],[\"box3\",{\"1\":{\"721\":2,\"725\":2}}],[\"box2\",{\"1\":{\"718\":4,\"721\":3,\"724\":5,\"725\":6,\"729\":6}}],[\"box1\",{\"1\":{\"718\":4,\"720\":2,\"721\":3,\"724\":5,\"725\":5,\"729\":8}}],[\"boxes\",{\"1\":{\"422\":1}}],[\"box\",{\"1\":{\"402\":1,\"404\":1,\"405\":1,\"714\":8,\"718\":7,\"719\":2,\"720\":3,\"721\":22,\"724\":6,\"725\":3,\"726\":3,\"729\":10,\"744\":5,\"745\":3}}],[\"bounding\",{\"1\":{\"402\":1,\"404\":1,\"405\":1,\"422\":1}}],[\"boundaries\",{\"1\":{\"383\":1}}],[\"boulch\",{\"1\":{\"245\":1}}],[\"both\",{\"1\":{\"380\":1,\"426\":1}}],[\"bottleneck\",{\"1\":{\"373\":1}}],[\"bottom\",{\"1\":{\"102\":5,\"361\":1,\"402\":1}}],[\"bobkov\",{\"1\":{\"228\":1}}],[\"body\",{\"1\":{\"42\":3,\"422\":1,\"476\":3}}],[\"简介\",{\"1\":{\"957\":2}}],[\"简称\",{\"1\":{\"672\":1,\"705\":1}}],[\"简\",{\"1\":{\"392\":1}}],[\"简化\",{\"1\":{\"114\":1,\"198\":1,\"222\":1,\"225\":1,\"249\":1,\"307\":1,\"311\":1,\"349\":1}}],[\"简要\",{\"1\":{\"45\":1,\"545\":1}}],[\"简洁\",{\"1\":{\"27\":2,\"199\":1,\"938\":1,\"951\":1}}],[\"简单\",{\"0\":{\"141\":1},\"1\":{\"23\":1,\"83\":1,\"104\":1,\"169\":1,\"192\":1,\"195\":1,\"201\":1,\"217\":1,\"218\":1,\"220\":1,\"222\":2,\"223\":1,\"225\":1,\"242\":2,\"249\":1,\"277\":1,\"290\":1,\"299\":1,\"303\":2,\"305\":1,\"310\":1,\"342\":1,\"390\":1,\"392\":1,\"484\":1,\"527\":1,\"529\":1,\"530\":1,\"545\":1,\"698\":1,\"704\":1,\"712\":1,\"726\":1,\"730\":1,\"748\":1,\"750\":1,\"757\":1,\"769\":1,\"858\":1,\"875\":2,\"923\":1,\"940\":1,\"944\":1,\"955\":1}}],[\"减去\",{\"1\":{\"906\":1}}],[\"减慢\",{\"1\":{\"677\":1}}],[\"减\",{\"1\":{\"676\":2,\"811\":1}}],[\"减轻\",{\"1\":{\"283\":1,\"399\":2}}],[\"减小\",{\"1\":{\"225\":1,\"290\":2,\"319\":1,\"337\":1,\"349\":1,\"707\":1,\"940\":1}}],[\"减少\",{\"1\":{\"27\":1,\"38\":1,\"202\":1,\"211\":2,\"222\":1,\"228\":1,\"379\":2,\"380\":1,\"436\":1,\"437\":1,\"559\":1,\"574\":1,\"613\":1,\"882\":1,\"884\":1}}],[\"减一\",{\"1\":{\"23\":2}}],[\"重用\",{\"1\":{\"701\":1,\"747\":2,\"748\":1}}],[\"重名\",{\"1\":{\"624\":1}}],[\"重载\",{\"0\":{\"512\":1,\"601\":1,\"720\":1,\"820\":1,\"821\":1,\"822\":1,\"823\":1},\"1\":{\"512\":4,\"546\":1,\"595\":1,\"600\":1,\"601\":6,\"623\":1,\"624\":1,\"676\":1,\"689\":1,\"695\":1,\"720\":1,\"721\":1,\"722\":1,\"724\":1,\"726\":1,\"750\":2,\"769\":4,\"770\":1,\"775\":2,\"781\":2}}],[\"重试\",{\"1\":{\"476\":1}}],[\"重叠\",{\"1\":{\"417\":1}}],[\"重大\",{\"1\":{\"386\":1}}],[\"重建\",{\"0\":{\"270\":1},\"1\":{\"270\":8,\"271\":1,\"273\":1,\"277\":1,\"288\":1,\"294\":1,\"300\":1,\"337\":1,\"342\":1,\"873\":1,\"928\":5,\"935\":3}}],[\"重视\",{\"1\":{\"229\":1}}],[\"重组\",{\"1\":{\"228\":1,\"390\":2,\"391\":2}}],[\"重构\",{\"1\":{\"225\":1,\"228\":1}}],[\"重要性\",{\"1\":{\"222\":1,\"307\":1,\"356\":1,\"391\":3,\"392\":3,\"395\":1}}],[\"重要\",{\"1\":{\"191\":1,\"193\":1,\"209\":1,\"257\":1,\"259\":3,\"270\":1,\"273\":1,\"355\":1,\"356\":1,\"391\":2,\"527\":1,\"529\":1,\"684\":1,\"701\":1,\"747\":1,\"895\":1,\"923\":2}}],[\"重启\",{\"1\":{\"172\":1,\"186\":1,\"189\":1,\"191\":2,\"852\":1}}],[\"重装\",{\"0\":{\"161\":1}}],[\"重命名\",{\"1\":{\"160\":1}}],[\"重点\",{\"1\":{\"126\":1,\"304\":1,\"532\":1}}],[\"重不像\",{\"1\":{\"126\":1}}],[\"重\",{\"1\":{\"104\":2,\"122\":2,\"123\":1,\"126\":2,\"138\":1,\"298\":2,\"300\":1,\"372\":1,\"392\":1,\"546\":1}}],[\"重定向\",{\"1\":{\"43\":3,\"476\":6}}],[\"重置\",{\"1\":{\"39\":1,\"168\":1}}],[\"重复性\",{\"1\":{\"480\":1}}],[\"重复\",{\"0\":{\"139\":1},\"1\":{\"27\":1,\"70\":1,\"102\":1,\"106\":1,\"115\":2,\"126\":6,\"137\":2,\"139\":5,\"227\":1,\"380\":1,\"559\":2,\"590\":1,\"595\":1,\"766\":1,\"781\":1,\"830\":1,\"909\":1,\"935\":1,\"940\":2}}],[\"重复使用\",{\"1\":{\"27\":1}}],[\"重新安排\",{\"0\":{\"132\":1}}],[\"重新\",{\"1\":{\"19\":1,\"38\":1,\"55\":3,\"71\":1,\"103\":1,\"123\":1,\"153\":1,\"175\":2,\"191\":1,\"245\":1,\"273\":1,\"282\":1,\"298\":1,\"308\":1,\"322\":1,\"354\":2,\"357\":1,\"370\":1,\"390\":1,\"395\":1,\"476\":1,\"530\":1,\"601\":1,\"612\":3,\"696\":1,\"698\":1,\"768\":1,\"769\":6,\"776\":1,\"940\":4,\"944\":1}}],[\"~\",{\"1\":{\"27\":1,\"54\":6,\"334\":1,\"599\":1,\"633\":3,\"722\":2,\"811\":1,\"818\":2,\"869\":4,\"901\":2}}],[\"}\",{\"1\":{\"27\":6,\"44\":3,\"69\":2,\"70\":7,\"71\":8,\"72\":45,\"73\":4,\"74\":3,\"75\":6,\"76\":1,\"77\":2,\"78\":1,\"80\":6,\"81\":3,\"82\":14,\"83\":6,\"84\":3,\"85\":12,\"86\":2,\"87\":8,\"88\":1,\"89\":1,\"90\":10,\"91\":3,\"94\":1,\"95\":1,\"96\":3,\"97\":7,\"98\":3,\"99\":10,\"100\":19,\"102\":7,\"103\":49,\"104\":48,\"105\":24,\"106\":16,\"107\":10,\"110\":3,\"112\":5,\"113\":5,\"114\":6,\"115\":5,\"116\":7,\"118\":9,\"119\":7,\"121\":5,\"122\":6,\"123\":5,\"125\":5,\"126\":6,\"128\":10,\"137\":12,\"138\":7,\"139\":7,\"142\":4,\"143\":6,\"146\":3,\"148\":3,\"152\":5,\"153\":2,\"197\":2,\"298\":2,\"332\":2,\"338\":1,\"371\":1,\"399\":2,\"524\":4,\"528\":3,\"529\":3,\"530\":7,\"531\":7,\"534\":5,\"535\":1,\"538\":2,\"539\":1,\"540\":2,\"541\":3,\"542\":1,\"543\":1,\"545\":9,\"548\":1,\"554\":1,\"559\":2,\"573\":1,\"576\":2,\"583\":3,\"585\":2,\"595\":4,\"599\":4,\"600\":5,\"601\":7,\"605\":5,\"606\":6,\"611\":1,\"612\":6,\"613\":2,\"615\":2,\"624\":1,\"637\":1,\"666\":1,\"671\":3,\"682\":3,\"683\":10,\"684\":1,\"690\":5,\"695\":4,\"696\":1,\"698\":3,\"703\":1,\"704\":3,\"706\":2,\"707\":2,\"709\":3,\"713\":2,\"717\":3,\"718\":4,\"719\":2,\"721\":4,\"722\":5,\"724\":4,\"726\":1,\"729\":2,\"730\":2,\"732\":2,\"738\":5,\"740\":1,\"741\":2,\"744\":2,\"745\":7,\"749\":5,\"755\":4,\"756\":1,\"757\":5,\"758\":3,\"759\":7,\"762\":3,\"769\":7,\"781\":21,\"793\":2,\"816\":2,\"817\":1,\"818\":3,\"819\":1,\"825\":3,\"826\":5,\"827\":5,\"828\":8,\"829\":6,\"830\":24,\"846\":1,\"860\":2,\"869\":1,\"882\":1,\"897\":7,\"900\":3,\"902\":1,\"905\":1,\"917\":1}}],[\"!\",{\"0\":{\"944\":1},\"1\":{\"27\":1,\"42\":1,\"44\":1,\"71\":4,\"72\":16,\"73\":2,\"75\":4,\"77\":3,\"78\":3,\"81\":1,\"82\":2,\"84\":2,\"85\":4,\"89\":2,\"90\":2,\"99\":1,\"100\":3,\"103\":13,\"104\":9,\"105\":2,\"106\":2,\"107\":2,\"123\":2,\"125\":1,\"175\":1,\"529\":3,\"534\":2,\"540\":1,\"541\":2,\"545\":1,\"576\":1,\"612\":2,\"624\":1,\"695\":1,\"698\":1,\"781\":13,\"793\":1,\"809\":1,\"810\":3,\"811\":2,\"813\":1,\"825\":1,\"826\":1,\"827\":2,\"828\":2,\"829\":1,\"830\":7,\"944\":1}}],[\"&\",{\"0\":{\"664\":1},\"1\":{\"27\":7,\"41\":1,\"54\":3,\"70\":1,\"72\":3,\"75\":4,\"77\":8,\"78\":8,\"82\":7,\"83\":9,\"85\":10,\"86\":2,\"87\":3,\"89\":6,\"90\":6,\"91\":4,\"96\":1,\"97\":8,\"99\":3,\"100\":2,\"102\":9,\"103\":6,\"104\":30,\"105\":1,\"106\":7,\"107\":5,\"113\":2,\"115\":2,\"116\":6,\"119\":4,\"121\":2,\"122\":4,\"123\":4,\"125\":3,\"126\":11,\"128\":6,\"142\":4,\"143\":3,\"146\":5,\"148\":1,\"152\":2,\"153\":1,\"390\":1,\"522\":2,\"524\":1,\"525\":1,\"530\":1,\"531\":1,\"532\":3,\"538\":2,\"539\":7,\"543\":2,\"559\":1,\"571\":1,\"573\":2,\"574\":6,\"576\":2,\"605\":2,\"606\":3,\"664\":2,\"665\":3,\"666\":9,\"668\":1,\"670\":2,\"671\":1,\"672\":1,\"673\":2,\"676\":2,\"709\":2,\"726\":1,\"729\":1,\"732\":1,\"734\":1,\"735\":6,\"760\":1,\"762\":2,\"769\":2,\"781\":6,\"782\":2,\"810\":4,\"811\":4,\"825\":3,\"828\":2,\"829\":2,\"830\":6}}],[\":\",{\"0\":{\"52\":1,\"55\":1,\"166\":3,\"212\":1,\"272\":1,\"286\":1,\"360\":1,\"369\":1,\"446\":1,\"532\":2,\"940\":1,\"951\":1},\"1\":{\"27\":4,\"30\":5,\"41\":12,\"42\":6,\"44\":2,\"48\":1,\"52\":2,\"53\":1,\"54\":1,\"69\":1,\"70\":4,\"72\":8,\"74\":2,\"80\":1,\"81\":2,\"82\":4,\"83\":1,\"85\":1,\"87\":1,\"90\":1,\"96\":1,\"99\":2,\"100\":5,\"102\":1,\"103\":10,\"104\":14,\"105\":6,\"106\":3,\"107\":3,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"118\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"125\":3,\"126\":3,\"128\":1,\"137\":8,\"138\":11,\"139\":13,\"142\":1,\"143\":2,\"148\":1,\"153\":1,\"165\":2,\"166\":3,\"174\":2,\"175\":7,\"177\":2,\"184\":3,\"188\":3,\"189\":2,\"192\":1,\"202\":1,\"203\":3,\"208\":1,\"211\":3,\"212\":1,\"256\":1,\"260\":1,\"266\":1,\"271\":1,\"272\":1,\"273\":1,\"277\":1,\"293\":1,\"301\":1,\"303\":1,\"304\":33,\"305\":3,\"312\":1,\"313\":1,\"340\":2,\"344\":7,\"350\":1,\"353\":1,\"359\":2,\"360\":3,\"361\":3,\"367\":1,\"369\":1,\"375\":1,\"385\":2,\"392\":1,\"397\":1,\"411\":3,\"422\":7,\"426\":5,\"427\":1,\"428\":1,\"429\":1,\"437\":2,\"446\":1,\"449\":1,\"469\":1,\"471\":1,\"500\":6,\"509\":2,\"514\":2,\"524\":3,\"525\":2,\"527\":2,\"528\":19,\"529\":30,\"530\":40,\"531\":42,\"532\":6,\"534\":2,\"537\":1,\"540\":2,\"541\":4,\"545\":10,\"559\":2,\"563\":4,\"570\":13,\"573\":2,\"576\":3,\"587\":1,\"590\":1,\"605\":8,\"606\":19,\"615\":1,\"621\":2,\"623\":1,\"624\":6,\"663\":1,\"698\":2,\"701\":5,\"703\":2,\"704\":4,\"706\":10,\"707\":4,\"709\":2,\"717\":7,\"718\":7,\"719\":6,\"721\":6,\"722\":3,\"724\":6,\"726\":2,\"732\":5,\"735\":16,\"738\":4,\"740\":3,\"741\":2,\"744\":11,\"745\":16,\"749\":11,\"759\":1,\"760\":1,\"766\":2,\"769\":23,\"781\":19,\"782\":2,\"793\":67,\"794\":4,\"808\":3,\"811\":4,\"813\":2,\"814\":1,\"818\":11,\"827\":1,\"830\":1,\"834\":3,\"835\":17,\"840\":1,\"841\":4,\"845\":3,\"846\":12,\"848\":5,\"849\":1,\"852\":1,\"854\":4,\"855\":2,\"856\":2,\"862\":2,\"864\":2,\"867\":1,\"868\":1,\"875\":1,\"876\":1,\"877\":5,\"887\":2,\"888\":2,\"889\":3,\"891\":2,\"894\":1,\"900\":2,\"901\":2,\"904\":1,\"905\":1,\"910\":2,\"911\":1,\"917\":1,\"921\":1,\"938\":1,\"939\":1,\"940\":1,\"942\":1,\"950\":1,\"951\":1}}],[\"{\",{\"1\":{\"27\":6,\"44\":3,\"56\":1,\"69\":2,\"70\":7,\"71\":8,\"72\":45,\"73\":4,\"74\":3,\"75\":6,\"76\":1,\"77\":2,\"78\":1,\"80\":6,\"81\":3,\"82\":14,\"83\":6,\"84\":3,\"85\":12,\"86\":2,\"87\":8,\"88\":1,\"89\":1,\"90\":10,\"91\":3,\"94\":1,\"95\":1,\"96\":3,\"97\":8,\"98\":3,\"99\":10,\"100\":19,\"102\":7,\"103\":49,\"104\":48,\"105\":24,\"106\":17,\"107\":10,\"110\":3,\"112\":7,\"113\":5,\"114\":6,\"115\":5,\"116\":8,\"118\":9,\"119\":7,\"121\":5,\"122\":6,\"123\":5,\"125\":5,\"126\":6,\"128\":10,\"137\":12,\"138\":7,\"139\":7,\"142\":4,\"143\":6,\"146\":3,\"148\":3,\"152\":5,\"153\":2,\"197\":2,\"298\":2,\"332\":2,\"338\":1,\"371\":1,\"399\":2,\"435\":1,\"524\":4,\"528\":3,\"529\":3,\"530\":7,\"531\":7,\"534\":5,\"535\":1,\"538\":2,\"539\":1,\"540\":2,\"541\":3,\"542\":1,\"543\":1,\"545\":9,\"548\":1,\"554\":1,\"559\":2,\"573\":1,\"576\":2,\"583\":2,\"585\":2,\"595\":4,\"599\":4,\"600\":5,\"601\":7,\"605\":5,\"606\":6,\"611\":1,\"612\":6,\"613\":2,\"615\":2,\"624\":1,\"637\":1,\"666\":1,\"671\":3,\"682\":3,\"683\":10,\"684\":1,\"690\":5,\"695\":4,\"696\":1,\"698\":3,\"703\":1,\"704\":3,\"706\":2,\"707\":2,\"709\":3,\"713\":2,\"717\":3,\"718\":4,\"719\":2,\"721\":4,\"722\":5,\"724\":4,\"726\":1,\"729\":2,\"730\":2,\"732\":2,\"738\":5,\"740\":1,\"741\":2,\"744\":2,\"745\":7,\"749\":5,\"755\":4,\"756\":1,\"757\":5,\"758\":3,\"759\":7,\"762\":3,\"769\":7,\"781\":22,\"793\":2,\"816\":1,\"818\":3,\"819\":1,\"825\":3,\"826\":5,\"827\":5,\"828\":8,\"829\":6,\"830\":25,\"846\":1,\"860\":2,\"869\":1,\"882\":1,\"897\":8,\"900\":3,\"902\":1,\"905\":1,\"917\":1}}],[\"于此\",{\"1\":{\"372\":1}}],[\"于同\",{\"1\":{\"314\":1}}],[\"于点\",{\"1\":{\"222\":1,\"953\":1}}],[\"于是\",{\"1\":{\"50\":1,\"175\":2,\"390\":1,\"395\":2,\"852\":1,\"859\":1}}],[\"于\",{\"1\":{\"27\":1,\"28\":1,\"51\":1,\"60\":1,\"137\":1,\"198\":2,\"218\":1,\"220\":1,\"222\":1,\"223\":1,\"225\":1,\"227\":2,\"244\":1,\"246\":1,\"257\":1,\"262\":2,\"282\":1,\"293\":1,\"294\":1,\"298\":1,\"301\":2,\"303\":1,\"305\":1,\"306\":1,\"307\":1,\"312\":1,\"319\":1,\"320\":1,\"322\":1,\"332\":1,\"337\":1,\"347\":1,\"349\":1,\"354\":1,\"371\":1,\"372\":2,\"379\":1,\"396\":1,\"398\":1,\"399\":1,\"423\":1,\"436\":1,\"460\":1,\"476\":1,\"523\":1,\"525\":1,\"534\":1,\"541\":1,\"574\":1,\"600\":1,\"642\":1,\"664\":1,\"666\":2,\"698\":1,\"757\":1,\"760\":2,\"807\":1,\"809\":1,\"854\":1,\"859\":1,\"863\":1,\"883\":1,\"909\":1,\"935\":1,\"940\":1,\"952\":1}}],[\"能否\",{\"1\":{\"347\":1,\"766\":1}}],[\"能够\",{\"1\":{\"31\":1,\"38\":1,\"41\":1,\"44\":1,\"192\":1,\"223\":1,\"229\":1,\"245\":1,\"276\":1,\"277\":1,\"308\":1,\"312\":1,\"315\":1,\"319\":1,\"320\":3,\"355\":1,\"369\":2,\"371\":1,\"379\":1,\"392\":1,\"395\":1,\"419\":1,\"436\":1,\"469\":1,\"484\":1,\"485\":1,\"591\":1,\"594\":1,\"598\":2,\"599\":1,\"620\":1,\"621\":1,\"671\":1,\"676\":1,\"744\":1,\"750\":1,\"863\":1,\"902\":1,\"926\":1,\"952\":1}}],[\"能\",{\"1\":{\"26\":1,\"38\":1,\"69\":1,\"89\":1,\"152\":1,\"290\":1,\"357\":1,\"379\":2,\"380\":2,\"384\":1,\"394\":2,\"485\":1,\"529\":1,\"583\":1,\"587\":1,\"613\":1,\"621\":1,\"667\":1,\"671\":1,\"701\":1,\"703\":1,\"738\":1,\"744\":1,\"757\":1,\"767\":1,\"769\":2,\"776\":1,\"781\":1,\"782\":1,\"863\":1,\"902\":1,\"949\":1,\"958\":1}}],[\"能力\",{\"1\":{\"3\":1,\"61\":1,\"209\":1,\"220\":1,\"228\":1,\"229\":1,\"242\":1,\"299\":1,\"316\":1,\"320\":1,\"325\":1,\"357\":2,\"369\":1,\"370\":2,\"379\":1,\"893\":1,\"924\":3,\"926\":2,\"935\":1}}],[\"先对\",{\"1\":{\"807\":1}}],[\"先求\",{\"1\":{\"806\":1}}],[\"先析构\",{\"1\":{\"722\":1}}],[\"先后\",{\"1\":{\"714\":1,\"769\":1}}],[\"先前\",{\"1\":{\"222\":1,\"282\":1,\"321\":1,\"396\":1,\"935\":1}}],[\"先给\",{\"1\":{\"142\":1}}],[\"先来\",{\"1\":{\"86\":1}}],[\"先进\",{\"1\":{\"192\":2,\"194\":1,\"198\":1,\"199\":1,\"313\":1,\"358\":1}}],[\"先进后出\",{\"1\":{\"72\":1,\"563\":1,\"722\":1}}],[\"先进先出\",{\"1\":{\"72\":1}}],[\"先验\",{\"1\":{\"53\":1,\"226\":1,\"327\":1,\"863\":2,\"935\":1,\"953\":1}}],[\"先\",{\"1\":{\"25\":1,\"44\":1,\"90\":1,\"107\":1,\"122\":1,\"137\":2,\"143\":1,\"186\":1,\"342\":1,\"380\":2,\"468\":1,\"529\":1,\"576\":1,\"583\":1,\"590\":1,\"606\":1,\"639\":1,\"658\":1,\"692\":1,\"698\":1,\"704\":1,\"717\":1,\"722\":2,\"728\":1,\"741\":1,\"757\":1,\"782\":1,\"787\":1,\"799\":1,\"800\":2,\"807\":1,\"808\":1,\"813\":1,\"815\":1,\"819\":1,\"829\":1,\"833\":1,\"864\":1,\"875\":1,\"938\":2,\"951\":2}}],[\"参不多\",{\"1\":{\"938\":1}}],[\"参只\",{\"1\":{\"762\":1}}],[\"参时\",{\"1\":{\"671\":1}}],[\"参加\",{\"1\":{\"589\":1,\"689\":1}}],[\"参变量\",{\"1\":{\"524\":2}}],[\"参\",{\"1\":{\"370\":2,\"583\":1,\"584\":1,\"585\":1,\"590\":1,\"621\":1,\"720\":1,\"721\":1,\"722\":1,\"740\":1,\"874\":1,\"908\":1,\"922\":1}}],[\"参照\",{\"1\":{\"332\":1}}],[\"参与\",{\"1\":{\"325\":1,\"586\":2,\"589\":1,\"595\":1,\"845\":1,\"952\":1}}],[\"参见\",{\"1\":{\"303\":1,\"311\":1}}],[\"参数均\",{\"1\":{\"844\":1}}],[\"参数表\",{\"1\":{\"719\":1,\"735\":2,\"738\":1,\"739\":1,\"750\":1}}],[\"参数设置\",{\"1\":{\"222\":1}}],[\"参数传递\",{\"1\":{\"37\":1,\"612\":1}}],[\"参数\",{\"0\":{\"593\":1,\"594\":1,\"718\":1,\"719\":1,\"721\":1,\"837\":1},\"1\":{\"25\":1,\"52\":2,\"70\":3,\"72\":1,\"82\":1,\"85\":2,\"110\":1,\"196\":1,\"222\":2,\"223\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"288\":2,\"290\":5,\"299\":1,\"301\":1,\"304\":1,\"308\":1,\"320\":1,\"332\":1,\"334\":1,\"350\":2,\"357\":2,\"370\":2,\"372\":1,\"390\":1,\"392\":2,\"394\":1,\"399\":2,\"416\":1,\"446\":2,\"461\":1,\"532\":3,\"534\":1,\"545\":1,\"559\":3,\"583\":1,\"584\":2,\"586\":3,\"590\":10,\"594\":1,\"595\":4,\"600\":8,\"601\":8,\"620\":1,\"654\":4,\"688\":1,\"689\":1,\"714\":1,\"718\":2,\"719\":1,\"720\":1,\"721\":9,\"724\":1,\"726\":3,\"729\":1,\"730\":4,\"735\":2,\"736\":1,\"738\":7,\"739\":1,\"741\":3,\"744\":1,\"745\":1,\"750\":1,\"766\":2,\"769\":1,\"781\":1,\"793\":3,\"828\":1,\"830\":1,\"844\":1,\"845\":1,\"848\":1,\"854\":1,\"855\":1,\"902\":1,\"904\":1,\"927\":2,\"928\":1,\"929\":1,\"953\":1,\"957\":2}}],[\"参考点\",{\"1\":{\"342\":1}}],[\"参考\",{\"1\":{\"19\":1,\"182\":1,\"288\":1,\"290\":1,\"291\":1,\"294\":1,\"298\":2,\"332\":2,\"334\":2,\"342\":1,\"449\":1,\"532\":1,\"845\":1,\"910\":1,\"951\":1}}],[\"某些\",{\"1\":{\"184\":1,\"308\":1,\"492\":3,\"617\":1,\"701\":1,\"721\":1,\"748\":1,\"769\":1,\"785\":1,\"859\":1,\"923\":1}}],[\"某\",{\"0\":{\"181\":1},\"1\":{\"69\":2,\"392\":1,\"693\":1,\"701\":1,\"745\":1,\"818\":1,\"963\":1}}],[\"某种原因\",{\"1\":{\"677\":1}}],[\"某种\",{\"1\":{\"34\":1,\"829\":1,\"913\":1}}],[\"某个\",{\"1\":{\"25\":2,\"30\":1,\"32\":1,\"34\":1,\"39\":1,\"126\":1,\"222\":1,\"292\":1,\"299\":1,\"366\":1,\"415\":1,\"769\":1,\"811\":1,\"828\":1,\"945\":1}}],[\"某一\",{\"1\":{\"19\":1,\"701\":1,\"745\":1,\"767\":1}}],[\"间接\",{\"1\":{\"451\":1,\"592\":1,\"663\":1,\"664\":1,\"671\":1,\"912\":1}}],[\"间\",{\"1\":{\"25\":1,\"225\":1,\"334\":1,\"370\":1,\"436\":1,\"539\":1,\"574\":1,\"863\":1,\"864\":1}}],[\"间隔\",{\"1\":{\"20\":1,\"337\":1,\"457\":1,\"835\":1,\"837\":2}}],[\"uk\",{\"1\":{\"889\":1}}],[\"uzzal\",{\"1\":{\"841\":1}}],[\"uisng\",{\"1\":{\"709\":1}}],[\"umap\",{\"1\":{\"545\":10}}],[\"upsampling\",{\"1\":{\"309\":1}}],[\"upsampled\",{\"1\":{\"309\":1}}],[\"upsample\",{\"1\":{\"309\":1}}],[\"up\",{\"1\":{\"192\":1,\"402\":1}}],[\"update\",{\"1\":{\"166\":2,\"185\":1,\"191\":1,\"399\":2,\"846\":2}}],[\"u\",{\"0\":{\"196\":1},\"1\":{\"191\":1,\"195\":1,\"196\":1,\"200\":1,\"263\":1,\"268\":1,\"310\":1,\"922\":2}}],[\"usually\",{\"1\":{\"427\":1}}],[\"using\",{\"0\":{\"940\":1},\"1\":{\"361\":1,\"524\":1,\"535\":1,\"538\":1,\"539\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":1,\"545\":1,\"573\":1,\"583\":1,\"595\":1,\"599\":1,\"600\":1,\"601\":1,\"605\":1,\"606\":1,\"612\":2,\"615\":1,\"624\":4,\"666\":1,\"671\":1,\"683\":1,\"690\":1,\"695\":1,\"698\":2,\"713\":1,\"721\":1,\"722\":1,\"724\":1,\"745\":1,\"759\":1,\"769\":1,\"781\":4,\"825\":1,\"826\":1,\"827\":1,\"828\":1,\"830\":2,\"876\":1,\"888\":1,\"940\":1,\"945\":1}}],[\"usr\",{\"0\":{\"175\":1},\"1\":{\"174\":1,\"175\":2}}],[\"useful\",{\"1\":{\"321\":1,\"426\":1,\"427\":1}}],[\"uses\",{\"1\":{\"309\":1,\"344\":1,\"422\":1}}],[\"use\",{\"1\":{\"208\":1}}],[\"used\",{\"1\":{\"116\":1,\"122\":1,\"125\":8,\"126\":11}}],[\"username\",{\"1\":{\"191\":2}}],[\"user\",{\"1\":{\"41\":3}}],[\"users\",{\"1\":{\"19\":1}}],[\"uuid\",{\"1\":{\"172\":1}}],[\"ubuntu\",{\"0\":{\"156\":1,\"158\":1,\"161\":1,\"162\":1,\"169\":1,\"172\":1},\"1\":{\"160\":1,\"182\":2,\"184\":4}}],[\"utils\",{\"1\":{\"845\":2}}],[\"utm\",{\"1\":{\"54\":3}}],[\"utf\",{\"1\":{\"42\":2}}],[\"uri\",{\"1\":{\"43\":2}}],[\"url\",{\"1\":{\"41\":1,\"476\":5}}],[\"urlencoded\",{\"1\":{\"41\":1}}],[\"ulimit\",{\"1\":{\"38\":1}}],[\"unconditional\",{\"0\":{\"949\":1}}],[\"unconditionalscore\",{\"1\":{\"947\":1}}],[\"uncompressing\",{\"1\":{\"309\":1}}],[\"under\",{\"1\":{\"942\":1}}],[\"understanding\",{\"1\":{\"256\":1,\"359\":1,\"959\":1}}],[\"unreasonable\",{\"1\":{\"928\":1}}],[\"unavailable\",{\"1\":{\"476\":1}}],[\"unannotated\",{\"1\":{\"422\":1}}],[\"unlabeled\",{\"1\":{\"426\":1}}],[\"unlock\",{\"1\":{\"24\":1,\"27\":1,\"529\":3,\"530\":2,\"531\":1}}],[\"unpooled\",{\"1\":{\"309\":2}}],[\"unpooling\",{\"0\":{\"309\":1},\"1\":{\"309\":7}}],[\"unet\",{\"0\":{\"930\":1},\"1\":{\"293\":2,\"312\":1,\"901\":5,\"927\":1,\"929\":1,\"930\":2,\"947\":1}}],[\"unsigned\",{\"1\":{\"535\":2,\"633\":5,\"642\":2,\"799\":1,\"804\":1}}],[\"unsqueeze\",{\"1\":{\"344\":4,\"868\":1}}],[\"unstructured\",{\"0\":{\"286\":1}}],[\"unsupervised\",{\"1\":{\"256\":1,\"261\":1,\"266\":2,\"876\":1,\"890\":1}}],[\"union\",{\"1\":{\"848\":1}}],[\"unit\",{\"0\":{\"435\":1}}],[\"units\",{\"1\":{\"361\":3,\"449\":1}}],[\"uniform\",{\"1\":{\"305\":1}}],[\"universal\",{\"1\":{\"201\":1}}],[\"uninstall\",{\"1\":{\"191\":1}}],[\"unix\",{\"1\":{\"28\":3,\"174\":3,\"175\":1}}],[\"unordered\",{\"0\":{\"545\":1,\"546\":1,\"555\":1},\"1\":{\"100\":1,\"103\":1,\"104\":8,\"114\":1,\"123\":1,\"137\":4,\"138\":2,\"139\":2,\"544\":2,\"545\":14,\"546\":6,\"547\":1,\"548\":6,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"554\":1,\"559\":2}}],[\"给予\",{\"1\":{\"891\":1}}],[\"给定\",{\"1\":{\"96\":1,\"138\":1,\"139\":1,\"222\":1,\"223\":1,\"244\":1,\"268\":2,\"304\":1,\"308\":1,\"317\":1,\"323\":1,\"347\":1,\"392\":1,\"394\":1,\"451\":2,\"718\":1,\"859\":2,\"864\":1,\"887\":1,\"889\":1,\"904\":1,\"949\":1,\"952\":1}}],[\"给出\",{\"1\":{\"30\":1,\"41\":1,\"103\":1,\"174\":1,\"308\":1,\"456\":1,\"458\":1,\"471\":1,\"583\":1,\"584\":1,\"594\":2,\"595\":2,\"718\":3,\"720\":1,\"721\":1,\"817\":1,\"913\":1,\"922\":1}}],[\"给\",{\"1\":{\"24\":2,\"39\":2,\"40\":1,\"42\":1,\"46\":1,\"55\":1,\"72\":1,\"82\":1,\"100\":1,\"128\":1,\"137\":1,\"223\":3,\"225\":1,\"259\":1,\"476\":1,\"524\":1,\"530\":1,\"584\":1,\"586\":1,\"590\":1,\"594\":1,\"605\":1,\"609\":3,\"611\":1,\"665\":1,\"668\":3,\"676\":4,\"682\":2,\"684\":1,\"688\":2,\"712\":1,\"713\":2,\"718\":1,\"721\":4,\"724\":1,\"729\":3,\"730\":2,\"732\":1,\"736\":1,\"755\":1,\"758\":1,\"762\":1,\"781\":1,\"801\":1,\"804\":2,\"806\":1,\"808\":1,\"825\":3,\"827\":1,\"828\":1,\"829\":3,\"830\":2,\"864\":1,\"901\":1,\"958\":1}}],[\"获胜者\",{\"1\":{\"759\":1}}],[\"获益\",{\"1\":{\"392\":1}}],[\"获得\",{\"1\":{\"24\":1,\"32\":1,\"34\":1,\"43\":1,\"126\":1,\"170\":1,\"192\":1,\"195\":2,\"201\":1,\"209\":1,\"210\":2,\"217\":1,\"220\":2,\"227\":1,\"229\":1,\"233\":1,\"242\":1,\"245\":1,\"246\":1,\"262\":1,\"263\":1,\"282\":1,\"315\":1,\"318\":1,\"323\":1,\"355\":1,\"624\":1,\"748\":2,\"750\":1,\"953\":1}}],[\"获取\",{\"1\":{\"5\":1,\"8\":1,\"10\":5,\"22\":1,\"35\":1,\"44\":1,\"168\":1,\"200\":1,\"220\":1,\"228\":2,\"254\":1,\"263\":1,\"290\":1,\"317\":1,\"332\":5,\"465\":1,\"476\":1,\"480\":1,\"485\":1,\"502\":1,\"545\":1,\"841\":1,\"887\":1,\"905\":1}}],[\"确立\",{\"1\":{\"590\":1}}],[\"确认\",{\"1\":{\"191\":1}}],[\"确定性\",{\"1\":{\"246\":1,\"897\":1,\"938\":1,\"951\":1}}],[\"确定\",{\"1\":{\"70\":6,\"71\":1,\"72\":3,\"85\":1,\"86\":9,\"88\":1,\"96\":1,\"97\":1,\"99\":1,\"227\":1,\"232\":1,\"300\":1,\"307\":2,\"318\":1,\"332\":1,\"379\":1,\"586\":1,\"587\":2,\"589\":1,\"600\":1,\"606\":1,\"612\":1,\"668\":2,\"682\":1,\"722\":1,\"770\":3,\"817\":1,\"824\":1,\"893\":3}}],[\"确保\",{\"1\":{\"24\":1,\"26\":1,\"392\":1,\"395\":2,\"776\":1,\"928\":1,\"935\":1}}],[\"确实\",{\"1\":{\"13\":1,\"357\":2}}],[\"关心\",{\"1\":{\"860\":1}}],[\"关节\",{\"1\":{\"398\":1}}],[\"关联性\",{\"1\":{\"887\":1}}],[\"关联\",{\"0\":{\"770\":2},\"1\":{\"308\":1,\"322\":1,\"544\":1,\"545\":2,\"769\":1,\"770\":9,\"776\":1,\"782\":2,\"793\":2,\"794\":4,\"959\":2}}],[\"关联度\",{\"1\":{\"228\":1}}],[\"关注点\",{\"1\":{\"276\":1}}],[\"关注\",{\"1\":{\"228\":1,\"229\":2,\"263\":1,\"392\":1,\"492\":1}}],[\"关\",{\"1\":{\"222\":1}}],[\"关于\",{\"0\":{\"542\":1},\"1\":{\"122\":1,\"222\":1,\"261\":1,\"901\":1}}],[\"关系数据库\",{\"1\":{\"467\":1}}],[\"关系不大\",{\"1\":{\"312\":1}}],[\"关系\",{\"0\":{\"809\":2},\"1\":{\"103\":1,\"192\":1,\"217\":4,\"220\":4,\"222\":3,\"223\":3,\"225\":1,\"227\":1,\"228\":2,\"246\":1,\"276\":2,\"308\":2,\"334\":1,\"370\":3,\"386\":1,\"436\":1,\"607\":2,\"671\":1,\"695\":2,\"714\":1,\"748\":1,\"760\":1,\"809\":7,\"810\":2,\"811\":1,\"813\":1,\"817\":2,\"828\":1,\"863\":1,\"864\":1,\"867\":1,\"917\":1,\"926\":1,\"959\":2}}],[\"关键字\",{\"1\":{\"458\":1,\"460\":3,\"467\":1,\"469\":5,\"598\":2,\"611\":3,\"615\":1,\"637\":1,\"707\":1,\"738\":2,\"744\":1,\"749\":1,\"769\":1,\"775\":1}}],[\"关键步骤\",{\"1\":{\"199\":1}}],[\"关键\",{\"1\":{\"24\":3,\"26\":1,\"193\":1,\"217\":1,\"220\":1,\"260\":1,\"268\":3,\"312\":1,\"386\":1,\"436\":1,\"955\":1}}],[\"关闭\",{\"0\":{\"792\":1,\"794\":1,\"841\":1},\"1\":{\"10\":1,\"19\":2,\"781\":4,\"782\":1,\"794\":3}}],[\"量化\",{\"1\":{\"211\":2,\"283\":1}}],[\"量\",{\"0\":{\"24\":1},\"1\":{\"24\":1,\"234\":1,\"282\":1,\"372\":1,\"527\":3,\"656\":1,\"810\":1,\"904\":1,\"907\":1,\"922\":1}}],[\"销毁\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"27\":2}}],[\"171\",{\"1\":{\"254\":1}}],[\"1703.06211\",{\"1\":{\"361\":1}}],[\"170\",{\"1\":{\"254\":2,\"429\":1}}],[\"177\",{\"1\":{\"254\":1}}],[\"176\",{\"1\":{\"254\":1}}],[\"17\",{\"1\":{\"217\":1,\"422\":1}}],[\"17.\",{\"0\":{\"89\":1,\"114\":1}}],[\"19996\",{\"1\":{\"528\":1}}],[\"19997\",{\"1\":{\"528\":1}}],[\"199\",{\"1\":{\"246\":1}}],[\"199.\",{\"1\":{\"72\":1}}],[\"198\",{\"1\":{\"246\":1}}],[\"197\",{\"1\":{\"246\":1}}],[\"196\",{\"1\":{\"246\":1,\"429\":1}}],[\"195\",{\"1\":{\"246\":1}}],[\"194\",{\"1\":{\"245\":1}}],[\"193\",{\"1\":{\"245\":1}}],[\"192\",{\"1\":{\"245\":1}}],[\"1901.00596.\",{\"1\":{\"359\":1}}],[\"190\",{\"1\":{\"244\":1,\"247\":1}}],[\"191\",{\"1\":{\"244\":1,\"247\":1}}],[\"1912.12033\",{\"1\":{\"212\":1}}],[\"1911.12709\",{\"1\":{\"52\":1}}],[\"19\",{\"1\":{\"198\":1,\"217\":1,\"745\":1}}],[\"19.\",{\"1\":{\"103\":1}}],[\"1.2\",{\"0\":{\"518\":1},\"1\":{\"595\":1}}],[\"1.0\",{\"1\":{\"357\":2}}],[\"1.76\",{\"1\":{\"355\":1}}],[\"1.3\",{\"0\":{\"519\":1},\"1\":{\"340\":1,\"600\":1}}],[\"1.\",{\"0\":{\"69\":1,\"93\":1,\"111\":1,\"177\":1,\"203\":1,\"213\":1,\"329\":1,\"456\":1,\"467\":1,\"471\":1,\"516\":1,\"527\":1,\"748\":1,\"854\":1,\"867\":1},\"1\":{\"104\":1,\"191\":2,\"288\":1,\"294\":1,\"304\":1,\"380\":1,\"730\":1,\"838\":1}}],[\"1.13\",{\"1\":{\"355\":1}}],[\"1.1\",{\"0\":{\"517\":1},\"1\":{\"41\":1,\"42\":3,\"370\":1,\"480\":1}}],[\"189\",{\"1\":{\"244\":1,\"246\":1}}],[\"188\",{\"1\":{\"244\":1,\"246\":1}}],[\"187\",{\"1\":{\"244\":1,\"246\":1}}],[\"186\",{\"1\":{\"244\":1,\"246\":1}}],[\"185\",{\"1\":{\"244\":1,\"245\":1}}],[\"184\",{\"1\":{\"244\":1,\"245\":1}}],[\"183\",{\"1\":{\"244\":1,\"245\":1}}],[\"182\",{\"1\":{\"244\":1,\"245\":1,\"254\":1}}],[\"181\",{\"1\":{\"244\":1,\"245\":1}}],[\"18.\",{\"0\":{\"92\":1},\"1\":{\"104\":1}}],[\"18\",{\"1\":{\"53\":1,\"217\":1,\"419\":1,\"524\":1,\"745\":1,\"872\":1}}],[\"1805.04398\",{\"1\":{\"52\":1}}],[\"164\",{\"1\":{\"422\":1}}],[\"167\",{\"1\":{\"254\":1}}],[\"166\",{\"1\":{\"244\":1,\"246\":1}}],[\"16.\",{\"0\":{\"88\":1}}],[\"16\",{\"1\":{\"44\":1,\"355\":1,\"380\":2,\"633\":1,\"642\":1,\"663\":1,\"811\":2,\"882\":3,\"910\":2,\"928\":1,\"961\":1}}],[\"150\",{\"1\":{\"425\":1}}],[\"150.\",{\"1\":{\"106\":1}}],[\"151.\",{\"1\":{\"105\":1}}],[\"15.\",{\"0\":{\"87\":1},\"1\":{\"104\":1}}],[\"15\",{\"1\":{\"44\":1,\"72\":2,\"249\":1,\"428\":1,\"522\":1,\"615\":2,\"642\":1,\"670\":3,\"721\":1,\"724\":1,\"806\":2,\"807\":1,\"811\":1}}],[\"148\",{\"1\":{\"696\":1}}],[\"1449\",{\"1\":{\"426\":1}}],[\"144.\",{\"1\":{\"70\":1}}],[\"146\",{\"1\":{\"254\":1}}],[\"145\",{\"1\":{\"254\":1}}],[\"145.\",{\"1\":{\"70\":1}}],[\"142.\",{\"1\":{\"103\":1}}],[\"14.\",{\"0\":{\"86\":1}}],[\"14\",{\"1\":{\"44\":1,\"807\":1,\"811\":1}}],[\"13728\",{\"1\":{\"852\":2}}],[\"13728.\",{\"1\":{\"852\":1}}],[\"13754\",{\"1\":{\"852\":1}}],[\"136\",{\"1\":{\"342\":1}}],[\"131041955\",{\"1\":{\"845\":1}}],[\"131000622\",{\"1\":{\"841\":1}}],[\"131\",{\"1\":{\"234\":1}}],[\"131.\",{\"0\":{\"118\":1}}],[\"134.\",{\"0\":{\"154\":1}}],[\"13.\",{\"0\":{\"85\":1}}],[\"13\",{\"1\":{\"44\":1,\"53\":1,\"429\":1,\"524\":1,\"606\":1,\"718\":1,\"721\":1,\"811\":1,\"825\":1}}],[\"1297\",{\"1\":{\"852\":1}}],[\"127\",{\"1\":{\"633\":1}}],[\"128\",{\"1\":{\"411\":4,\"633\":1,\"858\":1,\"910\":2}}],[\"1200\",{\"1\":{\"344\":1}}],[\"123445\",{\"1\":{\"600\":1}}],[\"123\",{\"1\":{\"342\":1,\"422\":1,\"642\":4,\"648\":1,\"668\":1,\"927\":1,\"929\":1}}],[\"126\",{\"1\":{\"234\":1}}],[\"1222\",{\"1\":{\"769\":1}}],[\"122294045\",{\"1\":{\"174\":1}}],[\"122\",{\"1\":{\"647\":1,\"781\":2}}],[\"122.\",{\"0\":{\"148\":1}}],[\"12.2\",{\"1\":{\"769\":1}}],[\"12.5\",{\"1\":{\"595\":3}}],[\"12.\",{\"0\":{\"84\":1}}],[\"12\",{\"1\":{\"44\":1,\"249\":1,\"522\":1,\"528\":1,\"595\":1,\"601\":1,\"605\":1,\"606\":1,\"670\":1,\"671\":1,\"672\":1,\"714\":3,\"718\":1,\"730\":1,\"811\":1,\"825\":1,\"869\":2,\"899\":1,\"929\":1}}],[\"101\",{\"1\":{\"429\":1}}],[\"1005\",{\"1\":{\"745\":1}}],[\"1005.\",{\"0\":{\"143\":1}}],[\"1004\",{\"1\":{\"730\":1}}],[\"1003\",{\"1\":{\"730\":1}}],[\"1002\",{\"1\":{\"730\":1,\"745\":1}}],[\"10020\",{\"1\":{\"722\":1}}],[\"10010\",{\"1\":{\"722\":1,\"758\":1}}],[\"1001\",{\"1\":{\"713\":1,\"745\":1,\"758\":1,\"769\":1}}],[\"1001.2101.3001.6650.4\",{\"1\":{\"54\":1}}],[\"100076874\",{\"1\":{\"811\":1}}],[\"100000\",{\"1\":{\"785\":1}}],[\"10000\",{\"1\":{\"528\":3,\"529\":2,\"530\":2,\"531\":3,\"811\":1}}],[\"1000\",{\"1\":{\"451\":1}}],[\"100\",{\"1\":{\"344\":1,\"355\":1,\"357\":1,\"396\":1,\"427\":1,\"638\":3,\"712\":2,\"922\":1,\"957\":1}}],[\"105205326\",{\"1\":{\"304\":1}}],[\"105\",{\"1\":{\"137\":1}}],[\"105.\",{\"1\":{\"86\":1}}],[\"104\",{\"1\":{\"138\":1,\"139\":1}}],[\"1047.\",{\"1\":{\"106\":1}}],[\"104.\",{\"0\":{\"73\":1}}],[\"108.\",{\"1\":{\"96\":1}}],[\"106.\",{\"1\":{\"86\":1}}],[\"10.92\",{\"1\":{\"852\":1}}],[\"10.\",{\"0\":{\"82\":1},\"1\":{\"255\":1}}],[\"10.0\",{\"1\":{\"41\":1,\"357\":1}}],[\"107.\",{\"1\":{\"72\":1}}],[\"102\",{\"1\":{\"254\":1}}],[\"102.\",{\"1\":{\"72\":1}}],[\"10242\",{\"1\":{\"935\":1}}],[\"1024.5\",{\"1\":{\"666\":1}}],[\"1024\",{\"1\":{\"38\":1,\"863\":2,\"922\":5,\"961\":1}}],[\"10\",{\"1\":{\"41\":1,\"42\":1,\"44\":1,\"104\":3,\"114\":1,\"116\":1,\"242\":1,\"244\":1,\"249\":1,\"325\":1,\"386\":1,\"427\":1,\"428\":1,\"451\":1,\"522\":1,\"524\":1,\"528\":3,\"542\":1,\"548\":2,\"554\":2,\"573\":4,\"599\":1,\"605\":1,\"606\":1,\"638\":1,\"645\":1,\"654\":1,\"658\":1,\"671\":1,\"673\":2,\"681\":1,\"682\":1,\"685\":2,\"688\":1,\"690\":2,\"693\":1,\"712\":3,\"713\":1,\"721\":10,\"722\":1,\"724\":3,\"744\":1,\"759\":1,\"781\":9,\"811\":2,\"867\":1,\"928\":1}}],[\"1\",{\"0\":{\"166\":1,\"637\":1,\"844\":1},\"1\":{\"23\":1,\"28\":1,\"30\":1,\"41\":4,\"42\":1,\"43\":1,\"44\":1,\"51\":1,\"54\":1,\"56\":1,\"69\":2,\"72\":6,\"73\":2,\"74\":1,\"75\":2,\"80\":6,\"81\":10,\"82\":6,\"86\":3,\"87\":4,\"90\":7,\"96\":3,\"98\":3,\"99\":2,\"100\":3,\"102\":2,\"103\":4,\"104\":14,\"105\":7,\"112\":4,\"113\":3,\"114\":2,\"115\":2,\"116\":7,\"118\":4,\"119\":4,\"121\":14,\"122\":2,\"123\":1,\"126\":10,\"128\":5,\"137\":2,\"138\":4,\"139\":6,\"143\":4,\"146\":4,\"148\":2,\"152\":2,\"153\":3,\"166\":1,\"170\":1,\"172\":1,\"175\":1,\"189\":1,\"199\":1,\"201\":1,\"203\":2,\"209\":1,\"210\":4,\"223\":1,\"254\":2,\"257\":3,\"262\":1,\"282\":2,\"288\":3,\"290\":6,\"293\":1,\"294\":4,\"298\":1,\"303\":2,\"304\":7,\"305\":3,\"307\":1,\"308\":1,\"332\":6,\"334\":1,\"338\":2,\"344\":13,\"347\":1,\"348\":1,\"349\":1,\"353\":1,\"354\":3,\"355\":3,\"356\":2,\"357\":4,\"370\":4,\"371\":7,\"372\":4,\"383\":1,\"391\":1,\"395\":1,\"399\":1,\"411\":4,\"416\":1,\"419\":3,\"446\":5,\"449\":1,\"451\":5,\"461\":1,\"469\":2,\"476\":1,\"528\":6,\"529\":2,\"530\":8,\"531\":6,\"532\":2,\"534\":2,\"538\":2,\"539\":5,\"540\":4,\"541\":3,\"542\":3,\"543\":5,\"544\":2,\"545\":2,\"548\":1,\"554\":1,\"558\":1,\"559\":2,\"561\":3,\"568\":1,\"570\":1,\"571\":1,\"573\":5,\"574\":2,\"583\":2,\"585\":1,\"590\":3,\"600\":1,\"612\":10,\"613\":1,\"617\":1,\"623\":1,\"624\":1,\"633\":6,\"642\":2,\"645\":2,\"654\":4,\"666\":4,\"668\":1,\"670\":1,\"676\":2,\"681\":1,\"682\":1,\"683\":1,\"684\":1,\"688\":2,\"690\":2,\"693\":1,\"695\":1,\"698\":2,\"704\":1,\"709\":1,\"713\":1,\"714\":2,\"718\":3,\"721\":2,\"722\":1,\"724\":3,\"725\":3,\"729\":1,\"732\":1,\"735\":1,\"739\":1,\"741\":1,\"749\":1,\"755\":4,\"756\":1,\"757\":3,\"762\":1,\"769\":4,\"770\":1,\"778\":1,\"779\":1,\"781\":9,\"782\":2,\"793\":2,\"800\":4,\"801\":3,\"804\":1,\"806\":1,\"807\":2,\"808\":4,\"810\":5,\"811\":3,\"817\":2,\"818\":4,\"819\":2,\"825\":1,\"826\":6,\"827\":1,\"828\":2,\"829\":1,\"830\":5,\"834\":1,\"835\":2,\"837\":1,\"838\":1,\"840\":3,\"845\":1,\"848\":3,\"849\":2,\"854\":1,\"859\":3,\"862\":1,\"867\":15,\"868\":3,\"869\":85,\"883\":1,\"896\":2,\"897\":2,\"899\":1,\"900\":21,\"901\":2,\"910\":1,\"913\":2,\"917\":3,\"918\":1,\"923\":1,\"927\":1,\"928\":1,\"935\":1,\"940\":1,\"947\":1,\"957\":1,\"963\":1}}],[\"117225213\",{\"1\":{\"875\":1}}],[\"117.\",{\"1\":{\"72\":1}}],[\"115\",{\"1\":{\"618\":1,\"838\":1}}],[\"115285213\",{\"1\":{\"54\":3}}],[\"118\",{\"1\":{\"422\":1}}],[\"1123.\",{\"0\":{\"90\":1}}],[\"113.\",{\"1\":{\"85\":2}}],[\"11.11\",{\"1\":{\"535\":1}}],[\"11.\",{\"0\":{\"83\":1}}],[\"111.\",{\"0\":{\"75\":1}}],[\"116.\",{\"1\":{\"72\":1}}],[\"114885638.\",{\"1\":{\"54\":2}}],[\"11\",{\"0\":{\"514\":1},\"1\":{\"19\":1,\"44\":1,\"244\":1,\"249\":1,\"250\":1,\"527\":1,\"528\":1,\"532\":3,\"539\":1,\"676\":2,\"721\":7,\"729\":2,\"811\":1,\"825\":1}}],[\"常数\",{\"1\":{\"451\":1,\"642\":2,\"676\":2,\"903\":2,\"904\":1,\"958\":1}}],[\"常量\",{\"0\":{\"517\":1,\"519\":1,\"640\":1,\"641\":1,\"646\":1,\"647\":1,\"649\":1,\"650\":1,\"670\":1,\"673\":1},\"1\":{\"396\":1,\"504\":1,\"575\":2,\"586\":1,\"623\":1,\"640\":7,\"642\":1,\"647\":1,\"648\":1,\"650\":2,\"662\":2,\"669\":2,\"670\":1,\"671\":5,\"672\":1,\"675\":2,\"676\":5,\"684\":3,\"688\":4,\"755\":8,\"793\":1,\"810\":3,\"818\":1}}],[\"常规\",{\"1\":{\"246\":1,\"371\":1,\"372\":4,\"941\":1,\"947\":1}}],[\"常\",{\"0\":{\"518\":1,\"519\":1,\"520\":1,\"521\":1,\"522\":1,\"523\":1,\"524\":1,\"660\":1,\"671\":1,\"672\":1,\"673\":1},\"1\":{\"63\":1,\"522\":1,\"523\":1,\"525\":4,\"537\":1,\"661\":2,\"662\":1,\"671\":5,\"672\":3,\"675\":2,\"816\":1}}],[\"常用软件\",{\"0\":{\"185\":1}}],[\"常用\",{\"0\":{\"555\":1,\"602\":1,\"847\":1},\"1\":{\"23\":1,\"214\":4,\"229\":1,\"254\":1,\"306\":1,\"319\":1,\"373\":1,\"535\":3,\"563\":1,\"602\":3,\"642\":1,\"650\":1,\"671\":1,\"710\":1,\"785\":1,\"807\":1,\"839\":1,\"957\":1}}],[\"常见\",{\"0\":{\"473\":1,\"476\":1},\"1\":{\"19\":1,\"106\":1,\"288\":1,\"473\":1,\"476\":2,\"489\":1,\"492\":1,\"598\":1,\"855\":2,\"875\":1}}],[\"任意\",{\"1\":{\"41\":1,\"82\":1,\"93\":3,\"222\":1,\"277\":1,\"292\":1,\"391\":1,\"392\":1,\"529\":2,\"537\":1,\"574\":3,\"611\":1,\"666\":1,\"668\":1,\"738\":1,\"781\":1,\"858\":1,\"868\":1,\"902\":1,\"903\":1,\"913\":1}}],[\"任一\",{\"1\":{\"26\":1,\"39\":1,\"616\":1}}],[\"任何\",{\"1\":{\"23\":1,\"43\":1,\"113\":1,\"168\":2,\"247\":1,\"259\":1,\"303\":1,\"437\":1,\"525\":1,\"604\":1,\"619\":1,\"623\":1,\"657\":1,\"667\":2,\"668\":1,\"676\":4,\"703\":1,\"709\":1,\"717\":3,\"722\":3,\"744\":1,\"745\":1,\"806\":1,\"810\":1,\"816\":1,\"863\":1,\"929\":1,\"949\":2,\"955\":1}}],[\"任务模型\",{\"1\":{\"192\":1}}],[\"任务\",{\"1\":{\"20\":1,\"29\":1,\"33\":1,\"34\":2,\"46\":4,\"55\":1,\"180\":1,\"192\":3,\"193\":1,\"195\":1,\"225\":2,\"242\":1,\"254\":1,\"257\":3,\"259\":2,\"260\":1,\"261\":1,\"262\":2,\"264\":1,\"265\":1,\"273\":1,\"288\":1,\"301\":1,\"306\":2,\"307\":2,\"308\":1,\"310\":2,\"313\":1,\"314\":1,\"315\":2,\"316\":3,\"320\":5,\"325\":4,\"355\":1,\"357\":2,\"358\":1,\"370\":3,\"379\":5,\"380\":1,\"384\":1,\"392\":1,\"398\":1,\"701\":1,\"836\":1,\"859\":2,\"875\":3,\"901\":1,\"935\":3,\"940\":2,\"952\":1}}],[\"唤醒\",{\"1\":{\"23\":2,\"24\":1,\"25\":2,\"32\":1,\"39\":1}}],[\"起到\",{\"1\":{\"887\":1,\"906\":1}}],[\"起见\",{\"1\":{\"242\":1,\"249\":1}}],[\"起跳点\",{\"1\":{\"152\":2}}],[\"起始\",{\"1\":{\"138\":6,\"664\":1,\"714\":1,\"732\":2,\"733\":1,\"736\":2,\"760\":1,\"825\":3,\"826\":1,\"827\":1,\"830\":1}}],[\"起点\",{\"1\":{\"126\":3,\"153\":1}}],[\"起\",{\"1\":{\"23\":2,\"587\":1}}],[\"起来\",{\"1\":{\"13\":1,\"27\":1,\"104\":1,\"210\":1,\"265\":1,\"293\":1,\"314\":1,\"357\":1,\"398\":1,\"647\":1,\"649\":1,\"807\":1,\"816\":1,\"858\":1}}],[\"挂载\",{\"0\":{\"162\":1,\"172\":1},\"1\":{\"170\":1,\"172\":5}}],[\"挂\",{\"1\":{\"23\":2}}],[\"大时\",{\"1\":{\"910\":1}}],[\"大容量\",{\"1\":{\"787\":1,\"788\":1}}],[\"大写字母\",{\"1\":{\"781\":4}}],[\"大写\",{\"1\":{\"781\":1}}],[\"大括号\",{\"1\":{\"625\":1,\"717\":1}}],[\"大到\",{\"1\":{\"576\":1}}],[\"大全\",{\"1\":{\"535\":1}}],[\"大错特错\",{\"1\":{\"528\":1}}],[\"大门\",{\"1\":{\"527\":1}}],[\"大越\",{\"1\":{\"451\":1}}],[\"大脑\",{\"1\":{\"436\":1}}],[\"大约\",{\"1\":{\"406\":1,\"423\":1}}],[\"大名鼎鼎\",{\"1\":{\"402\":1}}],[\"大核\",{\"1\":{\"370\":1,\"372\":1}}],[\"大打折扣\",{\"1\":{\"356\":1}}],[\"大幅\",{\"1\":{\"355\":1,\"372\":1}}],[\"大大的\",{\"1\":{\"379\":1}}],[\"大大小小\",{\"1\":{\"379\":1}}],[\"大大\",{\"1\":{\"355\":1}}],[\"大大减少\",{\"1\":{\"223\":1}}],[\"大远\",{\"1\":{\"290\":1}}],[\"大多\",{\"1\":{\"254\":1,\"583\":1}}],[\"大多数\",{\"1\":{\"199\":1,\"202\":1,\"229\":1,\"254\":1,\"500\":1,\"611\":1,\"714\":1,\"916\":1}}],[\"大型\",{\"1\":{\"246\":1,\"257\":1}}],[\"大型软件\",{\"1\":{\"184\":1}}],[\"大部分\",{\"1\":{\"234\":1,\"750\":1,\"815\":2}}],[\"大规模\",{\"1\":{\"229\":1,\"245\":1,\"246\":1,\"254\":1,\"257\":1,\"325\":1,\"370\":2,\"371\":1,\"859\":1,\"860\":1,\"929\":1}}],[\"大量\",{\"1\":{\"199\":1,\"234\":1,\"423\":1,\"492\":1,\"875\":1}}],[\"大概\",{\"1\":{\"174\":1}}],[\"大家\",{\"1\":{\"126\":1,\"379\":3,\"875\":1}}],[\"大\",{\"1\":{\"38\":1,\"55\":1,\"62\":1,\"64\":1,\"65\":1,\"107\":1,\"191\":1,\"193\":1,\"254\":1,\"293\":1,\"294\":1,\"312\":1,\"370\":8,\"372\":2,\"379\":2,\"406\":1,\"710\":1,\"762\":1,\"799\":1,\"824\":1,\"829\":2,\"843\":1,\"858\":1,\"859\":1,\"922\":2,\"928\":2,\"935\":1}}],[\"大小写\",{\"1\":{\"457\":1}}],[\"大小\",{\"0\":{\"633\":1},\"1\":{\"30\":1,\"41\":1,\"69\":1,\"104\":1,\"110\":1,\"223\":1,\"225\":1,\"228\":2,\"246\":2,\"282\":2,\"304\":2,\"308\":1,\"379\":1,\"380\":1,\"404\":1,\"419\":3,\"451\":1,\"537\":1,\"542\":2,\"571\":1,\"573\":2,\"574\":4,\"647\":1,\"663\":1,\"665\":1,\"689\":1,\"690\":2,\"691\":1,\"708\":1,\"712\":1,\"713\":1,\"846\":1,\"849\":3,\"860\":1,\"863\":2,\"883\":1,\"922\":1,\"927\":3,\"928\":4,\"929\":3,\"955\":1}}],[\"大于\",{\"1\":{\"23\":2,\"91\":1,\"93\":1,\"97\":1,\"107\":1,\"112\":1,\"137\":1,\"682\":1,\"685\":1,\"689\":1,\"707\":1,\"809\":1,\"810\":2}}],[\"大致\",{\"1\":{\"4\":1,\"11\":1,\"248\":1,\"813\":1,\"961\":1}}],[\"vp\",{\"0\":{\"900\":1},\"1\":{\"900\":1}}],[\"vqgan\",{\"1\":{\"864\":2,\"865\":1,\"935\":1}}],[\"vq\",{\"1\":{\"862\":1,\"928\":5}}],[\"vqvae\",{\"1\":{\"862\":1,\"864\":1}}],[\"vmax\",{\"1\":{\"837\":2}}],[\"vmin\",{\"1\":{\"837\":2}}],[\"vs\",{\"1\":{\"828\":1,\"829\":1}}],[\"vsurf\",{\"1\":{\"282\":4}}],[\"vft\",{\"1\":{\"769\":1}}],[\"vv\",{\"1\":{\"536\":2}}],[\"v3\",{\"0\":{\"370\":1},\"1\":{\"451\":2}}],[\"v2\",{\"0\":{\"369\":1,\"426\":1},\"1\":{\"369\":1,\"379\":1,\"426\":2,\"938\":1,\"951\":1}}],[\"v100\",{\"1\":{\"864\":1,\"922\":1}}],[\"v1\",{\"1\":{\"355\":1,\"369\":1,\"929\":2}}],[\"varepsilon\",{\"1\":{\"963\":1}}],[\"variation\",{\"0\":{\"962\":1},\"1\":{\"962\":1}}],[\"variance\",{\"1\":{\"899\":1,\"900\":1}}],[\"variablefunctions\",{\"1\":{\"848\":1}}],[\"variable\",{\"0\":{\"611\":1,\"612\":1,\"620\":1},\"1\":{\"621\":1,\"840\":3,\"952\":1}}],[\"various\",{\"1\":{\"427\":1}}],[\"variety\",{\"1\":{\"426\":1}}],[\"vae\",{\"1\":{\"862\":1,\"912\":1,\"928\":1,\"957\":1}}],[\"vanilla\",{\"1\":{\"321\":1}}],[\"valve\",{\"1\":{\"806\":1}}],[\"validation\",{\"1\":{\"422\":3,\"428\":1,\"429\":1}}],[\"valid\",{\"1\":{\"119\":2,\"338\":1}}],[\"values\",{\"1\":{\"195\":1}}],[\"value\",{\"1\":{\"86\":3,\"107\":5,\"195\":1,\"544\":1,\"545\":5,\"559\":1,\"930\":1}}],[\"val\",{\"1\":{\"49\":1,\"69\":2,\"70\":5,\"71\":3,\"72\":18,\"77\":2,\"78\":2,\"82\":9,\"83\":2,\"84\":1,\"85\":12,\"88\":2,\"91\":8,\"94\":15,\"95\":17,\"97\":7,\"98\":3,\"99\":5,\"100\":9,\"103\":14,\"827\":1}}],[\"vote\",{\"1\":{\"759\":3}}],[\"volum\",{\"1\":{\"721\":1,\"745\":2}}],[\"volume\",{\"0\":{\"282\":1,\"289\":1,\"292\":1},\"1\":{\"293\":2,\"595\":4,\"718\":4,\"721\":1,\"724\":6,\"736\":1,\"745\":1}}],[\"voxel\",{\"1\":{\"263\":2,\"265\":1}}],[\"voxnet\",{\"1\":{\"218\":1}}],[\"void\",{\"0\":{\"668\":1},\"1\":{\"70\":1,\"72\":3,\"82\":1,\"83\":1,\"85\":1,\"99\":1,\"100\":3,\"103\":4,\"105\":1,\"107\":2,\"110\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"118\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"125\":1,\"126\":1,\"128\":1,\"524\":1,\"525\":1,\"528\":1,\"529\":1,\"530\":2,\"531\":2,\"539\":2,\"540\":1,\"542\":1,\"543\":3,\"583\":9,\"584\":1,\"585\":2,\"595\":2,\"605\":4,\"606\":3,\"666\":2,\"668\":9,\"671\":2,\"675\":3,\"676\":1,\"690\":2,\"704\":1,\"706\":2,\"707\":2,\"717\":2,\"722\":1,\"732\":2,\"735\":4,\"745\":2,\"749\":2,\"762\":6,\"769\":5,\"781\":3,\"826\":1,\"827\":1,\"830\":6}}],[\"vnc\",{\"1\":{\"188\":1}}],[\"ve\",{\"0\":{\"899\":1},\"1\":{\"900\":1}}],[\"vend\",{\"1\":{\"460\":1}}],[\"venue\",{\"1\":{\"427\":1}}],[\"version\",{\"1\":{\"422\":1}}],[\"very\",{\"1\":{\"261\":1}}],[\"vetcor\",{\"1\":{\"537\":1,\"538\":1}}],[\"vet\",{\"1\":{\"174\":1}}],[\"vec\",{\"1\":{\"70\":4,\"72\":4,\"100\":8,\"105\":5,\"534\":5}}],[\"vectors\",{\"1\":{\"202\":1}}],[\"vector\",{\"0\":{\"536\":1,\"538\":1,\"539\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":1},\"1\":{\"70\":3,\"71\":6,\"72\":43,\"82\":7,\"85\":5,\"86\":9,\"87\":7,\"96\":2,\"99\":2,\"100\":5,\"102\":6,\"104\":22,\"105\":5,\"106\":1,\"107\":3,\"112\":5,\"113\":5,\"114\":2,\"115\":7,\"116\":7,\"118\":5,\"119\":3,\"121\":7,\"122\":7,\"123\":7,\"125\":9,\"126\":9,\"128\":7,\"138\":2,\"142\":2,\"143\":1,\"146\":1,\"148\":1,\"152\":2,\"153\":1,\"359\":1,\"500\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"534\":2,\"536\":8,\"537\":7,\"538\":15,\"539\":7,\"540\":4,\"541\":6,\"542\":8,\"543\":4,\"563\":4,\"577\":4,\"928\":1}}],[\"virtual\",{\"1\":{\"769\":8}}],[\"videos\",{\"1\":{\"427\":1}}],[\"video\",{\"1\":{\"426\":2,\"427\":1}}],[\"vig\",{\"1\":{\"398\":3,\"399\":1}}],[\"vits\",{\"0\":{\"388\":1,\"389\":1},\"1\":{\"391\":1}}],[\"vit\",{\"1\":{\"370\":1,\"373\":2,\"379\":2,\"388\":3,\"390\":3,\"891\":1,\"892\":1,\"893\":2,\"929\":3}}],[\"visipedia\",{\"1\":{\"429\":1}}],[\"vision\",{\"0\":{\"385\":1,\"397\":1},\"1\":{\"360\":1,\"379\":2,\"380\":2,\"385\":1,\"392\":1,\"397\":1,\"427\":2,\"859\":1}}],[\"visual\",{\"1\":{\"427\":1,\"856\":1}}],[\"visualization\",{\"0\":{\"368\":1}}],[\"vison\",{\"1\":{\"377\":1}}],[\"vi\",{\"1\":{\"282\":16,\"283\":1,\"290\":1,\"935\":1}}],[\"view\",{\"0\":{\"286\":1},\"1\":{\"232\":1,\"261\":1,\"262\":1}}],[\"vim\",{\"1\":{\"172\":1,\"174\":1,\"175\":1,\"185\":1,\"191\":1}}],[\"via\",{\"0\":{\"51\":1,\"871\":1,\"901\":1},\"1\":{\"195\":1,\"367\":1,\"392\":1,\"453\":1,\"871\":2,\"894\":1,\"910\":1,\"956\":1}}],[\"v\",{\"1\":{\"23\":3,\"103\":4,\"171\":1,\"184\":2,\"209\":1,\"246\":1,\"280\":2,\"281\":4,\"282\":2,\"284\":4,\"589\":1,\"846\":6,\"852\":1,\"935\":1}}],[\"自洽\",{\"1\":{\"940\":2}}],[\"自加\",{\"1\":{\"811\":1}}],[\"自减\",{\"0\":{\"800\":1},\"1\":{\"811\":1,\"813\":2}}],[\"自定\",{\"1\":{\"741\":1}}],[\"自定义\",{\"0\":{\"191\":1,\"754\":1,\"853\":1,\"854\":1},\"1\":{\"504\":1,\"576\":1,\"584\":1,\"589\":1,\"726\":1,\"775\":1,\"787\":1,\"839\":1,\"854\":1,\"855\":2,\"860\":1}}],[\"自增\",{\"0\":{\"800\":1},\"1\":{\"528\":5,\"813\":2}}],[\"自信\",{\"1\":{\"355\":1}}],[\"自由\",{\"1\":{\"246\":1}}],[\"自身\",{\"1\":{\"220\":1,\"395\":1,\"476\":1,\"485\":2}}],[\"自上而下\",{\"1\":{\"199\":1,\"200\":1}}],[\"自下而上\",{\"1\":{\"199\":1,\"200\":1,\"227\":1,\"402\":1}}],[\"自带\",{\"1\":{\"191\":1,\"684\":1}}],[\"自启\",{\"1\":{\"170\":1}}],[\"自己\",{\"1\":{\"70\":1,\"112\":1,\"115\":2,\"121\":2,\"122\":1,\"165\":1,\"172\":1,\"191\":1,\"356\":1,\"534\":1,\"707\":2,\"720\":1,\"750\":3,\"755\":1,\"775\":1,\"789\":2,\"854\":2}}],[\"自\",{\"1\":{\"61\":1,\"63\":1,\"89\":2,\"193\":2,\"194\":2,\"201\":1,\"211\":1,\"225\":2,\"227\":1,\"228\":3,\"242\":1,\"257\":1,\"262\":1,\"272\":2,\"273\":2,\"282\":1,\"314\":3,\"316\":2,\"340\":1,\"370\":4,\"371\":1,\"372\":1,\"379\":3,\"380\":1,\"384\":1,\"528\":1,\"862\":2}}],[\"自行车\",{\"1\":{\"242\":1,\"527\":3}}],[\"自行\",{\"1\":{\"30\":1,\"530\":1,\"546\":1}}],[\"自然语言\",{\"1\":{\"41\":1,\"315\":1,\"863\":3}}],[\"自然数\",{\"1\":{\"23\":1}}],[\"自然\",{\"1\":{\"23\":1,\"246\":2,\"254\":1,\"261\":1,\"294\":1,\"348\":1,\"398\":1,\"423\":1,\"436\":1,\"910\":1,\"941\":1,\"962\":1}}],[\"自动编码\",{\"1\":{\"935\":1,\"953\":3}}],[\"自动\",{\"0\":{\"61\":1,\"611\":1},\"1\":{\"8\":1,\"13\":1,\"22\":2,\"41\":1,\"55\":1,\"193\":1,\"211\":1,\"220\":1,\"225\":1,\"228\":1,\"242\":1,\"246\":1,\"273\":1,\"282\":1,\"436\":1,\"476\":1,\"530\":2,\"531\":2,\"587\":1,\"610\":1,\"611\":7,\"612\":4,\"613\":2,\"684\":1,\"698\":2,\"707\":1,\"713\":1,\"714\":1,\"717\":4,\"720\":1,\"722\":4,\"769\":1,\"801\":1,\"804\":1,\"910\":2,\"925\":2}}],[\"取整\",{\"1\":{\"419\":8,\"798\":1}}],[\"取代\",{\"1\":{\"379\":1,\"409\":1,\"600\":4,\"712\":1,\"738\":2,\"750\":1,\"769\":1}}],[\"取决于\",{\"1\":{\"303\":1,\"395\":1,\"708\":1}}],[\"取消\",{\"1\":{\"191\":1}}],[\"取反\",{\"0\":{\"143\":1},\"1\":{\"722\":1,\"811\":1}}],[\"取数\",{\"1\":{\"115\":2}}],[\"取得\",{\"1\":{\"54\":1,\"192\":1,\"194\":1,\"218\":1,\"229\":1,\"242\":1,\"254\":2,\"257\":2,\"262\":1,\"264\":1,\"325\":1,\"357\":3,\"370\":4,\"419\":2,\"902\":1,\"928\":1,\"952\":1,\"953\":2}}],[\"取值\",{\"1\":{\"23\":1,\"293\":1,\"347\":1}}],[\"取\",{\"0\":{\"664\":1},\"1\":{\"23\":1,\"100\":1,\"115\":1,\"299\":1,\"308\":1,\"399\":1,\"451\":1,\"666\":1,\"721\":1,\"867\":1,\"873\":1,\"884\":1,\"901\":2}}],[\"取出\",{\"1\":{\"4\":1,\"11\":1,\"46\":2,\"72\":1,\"263\":1}}],[\"智能\",{\"1\":{\"22\":1,\"58\":1}}],[\"绑定\",{\"1\":{\"22\":2,\"165\":1,\"770\":1}}],[\"管理\",{\"1\":{\"22\":2,\"41\":1,\"58\":1,\"492\":1,\"784\":1}}],[\"管道\",{\"1\":{\"19\":1,\"199\":1,\"245\":1}}],[\"析构\",{\"0\":{\"722\":1},\"1\":{\"22\":1,\"27\":1,\"530\":1,\"531\":1,\"710\":1,\"714\":1,\"722\":20}}],[\"语法\",{\"1\":{\"770\":1}}],[\"语法错误\",{\"1\":{\"43\":2,\"682\":1}}],[\"语义上\",{\"1\":{\"940\":2}}],[\"语义\",{\"0\":{\"926\":1},\"1\":{\"49\":1,\"53\":1,\"192\":5,\"193\":1,\"195\":5,\"197\":2,\"199\":3,\"225\":1,\"228\":1,\"234\":1,\"243\":1,\"244\":3,\"245\":3,\"246\":3,\"249\":2,\"250\":3,\"254\":1,\"255\":1,\"311\":1,\"320\":6,\"370\":1,\"379\":1,\"400\":1,\"402\":2,\"423\":2,\"425\":3,\"426\":1,\"863\":1,\"887\":6,\"890\":1,\"892\":1,\"893\":1,\"924\":2,\"926\":4,\"935\":1,\"938\":3,\"939\":1,\"940\":6,\"951\":1,\"955\":1}}],[\"语言\",{\"1\":{\"22\":2,\"623\":1,\"651\":1,\"663\":1,\"747\":1,\"810\":1,\"816\":1}}],[\"语句\",{\"0\":{\"456\":1,\"816\":1,\"817\":1,\"818\":1,\"819\":1},\"1\":{\"10\":1,\"457\":2,\"461\":2,\"467\":2,\"471\":2,\"563\":1,\"585\":2,\"589\":1,\"599\":5,\"607\":1,\"611\":2,\"620\":5,\"624\":1,\"625\":2,\"639\":1,\"654\":1,\"658\":1,\"683\":1,\"688\":1,\"694\":1,\"714\":1,\"717\":2,\"719\":1,\"725\":1,\"730\":1,\"781\":3,\"806\":1,\"807\":1,\"816\":12,\"817\":12,\"818\":8,\"819\":5}}],[\"申请\",{\"1\":{\"22\":1,\"484\":1,\"542\":1,\"545\":2}}],[\"基类\",{\"0\":{\"627\":1,\"752\":1},\"1\":{\"510\":1,\"701\":1,\"741\":1,\"748\":15,\"749\":5,\"750\":22,\"751\":1,\"752\":8,\"766\":6,\"767\":1,\"768\":5,\"769\":32,\"770\":1}}],[\"基比\",{\"1\":{\"305\":1}}],[\"基元\",{\"1\":{\"270\":1}}],[\"基点\",{\"1\":{\"228\":2}}],[\"基显式\",{\"1\":{\"223\":1}}],[\"基\",{\"1\":{\"222\":1,\"223\":1,\"228\":1,\"665\":1,\"675\":1,\"713\":1}}],[\"基准\",{\"1\":{\"199\":1,\"229\":1,\"242\":4,\"254\":1,\"257\":1,\"910\":1}}],[\"基础架构\",{\"1\":{\"220\":1}}],[\"基础\",{\"0\":{\"69\":1,\"488\":1},\"1\":{\"110\":1,\"220\":1,\"222\":1,\"225\":1,\"228\":1,\"312\":1,\"342\":1,\"370\":1,\"371\":2,\"372\":1,\"545\":2,\"598\":1,\"612\":1,\"701\":1,\"748\":2}}],[\"基础知识\",{\"0\":{\"21\":1,\"622\":1},\"1\":{\"69\":1,\"503\":2}}],[\"基本上\",{\"1\":{\"875\":1}}],[\"基本特征\",{\"1\":{\"748\":1}}],[\"基本相同\",{\"1\":{\"476\":1,\"701\":1}}],[\"基本概念\",{\"0\":{\"474\":1}}],[\"基本一致\",{\"1\":{\"312\":1,\"577\":1}}],[\"基本\",{\"0\":{\"29\":1,\"798\":1},\"1\":{\"49\":1,\"126\":1,\"137\":1,\"229\":1,\"312\":1,\"320\":1,\"373\":2,\"379\":1,\"398\":2,\"590\":1,\"691\":1,\"701\":3}}],[\"基于\",{\"0\":{\"60\":1,\"61\":1,\"216\":1,\"219\":1,\"221\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"238\":1,\"239\":1,\"245\":1,\"246\":1,\"248\":1,\"251\":1,\"350\":1,\"351\":1,\"937\":1,\"941\":1,\"943\":1,\"946\":1},\"1\":{\"13\":2,\"20\":1,\"51\":2,\"55\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"199\":2,\"217\":1,\"218\":3,\"220\":3,\"222\":3,\"223\":2,\"224\":2,\"225\":5,\"226\":1,\"227\":3,\"228\":4,\"229\":4,\"232\":3,\"237\":2,\"242\":1,\"244\":5,\"245\":3,\"246\":4,\"247\":2,\"248\":5,\"250\":1,\"254\":2,\"256\":1,\"257\":1,\"259\":2,\"273\":1,\"292\":1,\"299\":1,\"300\":1,\"314\":1,\"332\":2,\"342\":1,\"348\":1,\"358\":2,\"367\":1,\"370\":1,\"371\":1,\"379\":1,\"380\":1,\"386\":1,\"392\":1,\"393\":1,\"395\":1,\"398\":2,\"451\":2,\"492\":1,\"623\":1,\"701\":1,\"910\":1,\"922\":3,\"928\":5,\"935\":4,\"938\":1,\"940\":1,\"941\":3,\"947\":1,\"951\":1}}],[\"值画\",{\"1\":{\"837\":1}}],[\"值是\",{\"1\":{\"666\":1}}],[\"值不受\",{\"1\":{\"586\":1}}],[\"值越\",{\"1\":{\"451\":1}}],[\"值恒为\",{\"1\":{\"446\":1}}],[\"值得一提的是\",{\"1\":{\"370\":1,\"399\":1}}],[\"值得\",{\"1\":{\"370\":1,\"386\":1}}],[\"值得注意\",{\"1\":{\"199\":1,\"270\":1,\"859\":1,\"929\":1}}],[\"值来\",{\"1\":{\"222\":1,\"282\":1,\"392\":2}}],[\"值为\",{\"1\":{\"95\":1,\"97\":1,\"471\":1,\"528\":1,\"538\":2,\"539\":1,\"663\":1,\"689\":3,\"690\":1,\"793\":1,\"810\":1}}],[\"值时\",{\"1\":{\"25\":1,\"594\":1}}],[\"值加\",{\"1\":{\"23\":1}}],[\"值\",{\"0\":{\"84\":1},\"1\":{\"20\":2,\"23\":3,\"72\":1,\"85\":1,\"91\":1,\"93\":7,\"94\":2,\"95\":2,\"96\":4,\"97\":3,\"99\":1,\"137\":2,\"210\":2,\"223\":1,\"227\":1,\"242\":1,\"249\":1,\"270\":1,\"277\":1,\"281\":1,\"282\":4,\"290\":1,\"294\":1,\"299\":4,\"304\":1,\"348\":1,\"349\":1,\"380\":1,\"384\":1,\"394\":1,\"395\":1,\"399\":2,\"413\":1,\"449\":1,\"451\":2,\"460\":2,\"469\":2,\"524\":1,\"525\":2,\"528\":1,\"536\":2,\"538\":1,\"543\":1,\"545\":2,\"546\":2,\"586\":2,\"587\":3,\"594\":2,\"595\":1,\"612\":6,\"613\":3,\"621\":2,\"656\":1,\"658\":2,\"661\":1,\"670\":5,\"671\":11,\"672\":4,\"673\":2,\"675\":3,\"676\":3,\"687\":1,\"690\":2,\"698\":1,\"708\":1,\"710\":2,\"717\":1,\"719\":1,\"721\":1,\"722\":1,\"724\":1,\"736\":1,\"744\":1,\"745\":1,\"755\":12,\"758\":1,\"762\":1,\"766\":1,\"781\":1,\"793\":2,\"798\":1,\"800\":1,\"801\":1,\"806\":3,\"807\":5,\"808\":5,\"809\":2,\"810\":3,\"817\":1,\"818\":5,\"825\":1,\"826\":1,\"827\":2,\"828\":1,\"829\":2,\"830\":2,\"837\":2,\"860\":1,\"867\":1,\"901\":1,\"906\":1}}],[\"三原色\",{\"1\":{\"923\":1}}],[\"三目\",{\"1\":{\"814\":2}}],[\"三位\",{\"1\":{\"648\":1}}],[\"三者\",{\"1\":{\"601\":1,\"924\":1}}],[\"三角\",{\"1\":{\"312\":2}}],[\"三角形\",{\"1\":{\"303\":1,\"305\":1,\"308\":1}}],[\"三线\",{\"1\":{\"280\":1}}],[\"三边\",{\"1\":{\"246\":1}}],[\"三类\",{\"1\":{\"232\":1,\"243\":1}}],[\"三层\",{\"1\":{\"220\":1}}],[\"三维重建\",{\"1\":{\"288\":1}}],[\"三维空间\",{\"1\":{\"208\":1}}],[\"三维\",{\"1\":{\"193\":2,\"216\":1,\"217\":1,\"218\":12,\"220\":2,\"221\":2,\"222\":4,\"223\":4,\"228\":7,\"229\":1,\"233\":1,\"235\":1,\"237\":1,\"242\":3,\"243\":2,\"254\":1,\"262\":1,\"300\":1,\"301\":1,\"327\":1,\"334\":1}}],[\"三数\",{\"1\":{\"104\":2}}],[\"三点\",{\"1\":{\"85\":1}}],[\"三要素\",{\"1\":{\"70\":1,\"656\":1}}],[\"三\",{\"1\":{\"42\":1,\"246\":1,\"315\":2,\"359\":1,\"380\":1,\"750\":1}}],[\"三种\",{\"1\":{\"27\":1,\"44\":1,\"196\":1,\"411\":2,\"492\":1,\"667\":1,\"697\":1,\"760\":1}}],[\"三次方\",{\"1\":{\"282\":1}}],[\"三次\",{\"1\":{\"20\":1,\"484\":2}}],[\"三个\",{\"1\":{\"10\":1,\"28\":1,\"64\":1,\"192\":1,\"196\":1,\"225\":1,\"273\":2,\"298\":1,\"308\":1,\"355\":1,\"380\":2,\"406\":1,\"451\":1,\"468\":1,\"485\":2,\"500\":1,\"595\":1,\"601\":3,\"690\":1,\"695\":1,\"721\":1,\"730\":4,\"759\":1,\"780\":1,\"825\":1,\"826\":2,\"961\":1}}],[\"前往\",{\"1\":{\"941\":1}}],[\"前者\",{\"1\":{\"874\":2}}],[\"前加\",{\"1\":{\"665\":1,\"713\":1,\"722\":1}}],[\"前后\",{\"1\":{\"534\":1,\"658\":1}}],[\"前置\",{\"1\":{\"460\":1,\"813\":1}}],[\"前馈\",{\"1\":{\"398\":1}}],[\"前提\",{\"1\":{\"290\":1,\"709\":1,\"858\":1}}],[\"前端\",{\"1\":{\"107\":1}}],[\"前驱\",{\"1\":{\"97\":3}}],[\"前序\",{\"1\":{\"70\":1,\"71\":2,\"82\":1,\"86\":7}}],[\"前面\",{\"1\":{\"54\":1,\"72\":1,\"105\":1,\"107\":1,\"115\":1,\"175\":1,\"209\":1,\"262\":1,\"314\":2,\"322\":1,\"469\":1,\"597\":2,\"639\":1,\"651\":1,\"676\":1,\"682\":1,\"684\":1,\"687\":1,\"688\":1,\"690\":1,\"698\":1,\"706\":1,\"738\":1,\"741\":2,\"745\":1,\"846\":1,\"854\":1,\"947\":1}}],[\"前景\",{\"1\":{\"52\":1,\"55\":1,\"412\":1,\"417\":1,\"893\":2}}],[\"前向\",{\"1\":{\"51\":3,\"384\":1,\"406\":1,\"907\":1,\"938\":1,\"939\":1,\"940\":1,\"951\":1}}],[\"前\",{\"0\":{\"108\":1,\"842\":1},\"1\":{\"20\":1,\"53\":1,\"66\":1,\"71\":2,\"100\":3,\"103\":1,\"105\":1,\"107\":3,\"201\":1,\"227\":1,\"233\":1,\"234\":1,\"282\":1,\"355\":1,\"398\":1,\"399\":1,\"417\":2,\"467\":1,\"522\":1,\"539\":4,\"545\":2,\"573\":1,\"575\":1,\"589\":1,\"661\":1,\"688\":1,\"722\":2,\"729\":1,\"749\":1,\"766\":1,\"769\":1,\"770\":1,\"828\":1,\"830\":1,\"843\":1,\"854\":1,\"938\":2,\"939\":2,\"940\":3,\"951\":2}}],[\"412.38\",{\"1\":{\"852\":1}}],[\"41\",{\"1\":{\"422\":4}}],[\"41.1\",{\"1\":{\"254\":1}}],[\"427\",{\"1\":{\"370\":1}}],[\"42\",{\"1\":{\"254\":1,\"642\":1,\"730\":1}}],[\"429.\",{\"1\":{\"72\":1}}],[\"49\",{\"1\":{\"223\":1,\"950\":1}}],[\"491.\",{\"0\":{\"123\":1,\"131\":1}}],[\"480\",{\"1\":{\"419\":1}}],[\"48\",{\"1\":{\"222\":1,\"380\":4,\"647\":1}}],[\"47\",{\"1\":{\"222\":1,\"406\":1}}],[\"47.\",{\"0\":{\"126\":1}}],[\"464\",{\"1\":{\"426\":1}}],[\"46\",{\"1\":{\"222\":1,\"841\":1}}],[\"46.\",{\"0\":{\"125\":1}}],[\"4413\",{\"1\":{\"841\":1}}],[\"443\",{\"1\":{\"484\":1}}],[\"44\",{\"1\":{\"222\":1,\"721\":1,\"724\":1}}],[\"43152052\",{\"1\":{\"811\":1}}],[\"43\",{\"1\":{\"222\":1}}],[\"430.34.\",{\"1\":{\"191\":1}}],[\"438.\",{\"0\":{\"138\":1}}],[\"4585\",{\"1\":{\"841\":2}}],[\"45\",{\"1\":{\"198\":1,\"222\":1,\"342\":1,\"605\":1,\"721\":1}}],[\"45.6\",{\"1\":{\"595\":2}}],[\"45.\",{\"1\":{\"152\":1}}],[\"455.\",{\"0\":{\"142\":1}}],[\"454.\",{\"1\":{\"104\":1}}],[\"450.\",{\"1\":{\"97\":1}}],[\"4.6\",{\"1\":{\"825\":1}}],[\"4.2\",{\"0\":{\"240\":1},\"1\":{\"600\":1}}],[\"4.1.2\",{\"0\":{\"237\":1}}],[\"4.1.1\",{\"0\":{\"232\":1}}],[\"4.1\",{\"0\":{\"231\":1}}],[\"4.3\",{\"0\":{\"241\":1},\"1\":{\"199\":1}}],[\"4.\",{\"0\":{\"72\":1,\"96\":1,\"124\":1,\"180\":1,\"230\":1,\"337\":1,\"459\":1,\"522\":1,\"751\":1},\"1\":{\"191\":2}}],[\"4.0\",{\"1\":{\"41\":1,\"174\":1,\"175\":1,\"304\":1,\"357\":1,\"811\":1,\"841\":1,\"845\":1,\"875\":1}}],[\"407\",{\"1\":{\"426\":1}}],[\"4096\",{\"1\":{\"170\":2,\"254\":1}}],[\"40.\",{\"0\":{\"116\":1},\"1\":{\"122\":1}}],[\"404\",{\"1\":{\"43\":1,\"476\":1}}],[\"403\",{\"1\":{\"43\":1,\"476\":1}}],[\"400434\",{\"1\":{\"82\":1}}],[\"400\",{\"1\":{\"43\":1,\"370\":1,\"476\":2}}],[\"40\",{\"1\":{\"41\":1,\"229\":2,\"417\":1,\"422\":1}}],[\"4\",{\"1\":{\"20\":3,\"41\":2,\"42\":1,\"43\":1,\"44\":1,\"54\":2,\"98\":1,\"114\":2,\"119\":1,\"121\":17,\"170\":1,\"234\":1,\"246\":1,\"254\":1,\"257\":2,\"262\":1,\"263\":2,\"288\":3,\"294\":1,\"303\":1,\"304\":5,\"344\":1,\"355\":2,\"357\":2,\"380\":8,\"384\":1,\"411\":2,\"413\":1,\"428\":1,\"429\":1,\"446\":1,\"449\":1,\"451\":1,\"476\":1,\"539\":3,\"540\":4,\"541\":5,\"542\":1,\"543\":1,\"545\":1,\"559\":1,\"570\":1,\"573\":3,\"589\":1,\"595\":1,\"612\":1,\"623\":1,\"624\":1,\"633\":5,\"661\":1,\"672\":1,\"675\":4,\"676\":2,\"712\":1,\"714\":1,\"721\":1,\"739\":1,\"741\":1,\"769\":3,\"801\":1,\"806\":1,\"807\":2,\"811\":1,\"816\":1,\"818\":1,\"826\":1,\"841\":1,\"849\":4,\"858\":1,\"867\":1,\"868\":1,\"882\":1,\"928\":2,\"961\":1}}],[\"距离远\",{\"1\":{\"312\":1}}],[\"距离\",{\"1\":{\"20\":1,\"152\":1,\"222\":2,\"226\":4,\"228\":1,\"260\":2,\"277\":1,\"278\":1,\"284\":3,\"290\":1,\"312\":3,\"323\":7,\"334\":1,\"349\":1,\"451\":3,\"884\":1,\"904\":1,\"906\":1,\"944\":3,\"963\":1}}],[\"59\",{\"1\":{\"910\":1}}],[\"59.\",{\"1\":{\"102\":1}}],[\"57\",{\"1\":{\"223\":1,\"647\":1}}],[\"56\",{\"1\":{\"223\":1,\"422\":1,\"524\":1,\"606\":1,\"730\":1}}],[\"562\",{\"1\":{\"41\":2}}],[\"52\",{\"1\":{\"223\":1,\"254\":2}}],[\"55\",{\"1\":{\"223\":1,\"721\":1}}],[\"55.\",{\"0\":{\"152\":1}}],[\"559.\",{\"0\":{\"74\":1}}],[\"58\",{\"1\":{\"105\":1,\"225\":1}}],[\"54\",{\"1\":{\"223\":1}}],[\"541.\",{\"1\":{\"105\":1}}],[\"54.\",{\"1\":{\"102\":1}}],[\"503\",{\"1\":{\"476\":1}}],[\"502\",{\"1\":{\"476\":1}}],[\"501\",{\"1\":{\"476\":1}}],[\"501.\",{\"1\":{\"100\":1}}],[\"50\",{\"1\":{\"198\":1,\"223\":1,\"227\":1,\"344\":3,\"355\":2,\"423\":1,\"471\":1,\"671\":1,\"730\":3,\"782\":2}}],[\"5000\",{\"1\":{\"423\":1}}],[\"50022\",{\"1\":{\"165\":1,\"184\":3}}],[\"500\",{\"1\":{\"43\":1,\"476\":1,\"846\":2}}],[\"53\",{\"1\":{\"223\":1}}],[\"53.\",{\"0\":{\"153\":1}}],[\"538.\",{\"1\":{\"100\":1}}],[\"530.\",{\"1\":{\"100\":1}}],[\"537.36\",{\"1\":{\"41\":2}}],[\"512\",{\"1\":{\"411\":2,\"863\":1,\"922\":1,\"928\":1}}],[\"51.\",{\"0\":{\"128\":1}}],[\"51.0.2704.106\",{\"1\":{\"41\":1}}],[\"51\",{\"1\":{\"104\":1,\"223\":1,\"852\":1}}],[\"515.\",{\"1\":{\"72\":1}}],[\"5.3\",{\"0\":{\"253\":1}}],[\"5.2.2\",{\"0\":{\"252\":1}}],[\"5.2.1\",{\"0\":{\"251\":1}}],[\"5.2\",{\"0\":{\"250\":1},\"1\":{\"600\":1}}],[\"5.\",{\"0\":{\"97\":1,\"127\":1,\"181\":1,\"243\":1,\"460\":1,\"523\":1,\"752\":1},\"1\":{\"191\":1,\"309\":1}}],[\"5.1.4\",{\"0\":{\"248\":1}}],[\"5.1.3\",{\"0\":{\"247\":1}}],[\"5.1.2\",{\"0\":{\"246\":1}}],[\"5.1.1\",{\"0\":{\"245\":1}}],[\"5.1\",{\"0\":{\"244\":1},\"1\":{\"41\":1}}],[\"5.0\",{\"1\":{\"41\":1}}],[\"5\",{\"1\":{\"20\":2,\"41\":2,\"42\":1,\"43\":2,\"44\":1,\"49\":1,\"82\":2,\"97\":2,\"114\":2,\"116\":1,\"139\":1,\"220\":1,\"248\":1,\"249\":1,\"254\":1,\"301\":2,\"304\":3,\"305\":1,\"308\":2,\"325\":1,\"419\":1,\"422\":1,\"424\":1,\"428\":1,\"429\":1,\"461\":8,\"476\":1,\"538\":1,\"540\":1,\"542\":3,\"543\":1,\"545\":1,\"548\":1,\"552\":1,\"553\":1,\"570\":1,\"573\":3,\"595\":2,\"612\":2,\"623\":1,\"654\":1,\"671\":3,\"675\":2,\"682\":2,\"683\":2,\"690\":1,\"696\":3,\"712\":2,\"741\":1,\"769\":2,\"798\":1,\"801\":1,\"806\":2,\"807\":3,\"811\":1,\"818\":1,\"826\":1,\"835\":3,\"840\":3,\"849\":1,\"929\":2,\"953\":1}}],[\"固定\",{\"1\":{\"20\":1,\"218\":1,\"226\":1,\"228\":1,\"229\":1,\"283\":1,\"332\":1,\"392\":2,\"419\":1,\"584\":1,\"609\":2,\"673\":1,\"675\":1,\"736\":1,\"824\":1,\"830\":1,\"867\":1,\"896\":2}}],[\"固有\",{\"1\":{\"20\":1,\"69\":1,\"222\":1,\"229\":1,\"317\":1,\"318\":1}}],[\"降维\",{\"1\":{\"923\":2,\"938\":2,\"951\":1}}],[\"降质\",{\"1\":{\"875\":4}}],[\"降序\",{\"1\":{\"469\":4}}],[\"降到\",{\"1\":{\"300\":1}}],[\"降为\",{\"1\":{\"229\":1}}],[\"降至\",{\"1\":{\"20\":1}}],[\"降低成本\",{\"1\":{\"370\":1}}],[\"降低\",{\"1\":{\"20\":1,\"211\":1,\"218\":1,\"223\":1,\"246\":1,\"355\":1,\"379\":1,\"386\":1,\"459\":1,\"599\":1,\"612\":1,\"621\":2,\"923\":1,\"928\":1,\"935\":2}}],[\"堆叠\",{\"1\":{\"304\":1,\"370\":1,\"374\":1,\"380\":2}}],[\"堆中取\",{\"1\":{\"20\":1}}],[\"堆\",{\"1\":{\"20\":1,\"677\":1}}],[\"添加\",{\"0\":{\"834\":1},\"1\":{\"20\":1,\"41\":1,\"160\":1,\"191\":1,\"308\":1,\"322\":1,\"534\":2,\"539\":3,\"560\":1,\"570\":2,\"574\":3,\"707\":2,\"750\":1,\"793\":1,\"832\":1,\"834\":1,\"901\":1,\"906\":1,\"907\":1,\"922\":1,\"938\":1,\"945\":1}}],[\"遍历\",{\"0\":{\"70\":1,\"71\":1,\"72\":1,\"541\":1,\"827\":1},\"1\":{\"20\":1,\"38\":2,\"70\":4,\"71\":6,\"72\":15,\"75\":1,\"77\":1,\"80\":1,\"82\":1,\"84\":1,\"85\":4,\"86\":31,\"88\":1,\"89\":1,\"90\":1,\"93\":2,\"96\":1,\"97\":4,\"99\":2,\"100\":3,\"103\":3,\"112\":1,\"115\":1,\"126\":2,\"128\":2,\"137\":1,\"153\":1,\"451\":1,\"540\":2,\"545\":2,\"563\":1,\"576\":1,\"690\":1}}],[\"着色\",{\"1\":{\"311\":1}}],[\"着重\",{\"1\":{\"259\":1}}],[\"着\",{\"0\":{\"852\":1},\"1\":{\"20\":1,\"209\":1,\"270\":1,\"436\":1,\"839\":1,\"852\":1,\"935\":1}}],[\"篇文章\",{\"1\":{\"50\":1,\"863\":1}}],[\"篇\",{\"1\":{\"19\":1,\"53\":1}}],[\"01\",{\"1\":{\"841\":1}}],[\"01.\",{\"1\":{\"69\":1,\"503\":1}}],[\"00\",{\"1\":{\"841\":2}}],[\"000\",{\"1\":{\"422\":4,\"424\":1,\"428\":2}}],[\"089\",{\"1\":{\"429\":1}}],[\"02\",{\"1\":{\"841\":1}}],[\"020\",{\"1\":{\"642\":1}}],[\"024\",{\"1\":{\"426\":1}}],[\"02.07.\",{\"1\":{\"103\":1}}],[\"02.\",{\"1\":{\"71\":1}}],[\"0.\",{\"1\":{\"868\":1,\"877\":1}}],[\"0.2782\",{\"1\":{\"849\":1}}],[\"0.2265\",{\"1\":{\"849\":1}}],[\"0.4008\",{\"1\":{\"849\":1}}],[\"0.4166\",{\"1\":{\"849\":1}}],[\"0.4578\",{\"1\":{\"849\":1}}],[\"0.9214\",{\"1\":{\"849\":1}}],[\"0.9263\",{\"1\":{\"849\":1}}],[\"0.99\",{\"1\":{\"355\":1}}],[\"0.6668\",{\"1\":{\"849\":1}}],[\"0.314159\",{\"1\":{\"645\":1}}],[\"0.3\",{\"1\":{\"412\":1,\"834\":2}}],[\"0.0765\",{\"1\":{\"849\":1}}],[\"0.033\",{\"1\":{\"835\":2}}],[\"0.03\",{\"1\":{\"451\":1}}],[\"0.02\",{\"1\":{\"355\":1}}],[\"0.01\",{\"1\":{\"298\":1,\"451\":1}}],[\"0.5140\",{\"1\":{\"849\":1}}],[\"0.5266\",{\"1\":{\"849\":1}}],[\"0.5284\",{\"1\":{\"849\":1}}],[\"0.5211\",{\"1\":{\"849\":1}}],[\"0.5335\",{\"1\":{\"849\":1}}],[\"0.5\",{\"1\":{\"242\":1}}],[\"0.7568\",{\"1\":{\"849\":1}}],[\"0.75\",{\"1\":{\"355\":1}}],[\"0.7\",{\"1\":{\"242\":1,\"412\":1,\"417\":1,\"834\":1}}],[\"0.1308\",{\"1\":{\"849\":1}}],[\"0.1019\",{\"1\":{\"849\":1}}],[\"0.12.0\",{\"1\":{\"836\":1}}],[\"0.12\",{\"1\":{\"355\":1}}],[\"0.1\",{\"1\":{\"210\":3}}],[\"0.8428\",{\"1\":{\"849\":1}}],[\"0.8461\",{\"1\":{\"849\":1}}],[\"0.8802\",{\"1\":{\"849\":1}}],[\"0.8\",{\"1\":{\"41\":2,\"192\":1,\"299\":1}}],[\"05.\",{\"1\":{\"105\":1}}],[\"06\",{\"1\":{\"42\":1}}],[\"0\",{\"1\":{\"23\":6,\"24\":1,\"25\":1,\"27\":6,\"28\":1,\"70\":1,\"72\":14,\"73\":3,\"74\":2,\"75\":3,\"80\":6,\"81\":1,\"83\":3,\"84\":2,\"85\":1,\"86\":3,\"87\":7,\"90\":2,\"96\":1,\"98\":1,\"99\":1,\"100\":2,\"102\":5,\"103\":12,\"104\":21,\"105\":10,\"106\":3,\"107\":1,\"113\":2,\"114\":3,\"115\":3,\"116\":4,\"118\":2,\"119\":5,\"121\":1,\"122\":1,\"123\":2,\"125\":2,\"126\":3,\"128\":6,\"137\":10,\"138\":7,\"139\":7,\"142\":3,\"143\":4,\"146\":7,\"148\":2,\"152\":5,\"153\":4,\"170\":3,\"191\":1,\"209\":1,\"210\":4,\"304\":4,\"305\":12,\"338\":1,\"344\":3,\"366\":1,\"371\":2,\"372\":2,\"435\":3,\"437\":2,\"446\":3,\"451\":2,\"461\":3,\"524\":1,\"528\":3,\"529\":3,\"530\":3,\"531\":3,\"534\":2,\"535\":1,\"538\":5,\"539\":1,\"540\":1,\"541\":1,\"542\":3,\"543\":1,\"544\":2,\"545\":1,\"558\":1,\"561\":1,\"568\":1,\"573\":1,\"576\":1,\"583\":1,\"595\":5,\"599\":1,\"600\":1,\"605\":1,\"606\":1,\"612\":6,\"613\":1,\"615\":1,\"624\":3,\"633\":1,\"642\":4,\"647\":1,\"648\":1,\"649\":1,\"666\":1,\"667\":2,\"671\":1,\"676\":6,\"681\":1,\"682\":1,\"683\":5,\"684\":8,\"685\":2,\"688\":1,\"689\":3,\"690\":8,\"693\":1,\"695\":1,\"696\":1,\"698\":6,\"709\":1,\"713\":1,\"714\":1,\"717\":6,\"718\":1,\"721\":1,\"722\":1,\"724\":1,\"729\":1,\"745\":4,\"755\":1,\"759\":7,\"769\":1,\"781\":20,\"793\":4,\"808\":2,\"810\":4,\"816\":1,\"817\":2,\"819\":1,\"825\":2,\"826\":8,\"830\":7,\"834\":1,\"835\":4,\"837\":1,\"841\":1,\"845\":2,\"848\":1,\"849\":1,\"852\":1,\"859\":1,\"867\":4,\"868\":6,\"897\":5,\"900\":3,\"904\":3,\"905\":1,\"913\":1,\"929\":1,\"957\":1,\"963\":1}}],[\"07\",{\"1\":{\"19\":1,\"42\":1}}],[\"09\",{\"1\":{\"11\":1}}],[\"庖丁解牛\",{\"1\":{\"19\":1}}],[\"社长\",{\"1\":{\"19\":1}}],[\"章\",{\"1\":{\"19\":1}}],[\"第十个\",{\"1\":{\"892\":1}}],[\"第五个\",{\"1\":{\"882\":1}}],[\"第五种\",{\"1\":{\"97\":1}}],[\"第七步\",{\"1\":{\"191\":1}}],[\"第六步\",{\"1\":{\"191\":1}}],[\"第二阶段\",{\"1\":{\"926\":1}}],[\"第二次\",{\"1\":{\"410\":1,\"417\":1,\"830\":1}}],[\"第二件\",{\"1\":{\"366\":1,\"415\":1}}],[\"第二\",{\"1\":{\"210\":1,\"897\":1,\"961\":1}}],[\"第二个\",{\"0\":{\"532\":1},\"1\":{\"103\":6,\"532\":1,\"583\":1,\"749\":1,\"825\":1,\"826\":4,\"827\":2,\"828\":2,\"830\":1,\"864\":1}}],[\"第二种\",{\"1\":{\"97\":1,\"928\":1}}],[\"第二行\",{\"1\":{\"42\":1,\"740\":1,\"793\":1}}],[\"第三个\",{\"1\":{\"826\":1}}],[\"第三行\",{\"1\":{\"606\":1}}],[\"第三十三\",{\"1\":{\"406\":1}}],[\"第三步\",{\"1\":{\"191\":1}}],[\"第三种\",{\"1\":{\"97\":1}}],[\"第三\",{\"1\":{\"42\":1,\"210\":1,\"961\":1}}],[\"第一列\",{\"1\":{\"961\":1}}],[\"第一件\",{\"1\":{\"366\":1,\"415\":1}}],[\"第一层\",{\"1\":{\"350\":2}}],[\"第一次\",{\"1\":{\"305\":1,\"410\":1,\"417\":1,\"722\":1,\"830\":1,\"884\":2,\"950\":1}}],[\"第一步\",{\"1\":{\"210\":1,\"244\":1,\"288\":1,\"864\":1}}],[\"第一名\",{\"1\":{\"192\":1}}],[\"第一种\",{\"1\":{\"97\":1,\"928\":1}}],[\"第一个\",{\"1\":{\"50\":3,\"82\":1,\"105\":1,\"303\":1,\"366\":1,\"461\":1,\"528\":1,\"534\":1,\"541\":2,\"545\":1,\"559\":1,\"570\":1,\"574\":1,\"575\":1,\"583\":1,\"687\":2,\"688\":1,\"689\":1,\"698\":1,\"730\":2,\"735\":1,\"825\":2,\"826\":6,\"828\":7,\"829\":4,\"830\":4,\"841\":1,\"864\":1}}],[\"第一\",{\"1\":{\"42\":1,\"210\":2,\"461\":1,\"961\":1}}],[\"第一行\",{\"0\":{\"624\":1},\"1\":{\"41\":1,\"210\":1,\"461\":1,\"690\":1,\"740\":1,\"961\":1}}],[\"第四种\",{\"1\":{\"97\":1}}],[\"第四\",{\"1\":{\"41\":1,\"210\":1}}],[\"第\",{\"1\":{\"19\":1,\"126\":1,\"137\":2,\"195\":3,\"203\":1,\"244\":1,\"293\":1,\"350\":4,\"353\":3,\"371\":4,\"372\":4,\"391\":1,\"532\":4,\"573\":2,\"676\":1,\"687\":2,\"688\":5,\"690\":2,\"698\":1,\"826\":1,\"955\":1}}],[\"请\",{\"1\":{\"19\":1,\"126\":2,\"139\":2,\"174\":1,\"175\":1,\"191\":1,\"227\":1,\"282\":1,\"299\":1,\"303\":1,\"304\":1,\"307\":1,\"311\":1,\"332\":1,\"476\":1,\"534\":1,\"811\":1,\"841\":1,\"845\":1,\"875\":1}}],[\"请求\",{\"0\":{\"41\":1},\"1\":{\"3\":3,\"8\":7,\"10\":5,\"13\":1,\"17\":1,\"25\":1,\"29\":1,\"31\":3,\"32\":6,\"34\":9,\"35\":1,\"40\":2,\"41\":16,\"43\":14,\"45\":1,\"46\":3,\"476\":11,\"480\":4}}],[\"具有\",{\"1\":{\"51\":1,\"63\":2,\"93\":2,\"193\":2,\"195\":1,\"222\":2,\"223\":1,\"227\":2,\"228\":3,\"229\":1,\"245\":2,\"246\":1,\"254\":1,\"259\":1,\"277\":1,\"299\":1,\"303\":2,\"312\":1,\"315\":1,\"355\":1,\"370\":4,\"371\":1,\"372\":4,\"423\":1,\"436\":1,\"476\":1,\"480\":1,\"662\":1,\"671\":1,\"680\":1,\"683\":1,\"696\":1,\"717\":1,\"720\":1,\"748\":1,\"758\":1,\"769\":1,\"881\":1,\"884\":1,\"952\":1,\"955\":2,\"961\":2}}],[\"具体做法\",{\"1\":{\"961\":1}}],[\"具体地说\",{\"1\":{\"925\":1}}],[\"具体操作\",{\"1\":{\"828\":1}}],[\"具体分析\",{\"1\":{\"721\":1}}],[\"具体情况\",{\"1\":{\"599\":1}}],[\"具体来说\",{\"1\":{\"198\":1,\"225\":2,\"227\":1,\"283\":1,\"284\":1,\"395\":1,\"938\":1,\"940\":1,\"944\":2,\"951\":1,\"955\":1}}],[\"具体步骤\",{\"1\":{\"72\":1,\"95\":1,\"350\":1}}],[\"具体化\",{\"1\":{\"34\":1,\"739\":1,\"748\":1}}],[\"具体\",{\"1\":{\"19\":1,\"41\":1,\"43\":1,\"45\":2,\"96\":1,\"174\":1,\"191\":1,\"192\":1,\"293\":1,\"303\":1,\"312\":1,\"318\":1,\"319\":1,\"323\":1,\"392\":1,\"416\":1,\"451\":3,\"465\":4,\"532\":1,\"600\":1,\"665\":1,\"675\":1,\"701\":1,\"702\":2,\"739\":1,\"748\":1,\"750\":2,\"770\":1,\"845\":1,\"864\":1,\"928\":1,\"929\":1,\"940\":1,\"945\":1}}],[\"具备\",{\"1\":{\"3\":1}}],[\"则按\",{\"1\":{\"810\":1}}],[\"则\",{\"1\":{\"19\":1,\"23\":4,\"30\":1,\"36\":1,\"37\":1,\"38\":2,\"39\":2,\"69\":1,\"71\":8,\"81\":1,\"90\":1,\"91\":1,\"93\":2,\"94\":5,\"95\":4,\"97\":13,\"103\":2,\"106\":3,\"107\":1,\"137\":2,\"152\":1,\"174\":2,\"196\":1,\"225\":2,\"268\":1,\"299\":1,\"344\":1,\"347\":1,\"386\":1,\"416\":1,\"446\":1,\"467\":1,\"484\":1,\"529\":4,\"534\":2,\"540\":1,\"544\":1,\"545\":2,\"556\":1,\"572\":1,\"574\":1,\"583\":2,\"586\":1,\"589\":2,\"594\":1,\"595\":2,\"597\":1,\"598\":2,\"606\":1,\"609\":2,\"612\":3,\"613\":1,\"615\":1,\"621\":1,\"649\":1,\"676\":3,\"682\":2,\"689\":2,\"698\":2,\"701\":1,\"706\":1,\"712\":1,\"722\":2,\"724\":1,\"730\":1,\"741\":1,\"745\":2,\"748\":1,\"749\":1,\"750\":2,\"769\":2,\"781\":1,\"785\":3,\"793\":13,\"808\":2,\"811\":1,\"813\":1,\"824\":1,\"828\":1,\"829\":2,\"833\":1,\"929\":2,\"930\":1,\"938\":2,\"940\":2,\"951\":1,\"957\":1}}],[\"掉\",{\"1\":{\"19\":1,\"116\":1,\"152\":1,\"175\":1,\"299\":1,\"342\":1,\"379\":1,\"390\":1,\"417\":2,\"436\":1,\"852\":1,\"904\":1,\"923\":1}}],[\"超分\",{\"1\":{\"901\":1}}],[\"超文本\",{\"1\":{\"475\":1,\"484\":1}}],[\"超参\",{\"1\":{\"374\":1,\"375\":1,\"867\":1,\"906\":1}}],[\"超图\",{\"1\":{\"226\":2}}],[\"超级\",{\"1\":{\"199\":1}}],[\"超过\",{\"1\":{\"199\":1,\"220\":1,\"357\":2,\"417\":2,\"425\":1,\"449\":1,\"537\":1,\"542\":1,\"599\":1,\"642\":1,\"730\":1,\"929\":1}}],[\"超点\",{\"1\":{\"195\":2,\"197\":1,\"200\":2,\"201\":2,\"202\":1}}],[\"超\",{\"1\":{\"102\":1,\"195\":1,\"226\":1,\"308\":1,\"357\":1,\"390\":1,\"406\":1,\"908\":1,\"910\":1,\"922\":2,\"925\":1,\"935\":2,\"938\":1}}],[\"超出范围\",{\"1\":{\"541\":1}}],[\"超出\",{\"1\":{\"22\":1}}],[\"超时\",{\"1\":{\"19\":1,\"20\":5,\"492\":3}}],[\"超行\",{\"1\":{\"4\":1,\"11\":1}}],[\"交织\",{\"1\":{\"500\":1}}],[\"交错\",{\"1\":{\"225\":1}}],[\"交并集\",{\"1\":{\"214\":1}}],[\"交叉点\",{\"1\":{\"961\":4}}],[\"交叉\",{\"0\":{\"348\":1},\"1\":{\"195\":1,\"197\":1,\"199\":1,\"201\":4,\"242\":1,\"249\":1,\"255\":1,\"348\":5,\"349\":5,\"935\":1}}],[\"交集\",{\"1\":{\"104\":1,\"249\":1}}],[\"交替\",{\"1\":{\"51\":1}}],[\"交互\",{\"1\":{\"51\":2,\"53\":7,\"371\":1,\"379\":1,\"485\":1}}],[\"交互式\",{\"0\":{\"48\":1},\"1\":{\"47\":1,\"49\":3,\"51\":2,\"53\":1,\"55\":3}}],[\"交换文件\",{\"1\":{\"170\":1}}],[\"交换\",{\"1\":{\"19\":2,\"103\":9,\"201\":1,\"342\":1,\"398\":1,\"543\":1,\"571\":2,\"574\":1}}],[\"交给\",{\"1\":{\"8\":1}}],[\"之下\",{\"1\":{\"959\":1}}],[\"之处\",{\"1\":{\"958\":1}}],[\"之差\",{\"1\":{\"676\":1}}],[\"之内\",{\"1\":{\"379\":1}}],[\"之所以\",{\"1\":{\"379\":1}}],[\"之外\",{\"1\":{\"369\":1,\"598\":1,\"609\":1,\"610\":1,\"619\":2,\"620\":1,\"621\":1,\"657\":1,\"659\":1,\"708\":1,\"744\":1,\"793\":1,\"935\":1}}],[\"之上\",{\"1\":{\"220\":1}}],[\"之\",{\"0\":{\"83\":1},\"1\":{\"85\":1,\"104\":3,\"113\":1,\"128\":1,\"223\":1,\"255\":1,\"406\":1,\"532\":1,\"601\":1,\"698\":1,\"790\":1,\"862\":1,\"872\":1}}],[\"之前\",{\"0\":{\"898\":1},\"1\":{\"53\":1,\"55\":5,\"72\":1,\"106\":1,\"107\":1,\"126\":1,\"276\":1,\"305\":1,\"310\":1,\"379\":2,\"380\":1,\"396\":1,\"480\":1,\"541\":1,\"566\":1,\"583\":1,\"590\":1,\"595\":3,\"599\":1,\"606\":1,\"615\":2,\"637\":1,\"667\":1,\"676\":2,\"714\":1,\"722\":3,\"744\":1,\"781\":1,\"793\":1,\"805\":1,\"829\":3,\"895\":1,\"941\":1,\"955\":1,\"961\":1}}],[\"之作\",{\"1\":{\"49\":1}}],[\"之一\",{\"1\":{\"43\":1,\"242\":1,\"755\":1}}],[\"之以\",{\"1\":{\"34\":1}}],[\"之间\",{\"1\":{\"29\":1,\"69\":1,\"103\":1,\"192\":1,\"210\":1,\"220\":4,\"222\":3,\"223\":3,\"225\":2,\"226\":1,\"227\":1,\"228\":2,\"259\":1,\"260\":2,\"263\":1,\"270\":2,\"273\":1,\"276\":2,\"298\":1,\"300\":1,\"304\":1,\"305\":1,\"306\":1,\"320\":2,\"323\":4,\"325\":1,\"348\":1,\"349\":1,\"353\":1,\"354\":3,\"355\":1,\"358\":1,\"372\":1,\"379\":2,\"391\":1,\"394\":2,\"398\":1,\"436\":1,\"451\":2,\"465\":1,\"484\":1,\"485\":1,\"574\":1,\"584\":2,\"676\":2,\"701\":2,\"724\":2,\"743\":1,\"744\":1,\"745\":1,\"788\":1,\"829\":1,\"837\":1,\"875\":1,\"882\":2,\"893\":3,\"906\":1,\"939\":1,\"944\":1,\"955\":1,\"959\":2}}],[\"之后\",{\"1\":{\"19\":1,\"41\":1,\"46\":1,\"54\":1,\"85\":1,\"88\":2,\"96\":1,\"97\":2,\"100\":1,\"103\":3,\"137\":1,\"209\":1,\"225\":1,\"282\":1,\"308\":1,\"311\":1,\"379\":2,\"393\":1,\"394\":1,\"398\":1,\"410\":1,\"471\":2,\"484\":2,\"545\":2,\"583\":1,\"586\":1,\"589\":1,\"595\":1,\"599\":1,\"606\":4,\"611\":1,\"612\":2,\"670\":1,\"672\":1,\"684\":1,\"721\":1,\"722\":1,\"738\":1,\"739\":1,\"755\":1,\"769\":1,\"770\":1,\"777\":1,\"782\":1,\"818\":3,\"827\":1,\"828\":1,\"829\":3,\"830\":3,\"906\":1,\"940\":1,\"955\":1,\"961\":1}}],[\"之初\",{\"1\":{\"8\":1,\"35\":1}}],[\"]\",{\"0\":{\"436\":1},\"1\":{\"19\":1,\"52\":1,\"53\":1,\"54\":1,\"72\":10,\"82\":4,\"86\":2,\"87\":4,\"96\":2,\"98\":4,\"99\":3,\"100\":5,\"102\":11,\"104\":61,\"105\":14,\"106\":18,\"107\":3,\"114\":12,\"115\":3,\"116\":6,\"118\":2,\"119\":5,\"121\":28,\"122\":3,\"123\":4,\"125\":4,\"126\":13,\"128\":10,\"137\":24,\"138\":11,\"139\":10,\"142\":2,\"143\":3,\"146\":2,\"148\":2,\"152\":2,\"153\":2,\"181\":1,\"196\":1,\"198\":1,\"217\":5,\"218\":5,\"220\":7,\"222\":15,\"223\":9,\"225\":12,\"226\":9,\"227\":5,\"228\":12,\"234\":3,\"242\":2,\"244\":12,\"245\":8,\"246\":10,\"247\":3,\"248\":1,\"249\":4,\"254\":19,\"261\":1,\"270\":2,\"290\":1,\"300\":1,\"304\":11,\"318\":1,\"325\":2,\"332\":2,\"344\":5,\"347\":1,\"348\":2,\"349\":1,\"353\":1,\"361\":2,\"370\":1,\"372\":1,\"380\":5,\"392\":1,\"399\":2,\"449\":1,\"451\":2,\"528\":2,\"529\":3,\"530\":1,\"531\":1,\"536\":1,\"538\":1,\"541\":1,\"542\":1,\"545\":2,\"546\":1,\"573\":7,\"574\":3,\"589\":1,\"638\":2,\"675\":6,\"676\":3,\"681\":3,\"682\":3,\"683\":9,\"684\":2,\"685\":3,\"687\":4,\"688\":4,\"689\":2,\"690\":17,\"693\":2,\"696\":2,\"698\":3,\"704\":1,\"706\":1,\"712\":4,\"713\":3,\"719\":3,\"722\":1,\"730\":3,\"745\":2,\"749\":1,\"757\":2,\"759\":5,\"781\":18,\"811\":1,\"813\":1,\"834\":1,\"835\":2,\"846\":9,\"848\":4,\"849\":8,\"852\":1,\"859\":7,\"868\":4,\"869\":5,\"887\":2,\"897\":4,\"900\":3,\"901\":1,\"904\":8,\"910\":1,\"911\":1,\"918\":1,\"922\":1,\"929\":1,\"935\":2,\"953\":1}}],[\"[\",{\"0\":{\"436\":1},\"1\":{\"19\":1,\"52\":1,\"53\":1,\"72\":10,\"82\":4,\"86\":2,\"87\":4,\"96\":2,\"98\":4,\"99\":3,\"100\":5,\"102\":11,\"103\":2,\"104\":61,\"105\":14,\"106\":18,\"107\":3,\"114\":12,\"115\":3,\"116\":6,\"118\":2,\"119\":5,\"121\":28,\"122\":3,\"123\":4,\"125\":4,\"126\":13,\"128\":10,\"137\":24,\"138\":11,\"139\":10,\"142\":2,\"143\":3,\"146\":2,\"148\":2,\"152\":2,\"153\":2,\"181\":1,\"196\":1,\"198\":1,\"217\":5,\"218\":5,\"220\":7,\"222\":15,\"223\":9,\"225\":12,\"226\":9,\"227\":5,\"228\":12,\"234\":3,\"242\":2,\"244\":12,\"245\":8,\"246\":10,\"247\":3,\"248\":1,\"249\":4,\"254\":19,\"261\":1,\"270\":2,\"290\":1,\"300\":1,\"304\":11,\"318\":1,\"325\":2,\"332\":2,\"344\":5,\"347\":1,\"348\":2,\"349\":1,\"353\":1,\"361\":2,\"370\":1,\"372\":1,\"380\":5,\"392\":1,\"399\":2,\"449\":1,\"451\":2,\"528\":2,\"529\":3,\"530\":1,\"531\":1,\"536\":1,\"538\":2,\"539\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":1,\"545\":2,\"546\":1,\"573\":7,\"574\":3,\"589\":1,\"638\":2,\"675\":6,\"676\":3,\"681\":3,\"682\":3,\"683\":9,\"684\":2,\"685\":3,\"687\":4,\"688\":4,\"689\":2,\"690\":17,\"693\":2,\"696\":2,\"698\":3,\"704\":1,\"706\":1,\"712\":4,\"713\":3,\"719\":3,\"722\":1,\"730\":3,\"745\":2,\"749\":1,\"757\":2,\"759\":5,\"781\":18,\"811\":1,\"813\":1,\"834\":1,\"835\":2,\"846\":9,\"848\":4,\"849\":8,\"852\":1,\"859\":7,\"868\":4,\"869\":5,\"897\":4,\"900\":3,\"901\":1,\"904\":8,\"910\":1,\"911\":1,\"918\":1,\"922\":1,\"929\":1,\"935\":2,\"953\":1}}],[\"nfail\",{\"1\":{\"846\":2}}],[\"ndarray\",{\"1\":{\"834\":1}}],[\"nwage\",{\"1\":{\"769\":1}}],[\"nsuccessful\",{\"1\":{\"846\":2}}],[\"nsurf\",{\"1\":{\"282\":3}}],[\"nscore\",{\"1\":{\"769\":2}}],[\"nsize\",{\"1\":{\"574\":1}}],[\"nyu\",{\"0\":{\"426\":1},\"1\":{\"426\":2}}],[\"nyuv2\",{\"0\":{\"426\":1}}],[\"nam\",{\"1\":{\"722\":2,\"769\":5}}],[\"namespace\",{\"1\":{\"524\":1,\"535\":1,\"538\":1,\"539\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":1,\"545\":1,\"583\":1,\"595\":1,\"599\":1,\"600\":1,\"601\":1,\"605\":1,\"606\":1,\"612\":2,\"615\":1,\"624\":2,\"666\":1,\"671\":1,\"683\":1,\"690\":1,\"695\":1,\"698\":2,\"709\":1,\"713\":1,\"721\":1,\"722\":1,\"724\":1,\"745\":1,\"759\":1,\"769\":1,\"781\":4,\"825\":1,\"826\":1,\"827\":1,\"828\":1,\"830\":2}}],[\"name\",{\"1\":{\"41\":1,\"168\":1,\"179\":1,\"184\":2,\"457\":1,\"458\":1,\"461\":2,\"462\":1,\"467\":2,\"468\":2,\"469\":1,\"471\":1,\"545\":1,\"665\":1,\"690\":4,\"696\":2,\"704\":3,\"706\":3,\"707\":1,\"713\":4,\"722\":4,\"749\":3,\"757\":1,\"759\":3,\"769\":4,\"846\":7}}],[\"nathan\",{\"1\":{\"426\":1}}],[\"natural\",{\"0\":{\"945\":1},\"1\":{\"422\":1,\"429\":1,\"856\":1,\"864\":1,\"945\":1}}],[\"nms\",{\"1\":{\"417\":1}}],[\"nr\",{\"1\":{\"394\":2}}],[\"nine\",{\"1\":{\"559\":1}}],[\"ninety\",{\"1\":{\"559\":1}}],[\"nipsw\",{\"1\":{\"901\":1}}],[\"nips\",{\"1\":{\"367\":1}}],[\"nij\",{\"1\":{\"366\":2}}],[\"nie\",{\"1\":{\"247\":1}}],[\"ncsn\",{\"1\":{\"899\":1,\"900\":1}}],[\"nckd\",{\"1\":{\"354\":5,\"355\":7,\"356\":6,\"357\":2}}],[\"nce\",{\"1\":{\"263\":1}}],[\"nheads\",{\"1\":{\"344\":3}}],[\"n0\",{\"1\":{\"323\":1}}],[\"nlp\",{\"1\":{\"315\":1,\"325\":1,\"379\":2}}],[\"np\",{\"1\":{\"305\":12,\"394\":1,\"834\":5,\"838\":3,\"846\":4,\"859\":5}}],[\"npos\",{\"1\":{\"105\":1,\"534\":2}}],[\"nname\",{\"1\":{\"769\":2}}],[\"nn\",{\"0\":{\"854\":1},\"1\":{\"304\":3,\"344\":10,\"854\":1,\"855\":2,\"877\":4}}],[\"nvdiffrec\",{\"1\":{\"340\":1}}],[\"nvlabs\",{\"1\":{\"340\":1}}],[\"nv\",{\"1\":{\"277\":1}}],[\"nvidiaxxxx\",{\"1\":{\"191\":1}}],[\"nvidia\",{\"0\":{\"161\":1},\"1\":{\"191\":8,\"312\":1,\"852\":3}}],[\"nbv\",{\"1\":{\"271\":1}}],[\"nxt\",{\"1\":{\"103\":4}}],[\"n1\",{\"1\":{\"85\":9}}],[\"nullptr\",{\"1\":{\"70\":5,\"71\":1,\"72\":15,\"73\":2,\"74\":1,\"75\":8,\"76\":1,\"78\":6,\"80\":2,\"81\":1,\"82\":9,\"83\":6,\"84\":1,\"85\":7,\"86\":1,\"87\":2,\"88\":2,\"89\":9,\"90\":12,\"91\":2,\"94\":1,\"95\":1,\"96\":1,\"97\":6,\"98\":3,\"99\":4,\"100\":5,\"103\":14,\"667\":2,\"676\":5,\"825\":2,\"826\":3,\"827\":3,\"828\":3,\"829\":6,\"830\":10}}],[\"null\",{\"0\":{\"667\":1},\"1\":{\"69\":2,\"72\":2,\"77\":7,\"82\":1,\"88\":6,\"97\":1,\"98\":4,\"100\":3,\"103\":10,\"667\":1,\"676\":6,\"712\":1,\"714\":1,\"825\":5}}],[\"numpy\",{\"1\":{\"838\":1}}],[\"numtype\",{\"1\":{\"738\":8,\"739\":1,\"740\":8}}],[\"num3\",{\"1\":{\"658\":1}}],[\"num2\",{\"1\":{\"658\":1}}],[\"num1\",{\"1\":{\"658\":1}}],[\"nums4\",{\"1\":{\"104\":2}}],[\"nums3\",{\"1\":{\"104\":2}}],[\"nums2\",{\"1\":{\"104\":8}}],[\"nums1\",{\"1\":{\"104\":8}}],[\"nums\",{\"1\":{\"87\":17,\"96\":8,\"104\":65,\"107\":5,\"121\":8,\"122\":11,\"123\":10,\"125\":7,\"126\":14,\"143\":9,\"146\":6,\"152\":6,\"153\":5}}],[\"num\",{\"1\":{\"10\":2,\"344\":9,\"616\":5,\"638\":3,\"665\":1,\"666\":8,\"668\":1,\"704\":3,\"706\":3,\"707\":1,\"709\":1,\"713\":4,\"722\":4,\"745\":2,\"749\":3,\"758\":1,\"760\":5,\"769\":6,\"825\":6,\"826\":6,\"827\":2,\"828\":9,\"829\":15,\"830\":21,\"844\":1,\"845\":1,\"846\":2}}],[\"numbers\",{\"1\":{\"781\":1}}],[\"number\",{\"1\":{\"8\":1,\"38\":1,\"426\":1,\"428\":2,\"429\":1,\"745\":1}}],[\"now\",{\"1\":{\"827\":1,\"830\":1}}],[\"noreplace\",{\"1\":{\"793\":3}}],[\"norm3\",{\"1\":{\"877\":2}}],[\"norm2\",{\"1\":{\"877\":2}}],[\"norm1\",{\"1\":{\"877\":2}}],[\"norm\",{\"1\":{\"310\":1,\"380\":1}}],[\"normalized\",{\"1\":{\"904\":1}}],[\"normalize\",{\"1\":{\"859\":2}}],[\"normalizing\",{\"1\":{\"372\":1,\"912\":1}}],[\"normalization\",{\"1\":{\"220\":1,\"959\":2}}],[\"normals\",{\"1\":{\"305\":6}}],[\"nocreat\",{\"1\":{\"781\":2,\"793\":3,\"794\":1}}],[\"nocreate\",{\"1\":{\"781\":1,\"793\":1}}],[\"nose\",{\"1\":{\"422\":1}}],[\"noisy\",{\"1\":{\"355\":1}}],[\"noise\",{\"1\":{\"293\":1,\"451\":1,\"867\":1,\"899\":1,\"901\":1,\"930\":1}}],[\"non\",{\"0\":{\"207\":1},\"1\":{\"354\":1,\"904\":1}}],[\"none\",{\"1\":{\"54\":2,\"94\":1,\"835\":1,\"837\":10,\"845\":8,\"848\":3,\"877\":4}}],[\"nouveau\",{\"1\":{\"191\":9}}],[\"no\",{\"0\":{\"166\":1},\"1\":{\"166\":1,\"175\":1,\"188\":1,\"191\":4,\"476\":1,\"528\":3,\"793\":2,\"846\":5}}],[\"nodes\",{\"1\":{\"397\":1}}],[\"node\",{\"1\":{\"70\":1,\"71\":10,\"72\":27,\"74\":1,\"85\":9,\"95\":2,\"359\":2,\"827\":1}}],[\"noticeably\",{\"1\":{\"428\":1}}],[\"notations\",{\"0\":{\"353\":1}}],[\"note\",{\"1\":{\"309\":1}}],[\"notebook\",{\"1\":{\"165\":1}}],[\"not\",{\"0\":{\"157\":1,\"187\":1},\"1\":{\"43\":1,\"71\":1,\"177\":1,\"188\":2,\"189\":2,\"309\":1,\"476\":3,\"845\":2}}],[\"neighbor\",{\"1\":{\"956\":1}}],[\"neighborhood\",{\"1\":{\"304\":1}}],[\"nearest\",{\"1\":{\"956\":1}}],[\"near\",{\"1\":{\"860\":1}}],[\"neg\",{\"1\":{\"854\":1}}],[\"negative\",{\"1\":{\"49\":1,\"52\":1,\"411\":2,\"412\":1}}],[\"needed\",{\"1\":{\"427\":1}}],[\"needs\",{\"1\":{\"104\":4,\"137\":20,\"138\":7}}],[\"neurons\",{\"1\":{\"372\":1}}],[\"neural\",{\"1\":{\"312\":2,\"359\":2,\"375\":1}}],[\"neurips\",{\"1\":{\"272\":1,\"889\":1,\"950\":1}}],[\"ner\",{\"1\":{\"247\":1}}],[\"next\",{\"1\":{\"72\":8,\"103\":87,\"383\":1,\"825\":8,\"826\":8,\"827\":5,\"828\":10,\"829\":18,\"830\":19}}],[\"netwrok\",{\"1\":{\"963\":1}}],[\"networks\",{\"0\":{\"361\":1},\"1\":{\"312\":1,\"359\":4,\"361\":1,\"367\":1,\"375\":1,\"899\":1}}],[\"network\",{\"0\":{\"411\":1,\"890\":1,\"959\":1},\"1\":{\"220\":1,\"261\":1,\"312\":1,\"890\":1,\"958\":4,\"959\":2,\"961\":2}}],[\"nets\",{\"1\":{\"350\":1}}],[\"netstat\",{\"1\":{\"186\":1}}],[\"net\",{\"0\":{\"196\":1},\"1\":{\"41\":3,\"54\":1,\"174\":1,\"175\":1,\"185\":1,\"195\":1,\"196\":1,\"200\":1,\"220\":1,\"226\":1,\"227\":3,\"254\":1,\"263\":1,\"268\":1,\"304\":1,\"310\":1,\"312\":1,\"451\":2,\"811\":1,\"841\":1,\"845\":1,\"846\":2,\"855\":1,\"875\":1,\"910\":1,\"911\":1,\"922\":2}}],[\"newhead\",{\"1\":{\"103\":7}}],[\"new\",{\"0\":{\"711\":1,\"712\":1},\"1\":{\"19\":1,\"55\":1,\"85\":1,\"86\":1,\"87\":2,\"95\":1,\"96\":1,\"103\":12,\"105\":4,\"122\":1,\"309\":1,\"383\":2,\"422\":3,\"426\":2,\"427\":1,\"623\":1,\"712\":10,\"713\":5,\"714\":9,\"722\":1,\"793\":1,\"826\":3,\"830\":4}}],[\"nt\",{\"1\":{\"41\":2}}],[\"n\",{\"0\":{\"74\":1,\"128\":1},\"1\":{\"20\":1,\"38\":1,\"72\":1,\"80\":5,\"86\":5,\"87\":4,\"103\":8,\"104\":9,\"105\":6,\"110\":4,\"112\":9,\"113\":7,\"125\":2,\"128\":18,\"137\":5,\"196\":1,\"203\":1,\"284\":4,\"288\":4,\"290\":1,\"291\":2,\"292\":2,\"304\":2,\"317\":2,\"332\":3,\"347\":1,\"350\":2,\"399\":3,\"451\":2,\"538\":4,\"539\":2,\"542\":2,\"543\":2,\"573\":9,\"574\":2,\"600\":2,\"612\":4,\"613\":3,\"638\":2,\"648\":1,\"649\":2,\"690\":2,\"704\":2,\"706\":2,\"713\":2,\"722\":4,\"745\":6,\"760\":4,\"769\":7,\"807\":1,\"811\":4,\"816\":3,\"818\":6,\"826\":9,\"827\":2,\"828\":2,\"829\":2,\"830\":12,\"835\":2,\"859\":11,\"867\":3,\"868\":3,\"869\":6,\"877\":3,\"884\":1,\"896\":1,\"897\":2,\"905\":1,\"917\":1,\"938\":1,\"940\":1,\"951\":1}}],[\"*\",{\"0\":{\"668\":1},\"1\":{\"19\":1,\"41\":3,\"69\":2,\"70\":18,\"71\":9,\"72\":38,\"73\":4,\"74\":1,\"75\":4,\"76\":2,\"77\":3,\"78\":2,\"80\":4,\"81\":2,\"82\":6,\"83\":3,\"84\":3,\"85\":6,\"86\":2,\"87\":6,\"88\":3,\"89\":6,\"90\":9,\"91\":6,\"94\":2,\"95\":3,\"96\":3,\"97\":2,\"98\":4,\"99\":7,\"100\":15,\"102\":1,\"103\":73,\"104\":1,\"105\":1,\"106\":3,\"138\":1,\"139\":1,\"143\":2,\"163\":1,\"191\":6,\"305\":1,\"344\":1,\"396\":1,\"402\":4,\"459\":2,\"522\":1,\"525\":2,\"528\":2,\"529\":2,\"530\":2,\"531\":2,\"540\":1,\"541\":2,\"576\":1,\"583\":7,\"600\":1,\"612\":1,\"613\":1,\"621\":1,\"625\":2,\"638\":4,\"645\":4,\"654\":4,\"664\":3,\"665\":10,\"666\":15,\"667\":3,\"668\":9,\"670\":4,\"671\":10,\"672\":5,\"673\":5,\"675\":21,\"676\":8,\"682\":1,\"683\":8,\"686\":3,\"698\":8,\"701\":1,\"709\":2,\"712\":2,\"713\":1,\"714\":2,\"718\":2,\"721\":2,\"724\":2,\"732\":5,\"734\":3,\"735\":6,\"744\":4,\"749\":4,\"760\":6,\"762\":2,\"769\":1,\"781\":1,\"782\":2,\"798\":1,\"805\":2,\"806\":1,\"807\":3,\"811\":4,\"825\":3,\"826\":5,\"827\":4,\"828\":5,\"829\":6,\"830\":34,\"835\":3,\"837\":3,\"841\":3,\"845\":1,\"848\":1,\"852\":1,\"859\":2,\"863\":5,\"868\":2,\"944\":4,\"958\":8}}],[\"造成\",{\"1\":{\"17\":1,\"20\":1,\"677\":1,\"750\":1}}],[\"肯定\",{\"1\":{\"17\":1,\"480\":1,\"527\":1,\"852\":1}}],[\"无噪音\",{\"1\":{\"882\":1}}],[\"无条件\",{\"1\":{\"882\":1,\"935\":1,\"940\":1,\"941\":2,\"947\":1,\"952\":1}}],[\"无名\",{\"1\":{\"713\":1,\"714\":1,\"830\":1}}],[\"无效\",{\"1\":{\"620\":1}}],[\"无分\",{\"1\":{\"585\":1}}],[\"无参\",{\"1\":{\"584\":1,\"585\":1,\"720\":1,\"721\":1}}],[\"无敌\",{\"1\":{\"536\":1}}],[\"无须\",{\"1\":{\"500\":1}}],[\"无向\",{\"1\":{\"393\":1,\"394\":1}}],[\"无可避免\",{\"1\":{\"386\":1}}],[\"无疑\",{\"1\":{\"372\":1}}],[\"无关\",{\"1\":{\"306\":1,\"372\":1,\"436\":1,\"586\":1,\"663\":1,\"708\":2,\"735\":1,\"745\":1}}],[\"无缝\",{\"1\":{\"195\":1}}],[\"无序\",{\"1\":{\"193\":1,\"201\":1,\"220\":1,\"248\":1,\"315\":2,\"317\":1,\"318\":1,\"325\":1,\"546\":1}}],[\"无视\",{\"1\":{\"191\":1}}],[\"无所谓\",{\"1\":{\"88\":2,\"590\":1}}],[\"无右子树\",{\"1\":{\"71\":1}}],[\"无论\",{\"1\":{\"36\":2,\"312\":1,\"500\":2,\"612\":2,\"710\":1,\"775\":1,\"785\":1,\"818\":1,\"929\":1}}],[\"无\",{\"0\":{\"139\":1,\"528\":1},\"1\":{\"20\":1,\"71\":2,\"139\":3,\"225\":4,\"228\":3,\"245\":1,\"250\":1,\"257\":2,\"264\":1,\"394\":1,\"437\":1,\"467\":1,\"566\":1,\"583\":3,\"584\":3,\"587\":1,\"601\":1,\"612\":1,\"633\":4,\"642\":1,\"654\":1,\"720\":1,\"721\":1,\"722\":1,\"788\":1,\"828\":1,\"947\":1,\"953\":2}}],[\"无法访问\",{\"1\":{\"714\":1,\"734\":1,\"766\":1}}],[\"无法\",{\"1\":{\"17\":1,\"37\":1,\"39\":1,\"43\":1,\"53\":1,\"55\":1,\"86\":4,\"103\":1,\"172\":1,\"186\":1,\"218\":1,\"220\":1,\"357\":2,\"358\":2,\"437\":1,\"446\":1,\"451\":2,\"476\":3,\"485\":2,\"601\":1,\"606\":1,\"612\":1,\"617\":1,\"649\":1,\"671\":1,\"677\":1,\"707\":1,\"709\":1,\"712\":1,\"713\":1,\"714\":1,\"718\":2,\"745\":1,\"750\":2,\"769\":1,\"770\":1,\"789\":1,\"825\":1,\"857\":1,\"916\":1,\"938\":4,\"949\":1,\"951\":1,\"953\":1}}],[\"无需\",{\"1\":{\"8\":2,\"35\":2,\"199\":1,\"247\":1,\"265\":2,\"325\":1,\"769\":1,\"889\":1,\"904\":1,\"938\":1,\"952\":1}}],[\"果\",{\"1\":{\"17\":1}}],[\"走到\",{\"1\":{\"913\":1}}],[\"走访\",{\"1\":{\"563\":1}}],[\"走\",{\"1\":{\"16\":1,\"94\":1,\"166\":1,\"191\":2,\"446\":1}}],[\"旧\",{\"1\":{\"16\":1}}],[\"ekin\",{\"1\":{\"959\":1}}],[\"epdata\",{\"1\":{\"904\":3}}],[\"ep\",{\"1\":{\"904\":1,\"918\":1}}],[\"eps\",{\"1\":{\"868\":2}}],[\"epoch\",{\"0\":{\"842\":1},\"1\":{\"396\":2,\"839\":1,\"843\":2,\"844\":2}}],[\"epolloneshot\",{\"0\":{\"39\":1},\"1\":{\"38\":1,\"39\":3}}],[\"epollout\",{\"1\":{\"16\":1}}],[\"epollin\",{\"1\":{\"16\":1}}],[\"epoll\",{\"0\":{\"38\":1,\"495\":1},\"1\":{\"16\":2,\"17\":3,\"32\":7,\"34\":1,\"38\":15,\"39\":6,\"492\":2,\"499\":1}}],[\"ef\",{\"1\":{\"841\":1}}],[\"effort\",{\"1\":{\"261\":1}}],[\"efficientnet\",{\"1\":{\"375\":3}}],[\"efficient\",{\"1\":{\"211\":2}}],[\"effectiveness\",{\"1\":{\"928\":1}}],[\"effectively\",{\"1\":{\"309\":1,\"956\":1}}],[\"effective\",{\"1\":{\"208\":1}}],[\"eof\",{\"1\":{\"782\":1,\"793\":1}}],[\"eg\",{\"1\":{\"586\":1,\"704\":3,\"717\":2}}],[\"eglfs\",{\"1\":{\"188\":1}}],[\"edit\",{\"1\":{\"945\":1}}],[\"editing\",{\"0\":{\"945\":1},\"1\":{\"864\":1,\"939\":1,\"945\":1,\"952\":1}}],[\"edata\",{\"1\":{\"904\":3}}],[\"edu\",{\"1\":{\"424\":1,\"425\":1}}],[\"edges\",{\"1\":{\"304\":2,\"309\":2}}],[\"edgeconv\",{\"0\":{\"275\":1},\"1\":{\"225\":2,\"276\":2}}],[\"edge0\",{\"1\":{\"56\":1}}],[\"edgeand\",{\"1\":{\"56\":2}}],[\"edge\",{\"1\":{\"53\":1,\"304\":1,\"305\":13,\"309\":4,\"401\":1}}],[\"edgeflow\",{\"0\":{\"53\":1},\"1\":{\"53\":2,\"55\":1}}],[\"ellipsis\",{\"1\":{\"848\":1}}],[\"elem\",{\"1\":{\"570\":1}}],[\"element\",{\"1\":{\"545\":1,\"945\":1}}],[\"elephant\",{\"1\":{\"422\":1}}],[\"elu\",{\"0\":{\"440\":1}}],[\"else\",{\"1\":{\"44\":1,\"71\":1,\"72\":2,\"77\":3,\"78\":3,\"81\":1,\"89\":3,\"90\":3,\"94\":2,\"97\":3,\"99\":4,\"100\":5,\"103\":4,\"104\":5,\"105\":4,\"106\":6,\"118\":2,\"119\":2,\"122\":1,\"142\":1,\"534\":2,\"540\":1,\"568\":1,\"601\":1,\"817\":11,\"826\":1,\"828\":2,\"829\":3,\"830\":6,\"846\":2}}],[\"eye\",{\"1\":{\"422\":1}}],[\"ee\",{\"1\":{\"395\":1}}],[\"eexp\",{\"1\":{\"395\":1}}],[\"e4\",{\"1\":{\"304\":1}}],[\"e3\",{\"1\":{\"304\":1}}],[\"e2\",{\"1\":{\"304\":1,\"922\":1}}],[\"e2label\",{\"1\":{\"172\":1}}],[\"e1\",{\"1\":{\"304\":1,\"645\":2}}],[\"estimating\",{\"1\":{\"910\":1,\"911\":1}}],[\"estimation\",{\"1\":{\"894\":1,\"904\":1}}],[\"est\",{\"1\":{\"840\":1}}],[\"esteves\",{\"1\":{\"222\":1}}],[\"esurf\",{\"1\":{\"282\":2}}],[\"essential\",{\"1\":{\"261\":1}}],[\"e\",{\"1\":{\"228\":1,\"242\":1,\"303\":1,\"304\":2,\"308\":1,\"309\":1,\"530\":2,\"531\":2,\"645\":2,\"681\":1,\"835\":1,\"852\":1,\"859\":6,\"864\":1,\"868\":3,\"903\":1,\"928\":1}}],[\"equations\",{\"0\":{\"895\":1},\"1\":{\"895\":1,\"939\":1}}],[\"equal\",{\"1\":{\"545\":1}}],[\"eq\",{\"1\":{\"205\":1,\"904\":1}}],[\"ema\",{\"1\":{\"891\":2}}],[\"embeding\",{\"1\":{\"380\":3}}],[\"embed\",{\"1\":{\"344\":5,\"859\":2}}],[\"embeddings\",{\"1\":{\"929\":3,\"930\":1}}],[\"embedding\",{\"0\":{\"381\":1},\"1\":{\"201\":1,\"315\":1,\"319\":1,\"380\":1}}],[\"embracing\",{\"1\":{\"273\":1}}],[\"emebeding\",{\"1\":{\"272\":1}}],[\"emplace\",{\"0\":{\"560\":1},\"1\":{\"539\":2,\"560\":1,\"570\":3}}],[\"employed\",{\"1\":{\"314\":1}}],[\"empirically\",{\"1\":{\"201\":1}}],[\"empty\",{\"0\":{\"556\":1},\"1\":{\"71\":3,\"72\":7,\"73\":1,\"75\":1,\"82\":1,\"84\":1,\"85\":1,\"86\":2,\"99\":1,\"100\":1,\"106\":5,\"107\":2,\"542\":3,\"556\":1,\"568\":2,\"571\":2,\"574\":1}}],[\"early\",{\"1\":{\"770\":1}}],[\"each\",{\"1\":{\"195\":1,\"305\":1,\"309\":2,\"321\":2,\"344\":1,\"380\":1,\"383\":1,\"422\":1,\"426\":1,\"867\":1}}],[\"eagain\",{\"1\":{\"30\":1,\"39\":1}}],[\"evit\",{\"1\":{\"390\":2,\"392\":4,\"395\":1}}],[\"evo\",{\"1\":{\"390\":2}}],[\"evaluate\",{\"1\":{\"427\":1}}],[\"eval\",{\"1\":{\"344\":1}}],[\"evalrpn\",{\"1\":{\"106\":1}}],[\"even\",{\"1\":{\"188\":1}}],[\"eccv\",{\"1\":{\"256\":1,\"286\":1}}],[\"eccv2020\",{\"1\":{\"52\":1}}],[\"ecc\",{\"1\":{\"225\":1}}],[\"echo\",{\"1\":{\"186\":2}}],[\"erase\",{\"0\":{\"561\":1},\"1\":{\"102\":1,\"540\":6,\"561\":3,\"574\":2}}],[\"er\",{\"1\":{\"82\":1}}],[\"error\",{\"1\":{\"43\":1,\"476\":1,\"530\":1,\"531\":1,\"781\":5,\"818\":1}}],[\"errno\",{\"1\":{\"23\":1,\"24\":1,\"30\":2}}],[\"enhancement\",{\"1\":{\"875\":1,\"910\":1}}],[\"entropy\",{\"1\":{\"859\":3}}],[\"enter\",{\"1\":{\"781\":1}}],[\"enumerate\",{\"1\":{\"835\":1}}],[\"enumeration\",{\"1\":{\"755\":1}}],[\"enum\",{\"1\":{\"755\":4}}],[\"encder\",{\"0\":{\"929\":1}}],[\"encapsulation\",{\"1\":{\"701\":1}}],[\"encourage\",{\"1\":{\"321\":1}}],[\"encouraging\",{\"1\":{\"261\":1}}],[\"encoder\",{\"0\":{\"280\":1},\"1\":{\"344\":4,\"859\":5,\"892\":1,\"925\":1,\"927\":1,\"928\":2,\"929\":11}}],[\"encode\",{\"1\":{\"174\":1}}],[\"encodings\",{\"1\":{\"322\":1,\"344\":2}}],[\"encoding\",{\"1\":{\"41\":2,\"309\":1,\"322\":1,\"344\":1}}],[\"enables\",{\"1\":{\"321\":1}}],[\"engine\",{\"1\":{\"211\":1,\"312\":1}}],[\"environmental\",{\"1\":{\"427\":1}}],[\"env\",{\"0\":{\"175\":1},\"1\":{\"175\":2}}],[\"endll\",{\"1\":{\"781\":1}}],[\"endl\",{\"1\":{\"524\":1,\"528\":1,\"529\":1,\"530\":2,\"531\":2,\"545\":3,\"576\":2,\"583\":1,\"595\":2,\"599\":1,\"600\":1,\"601\":2,\"605\":2,\"606\":2,\"612\":2,\"615\":1,\"621\":2,\"624\":2,\"666\":4,\"671\":1,\"683\":1,\"690\":2,\"695\":1,\"698\":3,\"704\":1,\"706\":1,\"713\":1,\"722\":3,\"724\":2,\"732\":1,\"734\":1,\"745\":3,\"749\":5,\"759\":2,\"769\":1,\"775\":1,\"777\":1,\"781\":13,\"804\":1,\"810\":1,\"817\":2,\"825\":1,\"827\":4,\"828\":3,\"830\":15}}],[\"end\",{\"0\":{\"237\":2},\"1\":{\"71\":1,\"72\":1,\"86\":3,\"87\":1,\"100\":2,\"104\":12,\"105\":4,\"106\":1,\"116\":1,\"122\":1,\"123\":1,\"126\":1,\"142\":2,\"143\":1,\"152\":5,\"195\":2,\"410\":2,\"538\":2,\"539\":3,\"540\":3,\"541\":2,\"543\":1,\"544\":1,\"545\":4,\"548\":1,\"551\":1,\"557\":2,\"559\":2,\"561\":2,\"573\":1,\"575\":1,\"576\":4,\"755\":3,\"875\":2,\"887\":2}}],[\"eiseg\",{\"1\":{\"55\":1}}],[\"exit\",{\"1\":{\"722\":4,\"781\":8}}],[\"existing\",{\"1\":{\"427\":2}}],[\"exe\",{\"1\":{\"626\":2,\"785\":1}}],[\"excption\",{\"1\":{\"530\":2,\"531\":2}}],[\"exciting\",{\"1\":{\"427\":1}}],[\"exception\",{\"1\":{\"27\":1,\"530\":1,\"531\":1}}],[\"ex\",{\"1\":{\"347\":1,\"348\":2,\"451\":2}}],[\"exponential\",{\"1\":{\"891\":1}}],[\"exp2\",{\"1\":{\"835\":1}}],[\"expr2\",{\"1\":{\"811\":7}}],[\"expr1\",{\"1\":{\"811\":5}}],[\"explained\",{\"1\":{\"947\":1}}],[\"exploding\",{\"1\":{\"899\":1}}],[\"exploring\",{\"1\":{\"360\":1}}],[\"explicit\",{\"1\":{\"532\":1}}],[\"expediting\",{\"1\":{\"392\":1}}],[\"experiments\",{\"1\":{\"427\":1}}],[\"experiment\",{\"0\":{\"324\":1}}],[\"experimental\",{\"1\":{\"48\":1}}],[\"exp\",{\"1\":{\"353\":2,\"395\":2,\"451\":1,\"835\":1,\"838\":2,\"859\":1,\"869\":5,\"897\":6,\"917\":1}}],[\"expand\",{\"1\":{\"305\":5,\"309\":1}}],[\"example\",{\"1\":{\"208\":1,\"314\":1,\"429\":1}}],[\"extern\",{\"0\":{\"614\":1},\"1\":{\"598\":10,\"606\":1,\"610\":1,\"614\":1,\"615\":5,\"616\":3,\"617\":1}}],[\"extracting\",{\"1\":{\"340\":2}}],[\"extractor\",{\"0\":{\"322\":1},\"1\":{\"314\":2,\"322\":1}}],[\"extracts\",{\"1\":{\"195\":1}}],[\"ext4\",{\"1\":{\"172\":1}}],[\"etps\",{\"1\":{\"392\":3}}],[\"etc\",{\"1\":{\"171\":1,\"172\":2,\"186\":2,\"191\":1}}],[\"et\",{\"0\":{\"15\":1,\"16\":1,\"17\":1,\"39\":1},\"1\":{\"15\":1,\"16\":1,\"17\":2,\"38\":1,\"39\":1}}],[\"且\",{\"1\":{\"16\":2,\"38\":2,\"53\":1,\"62\":1,\"65\":1,\"77\":1,\"85\":2,\"106\":1,\"113\":1,\"126\":1,\"137\":1,\"193\":2,\"248\":1,\"304\":2,\"390\":2,\"398\":2,\"529\":1,\"538\":1,\"546\":1,\"566\":1,\"573\":1,\"599\":1,\"673\":1,\"675\":1,\"683\":1,\"707\":1,\"769\":1,\"781\":1,\"817\":1,\"864\":1,\"938\":1}}],[\"待\",{\"0\":{\"554\":1},\"1\":{\"16\":1,\"51\":1,\"95\":1,\"97\":3,\"103\":1,\"304\":1,\"404\":2,\"410\":1,\"559\":2,\"829\":2}}],[\"待处理\",{\"1\":{\"8\":1}}],[\"即分\",{\"1\":{\"854\":1}}],[\"即时\",{\"1\":{\"776\":1}}],[\"即类\",{\"1\":{\"701\":1}}],[\"即该\",{\"1\":{\"545\":2,\"676\":1}}],[\"即常\",{\"1\":{\"524\":1}}],[\"即为\",{\"1\":{\"342\":2}}],[\"即使\",{\"1\":{\"41\":1,\"103\":1,\"617\":1,\"620\":1,\"744\":1,\"875\":1,\"882\":1,\"940\":1}}],[\"即将\",{\"1\":{\"20\":1,\"290\":1,\"293\":1,\"294\":1,\"373\":1,\"476\":1}}],[\"即\",{\"1\":{\"16\":3,\"20\":1,\"22\":1,\"41\":1,\"71\":2,\"72\":2,\"93\":1,\"103\":1,\"126\":1,\"137\":1,\"193\":1,\"273\":1,\"288\":1,\"290\":1,\"293\":1,\"301\":2,\"347\":1,\"348\":2,\"349\":1,\"353\":1,\"357\":1,\"369\":1,\"380\":2,\"394\":1,\"436\":1,\"437\":1,\"522\":1,\"529\":1,\"546\":1,\"601\":1,\"612\":2,\"616\":1,\"635\":1,\"666\":2,\"670\":1,\"672\":2,\"673\":1,\"675\":1,\"701\":2,\"712\":1,\"721\":1,\"732\":4,\"745\":1,\"781\":1,\"807\":1,\"809\":1,\"824\":1,\"826\":2,\"827\":1,\"830\":1,\"859\":1,\"863\":1,\"928\":1,\"929\":1,\"940\":1,\"947\":1,\"958\":2,\"959\":1,\"963\":1}}],[\"即可\",{\"1\":{\"5\":1,\"38\":2,\"103\":1,\"174\":1,\"290\":1,\"342\":1,\"357\":1,\"370\":1,\"502\":1,\"598\":1,\"640\":1,\"735\":1,\"769\":1,\"854\":1,\"860\":1,\"947\":1}}],[\"变现\",{\"1\":{\"875\":1}}],[\"变动\",{\"1\":{\"476\":1}}],[\"变差\",{\"1\":{\"451\":1}}],[\"变种\",{\"0\":{\"438\":1},\"1\":{\"449\":1}}],[\"变相\",{\"1\":{\"379\":1}}],[\"变\",{\"1\":{\"301\":1,\"615\":1,\"675\":1}}],[\"变浅\",{\"1\":{\"290\":1}}],[\"变得\",{\"1\":{\"261\":1,\"303\":1,\"349\":1,\"355\":1,\"379\":1,\"940\":1}}],[\"变分\",{\"1\":{\"246\":1,\"862\":2,\"953\":1}}],[\"变形\",{\"1\":{\"222\":1,\"281\":1,\"361\":1,\"369\":4,\"370\":1}}],[\"变换\",{\"1\":{\"220\":1,\"222\":1,\"223\":2,\"225\":1,\"260\":2,\"290\":8,\"291\":1,\"292\":2,\"303\":2,\"312\":1,\"398\":1,\"875\":1,\"904\":1,\"958\":1,\"959\":1}}],[\"变换器\",{\"1\":{\"198\":1,\"314\":1}}],[\"变压器\",{\"1\":{\"201\":1}}],[\"变长\",{\"1\":{\"201\":1}}],[\"变成\",{\"1\":{\"103\":2,\"260\":1,\"293\":1,\"294\":1,\"380\":3,\"748\":1,\"804\":1,\"923\":1,\"958\":2}}],[\"变化\",{\"1\":{\"44\":1,\"222\":1,\"372\":1,\"390\":1,\"698\":1,\"938\":1}}],[\"变体\",{\"1\":{\"34\":1,\"225\":1,\"392\":3,\"890\":1}}],[\"变少\",{\"1\":{\"16\":1}}],[\"变多\",{\"1\":{\"16\":1}}],[\"变为\",{\"1\":{\"16\":3,\"153\":2,\"804\":1}}],[\"变量值\",{\"1\":{\"609\":1,\"676\":1}}],[\"变量名\",{\"0\":{\"657\":1},\"1\":{\"522\":1,\"524\":1,\"586\":2,\"620\":1,\"637\":1,\"639\":1,\"658\":4,\"663\":1,\"665\":3,\"670\":1,\"672\":1,\"673\":1,\"713\":2,\"735\":3,\"757\":1,\"758\":1,\"760\":1,\"762\":2}}],[\"变量\",{\"0\":{\"25\":1,\"36\":1,\"517\":1,\"523\":1,\"608\":1,\"611\":1,\"613\":1,\"614\":1,\"616\":1,\"617\":1,\"618\":1,\"655\":1,\"658\":1,\"659\":1,\"660\":1,\"665\":1,\"666\":1,\"670\":1,\"671\":2,\"691\":1,\"692\":1,\"693\":1,\"694\":1,\"695\":1,\"760\":1,\"762\":1},\"1\":{\"5\":1,\"10\":1,\"23\":1,\"25\":6,\"27\":1,\"36\":7,\"37\":5,\"44\":2,\"218\":1,\"290\":1,\"347\":1,\"348\":1,\"436\":1,\"502\":1,\"504\":2,\"522\":3,\"523\":1,\"524\":5,\"525\":2,\"527\":1,\"528\":3,\"529\":4,\"530\":1,\"535\":16,\"536\":1,\"581\":1,\"586\":1,\"597\":1,\"609\":5,\"610\":3,\"611\":7,\"612\":18,\"613\":7,\"614\":2,\"615\":4,\"616\":6,\"617\":7,\"619\":3,\"620\":9,\"621\":5,\"623\":1,\"635\":2,\"638\":2,\"639\":4,\"642\":1,\"650\":1,\"654\":2,\"656\":1,\"658\":4,\"659\":2,\"661\":5,\"662\":3,\"663\":9,\"664\":4,\"665\":17,\"666\":1,\"669\":2,\"670\":8,\"671\":40,\"672\":7,\"673\":3,\"675\":9,\"676\":21,\"692\":3,\"693\":1,\"694\":1,\"696\":2,\"697\":1,\"698\":2,\"709\":1,\"712\":1,\"713\":8,\"714\":5,\"724\":1,\"726\":1,\"730\":1,\"732\":2,\"733\":4,\"734\":5,\"735\":11,\"744\":1,\"755\":9,\"756\":1,\"757\":6,\"758\":3,\"760\":4,\"762\":6,\"766\":4,\"769\":4,\"800\":1,\"801\":4,\"806\":1,\"810\":3,\"816\":1,\"817\":1,\"825\":3,\"826\":1,\"827\":1,\"828\":1,\"829\":2,\"830\":1,\"855\":1,\"953\":1,\"958\":3,\"959\":1}}],[\"呢\",{\"0\":{\"16\":1,\"17\":1},\"1\":{\"30\":1,\"81\":1,\"89\":1,\"137\":1,\"419\":1,\"530\":1,\"717\":1,\"958\":1}}],[\"次序\",{\"1\":{\"818\":1}}],[\"次数\",{\"1\":{\"38\":1,\"137\":6,\"261\":1,\"380\":1,\"399\":1,\"558\":2,\"835\":1,\"908\":1}}],[\"次\",{\"0\":{\"143\":1},\"1\":{\"15\":1,\"17\":3,\"20\":3,\"137\":1,\"528\":1,\"730\":1,\"745\":1,\"907\":1,\"909\":1,\"940\":1}}],[\"默认设置\",{\"1\":{\"845\":1}}],[\"默认值\",{\"1\":{\"451\":1,\"594\":3,\"595\":11,\"623\":1,\"721\":8}}],[\"默认\",{\"0\":{\"593\":1,\"721\":1},\"1\":{\"15\":1,\"165\":1,\"184\":1,\"396\":1,\"411\":1,\"469\":2,\"484\":3,\"563\":1,\"570\":1,\"577\":2,\"594\":2,\"595\":4,\"598\":1,\"605\":1,\"611\":2,\"644\":1,\"703\":1,\"707\":1,\"714\":1,\"720\":5,\"721\":6,\"724\":1,\"726\":1,\"730\":2,\"745\":1,\"749\":1,\"781\":1,\"793\":4,\"837\":1,\"848\":1}}],[\"回事\",{\"1\":{\"590\":1,\"862\":1}}],[\"回表\",{\"0\":{\"464\":1},\"1\":{\"463\":1,\"464\":2}}],[\"回答\",{\"1\":{\"273\":1}}],[\"回合\",{\"1\":{\"261\":1}}],[\"回点\",{\"1\":{\"246\":1}}],[\"回归\",{\"1\":{\"237\":1,\"277\":1,\"314\":4,\"316\":2,\"320\":1,\"344\":1,\"863\":1,\"910\":3}}],[\"回车\",{\"1\":{\"175\":2}}],[\"回车符\",{\"1\":{\"174\":2}}],[\"回文\",{\"0\":{\"118\":1},\"1\":{\"118\":1}}],[\"回顾\",{\"1\":{\"86\":1,\"348\":1,\"355\":1,\"697\":1,\"766\":1}}],[\"回到\",{\"1\":{\"85\":1,\"181\":2,\"191\":1,\"357\":1,\"530\":1,\"938\":1,\"951\":1}}],[\"回溯\",{\"0\":{\"110\":1},\"1\":{\"67\":1,\"82\":2,\"89\":3,\"110\":6,\"122\":1,\"128\":2}}],[\"回调\",{\"1\":{\"38\":1}}],[\"回\",{\"1\":{\"15\":1,\"244\":1,\"246\":1,\"298\":1,\"311\":1,\"465\":1}}],[\"回收\",{\"1\":{\"8\":1}}],[\"返回值\",{\"0\":{\"587\":1},\"1\":{\"70\":2,\"72\":1,\"85\":8,\"89\":1,\"544\":1,\"559\":1,\"566\":1,\"583\":2,\"584\":5,\"587\":4,\"601\":1,\"621\":1,\"638\":1,\"675\":1,\"689\":2,\"714\":1,\"717\":1,\"720\":1,\"729\":3,\"735\":2,\"769\":1,\"781\":2,\"793\":1,\"828\":1,\"830\":1}}],[\"返回\",{\"0\":{\"274\":1},\"1\":{\"15\":1,\"16\":2,\"23\":2,\"24\":2,\"25\":1,\"30\":7,\"31\":1,\"38\":3,\"40\":1,\"43\":1,\"46\":1,\"70\":1,\"71\":3,\"72\":2,\"81\":2,\"82\":1,\"85\":2,\"90\":3,\"94\":2,\"96\":1,\"97\":8,\"98\":1,\"103\":2,\"104\":1,\"106\":4,\"107\":1,\"113\":2,\"122\":1,\"128\":1,\"137\":3,\"138\":1,\"152\":1,\"457\":1,\"459\":1,\"460\":2,\"461\":3,\"469\":1,\"471\":2,\"476\":2,\"534\":2,\"539\":1,\"540\":2,\"541\":6,\"542\":4,\"544\":5,\"545\":8,\"556\":1,\"557\":3,\"558\":1,\"559\":6,\"561\":4,\"562\":1,\"568\":2,\"570\":2,\"571\":1,\"609\":1,\"675\":2,\"686\":1,\"712\":6,\"713\":1,\"714\":2,\"717\":1,\"722\":1,\"724\":1,\"729\":1,\"781\":1,\"793\":3,\"826\":1,\"830\":1,\"833\":1,\"848\":3}}],[\"返\",{\"1\":{\"15\":1}}],[\"处罚\",{\"1\":{\"887\":1}}],[\"处时\",{\"1\":{\"729\":1}}],[\"处置\",{\"0\":{\"554\":1}}],[\"处在\",{\"1\":{\"128\":1}}],[\"处\",{\"1\":{\"126\":2,\"222\":1,\"332\":1,\"449\":1,\"541\":1,\"729\":1,\"818\":1}}],[\"处于\",{\"1\":{\"15\":1,\"38\":1,\"186\":1,\"229\":1}}],[\"处理结果\",{\"1\":{\"110\":1}}],[\"处理完毕\",{\"1\":{\"43\":1}}],[\"处理过程\",{\"1\":{\"39\":1}}],[\"处理单元\",{\"1\":{\"31\":1,\"33\":1}}],[\"处理函数\",{\"0\":{\"686\":1},\"1\":{\"8\":1,\"686\":1,\"698\":1}}],[\"处理\",{\"0\":{\"19\":1,\"45\":1,\"46\":1},\"1\":{\"3\":3,\"8\":3,\"10\":1,\"13\":2,\"17\":1,\"19\":1,\"20\":2,\"29\":2,\"30\":2,\"31\":5,\"32\":2,\"34\":3,\"35\":2,\"38\":1,\"39\":9,\"40\":1,\"41\":2,\"43\":4,\"44\":4,\"45\":1,\"46\":1,\"49\":1,\"64\":2,\"70\":2,\"77\":1,\"85\":2,\"89\":1,\"95\":1,\"100\":1,\"103\":1,\"110\":1,\"193\":2,\"201\":1,\"218\":1,\"222\":1,\"226\":1,\"228\":2,\"229\":2,\"245\":1,\"246\":5,\"276\":1,\"315\":4,\"317\":1,\"319\":5,\"320\":1,\"372\":1,\"395\":1,\"398\":2,\"436\":1,\"437\":1,\"476\":5,\"492\":2,\"599\":1,\"644\":1,\"682\":1,\"690\":1,\"698\":1,\"701\":1,\"707\":1,\"745\":1,\"755\":1,\"770\":1,\"781\":2,\"789\":2,\"798\":1,\"810\":3,\"817\":1,\"829\":1,\"830\":1,\"882\":1,\"904\":4,\"953\":1}}],[\"直通\",{\"1\":{\"392\":1}}],[\"直通式\",{\"1\":{\"392\":1}}],[\"直观\",{\"1\":{\"354\":1,\"451\":1,\"527\":1,\"762\":2,\"785\":1,\"788\":1,\"938\":1,\"939\":1}}],[\"直至\",{\"1\":{\"39\":1}}],[\"直译\",{\"1\":{\"22\":1,\"546\":1}}],[\"直到\",{\"1\":{\"17\":1,\"32\":1,\"51\":1,\"107\":1,\"137\":3,\"227\":1,\"529\":1,\"689\":1,\"698\":1,\"781\":2,\"825\":1,\"827\":1,\"828\":2,\"829\":1,\"830\":1,\"864\":1,\"906\":1,\"922\":1}}],[\"直\",{\"1\":{\"15\":2,\"17\":1}}],[\"直接存取\",{\"1\":{\"663\":1}}],[\"直接\",{\"0\":{\"855\":1},\"1\":{\"5\":1,\"8\":1,\"13\":1,\"35\":1,\"37\":3,\"38\":1,\"49\":1,\"53\":1,\"71\":3,\"72\":1,\"91\":1,\"97\":8,\"98\":1,\"100\":1,\"104\":1,\"106\":1,\"107\":1,\"165\":2,\"172\":1,\"199\":2,\"237\":1,\"244\":1,\"245\":1,\"246\":1,\"247\":1,\"248\":2,\"259\":1,\"268\":1,\"270\":2,\"273\":1,\"277\":2,\"288\":1,\"291\":1,\"300\":1,\"312\":2,\"320\":1,\"349\":2,\"379\":1,\"380\":1,\"392\":1,\"394\":1,\"409\":1,\"419\":2,\"451\":2,\"469\":1,\"480\":1,\"502\":1,\"530\":1,\"545\":1,\"546\":1,\"573\":1,\"592\":1,\"599\":1,\"612\":3,\"640\":1,\"663\":1,\"670\":1,\"671\":2,\"673\":1,\"688\":1,\"689\":1,\"693\":1,\"695\":4,\"696\":1,\"704\":1,\"730\":2,\"735\":2,\"739\":1,\"745\":3,\"755\":1,\"769\":1,\"777\":1,\"785\":3,\"804\":2,\"827\":1,\"830\":1,\"833\":2,\"855\":2,\"857\":1,\"858\":2,\"875\":1,\"901\":2,\"912\":1,\"913\":1,\"922\":2,\"929\":1,\"938\":1,\"939\":2,\"951\":1,\"959\":1}}],[\"只为\",{\"1\":{\"730\":1}}],[\"只读\",{\"1\":{\"661\":1}}],[\"只赋\",{\"1\":{\"612\":1}}],[\"只是\",{\"1\":{\"175\":1,\"270\":1,\"379\":1,\"469\":1,\"476\":1,\"609\":1,\"616\":1,\"617\":1,\"639\":1,\"670\":1,\"671\":1,\"708\":1,\"726\":1,\"738\":1,\"790\":1,\"807\":1,\"945\":1}}],[\"只想\",{\"1\":{\"168\":1}}],[\"只加\",{\"1\":{\"104\":1}}],[\"只用\",{\"1\":{\"91\":1,\"102\":1,\"717\":1,\"745\":1}}],[\"只不过\",{\"1\":{\"72\":1,\"545\":2}}],[\"只能\",{\"1\":{\"23\":1,\"26\":1,\"38\":1,\"172\":1,\"201\":1,\"451\":1,\"544\":1,\"546\":1,\"570\":1,\"583\":1,\"596\":1,\"597\":2,\"617\":2,\"621\":1,\"647\":1,\"654\":1,\"657\":1,\"665\":2,\"671\":3,\"683\":1,\"688\":1,\"689\":1,\"703\":1,\"709\":1,\"713\":1,\"714\":1,\"717\":1,\"720\":2,\"721\":2,\"722\":1,\"724\":1,\"741\":1,\"744\":1,\"755\":4,\"769\":2,\"776\":1,\"781\":1,\"789\":1,\"810\":1,\"818\":1,\"833\":2,\"857\":1,\"863\":1,\"938\":2,\"940\":2}}],[\"只\",{\"1\":{\"15\":1,\"23\":1,\"30\":2,\"31\":2,\"38\":1,\"39\":1,\"55\":1,\"85\":2,\"94\":1,\"113\":1,\"148\":1,\"153\":1,\"210\":1,\"229\":1,\"246\":1,\"276\":1,\"290\":1,\"295\":1,\"304\":1,\"312\":1,\"322\":1,\"354\":1,\"357\":1,\"384\":2,\"460\":1,\"469\":1,\"471\":1,\"527\":1,\"559\":1,\"563\":1,\"590\":1,\"595\":3,\"599\":2,\"600\":1,\"606\":1,\"612\":1,\"617\":1,\"620\":5,\"682\":1,\"685\":1,\"689\":1,\"696\":1,\"701\":2,\"708\":1,\"721\":2,\"722\":1,\"724\":1,\"744\":2,\"748\":1,\"769\":1,\"770\":1,\"814\":1,\"817\":1,\"830\":1,\"858\":1,\"860\":2,\"922\":1,\"923\":1,\"941\":1,\"945\":1,\"947\":1}}],[\"只会拉低\",{\"1\":{\"153\":1}}],[\"只会\",{\"1\":{\"15\":1,\"17\":1,\"153\":1,\"559\":1,\"957\":1}}],[\"只要\",{\"1\":{\"15\":2,\"16\":2,\"17\":1,\"110\":1,\"126\":1,\"436\":1,\"485\":1,\"563\":1,\"598\":1,\"599\":1,\"714\":1,\"744\":1,\"769\":1,\"949\":1}}],[\"只有\",{\"1\":{\"5\":1,\"15\":2,\"23\":1,\"36\":1,\"38\":2,\"75\":1,\"85\":1,\"86\":1,\"103\":1,\"210\":1,\"254\":1,\"304\":1,\"436\":1,\"465\":1,\"502\":1,\"527\":1,\"530\":1,\"534\":1,\"601\":1,\"606\":2,\"612\":1,\"621\":1,\"707\":1,\"722\":1,\"726\":1,\"730\":1,\"752\":1,\"769\":1,\"816\":1,\"929\":1}}],[\"触发\",{\"0\":{\"16\":1},\"1\":{\"15\":2,\"17\":1,\"19\":1,\"20\":5,\"38\":1,\"39\":2,\"833\":2}}],[\"什么样\",{\"1\":{\"577\":1}}],[\"什么\",{\"0\":{\"15\":2,\"16\":1,\"475\":1},\"1\":{\"30\":3,\"70\":1,\"85\":2,\"126\":1,\"169\":1,\"175\":2,\"208\":1,\"273\":1,\"303\":1,\"312\":1,\"416\":1,\"456\":2,\"464\":1,\"465\":1,\"476\":1,\"527\":1,\"559\":1,\"563\":1,\"590\":1,\"612\":1,\"666\":2,\"668\":1,\"686\":1,\"721\":1,\"722\":1,\"769\":1,\"775\":1,\"816\":2,\"837\":1}}],[\"很少\",{\"1\":{\"769\":1}}],[\"很忙\",{\"1\":{\"476\":1}}],[\"很难\",{\"1\":{\"370\":1,\"938\":1,\"951\":1,\"959\":1}}],[\"很小\",{\"1\":{\"246\":1,\"599\":1,\"707\":1}}],[\"很强\",{\"1\":{\"245\":1,\"299\":1,\"436\":1,\"955\":1}}],[\"很多\",{\"1\":{\"54\":2,\"69\":2,\"379\":1,\"398\":1,\"428\":1,\"540\":1,\"613\":1,\"959\":1}}],[\"很大\",{\"1\":{\"53\":1,\"242\":1,\"406\":1,\"436\":1,\"613\":1,\"887\":1,\"912\":1,\"922\":1,\"940\":1}}],[\"很\",{\"1\":{\"13\":2,\"19\":1,\"126\":1,\"191\":1,\"218\":1,\"220\":1,\"233\":1,\"246\":1,\"257\":1,\"259\":1,\"270\":1,\"312\":1,\"334\":1,\"344\":1,\"348\":1,\"355\":1,\"369\":1,\"379\":1,\"399\":1,\"485\":1,\"527\":2,\"546\":1,\"599\":1,\"707\":1,\"860\":1,\"863\":2,\"875\":4,\"938\":1,\"941\":1,\"957\":1}}],[\"优雅\",{\"1\":{\"935\":1}}],[\"优于\",{\"1\":{\"262\":1,\"910\":1}}],[\"优势\",{\"1\":{\"242\":1,\"294\":1,\"357\":1,\"922\":2}}],[\"优异\",{\"1\":{\"229\":1,\"325\":1}}],[\"优越性\",{\"1\":{\"194\":1}}],[\"优先级\",{\"0\":{\"812\":1,\"813\":1},\"1\":{\"307\":1,\"308\":2,\"654\":2,\"666\":1,\"760\":2,\"799\":1,\"805\":1,\"807\":2,\"809\":4,\"810\":1,\"813\":3}}],[\"优先\",{\"1\":{\"72\":2,\"73\":2,\"75\":2,\"126\":1,\"308\":1,\"578\":1,\"654\":1}}],[\"优化\",{\"0\":{\"18\":1,\"20\":1,\"333\":1,\"337\":1},\"1\":{\"112\":1,\"211\":1,\"228\":1,\"277\":1,\"294\":3,\"327\":1,\"337\":4,\"349\":6,\"390\":1,\"392\":1,\"446\":1,\"613\":1,\"941\":1,\"957\":1}}],[\"优点\",{\"1\":{\"13\":1,\"301\":1,\"451\":1,\"787\":1,\"788\":1,\"938\":1}}],[\"优缺点\",{\"1\":{\"13\":1,\"193\":1}}],[\"高层\",{\"1\":{\"875\":1}}],[\"高层次\",{\"1\":{\"228\":1,\"257\":1}}],[\"高品质\",{\"1\":{\"875\":1}}],[\"高位\",{\"1\":{\"811\":1}}],[\"高时\",{\"1\":{\"707\":1}}],[\"高于\",{\"1\":{\"539\":1,\"760\":1,\"859\":1}}],[\"高到\",{\"1\":{\"417\":1}}],[\"高不可攀\",{\"1\":{\"379\":1}}],[\"高出\",{\"1\":{\"370\":2}}],[\"高容量\",{\"1\":{\"262\":1}}],[\"高维\",{\"1\":{\"246\":1,\"859\":1,\"925\":2,\"935\":1,\"957\":1}}],[\"高质量\",{\"1\":{\"234\":1,\"257\":1,\"952\":1}}],[\"高斯分布\",{\"1\":{\"867\":1,\"869\":1,\"906\":2,\"959\":2}}],[\"高斯\",{\"0\":{\"834\":1},\"1\":{\"226\":2,\"228\":1,\"832\":1,\"834\":1,\"904\":1,\"906\":3,\"907\":1,\"908\":1,\"909\":1,\"949\":2}}],[\"高分辨率\",{\"1\":{\"218\":1,\"246\":1,\"370\":1,\"907\":1,\"909\":1,\"922\":1,\"935\":1,\"961\":1}}],[\"高频\",{\"0\":{\"108\":1},\"1\":{\"910\":1,\"925\":1,\"938\":2,\"939\":1,\"951\":2}}],[\"高度\",{\"1\":{\"81\":5,\"234\":1,\"355\":1,\"436\":1,\"926\":1}}],[\"高精度\",{\"1\":{\"58\":1,\"864\":1}}],[\"高速运行\",{\"1\":{\"237\":1}}],[\"高速\",{\"1\":{\"58\":1}}],[\"高级\",{\"0\":{\"787\":1},\"1\":{\"53\":1,\"198\":1,\"222\":1,\"257\":1,\"527\":1,\"786\":1,\"893\":1}}],[\"高效性\",{\"1\":{\"372\":1}}],[\"高效\",{\"1\":{\"38\":1,\"44\":1,\"199\":1,\"218\":1,\"245\":1,\"246\":2,\"301\":1,\"370\":2,\"372\":1,\"384\":1,\"394\":1,\"492\":1,\"769\":1,\"922\":1,\"924\":1}}],[\"高\",{\"1\":{\"13\":2,\"31\":1,\"61\":1,\"62\":2,\"63\":1,\"64\":1,\"65\":2,\"226\":1,\"227\":1,\"233\":1,\"234\":1,\"246\":2,\"254\":1,\"284\":1,\"305\":1,\"355\":2,\"356\":1,\"386\":1,\"451\":1,\"542\":1,\"718\":2,\"760\":1,\"762\":1,\"799\":1,\"859\":1,\"862\":1,\"863\":1,\"875\":2,\"910\":1,\"911\":1,\"924\":1,\"928\":1,\"959\":1}}],[\"高性能\",{\"0\":{\"496\":1},\"1\":{\"13\":2,\"19\":1,\"55\":1,\"211\":1,\"499\":1}}],[\"更正\",{\"1\":{\"940\":2}}],[\"更大\",{\"1\":{\"922\":1}}],[\"更多\",{\"1\":{\"769\":1}}],[\"更多地\",{\"1\":{\"312\":1}}],[\"更快\",{\"0\":{\"446\":1}}],[\"更为\",{\"1\":{\"372\":2,\"940\":1}}],[\"更优\",{\"1\":{\"370\":1,\"372\":1}}],[\"更难\",{\"1\":{\"355\":1}}],[\"更强\",{\"1\":{\"312\":1,\"355\":1,\"372\":1}}],[\"更少\",{\"1\":{\"301\":1}}],[\"更高\",{\"1\":{\"257\":1,\"312\":1,\"809\":2,\"891\":1}}],[\"更具\",{\"1\":{\"250\":1}}],[\"更改\",{\"1\":{\"55\":1,\"160\":1,\"168\":1,\"191\":1,\"574\":1,\"769\":1,\"945\":1}}],[\"更好\",{\"1\":{\"50\":1,\"52\":1,\"273\":1,\"299\":1,\"314\":1,\"315\":1,\"316\":1,\"319\":1,\"320\":2,\"355\":3,\"357\":1,\"386\":1,\"419\":1,\"600\":1,\"959\":1}}],[\"更进一步\",{\"1\":{\"43\":1}}],[\"更加\",{\"1\":{\"27\":1,\"226\":1,\"261\":1,\"337\":2,\"347\":1,\"390\":1,\"398\":2,\"400\":1,\"750\":1}}],[\"更新\",{\"0\":{\"168\":1},\"1\":{\"20\":1,\"52\":1,\"97\":2,\"103\":1,\"137\":5,\"138\":1,\"139\":1,\"168\":1,\"191\":1,\"225\":1,\"226\":1,\"276\":1,\"282\":2,\"283\":1,\"332\":2,\"395\":2,\"399\":8,\"446\":1,\"793\":1,\"940\":2,\"956\":1}}],[\"更\",{\"1\":{\"13\":1,\"27\":1,\"32\":1,\"53\":2,\"69\":1,\"83\":1,\"94\":1,\"112\":1,\"126\":1,\"137\":1,\"227\":1,\"228\":1,\"234\":2,\"245\":1,\"250\":2,\"257\":1,\"261\":1,\"277\":2,\"288\":1,\"301\":1,\"312\":3,\"315\":1,\"320\":1,\"355\":6,\"369\":2,\"372\":1,\"373\":1,\"379\":1,\"390\":1,\"391\":1,\"399\":1,\"419\":1,\"541\":1,\"621\":1,\"704\":1,\"859\":1,\"863\":2,\"893\":2,\"910\":1,\"916\":1,\"922\":4,\"923\":1,\"924\":1,\"925\":1,\"935\":3,\"940\":2,\"962\":2}}],[\"因该\",{\"1\":{\"685\":1}}],[\"因子\",{\"1\":{\"372\":5,\"436\":1,\"910\":1}}],[\"因而\",{\"1\":{\"290\":1}}],[\"因素\",{\"1\":{\"246\":1,\"257\":1}}],[\"因其\",{\"1\":{\"229\":1}}],[\"因此\",{\"1\":{\"13\":1,\"37\":1,\"38\":1,\"51\":2,\"53\":3,\"126\":1,\"137\":1,\"192\":1,\"195\":1,\"198\":1,\"201\":1,\"202\":1,\"220\":2,\"228\":1,\"246\":1,\"254\":1,\"282\":2,\"284\":1,\"290\":1,\"303\":1,\"308\":1,\"312\":1,\"332\":2,\"344\":1,\"349\":1,\"350\":1,\"354\":1,\"355\":1,\"357\":1,\"366\":2,\"370\":1,\"391\":1,\"394\":1,\"398\":1,\"415\":2,\"419\":1,\"423\":1,\"451\":1,\"480\":1,\"546\":1,\"572\":1,\"586\":1,\"595\":1,\"611\":1,\"612\":2,\"676\":2,\"689\":1,\"710\":1,\"722\":2,\"729\":1,\"738\":1,\"748\":1,\"750\":1,\"769\":2,\"770\":2,\"781\":2,\"785\":1,\"789\":1,\"793\":1,\"859\":1,\"863\":1,\"904\":1,\"935\":1,\"953\":1,\"955\":1,\"957\":1,\"958\":1,\"959\":2}}],[\"因为\",{\"1\":{\"8\":1,\"10\":1,\"17\":1,\"22\":1,\"23\":1,\"55\":1,\"85\":1,\"88\":1,\"126\":1,\"137\":1,\"139\":3,\"153\":3,\"170\":1,\"174\":1,\"208\":1,\"220\":1,\"237\":1,\"245\":1,\"246\":1,\"250\":1,\"254\":1,\"262\":1,\"270\":1,\"282\":1,\"290\":1,\"291\":1,\"306\":1,\"308\":1,\"334\":1,\"348\":1,\"354\":1,\"358\":1,\"379\":4,\"380\":1,\"386\":1,\"395\":1,\"399\":1,\"419\":1,\"485\":2,\"500\":1,\"530\":1,\"539\":1,\"572\":1,\"596\":1,\"605\":1,\"606\":2,\"695\":1,\"707\":1,\"715\":1,\"734\":1,\"735\":1,\"739\":1,\"745\":2,\"769\":1,\"798\":1,\"827\":1,\"869\":2,\"882\":1,\"910\":1,\"922\":1,\"957\":1}}],[\"里的\",{\"1\":{\"583\":1}}],[\"里程碑\",{\"1\":{\"250\":1}}],[\"里面\",{\"1\":{\"110\":1,\"121\":2,\"122\":1,\"138\":1,\"348\":2,\"379\":3,\"527\":1,\"577\":1,\"855\":1}}],[\"里建\",{\"1\":{\"38\":1}}],[\"里\",{\"1\":{\"13\":2,\"38\":1,\"70\":1,\"85\":1,\"107\":2,\"110\":1,\"125\":1,\"175\":1,\"379\":1,\"380\":1,\"577\":1,\"863\":1,\"864\":2,\"865\":1,\"935\":1,\"938\":3,\"939\":1,\"940\":4,\"944\":1,\"951\":1}}],[\"使人\",{\"1\":{\"635\":1}}],[\"使主\",{\"1\":{\"587\":1}}],[\"使\",{\"1\":{\"27\":1,\"30\":1,\"53\":1,\"128\":1,\"226\":1,\"294\":1,\"301\":1,\"303\":1,\"349\":1,\"392\":1,\"595\":1,\"597\":1,\"601\":1,\"671\":2,\"672\":1,\"690\":1,\"698\":1,\"709\":1,\"735\":4,\"744\":1,\"750\":1,\"769\":2,\"793\":1,\"800\":1,\"825\":2,\"826\":4,\"827\":1,\"828\":4,\"829\":8,\"830\":6,\"859\":1,\"862\":1,\"907\":1,\"939\":1,\"955\":1,\"957\":2}}],[\"使得\",{\"1\":{\"13\":1,\"27\":1,\"44\":1,\"69\":1,\"192\":1,\"218\":1,\"235\":1,\"248\":1,\"300\":1,\"303\":1,\"308\":1,\"320\":1,\"322\":1,\"348\":1,\"349\":3,\"355\":1,\"357\":1,\"369\":1,\"372\":1,\"390\":1,\"392\":1,\"417\":1,\"419\":1,\"484\":1,\"645\":1,\"718\":1,\"860\":1,\"903\":1,\"908\":1,\"940\":2,\"945\":1,\"959\":1}}],[\"使用者\",{\"1\":{\"860\":1}}],[\"使用\",{\"0\":{\"8\":1,\"159\":1,\"165\":1,\"176\":1,\"183\":1,\"462\":1,\"471\":1,\"551\":1,\"552\":1,\"554\":1,\"658\":1,\"739\":1,\"835\":1,\"840\":1},\"1\":{\"3\":3,\"4\":3,\"5\":3,\"10\":9,\"11\":3,\"13\":3,\"19\":1,\"20\":1,\"22\":1,\"27\":2,\"28\":2,\"32\":2,\"38\":3,\"39\":1,\"41\":4,\"42\":1,\"43\":1,\"50\":1,\"71\":1,\"72\":2,\"81\":1,\"82\":1,\"87\":1,\"96\":1,\"97\":1,\"100\":1,\"103\":2,\"107\":1,\"113\":2,\"114\":1,\"116\":2,\"122\":1,\"123\":3,\"126\":3,\"146\":1,\"164\":1,\"170\":1,\"182\":1,\"186\":1,\"192\":2,\"196\":1,\"198\":3,\"202\":3,\"205\":1,\"208\":1,\"218\":2,\"220\":5,\"222\":6,\"225\":1,\"226\":1,\"227\":7,\"228\":1,\"237\":1,\"245\":5,\"246\":3,\"247\":1,\"248\":2,\"259\":1,\"260\":1,\"262\":5,\"263\":3,\"268\":2,\"271\":1,\"277\":1,\"280\":1,\"281\":1,\"282\":1,\"283\":2,\"284\":1,\"288\":1,\"290\":2,\"293\":1,\"294\":1,\"295\":1,\"299\":1,\"300\":1,\"308\":1,\"311\":2,\"312\":2,\"314\":2,\"316\":1,\"317\":1,\"318\":1,\"319\":3,\"323\":3,\"329\":1,\"331\":1,\"337\":2,\"354\":1,\"355\":1,\"359\":1,\"372\":1,\"379\":1,\"380\":6,\"392\":2,\"398\":1,\"405\":2,\"408\":2,\"410\":2,\"417\":1,\"419\":1,\"425\":1,\"449\":1,\"451\":2,\"456\":1,\"459\":2,\"460\":2,\"461\":1,\"462\":2,\"467\":1,\"468\":1,\"469\":2,\"471\":2,\"476\":2,\"492\":1,\"502\":3,\"527\":1,\"530\":2,\"531\":2,\"532\":1,\"534\":2,\"535\":1,\"536\":1,\"540\":1,\"544\":3,\"548\":1,\"559\":2,\"560\":1,\"563\":3,\"570\":2,\"573\":2,\"577\":1,\"584\":1,\"597\":3,\"598\":4,\"599\":3,\"605\":1,\"606\":2,\"609\":1,\"612\":1,\"613\":2,\"615\":2,\"617\":1,\"620\":3,\"621\":2,\"623\":1,\"624\":1,\"639\":1,\"657\":1,\"658\":1,\"663\":1,\"666\":1,\"667\":1,\"671\":1,\"676\":1,\"689\":1,\"692\":2,\"694\":1,\"698\":1,\"704\":1,\"707\":1,\"712\":1,\"720\":1,\"722\":1,\"724\":1,\"729\":1,\"736\":1,\"740\":1,\"741\":1,\"744\":1,\"745\":1,\"757\":3,\"758\":1,\"769\":7,\"778\":1,\"800\":2,\"806\":1,\"810\":1,\"826\":1,\"832\":1,\"834\":1,\"841\":1,\"852\":2,\"855\":1,\"858\":3,\"859\":1,\"864\":1,\"865\":1,\"882\":1,\"883\":1,\"890\":1,\"904\":1,\"905\":1,\"922\":2,\"935\":1,\"941\":1,\"944\":2,\"947\":1,\"953\":1,\"961\":6}}],[\"本来\",{\"1\":{\"724\":1,\"858\":1,\"944\":1}}],[\"本意\",{\"1\":{\"654\":1,\"961\":1}}],[\"本例\",{\"1\":{\"606\":2,\"738\":1,\"825\":1}}],[\"本类\",{\"1\":{\"525\":1,\"604\":2,\"606\":2,\"703\":1,\"726\":1,\"736\":1,\"745\":4}}],[\"本书\",{\"1\":{\"293\":1}}],[\"本质属性\",{\"1\":{\"527\":1}}],[\"本质\",{\"1\":{\"246\":1,\"303\":1,\"344\":3,\"596\":1,\"598\":1,\"701\":1,\"854\":1,\"865\":1,\"895\":1,\"935\":1,\"941\":1}}],[\"本题\",{\"1\":{\"85\":1,\"122\":1}}],[\"本文\",{\"1\":{\"85\":1,\"174\":1,\"175\":1,\"192\":1,\"199\":1,\"225\":1,\"257\":1,\"264\":1,\"288\":1,\"304\":2,\"312\":2,\"325\":1,\"355\":1,\"379\":1,\"386\":1,\"390\":1,\"392\":1,\"395\":1,\"398\":3,\"399\":3,\"811\":1,\"841\":1,\"845\":1,\"875\":1,\"887\":1,\"952\":1}}],[\"本篇\",{\"1\":{\"46\":1}}],[\"本\",{\"1\":{\"43\":1,\"110\":1,\"596\":1,\"597\":1,\"598\":2,\"614\":1,\"616\":2,\"617\":4,\"620\":2,\"621\":1,\"650\":1,\"659\":1,\"692\":1,\"705\":1,\"713\":1,\"722\":1,\"745\":1,\"816\":1,\"826\":1,\"862\":1}}],[\"本地化\",{\"1\":{\"226\":1}}],[\"本地\",{\"0\":{\"168\":1},\"1\":{\"13\":1,\"29\":1,\"168\":3,\"370\":1,\"398\":1,\"480\":2}}],[\"本身\",{\"1\":{\"5\":1,\"259\":1,\"270\":1,\"312\":1,\"342\":1,\"399\":1,\"502\":1,\"592\":1,\"599\":1,\"633\":1,\"696\":1,\"750\":1,\"790\":1}}],[\"支持\",{\"1\":{\"13\":6,\"15\":2,\"23\":1,\"38\":1,\"41\":1,\"390\":1,\"396\":1,\"404\":1,\"476\":1,\"527\":1,\"537\":1,\"570\":1,\"624\":1,\"791\":3,\"825\":1,\"889\":1,\"935\":1}}],[\"接触\",{\"1\":{\"794\":1}}],[\"接字\",{\"1\":{\"492\":1}}],[\"接上\",{\"1\":{\"380\":1}}],[\"接下来\",{\"1\":{\"379\":1,\"833\":1}}],[\"接近\",{\"1\":{\"268\":1,\"292\":1,\"312\":1,\"348\":1,\"349\":4,\"357\":1,\"940\":2}}],[\"接着\",{\"1\":{\"175\":1,\"793\":1,\"826\":1}}],[\"接入\",{\"1\":{\"98\":2}}],[\"接管\",{\"1\":{\"34\":1}}],[\"接受\",{\"1\":{\"31\":2,\"195\":1,\"586\":1,\"701\":1,\"755\":1}}],[\"接口\",{\"1\":{\"13\":3,\"30\":1,\"563\":2,\"701\":2,\"705\":1,\"709\":1}}],[\"接收数据\",{\"1\":{\"34\":1}}],[\"接收\",{\"1\":{\"13\":1,\"19\":1,\"34\":1,\"43\":1,\"45\":1,\"46\":1,\"750\":5,\"793\":1}}],[\"由下\",{\"1\":{\"799\":1}}],[\"由类\",{\"1\":{\"730\":1}}],[\"由小到大\",{\"1\":{\"695\":1}}],[\"由主\",{\"1\":{\"583\":1}}],[\"由近\",{\"1\":{\"290\":1}}],[\"由深\",{\"1\":{\"290\":1}}],[\"由此可见\",{\"1\":{\"371\":1}}],[\"由此\",{\"1\":{\"52\":1,\"54\":1,\"55\":1,\"290\":1,\"668\":1,\"714\":1,\"745\":1,\"961\":1}}],[\"由于\",{\"1\":{\"32\":1,\"50\":1,\"51\":1,\"55\":1,\"69\":1,\"202\":1,\"218\":1,\"220\":1,\"221\":1,\"228\":1,\"257\":1,\"293\":1,\"294\":1,\"299\":1,\"320\":1,\"322\":1,\"332\":1,\"337\":1,\"342\":1,\"344\":1,\"355\":1,\"370\":1,\"395\":1,\"398\":1,\"437\":1,\"485\":1,\"559\":1,\"605\":1,\"606\":1,\"645\":1,\"677\":1,\"689\":1,\"707\":1,\"718\":1,\"726\":1,\"729\":1,\"738\":1,\"770\":2,\"781\":1,\"787\":1,\"789\":2,\"873\":1,\"882\":1,\"928\":1,\"952\":1,\"953\":1,\"955\":1}}],[\"由空\",{\"1\":{\"16\":1}}],[\"由\",{\"1\":{\"13\":2,\"15\":2,\"16\":2,\"29\":1,\"30\":1,\"31\":2,\"34\":1,\"41\":2,\"42\":2,\"137\":1,\"139\":1,\"196\":1,\"198\":2,\"201\":2,\"220\":2,\"223\":2,\"225\":1,\"226\":2,\"270\":1,\"277\":1,\"290\":1,\"308\":2,\"310\":2,\"322\":2,\"327\":1,\"332\":1,\"371\":1,\"374\":1,\"375\":2,\"380\":3,\"386\":1,\"398\":2,\"411\":2,\"413\":3,\"467\":2,\"469\":1,\"528\":1,\"572\":1,\"583\":1,\"587\":1,\"597\":1,\"644\":1,\"657\":1,\"662\":2,\"675\":1,\"684\":1,\"689\":1,\"701\":3,\"713\":1,\"714\":1,\"717\":1,\"730\":1,\"769\":1,\"789\":2,\"791\":1,\"793\":1,\"827\":1,\"864\":2,\"892\":1,\"908\":1,\"923\":2,\"940\":1,\"958\":2,\"959\":3,\"961\":1,\"963\":1}}],[\"系数\",{\"1\":{\"255\":1,\"344\":1,\"868\":2,\"869\":1,\"917\":1}}],[\"系列\",{\"1\":{\"13\":1,\"370\":1,\"372\":1,\"889\":1}}],[\"系统对\",{\"1\":{\"13\":1,\"609\":2}}],[\"系统\",{\"0\":{\"4\":1,\"11\":1,\"492\":1},\"1\":{\"4\":3,\"5\":2,\"8\":2,\"11\":4,\"13\":1,\"28\":1,\"30\":1,\"34\":1,\"35\":1,\"170\":1,\"191\":1,\"492\":2,\"499\":1,\"502\":2,\"583\":1,\"584\":1,\"600\":1,\"601\":1,\"611\":1,\"649\":1,\"663\":2,\"677\":2,\"682\":1,\"684\":1,\"698\":1,\"701\":1,\"707\":1,\"713\":1,\"714\":1,\"717\":3,\"720\":1,\"726\":1,\"729\":1,\"739\":1,\"769\":2,\"775\":1,\"781\":2,\"833\":3}}],[\"ahn\",{\"1\":{\"887\":1}}],[\"a506df5756472e2ebaf9078affdde2c4f1502cd4\",{\"1\":{\"877\":1}}],[\"aug\",{\"1\":{\"876\":1}}],[\"autoencoder\",{\"0\":{\"928\":1},\"1\":{\"927\":1,\"928\":6}}],[\"autoencoders\",{\"1\":{\"272\":2}}],[\"autograd\",{\"1\":{\"840\":1}}],[\"autonomous\",{\"1\":{\"427\":2}}],[\"auto\",{\"0\":{\"611\":1},\"1\":{\"72\":3,\"74\":1,\"82\":2,\"90\":4,\"97\":4,\"104\":12,\"106\":1,\"143\":1,\"153\":1,\"312\":1,\"313\":1,\"314\":1,\"545\":1,\"559\":2,\"610\":1,\"611\":4,\"612\":1,\"837\":2,\"925\":1}}],[\"axt\",{\"1\":{\"869\":1}}],[\"ax\",{\"1\":{\"837\":2,\"838\":2}}],[\"axis\",{\"1\":{\"305\":6,\"834\":2,\"859\":4}}],[\"aided\",{\"1\":{\"894\":1}}],[\"ai\",{\"1\":{\"360\":1,\"859\":1}}],[\"aio\",{\"1\":{\"13\":2,\"30\":1}}],[\"ate\",{\"1\":{\"793\":2}}],[\"attn\",{\"1\":{\"877\":1,\"880\":1,\"881\":1,\"884\":2}}],[\"attn2\",{\"1\":{\"877\":2}}],[\"attn1\",{\"1\":{\"877\":2}}],[\"attribute\",{\"1\":{\"701\":1}}],[\"attend\",{\"1\":{\"876\":1}}],[\"attending\",{\"1\":{\"321\":1}}],[\"attention\",{\"0\":{\"50\":1,\"880\":1,\"881\":1,\"882\":1,\"883\":1,\"884\":1},\"1\":{\"50\":1,\"195\":1,\"201\":1,\"220\":2,\"380\":1,\"383\":3,\"863\":1,\"865\":1,\"877\":2,\"887\":1,\"929\":1,\"930\":1,\"935\":1,\"947\":1}}],[\"ats\",{\"1\":{\"390\":1}}],[\"at\",{\"1\":{\"344\":1,\"427\":1,\"541\":1,\"546\":1,\"574\":3,\"576\":1}}],[\"affinity\",{\"1\":{\"887\":2}}],[\"affinitynet\",{\"0\":{\"887\":1},\"1\":{\"887\":2}}],[\"af\",{\"1\":{\"884\":2}}],[\"after\",{\"1\":{\"309\":1}}],[\"afa\",{\"1\":{\"220\":1}}],[\"aml\",{\"1\":{\"868\":2}}],[\"american\",{\"1\":{\"689\":1}}],[\"among\",{\"1\":{\"372\":1,\"383\":1}}],[\"amotp\",{\"1\":{\"214\":1}}],[\"amota\",{\"1\":{\"214\":1}}],[\"ambiguity\",{\"1\":{\"305\":1}}],[\"ae\",{\"1\":{\"246\":1}}],[\"age\",{\"1\":{\"745\":2,\"749\":3,\"757\":1}}],[\"agent\",{\"1\":{\"41\":3}}],[\"aggregation\",{\"0\":{\"883\":1}}],[\"aggregate\",{\"1\":{\"399\":2}}],[\"aggressive\",{\"0\":{\"385\":1},\"1\":{\"385\":1}}],[\"agcn\",{\"1\":{\"226\":1}}],[\"a1\",{\"1\":{\"209\":1,\"509\":1,\"869\":2}}],[\"aware\",{\"1\":{\"200\":1,\"202\":1,\"889\":1}}],[\"astronaut\",{\"1\":{\"929\":1}}],[\"assert\",{\"0\":{\"833\":1},\"1\":{\"832\":1,\"833\":3}}],[\"assign\",{\"1\":{\"543\":4,\"574\":1}}],[\"ascii\",{\"0\":{\"781\":1},\"1\":{\"647\":2,\"648\":1,\"689\":1,\"781\":5,\"782\":1,\"785\":7,\"787\":2,\"793\":2,\"804\":1}}],[\"asc\",{\"1\":{\"469\":1}}],[\"asia\",{\"1\":{\"361\":1}}],[\"as\",{\"1\":{\"195\":3,\"309\":1,\"380\":1,\"422\":3,\"426\":2,\"696\":1,\"838\":3,\"840\":1,\"928\":1,\"942\":1}}],[\"aves\",{\"1\":{\"429\":1}}],[\"average\",{\"0\":{\"366\":1},\"1\":{\"309\":1,\"745\":5,\"891\":2}}],[\"averageoflevels\",{\"1\":{\"72\":1}}],[\"averaging\",{\"1\":{\"195\":1,\"873\":1}}],[\"available\",{\"1\":{\"188\":1,\"422\":1}}],[\"aaai\",{\"1\":{\"198\":1}}],[\"aaa\",{\"1\":{\"174\":1}}],[\"aa\",{\"1\":{\"137\":1,\"757\":1}}],[\"above\",{\"1\":{\"361\":1}}],[\"ablation\",{\"0\":{\"355\":1}}],[\"abab\",{\"1\":{\"138\":1}}],[\"abcabcbb\",{\"1\":{\"139\":1}}],[\"abc\",{\"1\":{\"114\":2,\"137\":1,\"138\":3,\"139\":1,\"649\":2}}],[\"ab\",{\"1\":{\"103\":1,\"138\":6,\"695\":1,\"869\":3}}],[\"abstract\",{\"0\":{\"327\":1,\"379\":1},\"1\":{\"905\":1}}],[\"absolute\",{\"1\":{\"322\":1}}],[\"abs\",{\"1\":{\"52\":1,\"81\":1,\"143\":2,\"212\":1,\"304\":2,\"360\":1,\"385\":1}}],[\"ad23d1ec9fa4bd8d77d02681df5cfa\",{\"1\":{\"950\":1}}],[\"ade20k\",{\"0\":{\"425\":1},\"1\":{\"425\":2}}],[\"adain\",{\"1\":{\"959\":2}}],[\"adavit\",{\"1\":{\"390\":1}}],[\"adapter\",{\"1\":{\"563\":1}}],[\"adaptis\",{\"1\":{\"402\":1}}],[\"adaptive\",{\"1\":{\"220\":1,\"361\":1,\"959\":2}}],[\"adaptation\",{\"1\":{\"52\":1}}],[\"adjacencies\",{\"1\":{\"309\":1}}],[\"adjacent\",{\"1\":{\"305\":1}}],[\"adjustment\",{\"1\":{\"220\":1,\"894\":2}}],[\"adopt\",{\"1\":{\"532\":2}}],[\"adopted\",{\"1\":{\"195\":1,\"383\":1}}],[\"adobecodebanc\",{\"1\":{\"137\":1}}],[\"addr\",{\"1\":{\"757\":1}}],[\"address\",{\"1\":{\"749\":3}}],[\"added\",{\"1\":{\"344\":1}}],[\"additionally\",{\"1\":{\"321\":1,\"422\":1}}],[\"additional\",{\"1\":{\"314\":1,\"422\":1}}],[\"addition\",{\"1\":{\"201\":1}}],[\"add\",{\"1\":{\"137\":1,\"590\":1,\"840\":1}}],[\"addatindex\",{\"1\":{\"103\":1}}],[\"addattail\",{\"1\":{\"103\":1}}],[\"addathead\",{\"1\":{\"103\":1}}],[\"arange\",{\"1\":{\"859\":1}}],[\"array\",{\"1\":{\"676\":2,\"834\":1}}],[\"arranged\",{\"1\":{\"314\":1}}],[\"arry\",{\"1\":{\"676\":2}}],[\"arr\",{\"1\":{\"548\":2,\"552\":2,\"553\":2,\"573\":1}}],[\"argument\",{\"1\":{\"586\":1,\"589\":1,\"854\":1}}],[\"arg\",{\"1\":{\"559\":1}}],[\"args\",{\"1\":{\"539\":4}}],[\"argv\",{\"1\":{\"528\":1,\"529\":1,\"530\":1,\"531\":1}}],[\"argc\",{\"1\":{\"528\":1,\"529\":1,\"530\":1,\"531\":1}}],[\"argmax\",{\"1\":{\"294\":1}}],[\"argmin\",{\"1\":{\"294\":1}}],[\"architecture\",{\"1\":{\"314\":1,\"383\":1}}],[\"arccos\",{\"1\":{\"305\":1}}],[\"area\",{\"1\":{\"594\":4,\"766\":1}}],[\"area5\",{\"1\":{\"249\":1}}],[\"are\",{\"1\":{\"188\":1,\"305\":1,\"314\":1,\"344\":1,\"361\":1,\"422\":1,\"427\":4,\"827\":1,\"830\":1}}],[\"article\",{\"1\":{\"54\":1,\"174\":1,\"175\":1,\"304\":1,\"811\":1,\"841\":1,\"845\":1,\"855\":1,\"875\":1}}],[\"arxiv\",{\"1\":{\"52\":2,\"53\":1,\"212\":1,\"358\":1,\"359\":1,\"360\":1,\"385\":1,\"922\":1,\"938\":1,\"951\":1}}],[\"annot\",{\"1\":{\"837\":3}}],[\"annotated\",{\"1\":{\"422\":1,\"428\":1}}],[\"annotations\",{\"1\":{\"422\":5,\"428\":1,\"888\":1}}],[\"ankle\",{\"1\":{\"422\":1}}],[\"anhcor\",{\"1\":{\"411\":1}}],[\"anchot\",{\"1\":{\"402\":1}}],[\"anchors\",{\"1\":{\"344\":2,\"411\":5,\"884\":3}}],[\"anchor\",{\"1\":{\"344\":1,\"402\":1,\"411\":5,\"412\":4,\"413\":1,\"416\":1,\"417\":2,\"884\":3}}],[\"another\",{\"1\":{\"361\":1}}],[\"angle\",{\"1\":{\"305\":2}}],[\"angles\",{\"1\":{\"305\":15}}],[\"anticipation\",{\"1\":{\"271\":2}}],[\"any\",{\"1\":{\"262\":1,\"834\":1}}],[\"anything\",{\"1\":{\"48\":1}}],[\"anaconda3\",{\"1\":{\"165\":5,\"188\":1}}],[\"anaconda\",{\"1\":{\"165\":1}}],[\"analysis\",{\"1\":{\"48\":1}}],[\"and\",{\"0\":{\"358\":1,\"385\":1},\"1\":{\"48\":1,\"54\":2,\"195\":4,\"211\":1,\"232\":1,\"261\":1,\"271\":2,\"305\":3,\"309\":3,\"314\":1,\"340\":2,\"344\":1,\"361\":2,\"366\":3,\"380\":3,\"383\":1,\"385\":1,\"422\":11,\"424\":1,\"426\":6,\"427\":4,\"428\":4,\"429\":2,\"845\":1,\"846\":2,\"856\":2,\"864\":1,\"876\":1,\"889\":2,\"895\":1,\"910\":1,\"939\":1,\"945\":2,\"956\":1}}],[\"an\",{\"1\":{\"48\":1,\"195\":3,\"312\":1,\"314\":2,\"383\":1,\"397\":1,\"422\":1,\"426\":1,\"559\":3,\"860\":1,\"929\":1}}],[\"a\",{\"0\":{\"212\":1,\"320\":1},\"1\":{\"44\":5,\"70\":1,\"72\":1,\"78\":2,\"100\":2,\"103\":12,\"104\":7,\"106\":9,\"137\":6,\"143\":2,\"180\":1,\"191\":1,\"195\":12,\"202\":1,\"208\":3,\"221\":1,\"223\":2,\"232\":1,\"233\":1,\"261\":1,\"266\":2,\"277\":1,\"303\":4,\"304\":3,\"305\":6,\"309\":5,\"314\":3,\"321\":1,\"350\":2,\"359\":2,\"361\":2,\"366\":3,\"370\":1,\"380\":3,\"383\":1,\"390\":1,\"391\":1,\"422\":6,\"426\":4,\"427\":2,\"428\":1,\"469\":2,\"535\":2,\"559\":3,\"573\":15,\"576\":2,\"589\":1,\"595\":18,\"597\":1,\"598\":1,\"599\":6,\"600\":6,\"601\":16,\"607\":8,\"611\":3,\"612\":6,\"615\":6,\"617\":4,\"647\":3,\"649\":2,\"661\":2,\"665\":2,\"666\":6,\"670\":7,\"671\":6,\"672\":3,\"673\":7,\"675\":2,\"676\":6,\"682\":2,\"683\":5,\"693\":1,\"695\":1,\"698\":1,\"701\":3,\"736\":6,\"738\":2,\"741\":4,\"744\":2,\"745\":8,\"759\":1,\"781\":11,\"782\":3,\"798\":3,\"801\":1,\"805\":9,\"806\":5,\"807\":5,\"808\":3,\"809\":11,\"810\":2,\"814\":1,\"816\":1,\"818\":3,\"825\":8,\"849\":5,\"852\":1,\"860\":9,\"864\":1,\"867\":1,\"868\":2,\"869\":2,\"877\":1,\"921\":1,\"928\":1,\"929\":2,\"935\":1,\"945\":1,\"956\":1,\"958\":3,\"959\":2,\"961\":8}}],[\"ajax\",{\"1\":{\"41\":1}}],[\"alphas\",{\"1\":{\"868\":4}}],[\"already\",{\"1\":{\"852\":1}}],[\"algsup\",{\"1\":{\"811\":1}}],[\"algorithm\",{\"1\":{\"576\":2}}],[\"algorithms\",{\"1\":{\"427\":1}}],[\"alexnet\",{\"1\":{\"406\":1}}],[\"along\",{\"1\":{\"314\":1,\"372\":1,\"834\":2}}],[\"also\",{\"1\":{\"195\":1,\"426\":1,\"428\":1}}],[\"alt\",{\"1\":{\"191\":1}}],[\"aligned\",{\"1\":{\"426\":1,\"859\":2}}],[\"align\",{\"1\":{\"419\":3}}],[\"alias\",{\"1\":{\"191\":2}}],[\"alive\",{\"1\":{\"41\":2}}],[\"allocated\",{\"1\":{\"852\":1}}],[\"allocate\",{\"1\":{\"852\":1}}],[\"all\",{\"1\":{\"48\":1,\"168\":1,\"305\":1,\"321\":1,\"422\":1}}],[\"almost\",{\"1\":{\"48\":1}}],[\"alarm\",{\"1\":{\"19\":1}}],[\"ap\",{\"1\":{\"186\":1,\"214\":1}}],[\"app\",{\"1\":{\"793\":4,\"794\":1}}],[\"approach\",{\"1\":{\"383\":1}}],[\"approch\",{\"0\":{\"267\":1}}],[\"app2\",{\"1\":{\"174\":1}}],[\"append\",{\"1\":{\"105\":1,\"534\":1,\"835\":1,\"846\":4}}],[\"apply\",{\"1\":{\"834\":2}}],[\"applied\",{\"1\":{\"314\":1}}],[\"applications\",{\"1\":{\"427\":1}}],[\"application\",{\"1\":{\"41\":1,\"188\":2}}],[\"applewebkit\",{\"1\":{\"41\":1}}],[\"apt\",{\"1\":{\"10\":1,\"166\":4,\"178\":1,\"185\":4,\"186\":1,\"189\":1,\"191\":1}}],[\"acm\",{\"1\":{\"801\":1}}],[\"accelerometer\",{\"1\":{\"426\":1}}],[\"accepts\",{\"1\":{\"195\":1}}],[\"accept\",{\"1\":{\"30\":1,\"41\":6}}],[\"accompanied\",{\"1\":{\"426\":1}}],[\"accuracy\",{\"1\":{\"342\":1,\"357\":2}}],[\"activation\",{\"1\":{\"309\":1,\"361\":3,\"891\":1}}],[\"activations\",{\"1\":{\"309\":2}}],[\"activate\",{\"1\":{\"209\":1}}],[\"across\",{\"1\":{\"305\":1}}],[\"achlioptas\",{\"1\":{\"220\":1}}],[\"achieving\",{\"1\":{\"53\":1}}],[\"ac\",{\"1\":{\"104\":1,\"578\":1,\"889\":1}}],[\"acquisition\",{\"1\":{\"22\":1}}],[\"ox\",{\"1\":{\"889\":1}}],[\"ostat\",{\"1\":{\"852\":1}}],[\"ostream\",{\"1\":{\"775\":1,\"781\":2,\"791\":2}}],[\"owner\",{\"1\":{\"527\":1}}],[\"others\",{\"1\":{\"428\":1}}],[\"otherwise\",{\"1\":{\"56\":1}}],[\"our\",{\"1\":{\"314\":1,\"427\":1,\"904\":1}}],[\"outfile\",{\"1\":{\"781\":21,\"793\":7,\"794\":3}}],[\"out\",{\"1\":{\"209\":3,\"304\":3,\"574\":1,\"781\":3,\"793\":9,\"848\":1,\"852\":1,\"856\":1}}],[\"output\",{\"1\":{\"344\":1,\"775\":1,\"835\":1,\"868\":2}}],[\"outputs\",{\"1\":{\"195\":1,\"304\":6,\"366\":1,\"854\":1}}],[\"outperforms\",{\"1\":{\"48\":1}}],[\"outside\",{\"1\":{\"77\":2}}],[\"overload\",{\"1\":{\"848\":1}}],[\"overall\",{\"1\":{\"314\":1}}],[\"overview\",{\"0\":{\"302\":1},\"1\":{\"423\":1}}],[\"octnet\",{\"1\":{\"218\":2,\"227\":1}}],[\"ocrnet\",{\"1\":{\"53\":1}}],[\"oa\",{\"1\":{\"214\":3,\"229\":1,\"249\":1}}],[\"only\",{\"1\":{\"344\":2,\"380\":1,\"422\":1,\"429\":1}}],[\"online\",{\"1\":{\"271\":2}}],[\"on\",{\"0\":{\"942\":1,\"950\":1},\"1\":{\"211\":1,\"262\":1,\"275\":1,\"359\":2,\"361\":4,\"422\":1,\"427\":3,\"429\":1}}],[\"one\",{\"1\":{\"208\":1,\"402\":2,\"427\":1,\"532\":1,\"868\":2}}],[\"oneformer3d\",{\"0\":{\"192\":1},\"1\":{\"192\":2,\"195\":3}}],[\"obj\",{\"1\":{\"626\":1,\"741\":1,\"785\":1}}],[\"objects\",{\"0\":{\"422\":1},\"1\":{\"361\":1,\"422\":2}}],[\"object\",{\"0\":{\"49\":1,\"56\":1,\"166\":1},\"1\":{\"49\":1,\"52\":1,\"166\":1,\"195\":1,\"273\":1,\"344\":1,\"367\":1,\"422\":3,\"426\":1,\"701\":1,\"860\":2,\"880\":1,\"881\":1}}],[\"observe\",{\"1\":{\"305\":1}}],[\"obtains\",{\"1\":{\"195\":1}}],[\"optional\",{\"1\":{\"845\":1,\"848\":2}}],[\"options\",{\"1\":{\"191\":1}}],[\"operator\",{\"1\":{\"545\":1}}],[\"operations\",{\"1\":{\"309\":1}}],[\"operation\",{\"1\":{\"309\":5}}],[\"openimages\",{\"1\":{\"928\":1}}],[\"openai\",{\"1\":{\"856\":2,\"922\":1,\"929\":4}}],[\"opengvlab\",{\"1\":{\"360\":1}}],[\"open\",{\"0\":{\"166\":1},\"1\":{\"166\":1,\"503\":1,\"781\":5,\"793\":9,\"794\":1,\"859\":1,\"864\":1}}],[\"openssh\",{\"1\":{\"186\":1}}],[\"opens\",{\"1\":{\"85\":1,\"122\":1,\"427\":1}}],[\"opposite\",{\"1\":{\"305\":4}}],[\"ofstream\",{\"1\":{\"781\":8,\"791\":1,\"793\":3}}],[\"offset\",{\"1\":{\"364\":1}}],[\"offscreen\",{\"1\":{\"188\":1}}],[\"official\",{\"1\":{\"340\":1}}],[\"off\",{\"1\":{\"191\":2}}],[\"offer\",{\"1\":{\"105\":2}}],[\"of\",{\"0\":{\"281\":1,\"385\":1,\"945\":1},\"1\":{\"170\":1,\"195\":3,\"201\":1,\"261\":2,\"262\":1,\"305\":3,\"309\":5,\"314\":4,\"321\":3,\"344\":3,\"361\":5,\"366\":1,\"380\":3,\"383\":2,\"385\":1,\"397\":1,\"422\":8,\"426\":5,\"427\":4,\"428\":1,\"429\":1,\"574\":1,\"687\":1,\"724\":2,\"745\":2,\"834\":1,\"845\":1,\"852\":1,\"859\":4,\"860\":5,\"904\":2,\"910\":1,\"911\":1,\"928\":1,\"929\":1,\"945\":2,\"956\":1}}],[\"old\",{\"1\":{\"105\":2}}],[\"oral\",{\"1\":{\"340\":1}}],[\"original\",{\"1\":{\"309\":2}}],[\"origin\",{\"1\":{\"168\":3}}],[\"or\",{\"0\":{\"166\":1},\"1\":{\"166\":1,\"175\":1,\"195\":1,\"208\":1,\"309\":2,\"849\":3,\"859\":2}}],[\"ordered\",{\"1\":{\"314\":1}}],[\"ordering\",{\"0\":{\"306\":1},\"1\":{\"305\":1}}],[\"order\",{\"1\":{\"72\":11,\"83\":6,\"87\":4,\"467\":2,\"468\":1,\"469\":4,\"471\":2,\"781\":5}}],[\"org\",{\"1\":{\"52\":2,\"53\":1,\"212\":1,\"358\":1,\"359\":1,\"360\":1,\"385\":1,\"422\":1,\"428\":1,\"836\":1,\"905\":1,\"922\":1,\"938\":1,\"951\":1}}],[\"ok\",{\"1\":{\"42\":2,\"43\":1,\"191\":2,\"476\":2,\"817\":1}}],[\"o\",{\"0\":{\"30\":1,\"32\":1},\"1\":{\"13\":3,\"20\":2,\"28\":1,\"29\":2,\"30\":14,\"31\":4,\"32\":3,\"33\":1,\"34\":1,\"39\":1,\"80\":2,\"125\":2,\"137\":3,\"318\":1,\"492\":4,\"626\":1}}],[\"然而\",{\"1\":{\"13\":1,\"30\":1,\"198\":1,\"199\":1,\"220\":1,\"229\":1,\"245\":1,\"246\":1,\"248\":1,\"254\":1,\"320\":1,\"322\":1,\"355\":4,\"356\":2,\"436\":1,\"606\":1,\"893\":1,\"923\":1,\"952\":1}}],[\"然后\",{\"1\":{\"8\":1,\"10\":2,\"20\":1,\"25\":1,\"30\":3,\"32\":2,\"34\":1,\"44\":1,\"45\":1,\"71\":2,\"72\":2,\"81\":1,\"85\":1,\"97\":2,\"103\":1,\"126\":1,\"168\":2,\"174\":1,\"175\":2,\"191\":1,\"195\":1,\"197\":1,\"200\":1,\"217\":2,\"220\":3,\"222\":2,\"223\":3,\"224\":1,\"225\":4,\"227\":1,\"228\":5,\"232\":1,\"234\":1,\"235\":1,\"244\":1,\"245\":3,\"246\":7,\"260\":3,\"282\":3,\"284\":1,\"298\":1,\"310\":1,\"314\":1,\"317\":1,\"318\":2,\"322\":1,\"332\":1,\"337\":1,\"379\":2,\"380\":5,\"404\":2,\"408\":1,\"410\":1,\"419\":2,\"451\":1,\"492\":2,\"639\":1,\"688\":1,\"698\":2,\"704\":1,\"756\":1,\"767\":1,\"787\":2,\"801\":1,\"846\":1,\"852\":1,\"859\":1,\"922\":3,\"961\":1}}],[\"通滤波\",{\"1\":{\"939\":1}}],[\"通俗\",{\"1\":{\"859\":1}}],[\"通俗易懂\",{\"1\":{\"406\":1}}],[\"通配符\",{\"1\":{\"459\":2}}],[\"通用性\",{\"1\":{\"194\":1,\"621\":1}}],[\"通用\",{\"1\":{\"193\":1,\"194\":1,\"228\":1,\"312\":1,\"379\":1,\"398\":1,\"476\":1,\"600\":5,\"639\":1,\"648\":1,\"738\":1,\"935\":1}}],[\"通关\",{\"1\":{\"69\":1,\"71\":1,\"503\":1}}],[\"通道\",{\"1\":{\"56\":1,\"227\":1,\"288\":6,\"292\":1,\"293\":1,\"294\":1,\"305\":1,\"308\":2,\"322\":1,\"380\":1,\"492\":2,\"923\":1}}],[\"通常\",{\"1\":{\"30\":1,\"31\":2,\"198\":1,\"214\":1,\"218\":2,\"225\":3,\"229\":1,\"233\":1,\"245\":1,\"246\":3,\"254\":1,\"392\":1,\"398\":1,\"436\":1,\"467\":1,\"476\":1,\"500\":1,\"545\":1,\"597\":1,\"600\":1,\"788\":1,\"852\":1,\"910\":1}}],[\"通信\",{\"1\":{\"29\":1,\"485\":4}}],[\"通知\",{\"1\":{\"13\":1,\"15\":3,\"17\":3,\"19\":1,\"25\":1,\"30\":7,\"31\":1,\"32\":2,\"34\":1,\"39\":2,\"492\":1,\"590\":2,\"598\":1}}],[\"通过\",{\"0\":{\"854\":1,\"855\":1},\"1\":{\"8\":3,\"10\":2,\"22\":1,\"26\":1,\"29\":1,\"34\":1,\"37\":1,\"38\":7,\"39\":2,\"44\":3,\"46\":2,\"53\":1,\"72\":1,\"86\":2,\"172\":2,\"174\":2,\"192\":1,\"195\":3,\"197\":1,\"198\":2,\"199\":5,\"200\":1,\"201\":3,\"210\":3,\"217\":1,\"218\":1,\"220\":3,\"222\":9,\"223\":5,\"225\":7,\"226\":2,\"227\":3,\"228\":4,\"242\":1,\"245\":2,\"246\":1,\"280\":1,\"283\":1,\"290\":2,\"293\":1,\"298\":2,\"299\":1,\"301\":1,\"303\":1,\"307\":1,\"308\":2,\"311\":1,\"312\":5,\"314\":1,\"315\":4,\"316\":1,\"317\":1,\"319\":1,\"323\":1,\"349\":1,\"353\":1,\"355\":1,\"364\":1,\"370\":2,\"371\":1,\"372\":2,\"379\":2,\"380\":6,\"384\":1,\"386\":2,\"391\":1,\"392\":2,\"395\":2,\"396\":1,\"398\":2,\"399\":1,\"402\":2,\"404\":3,\"408\":1,\"417\":2,\"419\":1,\"465\":1,\"480\":2,\"492\":1,\"524\":1,\"525\":1,\"537\":1,\"545\":3,\"570\":2,\"575\":2,\"583\":2,\"587\":1,\"594\":1,\"612\":1,\"670\":5,\"671\":3,\"673\":2,\"675\":2,\"688\":1,\"701\":1,\"709\":4,\"713\":3,\"714\":2,\"721\":1,\"724\":3,\"732\":1,\"734\":1,\"735\":2,\"744\":6,\"745\":1,\"748\":2,\"750\":3,\"760\":1,\"766\":3,\"768\":1,\"769\":8,\"770\":1,\"790\":1,\"791\":3,\"794\":2,\"852\":1,\"859\":1,\"860\":1,\"887\":4,\"889\":1,\"893\":2,\"900\":1,\"901\":2,\"904\":4,\"905\":1,\"906\":1,\"907\":1,\"909\":1,\"913\":2,\"922\":2,\"923\":1,\"925\":1,\"930\":1,\"938\":4,\"939\":1,\"951\":1,\"953\":1,\"955\":1,\"957\":1,\"959\":1}}],[\"还显\",{\"1\":{\"935\":1}}],[\"还加\",{\"1\":{\"846\":1}}],[\"还原成\",{\"1\":{\"875\":1}}],[\"还原\",{\"0\":{\"86\":1},\"1\":{\"86\":2,\"294\":1,\"864\":1}}],[\"还要\",{\"1\":{\"70\":1,\"138\":1,\"828\":1,\"846\":1,\"855\":1}}],[\"还是\",{\"1\":{\"51\":1,\"86\":1,\"94\":1,\"191\":2,\"284\":1,\"347\":1,\"390\":1,\"408\":1,\"436\":1,\"485\":1,\"575\":1,\"666\":1,\"676\":1,\"708\":1,\"729\":1,\"769\":1,\"793\":2,\"855\":1,\"860\":1,\"864\":1,\"895\":1}}],[\"还用\",{\"1\":{\"49\":1}}],[\"还会\",{\"1\":{\"38\":1,\"39\":1,\"174\":1,\"369\":1,\"380\":1}}],[\"还有\",{\"1\":{\"20\":1,\"126\":1,\"143\":1,\"529\":1,\"609\":1,\"610\":1,\"703\":1,\"749\":1,\"828\":1,\"830\":1,\"852\":2}}],[\"还\",{\"0\":{\"852\":1},\"1\":{\"13\":1,\"16\":1,\"36\":1,\"38\":1,\"54\":1,\"85\":2,\"126\":2,\"192\":1,\"217\":1,\"220\":1,\"222\":2,\"225\":1,\"228\":1,\"246\":4,\"250\":1,\"320\":1,\"370\":2,\"469\":1,\"476\":2,\"484\":1,\"573\":1,\"589\":1,\"612\":1,\"671\":1,\"721\":1,\"722\":1,\"725\":2,\"748\":1,\"750\":1,\"776\":1,\"782\":1,\"807\":1,\"809\":1,\"839\":1,\"852\":1,\"860\":1,\"924\":1,\"928\":1,\"955\":1,\"957\":1,\"958\":1}}],[\"那些\",{\"1\":{\"299\":1,\"395\":1,\"701\":1}}],[\"那个\",{\"0\":{\"175\":1},\"1\":{\"160\":1,\"175\":2,\"807\":1,\"828\":1,\"859\":1}}],[\"那\",{\"1\":{\"17\":1,\"191\":1,\"292\":1,\"379\":1,\"395\":1,\"412\":1,\"469\":1,\"528\":1,\"859\":1,\"904\":1,\"906\":1}}],[\"那么\",{\"1\":{\"17\":1,\"20\":1,\"69\":2,\"70\":1,\"85\":1,\"88\":2,\"89\":1,\"97\":1,\"107\":1,\"137\":1,\"141\":1,\"153\":1,\"209\":1,\"210\":2,\"290\":1,\"349\":2,\"380\":1,\"412\":1,\"436\":2,\"446\":1,\"480\":1,\"530\":1,\"563\":1,\"577\":1,\"676\":1,\"684\":1,\"744\":1,\"766\":1,\"860\":1,\"939\":1,\"941\":1}}],[\"那样\",{\"1\":{\"13\":1,\"126\":1,\"259\":1,\"282\":1,\"332\":1,\"875\":1}}],[\"那里\",{\"1\":{\"10\":1,\"530\":1,\"748\":1}}],[\"像是\",{\"1\":{\"94\":1,\"563\":1}}],[\"像素点\",{\"1\":{\"209\":1,\"290\":6,\"294\":2,\"295\":1,\"299\":1,\"334\":1,\"338\":1,\"379\":1,\"923\":1}}],[\"像素\",{\"1\":{\"55\":2,\"210\":2,\"223\":1,\"245\":2,\"288\":2,\"292\":3,\"298\":2,\"299\":3,\"300\":2,\"366\":1,\"370\":1,\"380\":4,\"398\":1,\"402\":1,\"419\":1,\"423\":1,\"425\":1,\"451\":2,\"863\":1,\"887\":6,\"890\":1,\"925\":2,\"935\":3}}],[\"像\",{\"1\":{\"13\":1,\"55\":1,\"282\":1,\"348\":1,\"379\":1,\"380\":1,\"546\":1,\"704\":1,\"854\":1,\"875\":1}}],[\"做到\",{\"1\":{\"938\":1,\"957\":1}}],[\"做成\",{\"1\":{\"621\":1}}],[\"做出\",{\"1\":{\"413\":1,\"701\":1,\"748\":1,\"769\":1,\"935\":1}}],[\"做文章\",{\"1\":{\"105\":1}}],[\"做下\",{\"1\":{\"77\":1}}],[\"做\",{\"1\":{\"13\":1,\"20\":1,\"30\":2,\"77\":1,\"168\":2,\"306\":1,\"315\":1,\"319\":1,\"355\":1,\"359\":1,\"366\":1,\"379\":3,\"380\":3,\"415\":1,\"419\":2,\"599\":1,\"615\":1,\"616\":1,\"707\":2,\"755\":1,\"770\":1,\"793\":1,\"816\":2,\"865\":1,\"922\":1,\"935\":1,\"940\":1,\"941\":1,\"944\":1,\"945\":1,\"952\":1,\"957\":1,\"959\":1}}],[\"做法\",{\"1\":{\"10\":2,\"306\":1,\"616\":1,\"701\":1,\"940\":5,\"962\":1}}],[\"全为\",{\"1\":{\"730\":1}}],[\"全程\",{\"1\":{\"621\":1,\"951\":1}}],[\"全面\",{\"1\":{\"246\":1,\"320\":1,\"590\":1}}],[\"全图\",{\"1\":{\"226\":1,\"408\":2,\"409\":1,\"410\":1}}],[\"全景\",{\"1\":{\"192\":2,\"195\":2,\"425\":1}}],[\"全部内容\",{\"1\":{\"762\":1}}],[\"全部\",{\"1\":{\"96\":1,\"342\":1,\"411\":1,\"476\":1,\"595\":1,\"609\":1,\"689\":1,\"721\":3,\"750\":1,\"769\":1,\"793\":2,\"811\":1,\"940\":1}}],[\"全称\",{\"1\":{\"22\":1}}],[\"全\",{\"0\":{\"125\":1,\"126\":1},\"1\":{\"13\":1,\"53\":2,\"110\":1,\"227\":2,\"228\":1,\"246\":4,\"256\":1,\"281\":2,\"306\":1,\"322\":1,\"351\":1,\"366\":2,\"367\":1,\"380\":1,\"399\":1,\"408\":1,\"410\":1,\"415\":2,\"419\":1,\"864\":1,\"922\":1,\"928\":1,\"959\":1}}],[\"全局变量\",{\"0\":{\"614\":1,\"615\":1,\"617\":1,\"619\":1,\"621\":1},\"1\":{\"528\":1,\"606\":1,\"609\":2,\"614\":3,\"615\":4,\"617\":5,\"621\":11,\"659\":1,\"744\":2,\"826\":1}}],[\"全局\",{\"1\":{\"5\":1,\"36\":1,\"55\":1,\"141\":2,\"153\":2,\"193\":1,\"194\":1,\"217\":3,\"220\":3,\"225\":1,\"226\":2,\"227\":1,\"228\":3,\"243\":1,\"246\":1,\"247\":2,\"248\":1,\"259\":2,\"306\":2,\"310\":1,\"322\":2,\"370\":3,\"379\":1,\"380\":1,\"502\":1,\"509\":2,\"581\":1,\"596\":1,\"612\":1,\"615\":1,\"619\":1,\"706\":1,\"722\":5,\"743\":1,\"744\":1,\"745\":1,\"863\":1,\"893\":4,\"938\":1,\"940\":3}}],[\"帮助\",{\"1\":{\"319\":1,\"320\":1,\"355\":1,\"357\":1}}],[\"帮\",{\"1\":{\"13\":1,\"38\":1}}],[\"信噪比\",{\"1\":{\"451\":1}}],[\"信心\",{\"1\":{\"355\":1}}],[\"信道\",{\"1\":{\"225\":1}}],[\"信念\",{\"1\":{\"218\":1}}],[\"信\",{\"1\":{\"104\":1}}],[\"信号处理\",{\"1\":{\"19\":1,\"30\":1}}],[\"信号\",{\"1\":{\"19\":3,\"20\":2,\"23\":1,\"30\":4,\"226\":2,\"273\":1,\"906\":5}}],[\"信号量\",{\"0\":{\"23\":1},\"1\":{\"8\":1,\"23\":11,\"27\":2}}],[\"信息隐蔽\",{\"1\":{\"701\":2}}],[\"信息处理\",{\"1\":{\"398\":1}}],[\"信息压缩\",{\"1\":{\"386\":1,\"391\":1}}],[\"信息论\",{\"1\":{\"348\":1}}],[\"信息量\",{\"1\":{\"347\":3}}],[\"信息熵\",{\"0\":{\"347\":1}}],[\"信息提取\",{\"1\":{\"53\":1}}],[\"信息\",{\"1\":{\"13\":1,\"17\":1,\"38\":1,\"41\":3,\"42\":2,\"43\":1,\"50\":1,\"52\":1,\"53\":3,\"54\":1,\"70\":2,\"172\":1,\"175\":2,\"193\":1,\"194\":1,\"195\":1,\"198\":1,\"199\":1,\"201\":2,\"217\":1,\"220\":2,\"222\":1,\"225\":2,\"226\":1,\"242\":1,\"245\":3,\"246\":1,\"247\":1,\"254\":3,\"259\":2,\"262\":1,\"263\":1,\"265\":1,\"288\":1,\"293\":1,\"294\":3,\"295\":1,\"301\":1,\"312\":3,\"315\":2,\"319\":4,\"320\":2,\"322\":3,\"325\":2,\"327\":1,\"334\":1,\"355\":1,\"357\":1,\"372\":1,\"379\":1,\"386\":4,\"390\":2,\"393\":1,\"398\":1,\"419\":1,\"456\":1,\"484\":1,\"485\":3,\"590\":2,\"595\":2,\"599\":1,\"701\":2,\"776\":3,\"777\":1,\"785\":1,\"793\":2,\"854\":1,\"855\":1,\"860\":1,\"906\":1,\"923\":4,\"938\":11,\"939\":6,\"940\":2,\"951\":9,\"958\":1}}],[\"存\",{\"1\":{\"790\":1}}],[\"存入\",{\"1\":{\"781\":6}}],[\"存取\",{\"1\":{\"613\":2,\"663\":1,\"698\":1}}],[\"存储资源\",{\"1\":{\"370\":1}}],[\"存储空间\",{\"1\":{\"69\":2,\"406\":1,\"574\":1,\"611\":1,\"712\":2}}],[\"存储\",{\"1\":{\"38\":2,\"69\":1,\"218\":1,\"223\":1,\"370\":1,\"545\":5,\"546\":6,\"804\":1}}],[\"存储单元\",{\"1\":{\"29\":2,\"804\":1}}],[\"存放数据\",{\"1\":{\"732\":1,\"781\":1,\"824\":1}}],[\"存放\",{\"1\":{\"13\":1,\"110\":1,\"524\":1,\"537\":1,\"609\":1,\"613\":2,\"633\":1,\"645\":1,\"663\":1,\"668\":2,\"680\":1,\"684\":1,\"695\":1,\"696\":3,\"697\":2,\"712\":5,\"713\":2,\"714\":3,\"733\":2,\"735\":2,\"769\":1,\"775\":1,\"781\":3,\"782\":1,\"785\":2,\"825\":4}}],[\"存在\",{\"1\":{\"5\":1,\"20\":1,\"43\":2,\"51\":2,\"64\":1,\"86\":1,\"97\":1,\"137\":2,\"320\":2,\"356\":1,\"357\":2,\"391\":1,\"436\":1,\"476\":3,\"484\":1,\"485\":1,\"502\":1,\"544\":1,\"545\":1,\"589\":1,\"609\":2,\"612\":2,\"620\":1,\"639\":1,\"662\":1,\"728\":1,\"738\":1,\"744\":1,\"748\":2,\"767\":1,\"793\":8,\"875\":1,\"882\":1,\"891\":1,\"892\":1,\"893\":2,\"926\":1}}],[\"址\",{\"1\":{\"13\":1}}],[\"地说\",{\"1\":{\"354\":1}}],[\"地为\",{\"1\":{\"305\":1,\"889\":1}}],[\"地面\",{\"1\":{\"299\":1,\"342\":2}}],[\"地会\",{\"1\":{\"245\":1}}],[\"地图\",{\"1\":{\"233\":1}}],[\"地方\",{\"1\":{\"126\":7,\"153\":1,\"456\":1,\"534\":1,\"604\":1,\"721\":1,\"816\":1}}],[\"地址映射\",{\"1\":{\"184\":1}}],[\"地址\",{\"0\":{\"119\":1,\"664\":1},\"1\":{\"186\":2,\"385\":2,\"524\":2,\"609\":2,\"663\":4,\"664\":2,\"665\":1,\"666\":3,\"668\":3,\"671\":5,\"676\":7,\"687\":1,\"688\":1,\"689\":2,\"690\":1,\"696\":1,\"698\":1,\"712\":5,\"713\":1,\"714\":3,\"732\":2,\"733\":2,\"734\":1,\"735\":4,\"736\":2,\"760\":2,\"762\":1,\"769\":1,\"811\":1,\"825\":10,\"826\":2,\"827\":1,\"828\":1,\"830\":3}}],[\"地\",{\"1\":{\"13\":1,\"31\":1,\"72\":1,\"86\":7,\"103\":2,\"137\":1,\"192\":2,\"193\":2,\"194\":2,\"195\":1,\"198\":1,\"202\":1,\"217\":1,\"218\":2,\"220\":2,\"225\":1,\"228\":1,\"235\":1,\"245\":2,\"246\":3,\"254\":1,\"271\":1,\"273\":1,\"284\":1,\"299\":2,\"308\":1,\"314\":1,\"315\":1,\"319\":1,\"320\":3,\"322\":1,\"332\":2,\"334\":1,\"357\":1,\"369\":1,\"390\":1,\"391\":1,\"404\":1,\"412\":1,\"419\":2,\"492\":1,\"592\":1,\"609\":2,\"611\":1,\"635\":1,\"725\":1,\"729\":1,\"769\":2,\"782\":1,\"824\":1,\"858\":1,\"863\":2,\"925\":1,\"935\":2,\"938\":3,\"939\":1,\"940\":1,\"941\":1,\"951\":2}}],[\"缓冲\",{\"1\":{\"476\":1}}],[\"缓冲区\",{\"1\":{\"13\":1,\"15\":1,\"16\":9,\"30\":3,\"775\":3,\"777\":3,\"790\":1}}],[\"缓解\",{\"1\":{\"245\":1,\"390\":1,\"875\":1}}],[\"缓\",{\"1\":{\"17\":1}}],[\"缓存\",{\"0\":{\"479\":1,\"480\":1,\"481\":1,\"482\":1},\"1\":{\"13\":1,\"476\":3,\"480\":6}}],[\"发型\",{\"1\":{\"958\":1,\"961\":2}}],[\"发布\",{\"1\":{\"922\":1,\"935\":1}}],[\"发挥作用\",{\"1\":{\"261\":1}}],[\"发展\",{\"1\":{\"242\":1,\"257\":1,\"572\":1,\"748\":1,\"895\":1}}],[\"发出请求\",{\"1\":{\"41\":1}}],[\"发出\",{\"1\":{\"30\":1,\"46\":1,\"613\":1}}],[\"发现\",{\"1\":{\"19\":1,\"55\":1,\"126\":1,\"172\":1,\"262\":1,\"284\":1,\"355\":1,\"380\":1,\"852\":3,\"935\":1}}],[\"发送给\",{\"1\":{\"624\":1}}],[\"发送\",{\"1\":{\"16\":1,\"30\":1,\"41\":1,\"476\":2,\"480\":1,\"701\":3}}],[\"发起\",{\"1\":{\"13\":2}}],[\"发生变化\",{\"1\":{\"15\":1}}],[\"发生\",{\"1\":{\"13\":1,\"30\":3,\"31\":1,\"34\":1,\"38\":5,\"39\":2,\"69\":1,\"369\":1,\"390\":1,\"476\":4,\"492\":3,\"530\":4,\"531\":1,\"804\":1,\"852\":2,\"961\":1}}],[\"也就是说\",{\"1\":{\"25\":1,\"209\":1,\"312\":1,\"384\":1,\"563\":1,\"949\":1}}],[\"也\",{\"1\":{\"13\":3,\"19\":1,\"20\":1,\"24\":1,\"30\":2,\"37\":2,\"41\":2,\"42\":1,\"50\":1,\"54\":1,\"55\":2,\"69\":2,\"70\":2,\"72\":1,\"82\":1,\"86\":3,\"88\":4,\"93\":2,\"97\":2,\"99\":1,\"103\":1,\"107\":1,\"114\":1,\"121\":1,\"122\":1,\"126\":3,\"181\":1,\"191\":1,\"195\":1,\"203\":1,\"209\":1,\"214\":1,\"225\":1,\"228\":1,\"232\":1,\"261\":1,\"282\":1,\"290\":1,\"299\":1,\"304\":2,\"305\":1,\"306\":2,\"312\":1,\"344\":1,\"357\":8,\"370\":1,\"379\":1,\"380\":1,\"384\":1,\"394\":2,\"399\":2,\"409\":1,\"416\":2,\"462\":1,\"476\":7,\"492\":1,\"527\":1,\"528\":1,\"530\":1,\"537\":1,\"546\":1,\"563\":2,\"575\":1,\"576\":1,\"583\":2,\"584\":1,\"590\":1,\"595\":1,\"596\":1,\"599\":1,\"600\":1,\"601\":2,\"604\":1,\"606\":1,\"609\":1,\"612\":2,\"615\":2,\"620\":6,\"621\":1,\"642\":2,\"654\":2,\"658\":1,\"671\":1,\"676\":1,\"682\":1,\"684\":1,\"688\":1,\"694\":1,\"696\":2,\"698\":1,\"703\":1,\"707\":2,\"717\":2,\"721\":3,\"722\":1,\"730\":1,\"743\":1,\"744\":4,\"745\":3,\"752\":1,\"755\":2,\"756\":3,\"757\":1,\"760\":1,\"762\":1,\"766\":1,\"769\":2,\"770\":1,\"777\":1,\"782\":1,\"793\":1,\"794\":1,\"806\":1,\"816\":2,\"825\":1,\"827\":2,\"836\":1,\"854\":1,\"855\":1,\"859\":1,\"863\":1,\"864\":1,\"882\":1,\"891\":1,\"901\":1,\"906\":1,\"920\":1,\"922\":1,\"930\":1,\"938\":2,\"939\":1,\"940\":2,\"961\":1}}],[\"读者\",{\"1\":{\"530\":1}}],[\"读入\",{\"1\":{\"46\":1,\"781\":8,\"782\":1,\"793\":1}}],[\"读完\",{\"1\":{\"17\":4}}],[\"读数据\",{\"1\":{\"16\":1}}],[\"读\",{\"1\":{\"16\":5,\"17\":3,\"30\":1,\"32\":1,\"392\":1}}],[\"读状态\",{\"1\":{\"15\":1}}],[\"读到\",{\"1\":{\"13\":1,\"15\":1}}],[\"读取数据\",{\"1\":{\"32\":1,\"781\":1}}],[\"读取\",{\"1\":{\"13\":2,\"17\":1,\"30\":1,\"31\":1,\"32\":1,\"34\":1,\"39\":4,\"160\":1,\"480\":1,\"528\":2,\"781\":2}}],[\"读写操作\",{\"1\":{\"492\":1,\"528\":1,\"529\":1}}],[\"读写\",{\"1\":{\"13\":7,\"29\":1,\"30\":1,\"31\":2,\"34\":2,\"529\":1,\"781\":1,\"782\":2,\"793\":2}}],[\"方括号\",{\"1\":{\"713\":1,\"719\":1}}],[\"方格\",{\"1\":{\"419\":1,\"837\":2}}],[\"方形\",{\"1\":{\"398\":1}}],[\"方方面面\",{\"1\":{\"379\":1,\"958\":1}}],[\"方程\",{\"1\":{\"371\":1,\"944\":2,\"949\":1}}],[\"方差\",{\"1\":{\"292\":3,\"332\":1,\"451\":2,\"897\":1,\"907\":1,\"940\":1}}],[\"方而非\",{\"1\":{\"282\":1}}],[\"方\",{\"1\":{\"270\":1,\"793\":1}}],[\"方框\",{\"1\":{\"210\":1}}],[\"方便\",{\"1\":{\"69\":1,\"80\":1,\"209\":1,\"612\":1,\"639\":1,\"769\":2,\"787\":1}}],[\"方面\",{\"1\":{\"64\":1,\"192\":1,\"193\":1,\"257\":1,\"320\":1,\"372\":3,\"379\":1,\"409\":1,\"545\":1,\"701\":1,\"860\":1,\"952\":1,\"953\":2}}],[\"方向\",{\"0\":{\"58\":1,\"65\":1,\"469\":1},\"1\":{\"52\":1,\"61\":1,\"62\":1,\"63\":2,\"65\":1,\"217\":1,\"223\":2,\"226\":1,\"227\":1,\"228\":1,\"242\":1,\"294\":1,\"299\":2,\"322\":1,\"334\":2,\"370\":1,\"380\":1,\"413\":1,\"436\":1,\"446\":1,\"799\":1,\"813\":1,\"815\":1,\"884\":2,\"910\":1,\"911\":1,\"944\":1}}],[\"方案\",{\"1\":{\"13\":2,\"53\":2,\"128\":2,\"228\":1,\"370\":3}}],[\"方法\",{\"0\":{\"189\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"237\":1,\"238\":1,\"239\":1,\"246\":1,\"247\":1,\"248\":1,\"251\":1,\"258\":1,\"263\":1,\"328\":1,\"639\":1,\"834\":1,\"864\":1,\"878\":1,\"913\":1},\"1\":{\"13\":1,\"33\":2,\"44\":1,\"53\":2,\"55\":4,\"86\":1,\"91\":1,\"102\":1,\"137\":1,\"168\":1,\"182\":1,\"191\":1,\"197\":1,\"198\":2,\"199\":8,\"210\":1,\"216\":1,\"217\":2,\"218\":5,\"219\":1,\"220\":1,\"222\":4,\"223\":4,\"225\":3,\"226\":3,\"227\":3,\"228\":5,\"232\":5,\"233\":2,\"234\":3,\"235\":2,\"237\":5,\"242\":4,\"243\":1,\"244\":7,\"245\":5,\"246\":9,\"247\":2,\"248\":5,\"250\":4,\"254\":6,\"257\":1,\"262\":1,\"263\":4,\"265\":1,\"273\":1,\"277\":2,\"283\":1,\"288\":1,\"292\":1,\"301\":1,\"312\":1,\"313\":1,\"315\":1,\"317\":1,\"319\":1,\"320\":3,\"325\":2,\"332\":2,\"337\":2,\"342\":1,\"344\":2,\"357\":3,\"358\":2,\"379\":1,\"386\":1,\"390\":1,\"391\":6,\"393\":1,\"396\":6,\"402\":4,\"451\":1,\"480\":1,\"545\":4,\"574\":1,\"576\":1,\"590\":1,\"610\":2,\"639\":1,\"654\":1,\"670\":1,\"681\":1,\"697\":1,\"704\":1,\"718\":1,\"720\":1,\"730\":1,\"734\":2,\"745\":1,\"750\":1,\"757\":1,\"762\":1,\"769\":5,\"793\":1,\"830\":1,\"832\":1,\"867\":1,\"890\":1,\"891\":1,\"904\":1,\"905\":1,\"913\":2,\"915\":1,\"916\":1,\"922\":3,\"924\":1,\"925\":1,\"926\":3,\"928\":1,\"930\":1,\"935\":4,\"952\":1,\"957\":1,\"959\":1,\"962\":1}}],[\"方式\",{\"0\":{\"480\":1},\"1\":{\"4\":2,\"5\":1,\"11\":2,\"23\":2,\"24\":2,\"25\":1,\"30\":1,\"37\":1,\"44\":1,\"72\":2,\"86\":6,\"93\":1,\"110\":2,\"193\":2,\"195\":1,\"202\":1,\"214\":1,\"216\":1,\"226\":1,\"257\":1,\"259\":1,\"312\":4,\"314\":2,\"344\":1,\"353\":1,\"372\":1,\"379\":1,\"380\":1,\"384\":1,\"393\":2,\"394\":1,\"398\":1,\"404\":1,\"409\":1,\"480\":1,\"485\":2,\"502\":1,\"537\":1,\"575\":1,\"576\":2,\"612\":1,\"617\":1,\"671\":1,\"708\":3,\"715\":1,\"726\":1,\"729\":1,\"749\":2,\"750\":1,\"751\":1,\"760\":1,\"762\":1,\"769\":3,\"781\":4,\"793\":20,\"794\":2,\"829\":1,\"859\":1,\"875\":1,\"884\":1,\"902\":1,\"904\":1,\"929\":1,\"935\":1,\"941\":1,\"944\":1}}],[\"主观\",{\"1\":{\"873\":1,\"875\":1}}],[\"主调\",{\"1\":{\"590\":1,\"599\":2}}],[\"主机\",{\"1\":{\"391\":2}}],[\"主流\",{\"1\":{\"370\":1,\"390\":1}}],[\"主干网\",{\"1\":{\"396\":1}}],[\"主干\",{\"1\":{\"53\":1,\"196\":1,\"268\":1}}],[\"主体\",{\"1\":{\"41\":3,\"419\":1}}],[\"主线\",{\"1\":{\"31\":2,\"32\":7,\"34\":3,\"46\":1}}],[\"主要\",{\"0\":{\"58\":1,\"194\":1},\"1\":{\"27\":1,\"28\":1,\"29\":1,\"44\":1,\"175\":1,\"182\":1,\"193\":1,\"210\":1,\"249\":1,\"257\":1,\"301\":1,\"366\":1,\"370\":1,\"379\":1,\"386\":1,\"409\":1,\"413\":1,\"415\":1,\"416\":1,\"419\":2,\"449\":1,\"535\":1,\"563\":1,\"573\":1,\"590\":1,\"714\":1,\"745\":1,\"747\":1,\"863\":1,\"875\":2,\"892\":1,\"907\":1,\"928\":1,\"938\":1,\"951\":1,\"957\":1,\"958\":1}}],[\"主\",{\"1\":{\"19\":2,\"31\":1,\"46\":1,\"394\":3,\"395\":2,\"583\":5,\"584\":2,\"587\":1,\"589\":2,\"620\":3,\"713\":1,\"729\":1}}],[\"主动\",{\"1\":{\"13\":3,\"38\":1}}],[\"主从\",{\"1\":{\"3\":1,\"31\":1}}],[\"应向\",{\"1\":{\"701\":1}}],[\"应当\",{\"1\":{\"500\":1,\"719\":1,\"769\":1}}],[\"应有\",{\"1\":{\"290\":1}}],[\"应\",{\"1\":{\"137\":1,\"229\":1,\"290\":1,\"298\":1,\"705\":2,\"829\":1}}],[\"应对\",{\"1\":{\"31\":1,\"226\":1,\"320\":1}}],[\"应用程序\",{\"1\":{\"30\":4,\"38\":1,\"39\":5,\"492\":1}}],[\"应用\",{\"0\":{\"931\":1},\"1\":{\"13\":6,\"16\":2,\"38\":1,\"72\":1,\"193\":1,\"195\":1,\"198\":1,\"218\":1,\"220\":2,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"237\":1,\"242\":1,\"246\":4,\"247\":1,\"248\":1,\"254\":1,\"262\":1,\"283\":1,\"284\":1,\"301\":1,\"303\":2,\"305\":1,\"312\":1,\"314\":1,\"319\":1,\"320\":1,\"355\":1,\"357\":1,\"359\":2,\"393\":1,\"396\":1,\"449\":1,\"460\":1,\"469\":1,\"476\":1,\"527\":1,\"541\":1,\"595\":1,\"690\":1,\"722\":1,\"730\":1,\"875\":1,\"889\":1,\"894\":1,\"928\":1,\"935\":2,\"952\":1,\"953\":1,\"957\":1}}],[\"应该\",{\"1\":{\"10\":1,\"19\":1,\"22\":1,\"50\":1,\"88\":1,\"126\":1,\"153\":1,\"268\":1,\"273\":1,\"292\":1,\"304\":1,\"471\":1,\"544\":1,\"586\":1,\"595\":1,\"612\":1,\"671\":1,\"676\":2,\"709\":1,\"714\":1,\"721\":2,\"722\":1,\"730\":1,\"740\":1,\"741\":1,\"750\":2,\"825\":1,\"828\":1,\"829\":1,\"961\":1}}],[\"件\",{\"1\":{\"13\":1,\"621\":1,\"923\":1}}],[\"事先\",{\"1\":{\"789\":1,\"824\":1}}],[\"事物\",{\"1\":{\"527\":1,\"701\":1}}],[\"事是\",{\"1\":{\"366\":1,\"415\":1}}],[\"事实上\",{\"1\":{\"348\":1}}],[\"事实证明\",{\"1\":{\"198\":1}}],[\"事\",{\"1\":{\"13\":1,\"30\":1,\"959\":1}}],[\"事件驱动\",{\"1\":{\"34\":1,\"492\":1}}],[\"事件处理\",{\"0\":{\"31\":1},\"1\":{\"34\":1}}],[\"事件\",{\"1\":{\"13\":3,\"16\":2,\"17\":3,\"30\":5,\"31\":1,\"32\":4,\"34\":5,\"38\":10,\"39\":7,\"492\":6}}],[\"性较\",{\"1\":{\"959\":1}}],[\"性差\",{\"1\":{\"875\":1}}],[\"性为\",{\"1\":{\"721\":1}}],[\"性是\",{\"1\":{\"436\":1}}],[\"性而\",{\"1\":{\"221\":1}}],[\"性质\",{\"0\":{\"93\":1},\"1\":{\"80\":1,\"91\":2,\"93\":1,\"94\":1,\"100\":1,\"301\":1,\"559\":1,\"705\":1,\"938\":1}}],[\"性能\",{\"1\":{\"13\":2,\"38\":1,\"192\":1,\"194\":1,\"199\":1,\"214\":3,\"218\":1,\"222\":1,\"225\":1,\"229\":1,\"235\":1,\"242\":1,\"245\":1,\"246\":2,\"254\":2,\"257\":1,\"262\":1,\"313\":1,\"325\":2,\"355\":3,\"357\":4,\"358\":1,\"369\":1,\"372\":1,\"386\":3,\"390\":1,\"459\":1,\"480\":1,\"492\":1,\"875\":1,\"935\":1,\"953\":1}}],[\"性\",{\"0\":{\"12\":1,\"436\":1,\"812\":1,\"815\":1},\"1\":{\"201\":1,\"202\":2,\"217\":1,\"220\":1,\"246\":1,\"300\":1,\"315\":2,\"317\":2,\"318\":1,\"325\":1,\"342\":1,\"436\":1,\"509\":1,\"612\":2,\"701\":1,\"747\":1,\"748\":1,\"805\":1,\"809\":2,\"811\":1,\"863\":2,\"955\":1}}],[\"qingtian\",{\"1\":{\"342\":1}}],[\"qin\",{\"1\":{\"228\":1,\"722\":1}}],[\"qi\",{\"1\":{\"220\":1,\"221\":1,\"306\":1}}],[\"qianz423\",{\"1\":{\"53\":1}}],[\"quadratic\",{\"1\":{\"380\":1}}],[\"quantization\",{\"0\":{\"204\":1},\"1\":{\"419\":1,\"928\":1}}],[\"quit\",{\"1\":{\"182\":1}}],[\"queries\",{\"1\":{\"195\":2,\"197\":1,\"344\":1}}],[\"query\",{\"0\":{\"197\":1,\"198\":1,\"201\":1},\"1\":{\"10\":1,\"195\":2,\"202\":1,\"344\":3,\"877\":2,\"930\":1}}],[\"que\",{\"1\":{\"72\":60,\"73\":8,\"75\":8,\"82\":7,\"84\":8,\"85\":7,\"107\":15,\"571\":2}}],[\"queue\",{\"0\":{\"570\":1,\"571\":1,\"578\":1},\"1\":{\"72\":7,\"73\":1,\"75\":1,\"82\":2,\"84\":1,\"85\":2,\"570\":4,\"571\":1,\"577\":1,\"578\":1}}],[\"queuestat\",{\"1\":{\"8\":1}}],[\"qpa\",{\"0\":{\"157\":1,\"187\":1},\"1\":{\"188\":2,\"189\":2}}],[\"qt\",{\"0\":{\"157\":1,\"187\":1},\"1\":{\"188\":5,\"189\":2}}],[\"q\",{\"1\":{\"41\":2,\"89\":4,\"91\":8,\"128\":5,\"308\":1,\"348\":8,\"349\":10,\"451\":2,\"538\":2,\"869\":14,\"904\":1,\"907\":1}}],[\"qq\",{\"1\":{\"11\":1,\"811\":1,\"845\":1,\"855\":1,\"875\":1,\"921\":1}}],[\"最快\",{\"1\":{\"446\":1}}],[\"最为\",{\"1\":{\"391\":1,\"825\":1}}],[\"最低\",{\"1\":{\"300\":1,\"469\":1,\"807\":1}}],[\"最低点\",{\"1\":{\"75\":2}}],[\"最常\",{\"1\":{\"242\":1}}],[\"最具\",{\"1\":{\"242\":1}}],[\"最佳\",{\"1\":{\"192\":1,\"211\":1,\"257\":1,\"262\":1,\"375\":1,\"446\":1}}],[\"最佳时机\",{\"0\":{\"148\":1}}],[\"最新\",{\"1\":{\"168\":2,\"242\":1,\"929\":1}}],[\"最新版\",{\"1\":{\"11\":1}}],[\"最远\",{\"1\":{\"152\":1,\"317\":2}}],[\"最短\",{\"1\":{\"137\":1}}],[\"最多\",{\"1\":{\"113\":1,\"137\":1,\"529\":1}}],[\"最高\",{\"1\":{\"100\":1,\"469\":1,\"633\":1,\"663\":1,\"758\":1}}],[\"最深\",{\"0\":{\"90\":1},\"1\":{\"90\":1}}],[\"最近\",{\"0\":{\"89\":1,\"90\":1,\"91\":1},\"1\":{\"85\":1,\"89\":1,\"90\":1,\"91\":1,\"100\":1,\"222\":2,\"226\":2,\"248\":1,\"273\":1,\"299\":1,\"317\":1,\"342\":1,\"386\":1,\"393\":1,\"394\":1,\"817\":1,\"901\":1,\"963\":1}}],[\"最长\",{\"0\":{\"139\":1},\"1\":{\"66\":1,\"139\":4}}],[\"最初\",{\"1\":{\"53\":1,\"423\":1}}],[\"最优化\",{\"1\":{\"894\":1}}],[\"最优\",{\"1\":{\"53\":1,\"141\":4,\"153\":4,\"348\":2,\"349\":1,\"392\":1,\"446\":1,\"941\":1}}],[\"最终\",{\"1\":{\"49\":1,\"96\":1,\"227\":2,\"245\":1,\"282\":1,\"284\":1,\"293\":1,\"300\":1,\"311\":1,\"342\":2,\"348\":2,\"380\":1,\"855\":1,\"938\":1,\"949\":2,\"955\":1}}],[\"最后\",{\"0\":{\"842\":1},\"1\":{\"41\":1,\"51\":1,\"71\":1,\"72\":2,\"86\":1,\"103\":1,\"107\":1,\"148\":1,\"171\":1,\"174\":1,\"200\":1,\"228\":1,\"246\":1,\"299\":1,\"323\":1,\"354\":1,\"369\":1,\"380\":2,\"410\":1,\"528\":2,\"539\":2,\"540\":2,\"541\":2,\"545\":2,\"570\":1,\"574\":1,\"575\":2,\"595\":2,\"684\":3,\"698\":1,\"722\":1,\"793\":1,\"818\":2,\"825\":1,\"826\":2,\"827\":1,\"830\":1,\"839\":1,\"843\":2,\"845\":1,\"906\":1,\"929\":2,\"935\":1,\"953\":1}}],[\"最\",{\"1\":{\"23\":2,\"97\":8,\"107\":1,\"137\":3,\"139\":1,\"192\":2,\"194\":1,\"198\":1,\"199\":1,\"209\":1,\"214\":4,\"229\":1,\"254\":1,\"303\":2,\"313\":1,\"347\":3,\"358\":1,\"391\":2,\"469\":3,\"476\":2,\"535\":2,\"595\":1,\"598\":2,\"633\":1,\"639\":1,\"667\":1,\"690\":1,\"747\":1,\"748\":1,\"865\":1,\"895\":1,\"923\":1,\"935\":1,\"940\":1,\"944\":1,\"958\":1}}],[\"最好\",{\"1\":{\"22\":1,\"36\":1,\"261\":1,\"262\":1,\"357\":1,\"492\":1,\"595\":1,\"612\":1,\"658\":2,\"703\":1,\"769\":1,\"955\":1}}],[\"最先\",{\"1\":{\"20\":2}}],[\"最小值\",{\"1\":{\"837\":1,\"957\":1}}],[\"最小化\",{\"1\":{\"260\":1,\"300\":1,\"312\":1,\"348\":1,\"893\":2,\"904\":1}}],[\"最小\",{\"0\":{\"75\":1,\"137\":1},\"1\":{\"20\":2,\"100\":1,\"102\":2,\"137\":3,\"143\":1,\"228\":1,\"307\":1,\"308\":2,\"690\":1,\"816\":1,\"906\":1}}],[\"最大数\",{\"1\":{\"601\":5}}],[\"最大化\",{\"0\":{\"143\":1},\"1\":{\"260\":1,\"893\":1,\"953\":1}}],[\"最大值\",{\"0\":{\"107\":1},\"1\":{\"72\":1,\"107\":3,\"399\":1,\"419\":2,\"595\":1,\"837\":1}}],[\"最大\",{\"0\":{\"73\":1,\"74\":1,\"87\":1,\"153\":1},\"1\":{\"10\":1,\"38\":2,\"100\":1,\"143\":1,\"148\":1,\"152\":1,\"153\":2,\"217\":2,\"227\":2,\"299\":1,\"390\":1,\"395\":1,\"451\":1,\"574\":1,\"781\":1,\"922\":1,\"929\":2}}],[\"锁来\",{\"1\":{\"27\":1,\"529\":1}}],[\"锁上\",{\"1\":{\"25\":1}}],[\"锁会\",{\"1\":{\"25\":1}}],[\"锁\",{\"0\":{\"26\":1,\"527\":1,\"528\":1},\"1\":{\"10\":1,\"24\":7,\"25\":2,\"26\":1,\"27\":2,\"34\":1,\"500\":1,\"527\":7,\"529\":3,\"530\":2,\"531\":2,\"532\":1}}],[\"注入\",{\"1\":{\"370\":1,\"393\":1,\"938\":2,\"951\":2}}],[\"注\",{\"1\":{\"304\":2,\"539\":1,\"540\":1,\"541\":1,\"542\":1}}],[\"注释\",{\"1\":{\"273\":1,\"423\":3,\"425\":1,\"624\":1,\"625\":3}}],[\"注明\",{\"1\":{\"126\":1}}],[\"注意力\",{\"1\":{\"193\":2,\"194\":2,\"197\":1,\"201\":4,\"228\":1,\"370\":5,\"372\":1,\"379\":3,\"380\":1,\"384\":1,\"392\":1,\"399\":1,\"449\":1,\"882\":5,\"935\":1}}],[\"注意\",{\"1\":{\"10\":1,\"28\":1,\"30\":1,\"75\":1,\"80\":1,\"86\":1,\"103\":1,\"104\":1,\"137\":1,\"139\":1,\"146\":1,\"195\":1,\"199\":1,\"201\":1,\"226\":1,\"227\":1,\"282\":1,\"284\":1,\"299\":2,\"307\":1,\"332\":1,\"342\":1,\"355\":1,\"356\":1,\"380\":1,\"394\":1,\"410\":1,\"449\":1,\"534\":1,\"538\":1,\"544\":1,\"570\":1,\"571\":1,\"586\":1,\"595\":2,\"599\":1,\"600\":1,\"612\":1,\"616\":1,\"617\":1,\"637\":2,\"642\":1,\"665\":1,\"668\":1,\"672\":1,\"676\":1,\"684\":2,\"685\":1,\"689\":1,\"693\":1,\"698\":1,\"705\":1,\"707\":1,\"709\":1,\"712\":2,\"714\":1,\"720\":1,\"730\":1,\"734\":1,\"735\":3,\"738\":1,\"741\":1,\"744\":1,\"745\":1,\"750\":1,\"757\":1,\"769\":1,\"801\":1,\"804\":1,\"817\":2,\"830\":1,\"855\":1}}],[\"注册\",{\"1\":{\"3\":1,\"10\":2,\"32\":2,\"34\":1,\"38\":1,\"39\":1,\"492\":3}}],[\"可比\",{\"1\":{\"953\":1}}],[\"可控\",{\"1\":{\"952\":1}}],[\"可求\",{\"1\":{\"904\":1}}],[\"可执行文件\",{\"1\":{\"785\":1}}],[\"可执行程序\",{\"1\":{\"626\":1}}],[\"可不\",{\"1\":{\"769\":1}}],[\"可加\",{\"1\":{\"769\":1}}],[\"可有可无\",{\"1\":{\"719\":1}}],[\"可供\",{\"1\":{\"598\":1}}],[\"可维护性\",{\"1\":{\"525\":1}}],[\"可信\",{\"1\":{\"484\":1}}],[\"可选\",{\"1\":{\"467\":1}}],[\"可变\",{\"1\":{\"369\":1}}],[\"可靠\",{\"1\":{\"355\":1}}],[\"可视化\",{\"0\":{\"840\":1},\"1\":{\"311\":1}}],[\"可见\",{\"1\":{\"300\":2,\"342\":1,\"480\":1,\"485\":1,\"509\":1,\"612\":1}}],[\"可知\",{\"1\":{\"290\":1,\"391\":1}}],[\"可微性\",{\"1\":{\"392\":1}}],[\"可微\",{\"1\":{\"277\":1,\"294\":1,\"392\":1}}],[\"可行\",{\"1\":{\"248\":1}}],[\"可扩展性\",{\"1\":{\"245\":1,\"246\":3}}],[\"可验证\",{\"1\":{\"44\":1}}],[\"可是\",{\"1\":{\"20\":1,\"419\":1}}],[\"可能\",{\"1\":{\"19\":1,\"51\":1,\"53\":1,\"55\":1,\"103\":1,\"104\":1,\"113\":1,\"126\":2,\"184\":1,\"232\":1,\"235\":1,\"257\":1,\"261\":1,\"282\":1,\"292\":1,\"294\":1,\"303\":2,\"312\":1,\"322\":1,\"347\":1,\"348\":1,\"350\":1,\"355\":3,\"369\":1,\"386\":2,\"419\":1,\"437\":1,\"451\":1,\"465\":1,\"528\":1,\"534\":1,\"609\":1,\"654\":1,\"676\":1,\"684\":1,\"691\":1,\"751\":1,\"755\":1,\"769\":1,\"781\":1,\"828\":1,\"830\":1,\"875\":2,\"935\":1,\"940\":1,\"957\":1}}],[\"可写\",{\"1\":{\"16\":2,\"32\":2}}],[\"可惜\",{\"1\":{\"13\":1}}],[\"可读性\",{\"1\":{\"612\":1,\"621\":1,\"762\":1}}],[\"可读\",{\"1\":{\"13\":1,\"15\":1,\"16\":2,\"17\":4,\"30\":1,\"32\":3,\"38\":1,\"39\":1,\"492\":2,\"793\":2}}],[\"可\",{\"0\":{\"852\":1},\"1\":{\"13\":1,\"15\":3,\"30\":1,\"38\":1,\"41\":1,\"44\":1,\"137\":1,\"192\":1,\"195\":1,\"201\":3,\"217\":1,\"219\":1,\"220\":2,\"222\":5,\"223\":2,\"225\":1,\"226\":1,\"247\":1,\"277\":1,\"281\":1,\"283\":1,\"309\":1,\"315\":1,\"344\":1,\"349\":1,\"361\":1,\"369\":4,\"370\":1,\"371\":1,\"372\":1,\"392\":3,\"396\":1,\"426\":1,\"427\":1,\"449\":1,\"484\":2,\"492\":2,\"530\":1,\"537\":1,\"546\":1,\"563\":1,\"584\":1,\"671\":1,\"707\":1,\"747\":1,\"748\":2,\"756\":1,\"785\":1,\"793\":2,\"806\":1,\"826\":1,\"852\":1,\"875\":1,\"904\":1,\"935\":1}}],[\"可用\",{\"1\":{\"10\":1,\"247\":1,\"342\":1}}],[\"可以\",{\"0\":{\"17\":2},\"1\":{\"4\":3,\"5\":1,\"8\":2,\"11\":3,\"13\":2,\"17\":1,\"20\":2,\"23\":1,\"24\":1,\"28\":1,\"30\":5,\"35\":2,\"36\":1,\"37\":4,\"38\":5,\"39\":1,\"41\":2,\"44\":2,\"51\":1,\"53\":2,\"54\":1,\"69\":1,\"86\":3,\"89\":3,\"93\":1,\"97\":2,\"99\":2,\"103\":1,\"105\":1,\"107\":1,\"110\":1,\"113\":1,\"114\":1,\"115\":2,\"121\":1,\"122\":1,\"123\":1,\"126\":2,\"128\":1,\"137\":2,\"141\":1,\"153\":1,\"166\":1,\"168\":1,\"172\":1,\"174\":1,\"179\":1,\"181\":2,\"193\":3,\"194\":3,\"195\":2,\"196\":1,\"198\":1,\"199\":2,\"201\":1,\"203\":1,\"209\":1,\"210\":2,\"211\":2,\"218\":1,\"220\":2,\"221\":1,\"222\":3,\"228\":1,\"229\":2,\"232\":1,\"235\":1,\"237\":2,\"242\":1,\"243\":1,\"246\":5,\"248\":1,\"250\":1,\"257\":4,\"259\":2,\"261\":3,\"262\":1,\"263\":1,\"268\":1,\"277\":1,\"282\":3,\"283\":1,\"284\":2,\"290\":4,\"294\":1,\"299\":2,\"303\":1,\"308\":2,\"315\":2,\"319\":2,\"323\":1,\"332\":2,\"337\":3,\"342\":3,\"344\":1,\"348\":2,\"353\":1,\"354\":1,\"355\":4,\"357\":5,\"371\":1,\"379\":4,\"391\":1,\"392\":1,\"394\":1,\"398\":3,\"399\":2,\"409\":2,\"436\":3,\"446\":1,\"451\":1,\"459\":1,\"462\":1,\"465\":1,\"469\":1,\"476\":1,\"480\":1,\"485\":3,\"492\":2,\"502\":1,\"524\":1,\"525\":1,\"527\":1,\"530\":1,\"534\":2,\"535\":2,\"537\":1,\"545\":1,\"559\":2,\"563\":6,\"570\":1,\"572\":1,\"573\":1,\"575\":2,\"576\":2,\"577\":2,\"583\":2,\"585\":1,\"586\":1,\"587\":5,\"589\":1,\"590\":3,\"595\":3,\"596\":1,\"598\":1,\"599\":2,\"600\":5,\"601\":6,\"604\":3,\"605\":1,\"606\":4,\"607\":3,\"610\":2,\"611\":1,\"612\":5,\"615\":1,\"617\":2,\"620\":1,\"623\":1,\"635\":2,\"639\":4,\"642\":1,\"644\":1,\"648\":1,\"656\":1,\"658\":1,\"662\":1,\"665\":1,\"667\":2,\"668\":2,\"669\":1,\"670\":2,\"671\":4,\"672\":1,\"673\":2,\"676\":6,\"682\":1,\"684\":3,\"688\":3,\"690\":1,\"691\":1,\"694\":1,\"695\":2,\"696\":3,\"697\":1,\"698\":2,\"703\":1,\"704\":1,\"707\":3,\"712\":1,\"713\":2,\"714\":5,\"715\":1,\"717\":2,\"718\":1,\"719\":1,\"720\":2,\"721\":6,\"722\":2,\"724\":1,\"725\":2,\"730\":4,\"734\":1,\"735\":3,\"741\":3,\"743\":1,\"744\":8,\"745\":7,\"748\":4,\"750\":2,\"752\":3,\"755\":7,\"757\":1,\"766\":1,\"768\":1,\"769\":4,\"770\":1,\"781\":5,\"782\":2,\"785\":1,\"793\":3,\"794\":1,\"801\":1,\"805\":2,\"806\":3,\"809\":1,\"810\":2,\"816\":1,\"817\":1,\"818\":4,\"825\":2,\"827\":2,\"833\":2,\"836\":2,\"837\":3,\"843\":1,\"854\":1,\"857\":2,\"858\":1,\"859\":3,\"860\":2,\"863\":1,\"869\":1,\"873\":1,\"889\":1,\"892\":2,\"893\":1,\"896\":1,\"904\":2,\"906\":4,\"915\":1,\"916\":1,\"917\":1,\"920\":1,\"922\":2,\"923\":1,\"925\":1,\"928\":5,\"935\":4,\"938\":7,\"939\":1,\"940\":1,\"941\":3,\"944\":4,\"945\":1,\"947\":3,\"949\":2,\"951\":3,\"952\":1,\"957\":2,\"961\":2}}],[\"同种\",{\"1\":{\"875\":1}}],[\"同类\",{\"1\":{\"724\":2,\"729\":1,\"730\":1,\"743\":1}}],[\"同名\",{\"1\":{\"620\":1,\"621\":3,\"717\":1,\"750\":2,\"766\":10,\"768\":2,\"769\":13}}],[\"同\",{\"1\":{\"543\":1,\"574\":1,\"658\":1,\"676\":1,\"701\":1,\"708\":2,\"766\":1,\"769\":8,\"781\":1}}],[\"同化\",{\"1\":{\"393\":1}}],[\"同质\",{\"1\":{\"200\":1}}],[\"同层\",{\"1\":{\"123\":1}}],[\"同一\",{\"1\":{\"123\":1,\"128\":3,\"198\":1,\"223\":1,\"284\":1,\"288\":1,\"400\":1,\"525\":1,\"597\":1,\"621\":1,\"701\":1,\"768\":1,\"769\":3,\"799\":1,\"813\":1,\"859\":2,\"890\":1}}],[\"同一个\",{\"1\":{\"39\":1,\"223\":1,\"399\":1,\"528\":1,\"589\":1,\"594\":1,\"600\":1,\"601\":1,\"616\":1,\"621\":1,\"665\":1,\"676\":2,\"696\":1,\"701\":1,\"707\":2,\"724\":1,\"736\":1,\"766\":1,\"769\":1,\"818\":2,\"880\":1,\"881\":1,\"947\":1}}],[\"同学\",{\"1\":{\"102\":1,\"527\":1,\"540\":1}}],[\"同理\",{\"1\":{\"55\":1,\"86\":1,\"859\":1}}],[\"同样\",{\"1\":{\"10\":1,\"38\":1,\"259\":1,\"284\":1,\"370\":2,\"379\":1,\"416\":1,\"594\":1,\"707\":1,\"708\":1,\"745\":1,\"864\":1,\"922\":1,\"928\":1,\"938\":1,\"939\":1,\"940\":1,\"945\":1}}],[\"同时\",{\"1\":{\"10\":1,\"30\":2,\"53\":1,\"54\":1,\"90\":1,\"100\":1,\"103\":1,\"107\":1,\"137\":1,\"192\":1,\"193\":1,\"198\":1,\"199\":2,\"202\":1,\"228\":1,\"246\":1,\"260\":1,\"262\":1,\"290\":1,\"299\":1,\"301\":1,\"349\":1,\"354\":1,\"357\":1,\"369\":1,\"370\":3,\"379\":2,\"391\":1,\"392\":1,\"394\":1,\"462\":1,\"471\":1,\"492\":1,\"500\":2,\"599\":2,\"672\":1,\"704\":1,\"714\":1,\"718\":2,\"721\":1,\"745\":1,\"748\":1,\"755\":1,\"757\":2,\"781\":2,\"793\":1,\"829\":1,\"830\":1,\"855\":1,\"888\":1,\"924\":1,\"926\":1,\"928\":1,\"935\":2,\"947\":1,\"952\":1,\"957\":1,\"961\":1}}],[\"同步\",{\"0\":{\"32\":1,\"34\":1},\"1\":{\"4\":1,\"11\":1,\"13\":2,\"26\":1,\"30\":5,\"31\":1,\"32\":2,\"33\":1,\"34\":8,\"500\":1}}],[\"链\",{\"1\":{\"905\":1,\"953\":2}}],[\"链尾\",{\"1\":{\"829\":2,\"830\":2}}],[\"链路\",{\"1\":{\"485\":1}}],[\"链上\",{\"1\":{\"436\":1}}],[\"链式\",{\"1\":{\"69\":2}}],[\"链表\",{\"0\":{\"103\":1,\"761\":1,\"824\":1,\"825\":1,\"826\":1,\"827\":1,\"828\":1,\"829\":1},\"1\":{\"10\":1,\"19\":1,\"20\":1,\"38\":4,\"100\":1,\"103\":27,\"504\":1,\"563\":1,\"714\":2,\"761\":1,\"824\":4,\"825\":8,\"826\":9,\"827\":3,\"828\":5,\"829\":4,\"830\":5}}],[\"链接\",{\"0\":{\"19\":1,\"186\":1},\"1\":{\"3\":1,\"126\":1,\"174\":2,\"175\":2,\"304\":2,\"398\":1,\"714\":1,\"811\":2,\"841\":2,\"845\":2,\"875\":2}}],[\"内积\",{\"1\":{\"859\":8,\"860\":1}}],[\"内开\",{\"1\":{\"775\":1}}],[\"内用\",{\"1\":{\"741\":1}}],[\"内仅\",{\"1\":{\"717\":2}}],[\"内联\",{\"1\":{\"599\":1}}],[\"内嵌\",{\"1\":{\"599\":1,\"818\":1,\"819\":1}}],[\"内置\",{\"0\":{\"599\":1,\"707\":2},\"1\":{\"599\":6,\"707\":7}}],[\"内生\",{\"1\":{\"399\":1}}],[\"内算\",{\"1\":{\"379\":1}}],[\"内点\",{\"1\":{\"299\":1,\"323\":1}}],[\"内外\",{\"1\":{\"290\":1}}],[\"内在\",{\"1\":{\"254\":1,\"312\":1}}],[\"内部结构\",{\"1\":{\"563\":1}}],[\"内部\",{\"0\":{\"596\":1,\"597\":1},\"1\":{\"25\":1,\"27\":1,\"44\":1,\"304\":1,\"476\":1,\"545\":1,\"546\":2,\"597\":3,\"610\":1,\"620\":3,\"701\":1,\"707\":1,\"755\":1,\"785\":2}}],[\"内\",{\"0\":{\"183\":1,\"615\":1},\"1\":{\"19\":1,\"36\":1,\"164\":1,\"166\":2,\"177\":1,\"218\":1,\"226\":1,\"227\":1,\"246\":3,\"299\":1,\"303\":1,\"342\":2,\"357\":1,\"372\":1,\"393\":1,\"539\":3,\"540\":4,\"542\":1,\"543\":4,\"545\":2,\"559\":1,\"612\":1,\"620\":2,\"621\":2,\"708\":1,\"719\":1,\"730\":2,\"738\":1,\"739\":1,\"740\":1,\"744\":3,\"755\":1,\"782\":1,\"859\":1,\"863\":1,\"887\":1}}],[\"内核\",{\"1\":{\"13\":1,\"15\":1,\"16\":2,\"17\":1,\"30\":5,\"31\":1,\"32\":2,\"34\":1,\"38\":5,\"195\":3,\"197\":2,\"205\":2,\"211\":1,\"246\":1,\"370\":1,\"953\":1}}],[\"内存不足\",{\"1\":{\"712\":1,\"714\":1}}],[\"内存地址\",{\"1\":{\"663\":2,\"668\":1}}],[\"内存空间\",{\"1\":{\"542\":1,\"656\":1,\"714\":5,\"744\":1}}],[\"内存容量\",{\"1\":{\"169\":1}}],[\"内存\",{\"0\":{\"677\":1,\"852\":1},\"1\":{\"10\":1,\"13\":1,\"70\":1,\"169\":1,\"211\":1,\"218\":2,\"222\":3,\"246\":2,\"254\":1,\"282\":1,\"293\":1,\"370\":1,\"372\":2,\"386\":1,\"527\":1,\"577\":3,\"586\":2,\"606\":1,\"609\":2,\"610\":1,\"611\":1,\"612\":3,\"613\":3,\"620\":2,\"621\":2,\"633\":1,\"644\":1,\"645\":1,\"655\":1,\"662\":2,\"665\":1,\"676\":1,\"677\":2,\"702\":1,\"710\":1,\"722\":1,\"744\":1,\"760\":1,\"762\":2,\"775\":1,\"781\":1,\"782\":3,\"785\":5,\"787\":2,\"788\":1,\"790\":3,\"791\":2,\"793\":1,\"804\":1,\"824\":1,\"828\":1,\"830\":1,\"839\":1,\"852\":1,\"924\":1}}],[\"内容\",{\"1\":{\"4\":2,\"11\":2,\"16\":1,\"41\":1,\"65\":1,\"168\":1,\"191\":1,\"398\":1,\"485\":2,\"538\":1,\"545\":1,\"575\":1,\"624\":1,\"663\":1,\"668\":1,\"688\":1,\"689\":1,\"693\":1,\"695\":1,\"701\":1,\"708\":1,\"738\":1,\"781\":2,\"782\":1,\"785\":1,\"788\":1,\"793\":1,\"804\":1,\"830\":1,\"940\":1}}],[\"占有\",{\"1\":{\"611\":1,\"620\":1,\"684\":1,\"708\":3,\"710\":1,\"744\":1,\"762\":1,\"785\":1}}],[\"占据\",{\"1\":{\"218\":1,\"609\":1,\"760\":1}}],[\"占用率\",{\"1\":{\"273\":1}}],[\"占用\",{\"0\":{\"852\":1},\"1\":{\"19\":3,\"218\":2,\"246\":4,\"612\":2,\"621\":1,\"676\":1,\"702\":2,\"715\":1,\"722\":1,\"762\":2,\"839\":1,\"852\":1}}],[\"占\",{\"1\":{\"10\":1,\"246\":1,\"574\":1,\"586\":1,\"625\":1,\"708\":2,\"744\":2,\"793\":1,\"810\":1}}],[\"循环体\",{\"1\":{\"816\":3,\"819\":1}}],[\"循环\",{\"0\":{\"819\":2},\"1\":{\"10\":1,\"17\":1,\"19\":2,\"20\":1,\"32\":1,\"71\":1,\"104\":1,\"137\":2,\"223\":1,\"384\":1,\"599\":1,\"707\":1,\"807\":1,\"816\":1,\"819\":1,\"826\":2,\"827\":2,\"835\":1,\"922\":1}}],[\"下界\",{\"1\":{\"953\":1}}],[\"下前\",{\"1\":{\"938\":1,\"951\":1}}],[\"下划线\",{\"1\":{\"657\":3}}],[\"下栈\",{\"1\":{\"563\":1}}],[\"下图\",{\"1\":{\"563\":1,\"939\":1,\"959\":1,\"961\":1}}],[\"下次\",{\"1\":{\"480\":1}}],[\"下功夫\",{\"1\":{\"390\":1}}],[\"下层\",{\"1\":{\"379\":1}}],[\"下降\",{\"1\":{\"355\":2,\"386\":1,\"390\":2,\"875\":1,\"904\":1,\"957\":1}}],[\"下式\",{\"1\":{\"349\":1}}],[\"下点\",{\"1\":{\"260\":1}}],[\"下游\",{\"1\":{\"257\":3,\"259\":1,\"262\":2,\"314\":1,\"316\":1,\"320\":3,\"325\":2,\"370\":1,\"379\":2,\"864\":1,\"922\":1}}],[\"下载\",{\"1\":{\"168\":1,\"191\":2,\"476\":1}}],[\"下列\",{\"1\":{\"93\":1,\"113\":1}}],[\"下半\",{\"1\":{\"85\":1}}],[\"下面\",{\"1\":{\"80\":1,\"126\":1,\"137\":1,\"170\":1,\"191\":1,\"469\":1,\"527\":1,\"528\":1,\"576\":1,\"615\":1,\"781\":1,\"809\":1,\"908\":1}}],[\"下标\",{\"1\":{\"69\":5,\"105\":1,\"534\":1,\"574\":1,\"811\":1}}],[\"下篇\",{\"1\":{\"46\":1}}],[\"下去\",{\"1\":{\"17\":1,\"126\":2,\"530\":1,\"748\":1,\"818\":1,\"826\":1}}],[\"下\",{\"1\":{\"10\":1,\"13\":1,\"17\":1,\"22\":1,\"27\":1,\"30\":2,\"38\":1,\"64\":1,\"72\":3,\"90\":1,\"103\":2,\"106\":1,\"123\":1,\"137\":1,\"152\":2,\"153\":3,\"160\":1,\"175\":2,\"214\":1,\"222\":1,\"257\":1,\"260\":2,\"261\":1,\"263\":2,\"290\":2,\"291\":1,\"299\":1,\"312\":9,\"314\":2,\"331\":1,\"332\":1,\"342\":1,\"380\":1,\"423\":1,\"461\":1,\"525\":1,\"537\":1,\"540\":1,\"541\":1,\"559\":2,\"561\":1,\"563\":1,\"573\":1,\"575\":1,\"577\":1,\"590\":1,\"600\":1,\"612\":1,\"613\":1,\"642\":2,\"676\":2,\"698\":1,\"709\":1,\"714\":2,\"769\":1,\"781\":1,\"793\":1,\"818\":1,\"825\":3,\"828\":3,\"829\":1,\"830\":3,\"833\":3,\"845\":1,\"852\":1,\"858\":1,\"875\":1,\"903\":1,\"923\":1,\"928\":4,\"939\":1,\"940\":1,\"952\":2,\"963\":1}}],[\"下来\",{\"1\":{\"10\":1,\"386\":1,\"392\":1,\"394\":1,\"395\":2,\"704\":1}}],[\"rvalve\",{\"1\":{\"806\":1}}],[\"rbegin\",{\"1\":{\"541\":2,\"575\":1}}],[\"rbf\",{\"1\":{\"228\":3,\"246\":1}}],[\"rbfnet\",{\"1\":{\"228\":1}}],[\"rpn\",{\"1\":{\"410\":3,\"411\":2,\"416\":1,\"417\":2}}],[\"rcnn\",{\"1\":{\"377\":1}}],[\"rcnet\",{\"1\":{\"228\":3}}],[\"rc\",{\"1\":{\"371\":1,\"372\":2}}],[\"r1\",{\"1\":{\"353\":1}}],[\"rdp\",{\"1\":{\"322\":1}}],[\"r3\",{\"1\":{\"280\":1}}],[\"rgb\",{\"1\":{\"245\":2,\"247\":1,\"271\":3,\"301\":1,\"305\":1,\"380\":1,\"426\":5,\"923\":1}}],[\"rgcnn\",{\"1\":{\"226\":1}}],[\"rri\",{\"1\":{\"225\":1}}],[\"rsconv\",{\"1\":{\"222\":1}}],[\"rs\",{\"1\":{\"222\":1}}],[\"rules\",{\"0\":{\"374\":1,\"375\":1}}],[\"rulebook\",{\"0\":{\"210\":1},\"1\":{\"210\":8}}],[\"runwayml\",{\"1\":{\"929\":2}}],[\"runs\",{\"1\":{\"840\":1,\"841\":1}}],[\"runtimeerror\",{\"1\":{\"852\":1}}],[\"runtime\",{\"1\":{\"530\":1,\"531\":1}}],[\"run\",{\"1\":{\"165\":2,\"184\":1,\"191\":6}}],[\"runoob\",{\"1\":{\"160\":1,\"833\":1}}],[\"rnp\",{\"1\":{\"394\":1}}],[\"rnn\",{\"1\":{\"228\":4,\"248\":1,\"449\":1}}],[\"rn\",{\"1\":{\"196\":1,\"284\":2}}],[\"rm\",{\"1\":{\"171\":1}}],[\"r\",{\"0\":{\"403\":1,\"407\":1,\"410\":1,\"418\":1},\"1\":{\"86\":4,\"87\":2,\"139\":5,\"172\":1,\"175\":4,\"181\":1,\"196\":1,\"290\":1,\"363\":1,\"364\":1,\"366\":6,\"367\":2,\"371\":1,\"372\":2,\"380\":1,\"402\":1,\"409\":2,\"410\":2,\"419\":2,\"451\":5,\"594\":2,\"595\":2,\"835\":1,\"902\":1}}],[\"robust\",{\"1\":{\"837\":1,\"862\":1}}],[\"robot\",{\"1\":{\"342\":1}}],[\"road\",{\"1\":{\"422\":1}}],[\"roi\",{\"0\":{\"365\":1,\"366\":1,\"367\":1,\"415\":1},\"1\":{\"366\":9,\"406\":2,\"408\":2,\"409\":1,\"410\":4,\"415\":4,\"416\":7,\"419\":22}}],[\"rotation\",{\"1\":{\"305\":1}}],[\"rolandxxx\",{\"1\":{\"303\":1}}],[\"rondom\",{\"1\":{\"263\":1}}],[\"rosu\",{\"1\":{\"246\":1}}],[\"root2\",{\"1\":{\"88\":6}}],[\"root1\",{\"1\":{\"88\":9}}],[\"root\",{\"1\":{\"70\":2,\"71\":8,\"72\":43,\"73\":7,\"74\":3,\"75\":11,\"76\":8,\"77\":4,\"80\":11,\"81\":6,\"82\":19,\"83\":2,\"84\":3,\"85\":23,\"86\":7,\"87\":10,\"89\":9,\"90\":21,\"91\":13,\"94\":12,\"95\":13,\"96\":4,\"97\":34,\"98\":15,\"99\":15,\"100\":16,\"186\":1,\"188\":1,\"528\":2,\"529\":3,\"530\":1,\"531\":1}}],[\"row\",{\"1\":{\"10\":1,\"128\":10,\"344\":2}}],[\"rows\",{\"1\":{\"10\":1}}],[\"riding\",{\"1\":{\"929\":1}}],[\"rich\",{\"1\":{\"428\":1}}],[\"riconv\",{\"1\":{\"223\":1}}],[\"righttreenum\",{\"1\":{\"80\":2}}],[\"rightdepth\",{\"1\":{\"80\":3}}],[\"rightsideview\",{\"1\":{\"72\":2}}],[\"right\",{\"1\":{\"69\":2,\"70\":7,\"71\":7,\"72\":17,\"73\":3,\"75\":6,\"76\":2,\"77\":10,\"78\":9,\"80\":11,\"81\":5,\"82\":8,\"83\":5,\"84\":2,\"85\":8,\"86\":1,\"87\":6,\"88\":3,\"89\":7,\"90\":13,\"91\":4,\"94\":1,\"95\":2,\"96\":6,\"97\":11,\"98\":6,\"99\":5,\"100\":5,\"102\":5,\"103\":6,\"104\":24,\"137\":22,\"138\":6,\"139\":5,\"383\":1,\"422\":2,\"426\":1,\"806\":1}}],[\"ritm\",{\"0\":{\"54\":1},\"1\":{\"48\":1,\"55\":1}}],[\"ratio\",{\"1\":{\"451\":1}}],[\"ratios\",{\"1\":{\"305\":11}}],[\"rate\",{\"1\":{\"54\":2}}],[\"raw\",{\"1\":{\"293\":1,\"426\":2}}],[\"range\",{\"1\":{\"545\":1,\"574\":1}}],[\"rangenet\",{\"1\":{\"245\":1}}],[\"ranahanocka\",{\"1\":{\"301\":1,\"304\":1,\"305\":1}}],[\"randint\",{\"1\":{\"868\":1}}],[\"randn\",{\"1\":{\"344\":1,\"868\":1}}],[\"rand\",{\"1\":{\"344\":3,\"840\":2,\"849\":1}}],[\"random\",{\"1\":{\"263\":3,\"314\":1}}],[\"randla\",{\"1\":{\"254\":1}}],[\"ransomnote\",{\"1\":{\"104\":2}}],[\"raii\",{\"0\":{\"22\":1},\"1\":{\"22\":4,\"27\":1,\"530\":1}}],[\"reusability\",{\"1\":{\"747\":1}}],[\"rend\",{\"1\":{\"541\":2,\"575\":1}}],[\"rename\",{\"1\":{\"163\":1}}],[\"re\",{\"1\":{\"396\":1}}],[\"reorganizations\",{\"1\":{\"392\":1}}],[\"red2\",{\"1\":{\"390\":1}}],[\"red\",{\"1\":{\"380\":1}}],[\"reduce\",{\"1\":{\"309\":1}}],[\"reduced\",{\"1\":{\"254\":1}}],[\"require\",{\"1\":{\"427\":1}}],[\"requires\",{\"1\":{\"344\":1}}],[\"request\",{\"1\":{\"41\":1,\"43\":1,\"46\":1,\"476\":1}}],[\"reg\",{\"0\":{\"413\":1},\"1\":{\"411\":1,\"928\":3}}],[\"regression\",{\"1\":{\"404\":1,\"405\":1}}],[\"regressively\",{\"1\":{\"313\":1,\"314\":1}}],[\"regular\",{\"0\":{\"363\":1},\"1\":{\"383\":1}}],[\"register\",{\"0\":{\"613\":1},\"1\":{\"610\":1,\"613\":1}}],[\"regime\",{\"1\":{\"261\":1}}],[\"region\",{\"0\":{\"411\":1},\"1\":{\"195\":1,\"367\":1,\"428\":1}}],[\"repaint\",{\"0\":{\"940\":1},\"1\":{\"940\":1}}],[\"replace\",{\"1\":{\"793\":1}}],[\"replacespace\",{\"1\":{\"105\":1}}],[\"republic\",{\"1\":{\"687\":1}}],[\"repeat\",{\"1\":{\"344\":2}}],[\"reproj\",{\"1\":{\"298\":2}}],[\"representations\",{\"1\":{\"321\":1}}],[\"representation\",{\"0\":{\"278\":1},\"1\":{\"261\":1,\"266\":2,\"277\":1}}],[\"representing\",{\"1\":{\"195\":1}}],[\"reinstates\",{\"1\":{\"309\":1}}],[\"reinstalling\",{\"1\":{\"188\":1}}],[\"reinorder\",{\"1\":{\"100\":4}}],[\"reboot\",{\"1\":{\"172\":1,\"191\":1,\"852\":1}}],[\"rebase\",{\"1\":{\"168\":1}}],[\"remain\",{\"1\":{\"119\":2}}],[\"remove\",{\"1\":{\"137\":1,\"191\":1,\"201\":1}}],[\"removeduplicates\",{\"1\":{\"106\":1}}],[\"removenthfromend\",{\"1\":{\"103\":2}}],[\"removeelements\",{\"1\":{\"103\":1}}],[\"release\",{\"1\":{\"422\":1}}],[\"released\",{\"1\":{\"422\":2}}],[\"relevant\",{\"1\":{\"54\":5}}],[\"related\",{\"0\":{\"387\":1,\"872\":1}}],[\"relations\",{\"1\":{\"892\":1}}],[\"relational\",{\"1\":{\"220\":1}}],[\"relative\",{\"1\":{\"81\":2,\"305\":1,\"322\":1,\"399\":1}}],[\"relpv\",{\"1\":{\"223\":1}}],[\"relu\",{\"0\":{\"435\":1,\"436\":1,\"437\":1,\"438\":1,\"439\":1},\"1\":{\"220\":1,\"310\":2,\"322\":1,\"436\":1,\"437\":4,\"449\":5}}],[\"reviewkd\",{\"1\":{\"357\":1,\"358\":1}}],[\"reviving\",{\"1\":{\"54\":4}}],[\"reversible\",{\"1\":{\"309\":1}}],[\"reverseleftwords\",{\"1\":{\"105\":2}}],[\"reverselist\",{\"1\":{\"103\":3}}],[\"reversewords\",{\"1\":{\"105\":1}}],[\"reversestr\",{\"1\":{\"105\":1}}],[\"reversestring\",{\"1\":{\"105\":1}}],[\"reversekgroup\",{\"1\":{\"103\":2}}],[\"reverse\",{\"1\":{\"71\":2,\"103\":2,\"105\":6,\"106\":1,\"541\":4,\"576\":1}}],[\"receptive\",{\"1\":{\"361\":2}}],[\"receive\",{\"1\":{\"321\":1}}],[\"rectified\",{\"0\":{\"435\":1},\"1\":{\"342\":1,\"449\":1}}],[\"reco\",{\"0\":{\"889\":1},\"1\":{\"889\":5}}],[\"recorded\",{\"1\":{\"426\":1}}],[\"records\",{\"1\":{\"309\":1,\"827\":1,\"830\":1}}],[\"recognition\",{\"1\":{\"359\":2,\"380\":1,\"424\":1,\"427\":1}}],[\"reconstruction\",{\"1\":{\"342\":1}}],[\"recover\",{\"1\":{\"309\":1}}],[\"recovery\",{\"1\":{\"54\":2}}],[\"recursive\",{\"1\":{\"592\":1}}],[\"recur\",{\"1\":{\"81\":4}}],[\"recv\",{\"1\":{\"30\":1}}],[\"reformulation\",{\"0\":{\"354\":1}}],[\"refine\",{\"1\":{\"873\":1}}],[\"refined\",{\"1\":{\"295\":1}}],[\"refinement\",{\"0\":{\"51\":1,\"52\":1,\"282\":1,\"871\":1,\"901\":1},\"1\":{\"51\":2,\"282\":1,\"453\":1,\"871\":2,\"901\":1,\"910\":2,\"952\":1}}],[\"ref\",{\"1\":{\"290\":1,\"291\":1,\"294\":2}}],[\"reference\",{\"1\":{\"952\":1}}],[\"referer\",{\"1\":{\"41\":1}}],[\"refer\",{\"1\":{\"208\":1}}],[\"retrieve\",{\"1\":{\"889\":2}}],[\"retinanet\",{\"1\":{\"402\":1}}],[\"retain\",{\"1\":{\"309\":1}}],[\"rethinking\",{\"0\":{\"52\":1},\"1\":{\"375\":1}}],[\"returns\",{\"1\":{\"559\":2}}],[\"return\",{\"1\":{\"27\":2,\"70\":2,\"71\":3,\"72\":15,\"73\":3,\"74\":2,\"75\":5,\"76\":2,\"77\":7,\"78\":5,\"80\":6,\"81\":6,\"82\":6,\"83\":4,\"84\":1,\"85\":7,\"86\":2,\"87\":5,\"88\":3,\"89\":6,\"90\":14,\"91\":4,\"94\":4,\"95\":1,\"96\":3,\"97\":6,\"98\":4,\"99\":9,\"100\":9,\"102\":1,\"103\":24,\"104\":19,\"105\":7,\"106\":5,\"107\":2,\"110\":1,\"112\":2,\"113\":3,\"114\":3,\"115\":3,\"116\":3,\"118\":4,\"119\":6,\"121\":2,\"122\":2,\"123\":2,\"125\":2,\"126\":2,\"128\":6,\"137\":3,\"138\":1,\"139\":2,\"142\":1,\"143\":2,\"146\":2,\"148\":1,\"152\":3,\"153\":1,\"304\":1,\"305\":3,\"344\":1,\"524\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"534\":2,\"535\":1,\"538\":1,\"539\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":1,\"545\":1,\"576\":1,\"583\":1,\"587\":6,\"595\":2,\"599\":2,\"600\":2,\"601\":3,\"605\":1,\"606\":1,\"612\":6,\"613\":1,\"615\":2,\"624\":2,\"666\":1,\"671\":1,\"690\":1,\"695\":1,\"698\":2,\"709\":1,\"713\":1,\"718\":2,\"721\":2,\"722\":1,\"724\":2,\"729\":2,\"738\":2,\"740\":1,\"745\":2,\"759\":1,\"769\":1,\"781\":4,\"825\":1,\"826\":1,\"828\":2,\"829\":1,\"830\":6,\"834\":1,\"835\":1,\"854\":1,\"855\":1,\"868\":1,\"877\":2,\"929\":1}}],[\"ret\",{\"1\":{\"27\":3}}],[\"respectively\",{\"1\":{\"428\":1}}],[\"reserved\",{\"1\":{\"852\":1}}],[\"reserve\",{\"1\":{\"542\":1}}],[\"researchers\",{\"1\":{\"427\":1}}],[\"research\",{\"1\":{\"361\":1,\"385\":1}}],[\"reset\",{\"1\":{\"168\":3}}],[\"resnetblock\",{\"1\":{\"928\":1}}],[\"resnet32\",{\"1\":{\"357\":1}}],[\"resnet8\",{\"1\":{\"355\":2,\"357\":1}}],[\"resnet\",{\"1\":{\"344\":1,\"858\":1,\"859\":1}}],[\"resnet50\",{\"1\":{\"344\":2}}],[\"resolving\",{\"1\":{\"305\":1}}],[\"resolution\",{\"0\":{\"901\":1},\"1\":{\"277\":1,\"309\":3,\"379\":2,\"380\":1,\"862\":1,\"875\":1,\"910\":1,\"922\":1}}],[\"resource\",{\"1\":{\"22\":1}}],[\"restart\",{\"1\":{\"186\":1,\"189\":1}}],[\"restoreipaddresses\",{\"1\":{\"119\":1}}],[\"resize\",{\"1\":{\"105\":1,\"542\":2,\"574\":1}}],[\"res\",{\"1\":{\"72\":3,\"85\":3,\"99\":4,\"102\":6,\"137\":11,\"139\":8}}],[\"results\",{\"0\":{\"369\":1},\"1\":{\"369\":1}}],[\"resulting\",{\"1\":{\"321\":1,\"383\":1}}],[\"result\",{\"0\":{\"311\":1,\"357\":1,\"376\":1,\"396\":1,\"400\":1,\"875\":1},\"1\":{\"10\":7,\"70\":3,\"71\":11,\"72\":43,\"80\":2,\"82\":16,\"84\":3,\"99\":7,\"100\":14,\"104\":8,\"105\":4,\"106\":5,\"107\":5,\"112\":3,\"113\":3,\"114\":4,\"115\":3,\"116\":3,\"118\":3,\"119\":3,\"121\":4,\"122\":3,\"123\":3,\"125\":3,\"126\":3,\"128\":3,\"138\":3,\"143\":3,\"146\":3,\"148\":3,\"153\":4,\"195\":1}}],[\"readability\",{\"1\":{\"344\":1}}],[\"readme\",{\"1\":{\"342\":1}}],[\"read\",{\"1\":{\"13\":2,\"17\":1,\"30\":1,\"46\":1,\"782\":4}}],[\"real\",{\"1\":{\"10\":1,\"427\":1,\"634\":2}}],[\"reactor\",{\"0\":{\"13\":1,\"497\":1},\"1\":{\"3\":2,\"13\":3,\"31\":7,\"499\":1}}],[\"fm\",{\"1\":{\"862\":2}}],[\"fmt\",{\"1\":{\"837\":2}}],[\"fp\",{\"1\":{\"838\":2}}],[\"fps\",{\"1\":{\"312\":1,\"317\":3,\"835\":4}}],[\"f3\",{\"1\":{\"781\":8}}],[\"f2\",{\"1\":{\"595\":5,\"781\":14,\"794\":3,\"897\":2}}],[\"f25980001b1b106000338\",{\"1\":{\"41\":2}}],[\"fuser\",{\"1\":{\"852\":1}}],[\"fusion\",{\"1\":{\"392\":1}}],[\"full\",{\"1\":{\"422\":1}}],[\"fully\",{\"1\":{\"367\":1}}],[\"future\",{\"0\":{\"358\":1},\"1\":{\"427\":1}}],[\"further\",{\"1\":{\"321\":1}}],[\"func\",{\"1\":{\"589\":3,\"597\":1,\"598\":2}}],[\"functional\",{\"1\":{\"855\":1}}],[\"functioname\",{\"1\":{\"590\":2}}],[\"functionname\",{\"1\":{\"589\":1}}],[\"functions\",{\"1\":{\"426\":1}}],[\"function\",{\"0\":{\"582\":1},\"1\":{\"202\":1,\"590\":1,\"599\":1,\"619\":2,\"904\":5,\"905\":1,\"942\":1}}],[\"fun\",{\"1\":{\"524\":2,\"525\":3,\"600\":3,\"671\":3,\"735\":4,\"854\":1}}],[\"funtions\",{\"0\":{\"207\":1}}],[\"fvi\",{\"1\":{\"282\":2}}],[\"fvol\",{\"1\":{\"280\":2,\"281\":1,\"282\":1,\"284\":1}}],[\"fk\",{\"1\":{\"268\":3}}],[\"fcos\",{\"1\":{\"402\":1}}],[\"fc\",{\"1\":{\"322\":1,\"408\":1,\"410\":1}}],[\"fcgf\",{\"1\":{\"256\":1}}],[\"fcpn\",{\"1\":{\"246\":1}}],[\"fccrf\",{\"1\":{\"246\":1}}],[\"fcnn\",{\"1\":{\"246\":1}}],[\"fcn\",{\"1\":{\"49\":1,\"245\":1,\"359\":2,\"367\":2}}],[\"f0\",{\"1\":{\"210\":1}}],[\"fn\",{\"1\":{\"845\":2,\"868\":1}}],[\"fni\",{\"1\":{\"203\":1}}],[\"fnt\",{\"1\":{\"203\":1}}],[\"flase\",{\"1\":{\"542\":1}}],[\"flatten\",{\"1\":{\"344\":2,\"380\":1}}],[\"flops\",{\"1\":{\"875\":1}}],[\"float\",{\"1\":{\"535\":1,\"590\":3,\"594\":2,\"595\":5,\"600\":2,\"632\":1,\"633\":1,\"634\":2,\"644\":1,\"665\":1,\"676\":2,\"712\":2,\"745\":6,\"757\":1,\"769\":8,\"798\":1,\"799\":1,\"801\":1,\"804\":1,\"825\":1,\"826\":1,\"827\":1,\"828\":1,\"830\":2}}],[\"flow\",{\"1\":{\"53\":1,\"912\":1}}],[\"fliter\",{\"1\":{\"297\":1}}],[\"flex\",{\"1\":{\"222\":1}}],[\"flexible\",{\"1\":{\"195\":2}}],[\"f1t\",{\"1\":{\"203\":1}}],[\"f1\",{\"1\":{\"191\":1,\"595\":1,\"781\":9,\"793\":8}}],[\"fsrgan\",{\"1\":{\"910\":1}}],[\"fstream\",{\"1\":{\"781\":6,\"791\":1}}],[\"fstab\",{\"1\":{\"171\":1,\"172\":2}}],[\"fsl\",{\"1\":{\"184\":1}}],[\"ffhq\",{\"1\":{\"910\":1}}],[\"ffn\",{\"1\":{\"373\":1,\"398\":1}}],[\"fft\",{\"1\":{\"222\":1}}],[\"ff\",{\"1\":{\"174\":2,\"175\":2,\"877\":4}}],[\"father\",{\"1\":{\"748\":1}}],[\"factor\",{\"1\":{\"845\":1,\"928\":1}}],[\"fac\",{\"1\":{\"612\":3,\"613\":1}}],[\"faces\",{\"1\":{\"305\":1}}],[\"face\",{\"1\":{\"305\":1}}],[\"farthest\",{\"1\":{\"312\":1,\"317\":1}}],[\"fall\",{\"1\":{\"261\":1}}],[\"false\",{\"1\":{\"77\":3,\"78\":3,\"85\":2,\"99\":3,\"104\":4,\"106\":4,\"118\":1,\"119\":3,\"125\":2,\"126\":5,\"128\":3,\"152\":2,\"542\":1,\"556\":1,\"810\":3,\"833\":1,\"837\":3,\"845\":6,\"846\":1,\"848\":1}}],[\"failed\",{\"1\":{\"188\":1,\"191\":1}}],[\"fasle\",{\"1\":{\"106\":1}}],[\"faster\",{\"0\":{\"410\":1},\"1\":{\"366\":1,\"410\":1}}],[\"fast\",{\"0\":{\"407\":1},\"1\":{\"103\":7,\"366\":2,\"409\":1,\"410\":1}}],[\"fa\",{\"1\":{\"81\":1,\"126\":2}}],[\"fang\",{\"1\":{\"81\":1,\"713\":1}}],[\"f\",{\"0\":{\"52\":1},\"1\":{\"203\":1,\"281\":1,\"282\":3,\"332\":1,\"399\":1,\"435\":1,\"601\":1,\"611\":3,\"612\":8,\"613\":6,\"644\":2,\"675\":2,\"722\":1,\"729\":6,\"736\":2,\"837\":1,\"859\":4,\"892\":1,\"897\":14,\"900\":5,\"902\":1,\"903\":3,\"904\":2,\"907\":1,\"909\":1,\"928\":7,\"944\":1,\"955\":2,\"959\":2,\"963\":2}}],[\"feedforward\",{\"1\":{\"877\":1}}],[\"feeder\",{\"1\":{\"860\":1}}],[\"feedback\",{\"1\":{\"422\":1}}],[\"feb\",{\"1\":{\"856\":1}}],[\"feng\",{\"1\":{\"226\":1}}],[\"felix\",{\"1\":{\"165\":1}}],[\"features\",{\"1\":{\"195\":5,\"201\":1,\"202\":1,\"262\":1,\"293\":1,\"304\":1,\"305\":2,\"309\":2,\"426\":1,\"928\":1,\"956\":1}}],[\"feature\",{\"0\":{\"289\":1,\"350\":1},\"1\":{\"50\":1,\"195\":1,\"220\":1,\"304\":1,\"309\":5,\"359\":2,\"361\":3,\"366\":2,\"380\":2,\"410\":2,\"411\":1,\"419\":1,\"451\":1,\"887\":2,\"891\":1,\"955\":1,\"956\":1}}],[\"fetch\",{\"1\":{\"10\":1,\"168\":2}}],[\"foldingnet\",{\"1\":{\"225\":1}}],[\"followed\",{\"1\":{\"202\":1}}],[\"foursum\",{\"1\":{\"104\":1}}],[\"foursumcount\",{\"1\":{\"104\":1}}],[\"foundation\",{\"1\":{\"360\":1}}],[\"found\",{\"1\":{\"43\":2,\"177\":1,\"188\":1,\"476\":2}}],[\"focalclick\",{\"0\":{\"55\":1},\"1\":{\"48\":1}}],[\"forst\",{\"1\":{\"574\":1}}],[\"forward\",{\"1\":{\"304\":2,\"344\":1,\"840\":1,\"854\":1,\"855\":1,\"877\":3}}],[\"for\",{\"0\":{\"52\":1,\"212\":1,\"286\":1,\"938\":1,\"944\":1,\"945\":1,\"951\":1,\"953\":1},\"1\":{\"48\":1,\"51\":1,\"52\":1,\"54\":4,\"70\":1,\"72\":12,\"73\":1,\"74\":1,\"75\":1,\"82\":2,\"84\":1,\"86\":1,\"87\":2,\"99\":1,\"100\":1,\"102\":4,\"103\":1,\"104\":17,\"105\":5,\"106\":3,\"107\":2,\"110\":1,\"112\":3,\"113\":1,\"114\":1,\"115\":1,\"116\":2,\"118\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"125\":1,\"126\":1,\"128\":4,\"137\":3,\"138\":1,\"139\":1,\"143\":2,\"146\":1,\"148\":1,\"152\":2,\"153\":1,\"195\":1,\"198\":2,\"201\":1,\"208\":1,\"211\":1,\"256\":1,\"261\":1,\"266\":2,\"272\":2,\"273\":2,\"275\":1,\"277\":1,\"309\":1,\"312\":1,\"314\":2,\"340\":1,\"344\":1,\"350\":1,\"359\":1,\"366\":1,\"375\":1,\"380\":1,\"383\":1,\"394\":1,\"422\":2,\"424\":1,\"426\":2,\"427\":5,\"428\":1,\"429\":1,\"528\":2,\"529\":2,\"530\":2,\"531\":2,\"542\":1,\"545\":1,\"576\":2,\"612\":2,\"613\":1,\"683\":2,\"690\":2,\"698\":1,\"745\":1,\"759\":3,\"781\":4,\"827\":1,\"835\":2,\"846\":2,\"849\":1,\"854\":1,\"862\":2,\"887\":1,\"888\":1,\"889\":2,\"891\":1,\"938\":1,\"944\":1,\"945\":1,\"951\":1,\"953\":1}}],[\"forbidden\",{\"1\":{\"43\":1,\"476\":1}}],[\"form\",{\"1\":{\"41\":1}}],[\"frames\",{\"1\":{\"426\":1}}],[\"framework\",{\"1\":{\"211\":1,\"266\":2}}],[\"fr\",{\"1\":{\"268\":3}}],[\"frustum\",{\"1\":{\"232\":1}}],[\"front\",{\"1\":{\"72\":9,\"73\":1,\"75\":1,\"82\":2,\"84\":1,\"85\":2,\"107\":7,\"539\":1,\"541\":1,\"570\":3,\"574\":3,\"577\":2}}],[\"from\",{\"1\":{\"52\":1,\"195\":2,\"293\":1,\"304\":1,\"305\":1,\"309\":2,\"313\":1,\"321\":1,\"340\":2,\"344\":3,\"361\":1,\"422\":1,\"426\":3,\"428\":1,\"429\":3,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"461\":2,\"462\":1,\"467\":2,\"468\":1,\"469\":2,\"471\":2,\"781\":2,\"835\":1,\"840\":2,\"856\":2,\"887\":1,\"929\":5,\"961\":3}}],[\"friend\",{\"1\":{\"604\":1,\"605\":2,\"606\":3,\"607\":2}}],[\"fri\",{\"1\":{\"42\":1,\"755\":2}}],[\"free\",{\"0\":{\"252\":1,\"890\":1,\"944\":1,\"947\":1},\"1\":{\"10\":2,\"170\":1,\"366\":1,\"402\":1,\"623\":1,\"712\":1,\"852\":1,\"890\":1,\"944\":1,\"947\":1}}],[\"fit\",{\"1\":{\"574\":1,\"867\":1}}],[\"fitnets\",{\"1\":{\"350\":1}}],[\"fid\",{\"1\":{\"451\":2,\"910\":1}}],[\"fill\",{\"1\":{\"426\":1}}],[\"filters\",{\"1\":{\"361\":1}}],[\"filter\",{\"1\":{\"361\":2}}],[\"file2\",{\"1\":{\"617\":1}}],[\"file1\",{\"1\":{\"617\":1}}],[\"filename\",{\"1\":{\"581\":1,\"584\":1,\"589\":1,\"598\":1,\"781\":2}}],[\"fileno\",{\"1\":{\"28\":3}}],[\"fileformat\",{\"1\":{\"174\":1}}],[\"file\",{\"0\":{\"166\":2},\"1\":{\"28\":1,\"166\":2,\"175\":1,\"619\":1,\"781\":6,\"784\":1,\"785\":2,\"950\":1}}],[\"field\",{\"1\":{\"361\":2,\"756\":1}}],[\"fields\",{\"1\":{\"10\":1}}],[\"fij\",{\"1\":{\"332\":1}}],[\"fi3\",{\"1\":{\"332\":1}}],[\"fi2\",{\"1\":{\"332\":1}}],[\"fi1\",{\"1\":{\"332\":1}}],[\"fi\",{\"1\":{\"332\":1}}],[\"fightingcsh\",{\"1\":{\"545\":1}}],[\"fig\",{\"1\":{\"314\":1,\"321\":1}}],[\"figure\",{\"1\":{\"309\":1,\"380\":1,\"383\":1}}],[\"fisher\",{\"1\":{\"228\":2}}],[\"fixed\",{\"1\":{\"344\":1,\"361\":1}}],[\"fix\",{\"1\":{\"188\":1,\"273\":1}}],[\"findcontentchildren\",{\"1\":{\"142\":1}}],[\"findanagrams\",{\"1\":{\"138\":1}}],[\"findsubsequences\",{\"1\":{\"123\":1}}],[\"find\",{\"0\":{\"557\":1},\"1\":{\"102\":1,\"104\":6,\"105\":5,\"123\":1,\"534\":9,\"544\":1,\"545\":4,\"557\":1,\"561\":1}}],[\"findmode\",{\"1\":{\"100\":2}}],[\"findbottomleftvalue\",{\"1\":{\"84\":1}}],[\"fine\",{\"1\":{\"51\":1,\"429\":1,\"875\":1,\"961\":1}}],[\"first\",{\"0\":{\"50\":1},\"1\":{\"90\":3,\"100\":2,\"104\":2,\"195\":1,\"422\":1,\"539\":2,\"540\":2,\"543\":2,\"544\":2,\"545\":2,\"559\":1,\"574\":3}}],[\"fdisk\",{\"1\":{\"172\":1}}],[\"fd\",{\"1\":{\"17\":3,\"19\":2,\"38\":7}}],[\"ftp\",{\"1\":{\"3\":1}}],[\"集为\",{\"1\":{\"908\":1,\"910\":3}}],[\"集为例\",{\"1\":{\"312\":1}}],[\"集类\",{\"1\":{\"859\":1}}],[\"集由\",{\"1\":{\"423\":1}}],[\"集点\",{\"1\":{\"342\":1}}],[\"集在\",{\"1\":{\"259\":1}}],[\"集是\",{\"1\":{\"229\":1}}],[\"集群\",{\"1\":{\"225\":1}}],[\"集成\",{\"1\":{\"217\":1,\"218\":1,\"228\":1,\"372\":1}}],[\"集上\",{\"1\":{\"194\":2,\"199\":1,\"220\":1,\"222\":1,\"249\":1,\"355\":1,\"357\":1,\"860\":1,\"928\":2,\"929\":1,\"935\":1}}],[\"集中学习\",{\"1\":{\"254\":1}}],[\"集中\",{\"1\":{\"126\":2,\"222\":1,\"223\":1,\"247\":1,\"254\":1,\"259\":1,\"293\":1,\"299\":2,\"391\":1,\"395\":1,\"757\":1,\"958\":1}}],[\"集所\",{\"1\":{\"10\":1}}],[\"集\",{\"0\":{\"213\":1,\"341\":1,\"342\":1,\"421\":1},\"1\":{\"10\":2,\"41\":1,\"126\":1,\"192\":1,\"228\":2,\"229\":1,\"242\":1,\"249\":1,\"257\":3,\"259\":4,\"338\":1,\"342\":1,\"355\":2,\"357\":1,\"377\":2,\"425\":1,\"428\":1,\"451\":3,\"875\":2,\"902\":1,\"910\":1}}],[\"集合\",{\"1\":{\"8\":1,\"35\":1,\"38\":2,\"110\":4,\"344\":4,\"399\":1,\"784\":1,\"889\":2}}],[\"结尾\",{\"1\":{\"606\":1,\"654\":1,\"703\":1,\"717\":1,\"732\":1,\"749\":1,\"793\":1,\"816\":3,\"817\":1}}],[\"结合\",{\"0\":{\"812\":1,\"815\":1},\"1\":{\"228\":2,\"247\":1,\"265\":1,\"277\":1,\"304\":1,\"399\":1,\"524\":1,\"559\":1,\"595\":1,\"666\":1,\"710\":1,\"805\":1,\"809\":2,\"811\":1,\"813\":1,\"815\":1,\"875\":2,\"924\":1,\"940\":1,\"959\":1}}],[\"结论\",{\"0\":{\"325\":1},\"1\":{\"126\":1,\"379\":1}}],[\"结点\",{\"0\":{\"828\":1,\"829\":1},\"1\":{\"69\":1,\"85\":5,\"97\":1,\"103\":2,\"126\":1,\"465\":4,\"825\":21,\"826\":25,\"827\":5,\"828\":30,\"829\":23,\"830\":20}}],[\"结构函数\",{\"1\":{\"781\":1}}],[\"结构化\",{\"1\":{\"248\":1}}],[\"结构\",{\"0\":{\"465\":1,\"637\":1,\"732\":1,\"756\":1,\"759\":1,\"760\":1,\"762\":1,\"818\":1,\"819\":1,\"825\":1},\"1\":{\"20\":1,\"38\":2,\"54\":1,\"69\":4,\"70\":1,\"126\":1,\"201\":1,\"218\":2,\"220\":6,\"221\":1,\"223\":1,\"225\":3,\"226\":1,\"227\":1,\"228\":3,\"229\":2,\"243\":1,\"245\":1,\"246\":3,\"247\":1,\"270\":2,\"277\":1,\"293\":1,\"301\":1,\"308\":1,\"312\":5,\"315\":2,\"322\":2,\"379\":2,\"380\":9,\"398\":1,\"423\":1,\"449\":1,\"451\":2,\"563\":1,\"619\":1,\"637\":2,\"703\":1,\"709\":1,\"713\":5,\"748\":1,\"750\":1,\"756\":9,\"757\":13,\"758\":5,\"759\":1,\"760\":5,\"762\":7,\"766\":1,\"818\":1,\"824\":1,\"825\":2,\"830\":1,\"863\":1,\"864\":1,\"904\":1,\"924\":1,\"925\":1,\"926\":4,\"928\":1}}],[\"结果表明\",{\"1\":{\"222\":1,\"257\":1,\"355\":1,\"953\":1}}],[\"结果\",{\"0\":{\"261\":1,\"264\":1,\"339\":1,\"461\":1,\"861\":1,\"885\":1,\"910\":1},\"1\":{\"10\":3,\"13\":1,\"30\":2,\"32\":1,\"49\":1,\"50\":1,\"51\":7,\"54\":1,\"100\":1,\"110\":1,\"121\":1,\"126\":3,\"137\":2,\"192\":1,\"199\":1,\"202\":1,\"210\":2,\"229\":4,\"242\":3,\"244\":1,\"246\":1,\"249\":2,\"254\":1,\"262\":1,\"299\":1,\"306\":1,\"311\":1,\"323\":2,\"357\":4,\"370\":1,\"402\":1,\"419\":1,\"437\":1,\"457\":1,\"468\":1,\"528\":4,\"529\":2,\"530\":1,\"531\":2,\"534\":1,\"612\":1,\"615\":1,\"666\":1,\"671\":1,\"689\":2,\"690\":1,\"708\":1,\"759\":1,\"769\":1,\"781\":1,\"785\":1,\"806\":2,\"818\":1,\"858\":1,\"918\":1,\"938\":2,\"940\":7,\"949\":1,\"951\":1,\"953\":1,\"959\":1,\"961\":1}}],[\"结束符\",{\"1\":{\"684\":3,\"685\":1,\"793\":1}}],[\"结束\",{\"0\":{\"684\":1},\"1\":{\"8\":1,\"10\":1,\"44\":1,\"72\":1,\"94\":2,\"152\":1,\"174\":4,\"310\":1,\"314\":2,\"573\":1,\"586\":1,\"609\":1,\"611\":2,\"612\":7,\"621\":1,\"624\":2,\"625\":1,\"649\":1,\"684\":2,\"685\":1,\"710\":1,\"722\":9,\"729\":3,\"744\":1,\"793\":2,\"830\":1}}],[\"=\",{\"1\":{\"10\":1,\"19\":1,\"20\":1,\"27\":7,\"41\":4,\"42\":1,\"44\":5,\"54\":4,\"56\":1,\"70\":2,\"71\":9,\"72\":78,\"73\":7,\"74\":5,\"75\":20,\"76\":2,\"77\":16,\"78\":13,\"80\":17,\"81\":10,\"82\":21,\"83\":17,\"84\":7,\"85\":22,\"86\":7,\"87\":22,\"88\":11,\"89\":18,\"90\":23,\"91\":4,\"94\":6,\"95\":6,\"96\":4,\"97\":23,\"98\":9,\"99\":21,\"100\":34,\"102\":14,\"103\":124,\"104\":55,\"105\":40,\"106\":41,\"107\":4,\"112\":5,\"113\":5,\"114\":16,\"115\":2,\"116\":7,\"118\":7,\"119\":11,\"121\":3,\"122\":4,\"123\":5,\"125\":7,\"126\":19,\"128\":19,\"137\":44,\"138\":19,\"139\":17,\"142\":4,\"143\":7,\"146\":10,\"148\":3,\"152\":11,\"153\":5,\"170\":5,\"174\":1,\"175\":1,\"184\":2,\"191\":1,\"203\":2,\"209\":2,\"281\":1,\"282\":7,\"290\":2,\"304\":21,\"305\":17,\"323\":1,\"332\":7,\"334\":2,\"338\":2,\"344\":23,\"347\":6,\"348\":4,\"349\":10,\"353\":3,\"354\":2,\"355\":2,\"356\":2,\"363\":1,\"364\":1,\"366\":1,\"371\":2,\"372\":4,\"380\":2,\"394\":2,\"395\":3,\"399\":10,\"411\":3,\"435\":1,\"446\":2,\"451\":15,\"471\":1,\"522\":2,\"524\":4,\"525\":1,\"528\":2,\"529\":2,\"530\":4,\"531\":4,\"532\":1,\"534\":8,\"535\":2,\"538\":1,\"540\":4,\"541\":4,\"542\":2,\"545\":7,\"559\":6,\"573\":1,\"576\":3,\"587\":1,\"589\":1,\"594\":1,\"595\":10,\"599\":7,\"600\":14,\"601\":7,\"605\":3,\"606\":6,\"612\":17,\"613\":3,\"615\":3,\"617\":1,\"633\":2,\"645\":2,\"654\":1,\"658\":4,\"661\":2,\"664\":3,\"665\":2,\"666\":5,\"667\":3,\"668\":4,\"670\":6,\"671\":4,\"672\":4,\"673\":7,\"676\":12,\"681\":2,\"682\":2,\"683\":9,\"684\":2,\"685\":1,\"687\":2,\"688\":3,\"690\":3,\"692\":1,\"693\":5,\"695\":19,\"696\":1,\"698\":10,\"709\":2,\"712\":1,\"713\":4,\"714\":2,\"717\":7,\"718\":3,\"721\":17,\"722\":3,\"724\":11,\"725\":4,\"726\":3,\"729\":1,\"730\":2,\"732\":1,\"734\":1,\"735\":6,\"738\":2,\"744\":2,\"745\":5,\"750\":1,\"755\":9,\"757\":2,\"758\":4,\"759\":6,\"760\":1,\"769\":5,\"781\":18,\"793\":6,\"798\":3,\"800\":2,\"803\":1,\"804\":1,\"805\":7,\"806\":6,\"807\":4,\"808\":1,\"809\":15,\"810\":1,\"811\":13,\"816\":2,\"825\":13,\"826\":21,\"827\":8,\"828\":17,\"829\":26,\"830\":58,\"834\":5,\"835\":11,\"837\":18,\"838\":4,\"840\":6,\"841\":1,\"844\":1,\"845\":15,\"846\":13,\"848\":5,\"849\":3,\"854\":2,\"859\":13,\"862\":1,\"867\":8,\"868\":13,\"869\":21,\"877\":28,\"882\":1,\"897\":12,\"899\":3,\"900\":21,\"901\":3,\"903\":1,\"904\":9,\"913\":1,\"917\":1,\"918\":1,\"928\":4,\"929\":13,\"944\":1,\"947\":3}}],[\"到表尾\",{\"1\":{\"829\":1}}],[\"到此结束\",{\"1\":{\"684\":1,\"825\":1}}],[\"到头\",{\"1\":{\"639\":1}}],[\"到访\",{\"1\":{\"527\":1}}],[\"到底\",{\"1\":{\"174\":1}}],[\"到来\",{\"1\":{\"34\":2}}],[\"到期\",{\"1\":{\"20\":1}}],[\"到下\",{\"1\":{\"17\":1}}],[\"到达\",{\"1\":{\"16\":1,\"137\":1}}],[\"到\",{\"1\":{\"10\":1,\"13\":1,\"15\":1,\"19\":2,\"32\":1,\"34\":2,\"38\":1,\"39\":3,\"43\":1,\"55\":1,\"72\":1,\"82\":1,\"94\":1,\"95\":2,\"96\":2,\"97\":3,\"107\":1,\"113\":1,\"126\":2,\"128\":1,\"152\":1,\"165\":1,\"168\":1,\"184\":1,\"189\":1,\"192\":1,\"193\":1,\"199\":1,\"200\":1,\"201\":1,\"210\":4,\"216\":1,\"217\":3,\"218\":3,\"220\":1,\"222\":1,\"223\":2,\"225\":1,\"227\":3,\"228\":10,\"229\":1,\"245\":4,\"246\":4,\"247\":1,\"259\":1,\"260\":1,\"268\":1,\"276\":1,\"282\":1,\"284\":1,\"288\":1,\"290\":2,\"291\":1,\"294\":1,\"298\":1,\"299\":3,\"300\":2,\"301\":2,\"304\":1,\"312\":1,\"313\":1,\"314\":2,\"315\":1,\"316\":1,\"317\":1,\"318\":1,\"320\":2,\"322\":3,\"325\":1,\"327\":2,\"332\":1,\"334\":1,\"344\":1,\"350\":2,\"355\":1,\"356\":1,\"359\":1,\"366\":1,\"369\":3,\"370\":1,\"372\":1,\"375\":1,\"379\":1,\"380\":1,\"391\":2,\"393\":1,\"399\":1,\"410\":1,\"419\":1,\"437\":1,\"465\":2,\"469\":4,\"480\":1,\"485\":1,\"528\":2,\"534\":1,\"538\":2,\"545\":1,\"573\":1,\"574\":1,\"587\":1,\"598\":3,\"599\":1,\"606\":1,\"614\":1,\"616\":1,\"621\":2,\"623\":1,\"624\":1,\"687\":1,\"744\":1,\"745\":2,\"750\":1,\"757\":1,\"776\":2,\"781\":3,\"782\":2,\"785\":2,\"791\":2,\"799\":1,\"816\":1,\"818\":1,\"825\":1,\"826\":2,\"829\":2,\"830\":1,\"860\":1,\"882\":1,\"884\":1,\"887\":2,\"889\":1,\"906\":1,\"907\":1,\"922\":1,\"925\":3,\"935\":3,\"938\":1,\"939\":1,\"940\":1,\"951\":1,\"953\":2,\"957\":2,\"959\":1,\"961\":1}}],[\"celeba\",{\"1\":{\"910\":1}}],[\"cerr\",{\"0\":{\"776\":1},\"1\":{\"776\":4,\"777\":2,\"780\":1,\"781\":6}}],[\"ceer\",{\"1\":{\"774\":1}}],[\"cend\",{\"1\":{\"545\":1,\"575\":1}}],[\"center\",{\"1\":{\"426\":1,\"837\":2}}],[\"central\",{\"1\":{\"304\":1}}],[\"cy1\",{\"1\":{\"766\":1}}],[\"cmd\",{\"1\":{\"852\":1}}],[\"cmap\",{\"1\":{\"837\":2}}],[\"cmath\",{\"1\":{\"598\":1,\"624\":1}}],[\"cmp\",{\"1\":{\"100\":2,\"143\":2,\"739\":1}}],[\"cbow\",{\"1\":{\"859\":1}}],[\"cbegin\",{\"1\":{\"545\":1,\"575\":1}}],[\"cbar\",{\"1\":{\"837\":3}}],[\"cba\",{\"1\":{\"138\":1}}],[\"cbaebabacd\",{\"1\":{\"138\":1}}],[\"c3\",{\"1\":{\"451\":3}}],[\"cstring\",{\"1\":{\"686\":2,\"690\":1}}],[\"cstdlib\",{\"1\":{\"624\":1,\"667\":1}}],[\"cstdio\",{\"1\":{\"624\":1}}],[\"csail\",{\"1\":{\"424\":1}}],[\"csdn\",{\"1\":{\"53\":1,\"54\":4,\"102\":1,\"165\":1,\"174\":2,\"175\":2,\"182\":1,\"186\":1,\"255\":1,\"276\":1,\"303\":2,\"304\":2,\"309\":1,\"317\":1,\"318\":1,\"359\":1,\"375\":1,\"401\":1,\"406\":1,\"503\":1,\"532\":1,\"535\":1,\"536\":1,\"544\":1,\"545\":1,\"572\":1,\"578\":1,\"801\":2,\"811\":2,\"841\":2,\"845\":2,\"855\":1,\"872\":1,\"875\":2,\"887\":1,\"911\":1,\"957\":1,\"959\":1}}],[\"cpp\",{\"1\":{\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"617\":2,\"785\":1}}],[\"cpk\",{\"1\":{\"332\":1}}],[\"cpj\",{\"1\":{\"332\":1}}],[\"cp\",{\"1\":{\"332\":1}}],[\"cpu\",{\"1\":{\"30\":2,\"613\":2,\"840\":2}}],[\"ckyh\",{\"1\":{\"276\":1,\"401\":1}}],[\"cj\",{\"1\":{\"268\":1,\"332\":1}}],[\"circle\",{\"1\":{\"766\":1}}],[\"citypersons\",{\"1\":{\"428\":1}}],[\"cityscapes\",{\"0\":{\"423\":1},\"1\":{\"423\":2}}],[\"cities\",{\"1\":{\"426\":1}}],[\"cifar\",{\"1\":{\"355\":1,\"357\":1}}],[\"ci\",{\"1\":{\"268\":1,\"394\":4,\"395\":4}}],[\"cincout\",{\"1\":{\"781\":1}}],[\"cin\",{\"1\":{\"205\":1,\"595\":1,\"623\":1,\"624\":1,\"685\":2,\"690\":1,\"694\":2,\"695\":1,\"709\":1,\"745\":1,\"759\":1,\"780\":3,\"781\":4,\"789\":3,\"791\":1,\"826\":2,\"830\":7}}],[\"cf\",{\"1\":{\"261\":1}}],[\"cguangyan\",{\"1\":{\"229\":1,\"313\":1}}],[\"creat\",{\"1\":{\"826\":2,\"830\":5}}],[\"create\",{\"1\":{\"8\":1,\"38\":2,\"793\":1}}],[\"crowdhuman\",{\"0\":{\"428\":1},\"1\":{\"428\":3}}],[\"crop\",{\"1\":{\"263\":2}}],[\"crossattention\",{\"1\":{\"877\":2,\"930\":1}}],[\"crosses\",{\"1\":{\"383\":1}}],[\"cross\",{\"1\":{\"195\":1,\"379\":1,\"859\":3,\"865\":1,\"929\":1,\"935\":1,\"947\":1}}],[\"crf\",{\"1\":{\"245\":1,\"246\":1}}],[\"cd\",{\"1\":{\"191\":1,\"323\":1}}],[\"cvt\",{\"1\":{\"389\":1}}],[\"cv2\",{\"1\":{\"188\":1}}],[\"cvpr2023\",{\"1\":{\"385\":1}}],[\"cvpr2022\",{\"0\":{\"55\":1},\"1\":{\"201\":1}}],[\"cvpr2019\",{\"1\":{\"51\":1}}],[\"cvpr\",{\"0\":{\"49\":1,\"50\":1,\"51\":1,\"52\":1},\"1\":{\"51\":1,\"192\":1,\"266\":1,\"271\":1,\"273\":1,\"275\":1,\"340\":1,\"358\":1,\"862\":2,\"864\":1,\"871\":1,\"872\":1,\"887\":2,\"890\":1,\"891\":1,\"921\":1,\"940\":1,\"945\":1}}],[\"cc\",{\"1\":{\"174\":1,\"175\":1,\"304\":1,\"757\":1,\"811\":1,\"841\":1,\"845\":1,\"875\":1,\"950\":1}}],[\"c2\",{\"1\":{\"137\":11,\"138\":5,\"139\":4,\"451\":4}}],[\"c1\",{\"1\":{\"137\":11,\"138\":5,\"139\":6,\"451\":3,\"671\":4}}],[\"ctc\",{\"0\":{\"893\":1},\"1\":{\"893\":2}}],[\"cto\",{\"1\":{\"852\":1}}],[\"ctrl\",{\"1\":{\"180\":1,\"191\":1}}],[\"ctrlist\",{\"1\":{\"54\":2}}],[\"ctl\",{\"1\":{\"16\":2,\"38\":2,\"39\":2}}],[\"cuda\",{\"1\":{\"222\":1,\"852\":1,\"929\":3}}],[\"cut\",{\"1\":{\"49\":1}}],[\"curve\",{\"1\":{\"208\":1}}],[\"curdepth\",{\"1\":{\"90\":4}}],[\"cur\",{\"1\":{\"10\":1,\"44\":6,\"70\":5,\"71\":10,\"72\":30,\"82\":22,\"83\":18,\"95\":1,\"97\":7,\"99\":11,\"100\":29,\"103\":58,\"114\":3,\"146\":5}}],[\"c\",{\"0\":{\"623\":1},\"1\":{\"44\":4,\"104\":1,\"106\":4,\"137\":5,\"138\":2,\"203\":1,\"221\":1,\"232\":1,\"235\":1,\"299\":2,\"303\":4,\"304\":8,\"307\":2,\"317\":1,\"353\":1,\"370\":1,\"371\":1,\"372\":3,\"380\":2,\"391\":1,\"416\":1,\"451\":2,\"595\":10,\"599\":3,\"600\":3,\"601\":7,\"611\":3,\"612\":6,\"623\":3,\"666\":2,\"681\":3,\"682\":1,\"683\":7,\"704\":1,\"759\":1,\"781\":9,\"793\":1,\"798\":2,\"801\":1,\"809\":10,\"818\":1,\"825\":8,\"848\":1,\"859\":1,\"869\":1,\"928\":3,\"959\":1}}],[\"carlo\",{\"1\":{\"905\":1}}],[\"cams\",{\"1\":{\"887\":1}}],[\"cam\",{\"1\":{\"887\":3,\"891\":1,\"893\":3}}],[\"cameras\",{\"1\":{\"426\":1}}],[\"camera\",{\"1\":{\"426\":1}}],[\"capacity\",{\"1\":{\"537\":1,\"542\":3,\"577\":1,\"852\":1}}],[\"capture\",{\"1\":{\"956\":1}}],[\"captures\",{\"1\":{\"195\":1}}],[\"captions\",{\"1\":{\"422\":1}}],[\"captioning\",{\"1\":{\"422\":2}}],[\"ca\",{\"1\":{\"484\":1}}],[\"called\",{\"1\":{\"722\":2}}],[\"callback\",{\"1\":{\"38\":1}}],[\"calm\",{\"1\":{\"174\":1}}],[\"catenate\",{\"1\":{\"687\":1}}],[\"category\",{\"1\":{\"424\":1,\"429\":3}}],[\"categories\",{\"1\":{\"422\":4,\"424\":1,\"429\":5}}],[\"catch\",{\"1\":{\"530\":1,\"531\":1}}],[\"cat\",{\"1\":{\"174\":1,\"304\":1,\"344\":1,\"868\":1}}],[\"can\",{\"1\":{\"195\":1,\"380\":1,\"856\":1,\"942\":1,\"956\":1}}],[\"cannot\",{\"0\":{\"166\":1},\"1\":{\"166\":1}}],[\"canjump\",{\"1\":{\"152\":1}}],[\"candidates\",{\"1\":{\"115\":9,\"116\":14}}],[\"canconstruct\",{\"1\":{\"104\":1}}],[\"case\",{\"1\":{\"44\":3,\"52\":2,\"103\":1,\"309\":1,\"818\":19}}],[\"checkpoint\",{\"1\":{\"877\":5}}],[\"chessboard\",{\"1\":{\"128\":12}}],[\"ch\",{\"1\":{\"666\":7,\"696\":1,\"781\":11}}],[\"chrono\",{\"1\":{\"528\":2,\"529\":2,\"530\":2,\"531\":2}}],[\"chrome\",{\"1\":{\"41\":1}}],[\"china\",{\"1\":{\"684\":1,\"687\":1,\"688\":3,\"689\":1,\"690\":1,\"692\":1,\"693\":2,\"698\":3}}],[\"chiang\",{\"1\":{\"247\":1}}],[\"childdepth\",{\"1\":{\"74\":2}}],[\"children\",{\"1\":{\"72\":9,\"74\":1,\"344\":1}}],[\"choy\",{\"1\":{\"246\":1}}],[\"chown\",{\"1\":{\"160\":1,\"172\":1}}],[\"chmod\",{\"1\":{\"160\":2,\"170\":1,\"191\":1}}],[\"chain\",{\"1\":{\"905\":1}}],[\"chaina\",{\"1\":{\"684\":1,\"685\":2}}],[\"challenging\",{\"1\":{\"428\":1}}],[\"changed\",{\"1\":{\"422\":1}}],[\"change\",{\"1\":{\"421\":1}}],[\"changes\",{\"1\":{\"344\":1}}],[\"channels\",{\"1\":{\"304\":2}}],[\"channel\",{\"1\":{\"49\":1,\"54\":1,\"380\":2,\"874\":1}}],[\"chamfer\",{\"1\":{\"323\":5}}],[\"char\",{\"1\":{\"104\":2,\"105\":3,\"106\":2,\"114\":1,\"137\":10,\"138\":5,\"139\":6,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"586\":1,\"595\":2,\"632\":1,\"633\":2,\"638\":3,\"665\":1,\"666\":2,\"668\":3,\"676\":2,\"681\":1,\"682\":2,\"683\":2,\"684\":2,\"685\":2,\"686\":3,\"687\":4,\"688\":3,\"689\":2,\"690\":6,\"693\":1,\"698\":3,\"704\":2,\"706\":2,\"707\":1,\"712\":1,\"713\":2,\"722\":3,\"749\":1,\"757\":6,\"781\":4,\"782\":2,\"799\":1,\"804\":1}}],[\"charset\",{\"1\":{\"42\":1}}],[\"cha\",{\"1\":{\"82\":1,\"666\":2}}],[\"cnblogs\",{\"1\":{\"303\":1,\"359\":1,\"406\":1,\"449\":2,\"895\":1,\"910\":1}}],[\"cnn\",{\"0\":{\"403\":1,\"407\":1,\"410\":1,\"418\":1},\"1\":{\"218\":3,\"222\":2,\"223\":2,\"227\":1,\"246\":3,\"247\":1,\"248\":1,\"275\":1,\"284\":1,\"293\":1,\"299\":1,\"366\":6,\"370\":5,\"371\":1,\"372\":1,\"373\":1,\"402\":1,\"406\":1,\"409\":2,\"410\":2,\"419\":2,\"863\":3,\"864\":3,\"887\":1}}],[\"cnns\",{\"1\":{\"192\":1,\"223\":1}}],[\"cnt\",{\"1\":{\"72\":3,\"73\":3,\"83\":10,\"85\":6,\"100\":11,\"102\":10,\"103\":3,\"104\":5,\"152\":3}}],[\"cn\",{\"1\":{\"41\":1,\"69\":1,\"71\":1,\"81\":1,\"82\":1,\"126\":2,\"503\":1}}],[\"cls\",{\"0\":{\"412\":1},\"1\":{\"392\":2,\"411\":1}}],[\"clause\",{\"1\":{\"467\":1}}],[\"clarity\",{\"1\":{\"344\":1}}],[\"classtokencontrast\",{\"0\":{\"893\":1}}],[\"classifier\",{\"0\":{\"414\":1,\"947\":1},\"1\":{\"942\":1,\"947\":2,\"950\":1}}],[\"classification\",{\"1\":{\"380\":1}}],[\"classes\",{\"1\":{\"344\":3}}],[\"class\",{\"1\":{\"27\":1,\"70\":1,\"72\":5,\"74\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"85\":1,\"87\":1,\"90\":1,\"96\":1,\"99\":2,\"100\":4,\"102\":1,\"103\":6,\"104\":6,\"105\":6,\"106\":2,\"107\":2,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"118\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"125\":1,\"126\":1,\"128\":1,\"138\":1,\"139\":1,\"142\":1,\"143\":1,\"148\":1,\"304\":1,\"344\":3,\"354\":2,\"426\":2,\"500\":3,\"524\":1,\"600\":3,\"605\":1,\"606\":3,\"610\":1,\"703\":1,\"704\":4,\"706\":1,\"707\":1,\"709\":2,\"717\":1,\"718\":1,\"721\":1,\"722\":1,\"724\":1,\"732\":1,\"738\":6,\"740\":1,\"741\":6,\"744\":1,\"745\":1,\"748\":4,\"749\":3,\"769\":2,\"854\":1,\"877\":1,\"891\":1,\"893\":6}}],[\"cleaned\",{\"1\":{\"342\":1}}],[\"clear\",{\"1\":{\"100\":1,\"540\":2,\"542\":1,\"574\":1}}],[\"cliptokenizer\",{\"1\":{\"929\":3}}],[\"cliptextmodel\",{\"1\":{\"929\":3}}],[\"clips\",{\"0\":{\"856\":1}}],[\"clip\",{\"0\":{\"929\":1,\"943\":1},\"1\":{\"305\":1,\"417\":1,\"453\":1,\"856\":2,\"857\":1,\"858\":2,\"859\":1,\"860\":4,\"862\":2,\"864\":2,\"889\":3,\"922\":1,\"927\":1,\"929\":10,\"944\":1}}],[\"click\",{\"0\":{\"50\":1},\"1\":{\"52\":1,\"54\":1,\"55\":1}}],[\"clusternet\",{\"1\":{\"225\":1}}],[\"clog\",{\"0\":{\"777\":1},\"1\":{\"774\":1,\"777\":2,\"780\":1}}],[\"cloud\",{\"0\":{\"315\":1,\"953\":1},\"1\":{\"211\":1,\"256\":1,\"262\":1,\"272\":2,\"273\":2,\"314\":2,\"953\":1}}],[\"clouds\",{\"0\":{\"56\":1,\"212\":1},\"1\":{\"275\":1,\"313\":1}}],[\"closed\",{\"1\":{\"261\":1}}],[\"close\",{\"1\":{\"10\":1,\"41\":1,\"781\":6,\"794\":2}}],[\"clr\",{\"1\":{\"41\":3}}],[\"c++\",{\"0\":{\"514\":1,\"526\":1,\"533\":1,\"623\":1,\"625\":1,\"626\":1,\"655\":1},\"1\":{\"22\":2,\"500\":1,\"503\":2,\"527\":3,\"532\":4,\"535\":2,\"536\":3,\"539\":1,\"545\":2,\"546\":1,\"572\":2,\"577\":1,\"583\":1,\"589\":1,\"591\":1,\"610\":1,\"623\":2,\"624\":1,\"666\":1,\"676\":6,\"684\":1,\"697\":1,\"701\":3,\"704\":1,\"745\":1,\"756\":1,\"760\":1,\"785\":1,\"801\":3,\"810\":1,\"825\":1}}],[\"coarse\",{\"1\":{\"961\":1}}],[\"coherently\",{\"1\":{\"945\":1}}],[\"coefficient\",{\"1\":{\"897\":2}}],[\"co\",{\"1\":{\"889\":2}}],[\"covariance\",{\"1\":{\"884\":1}}],[\"covering\",{\"1\":{\"424\":1}}],[\"coverage\",{\"1\":{\"271\":2}}],[\"cover\",{\"1\":{\"152\":1}}],[\"coding\",{\"1\":{\"473\":1}}],[\"codebook\",{\"1\":{\"928\":1}}],[\"codeblock\",{\"1\":{\"825\":1}}],[\"code\",{\"1\":{\"48\":1,\"192\":1,\"198\":1,\"211\":2,\"256\":1,\"262\":1,\"266\":1,\"271\":1,\"272\":1,\"273\":2,\"313\":1,\"318\":1,\"340\":1,\"342\":1,\"343\":1,\"397\":1,\"862\":1,\"864\":1,\"871\":1,\"890\":1,\"939\":1,\"940\":1,\"944\":1,\"945\":1,\"947\":2,\"959\":2,\"961\":3,\"963\":1}}],[\"coordinates\",{\"1\":{\"411\":1}}],[\"cocodataset\",{\"1\":{\"422\":1}}],[\"coco\",{\"0\":{\"422\":1},\"1\":{\"370\":2,\"422\":5}}],[\"corner\",{\"1\":{\"366\":1}}],[\"corners\",{\"1\":{\"305\":1}}],[\"correspondence\",{\"1\":{\"956\":1}}],[\"correspond\",{\"1\":{\"361\":1}}],[\"correction\",{\"1\":{\"55\":1}}],[\"corrections\",{\"1\":{\"52\":1}}],[\"cost\",{\"0\":{\"292\":1},\"1\":{\"293\":1}}],[\"copy\",{\"1\":{\"172\":1,\"688\":1,\"726\":1}}],[\"coutcin\",{\"1\":{\"781\":1}}],[\"cout\",{\"0\":{\"775\":1},\"1\":{\"205\":1,\"524\":1,\"528\":1,\"529\":1,\"530\":2,\"531\":2,\"535\":1,\"541\":2,\"542\":5,\"545\":3,\"567\":1,\"568\":2,\"576\":2,\"583\":1,\"595\":2,\"599\":1,\"600\":1,\"601\":2,\"605\":2,\"606\":2,\"612\":3,\"615\":1,\"621\":2,\"623\":1,\"624\":3,\"666\":4,\"668\":1,\"671\":1,\"683\":2,\"685\":5,\"687\":1,\"689\":2,\"690\":2,\"694\":1,\"695\":2,\"698\":3,\"704\":1,\"706\":1,\"707\":1,\"709\":3,\"713\":1,\"714\":1,\"718\":2,\"722\":3,\"724\":2,\"732\":1,\"734\":1,\"745\":4,\"749\":5,\"755\":1,\"759\":2,\"760\":1,\"769\":2,\"774\":1,\"775\":6,\"776\":2,\"780\":1,\"781\":11,\"789\":3,\"791\":1,\"793\":2,\"804\":1,\"806\":1,\"810\":1,\"816\":1,\"817\":4,\"818\":4,\"825\":1,\"827\":3,\"828\":3,\"830\":12}}],[\"could\",{\"0\":{\"157\":1,\"187\":1},\"1\":{\"188\":3,\"189\":2,\"261\":1,\"293\":1}}],[\"counter\",{\"1\":{\"528\":12,\"529\":12,\"530\":5,\"531\":6}}],[\"count\",{\"0\":{\"558\":1,\"562\":1},\"1\":{\"100\":1,\"103\":1,\"137\":4,\"138\":2,\"153\":4,\"170\":2,\"210\":1,\"544\":1,\"558\":1,\"562\":1,\"621\":2,\"635\":6,\"639\":2,\"745\":6,\"759\":3}}],[\"countnodes\",{\"1\":{\"80\":7}}],[\"collate\",{\"1\":{\"845\":1}}],[\"collected\",{\"1\":{\"428\":1}}],[\"col\",{\"1\":{\"128\":10,\"344\":2}}],[\"consistency\",{\"1\":{\"910\":1}}],[\"consists\",{\"1\":{\"422\":1}}],[\"console\",{\"1\":{\"775\":1}}],[\"constructor\",{\"0\":{\"717\":1},\"1\":{\"722\":1,\"726\":1}}],[\"construct\",{\"1\":{\"427\":1}}],[\"constructmaximumbinarytree\",{\"1\":{\"87\":4}}],[\"constrained\",{\"1\":{\"427\":1}}],[\"const\",{\"0\":{\"515\":1,\"516\":1,\"669\":1},\"1\":{\"100\":2,\"114\":1,\"509\":1,\"522\":3,\"524\":1,\"525\":6,\"530\":1,\"531\":1,\"532\":1,\"538\":2,\"539\":4,\"543\":3,\"545\":2,\"574\":5,\"576\":2,\"623\":1,\"661\":3,\"662\":1,\"670\":4,\"671\":13,\"672\":4,\"673\":5,\"675\":8,\"686\":1,\"687\":2,\"688\":1,\"689\":3,\"690\":1,\"726\":2,\"782\":1}}],[\"convolve\",{\"1\":{\"834\":2}}],[\"convolutional\",{\"0\":{\"361\":1},\"1\":{\"312\":1,\"344\":1,\"359\":2,\"361\":1,\"367\":1,\"372\":1,\"375\":1}}],[\"convolutions\",{\"1\":{\"309\":1,\"359\":1,\"360\":1}}],[\"convolution\",{\"0\":{\"205\":1,\"303\":1,\"304\":1,\"362\":1},\"1\":{\"208\":1,\"211\":1,\"222\":1,\"309\":1,\"312\":1,\"361\":2,\"399\":1}}],[\"convnets\",{\"0\":{\"369\":1}}],[\"conv2d\",{\"1\":{\"304\":1,\"344\":1}}],[\"conv\",{\"0\":{\"363\":1,\"364\":1},\"1\":{\"223\":1,\"304\":4,\"305\":1,\"344\":2,\"364\":1,\"401\":1}}],[\"convpoint\",{\"1\":{\"222\":2}}],[\"convertbst\",{\"1\":{\"100\":1}}],[\"conf\",{\"1\":{\"191\":1}}],[\"config\",{\"1\":{\"186\":3}}],[\"control\",{\"0\":{\"944\":1},\"1\":{\"944\":1}}],[\"contry\",{\"1\":{\"690\":4}}],[\"contrast\",{\"0\":{\"266\":1,\"892\":1},\"1\":{\"266\":1,\"380\":1,\"451\":1,\"891\":1,\"893\":1}}],[\"contrastive\",{\"1\":{\"260\":1}}],[\"container\",{\"1\":{\"563\":1}}],[\"containing\",{\"1\":{\"422\":1}}],[\"contains\",{\"1\":{\"422\":2,\"424\":1,\"428\":1,\"429\":1}}],[\"contaminated\",{\"1\":{\"293\":1}}],[\"context\",{\"0\":{\"422\":1},\"1\":{\"422\":2,\"845\":1,\"877\":9,\"889\":1}}],[\"content\",{\"1\":{\"41\":4,\"42\":2,\"43\":1,\"427\":1,\"476\":2}}],[\"continuumio\",{\"1\":{\"165\":3}}],[\"continue\",{\"1\":{\"104\":3,\"105\":1,\"116\":2,\"118\":1,\"122\":1,\"123\":1,\"125\":1,\"126\":2,\"191\":2,\"534\":1}}],[\"continuous\",{\"1\":{\"52\":1}}],[\"concatenate\",{\"1\":{\"305\":2}}],[\"concat\",{\"1\":{\"49\":1,\"54\":1,\"282\":1,\"332\":1,\"901\":1}}],[\"conditionalscore\",{\"1\":{\"947\":1}}],[\"conditioning\",{\"0\":{\"938\":1,\"951\":1},\"1\":{\"938\":1,\"951\":1}}],[\"conditioned\",{\"1\":{\"899\":1}}],[\"condition\",{\"1\":{\"818\":3,\"930\":1}}],[\"conditions\",{\"1\":{\"427\":1}}],[\"conda\",{\"0\":{\"165\":1}}],[\"cond\",{\"1\":{\"25\":4,\"27\":4}}],[\"conn\",{\"1\":{\"10\":4,\"19\":3}}],[\"connecting\",{\"1\":{\"856\":1}}],[\"connectivity\",{\"1\":{\"309\":2}}],[\"connections\",{\"1\":{\"383\":1}}],[\"connection\",{\"1\":{\"41\":2,\"379\":1}}],[\"connected\",{\"1\":{\"305\":1}}],[\"connect\",{\"0\":{\"157\":1,\"187\":1},\"1\":{\"10\":1,\"19\":1,\"72\":5,\"188\":1,\"189\":2}}],[\"compvis\",{\"1\":{\"864\":1,\"877\":1,\"921\":1}}],[\"comp\",{\"1\":{\"429\":1,\"576\":2}}],[\"components\",{\"1\":{\"426\":1}}],[\"comprised\",{\"1\":{\"426\":1}}],[\"compression\",{\"0\":{\"385\":1},\"1\":{\"385\":1}}],[\"compressing\",{\"1\":{\"309\":1}}],[\"comprehensive\",{\"1\":{\"359\":1}}],[\"complexities\",{\"1\":{\"427\":1}}],[\"complexity\",{\"1\":{\"380\":2}}],[\"completion\",{\"1\":{\"426\":1}}],[\"completeness\",{\"1\":{\"342\":1}}],[\"computer\",{\"1\":{\"427\":1}}],[\"computed\",{\"1\":{\"293\":1,\"383\":1}}],[\"computing\",{\"1\":{\"383\":1}}],[\"computation\",{\"1\":{\"309\":1,\"380\":4,\"383\":1}}],[\"compared\",{\"1\":{\"428\":1}}],[\"compare\",{\"1\":{\"77\":4,\"689\":1,\"738\":2,\"739\":2,\"740\":4}}],[\"compatible\",{\"1\":{\"41\":1}}],[\"comment\",{\"1\":{\"840\":1}}],[\"community\",{\"1\":{\"422\":1}}],[\"common\",{\"0\":{\"422\":1},\"1\":{\"422\":2}}],[\"commona\",{\"1\":{\"90\":4}}],[\"command\",{\"1\":{\"177\":1}}],[\"combination\",{\"1\":{\"309\":2}}],[\"combinationsum2\",{\"1\":{\"116\":1}}],[\"combinationsum\",{\"1\":{\"115\":1}}],[\"combinationsum3\",{\"1\":{\"113\":1}}],[\"combined\",{\"1\":{\"309\":1}}],[\"combine\",{\"1\":{\"112\":1}}],[\"com\",{\"1\":{\"11\":1,\"41\":3,\"55\":1,\"103\":1,\"104\":1,\"160\":1,\"166\":1,\"208\":2,\"229\":1,\"255\":1,\"256\":1,\"273\":1,\"276\":1,\"303\":2,\"312\":2,\"313\":1,\"340\":1,\"359\":3,\"360\":1,\"367\":1,\"369\":1,\"370\":1,\"385\":1,\"392\":2,\"406\":1,\"423\":1,\"427\":1,\"429\":1,\"449\":2,\"465\":1,\"473\":1,\"536\":1,\"833\":1,\"856\":1,\"862\":2,\"864\":1,\"877\":1,\"884\":1,\"887\":2,\"888\":1,\"889\":2,\"891\":2,\"894\":1,\"895\":1,\"910\":3,\"921\":2,\"936\":1,\"938\":1,\"947\":1,\"951\":1,\"958\":1}}],[\"单纯\",{\"1\":{\"748\":1}}],[\"单引号\",{\"1\":{\"648\":1}}],[\"单精度\",{\"1\":{\"633\":1,\"644\":1,\"712\":1,\"713\":1}}],[\"单行\",{\"1\":{\"625\":1}}],[\"单线程\",{\"1\":{\"527\":1}}],[\"单目\",{\"0\":{\"821\":1},\"1\":{\"512\":1,\"623\":1,\"810\":1,\"813\":1,\"814\":1,\"815\":1}}],[\"单向\",{\"0\":{\"825\":1},\"1\":{\"386\":1,\"586\":1,\"607\":1,\"826\":1}}],[\"单一\",{\"1\":{\"299\":1}}],[\"单通道\",{\"1\":{\"294\":1}}],[\"单应\",{\"1\":{\"290\":2}}],[\"单应性\",{\"1\":{\"290\":1}}],[\"单帧\",{\"1\":{\"263\":1}}],[\"单级\",{\"1\":{\"237\":1}}],[\"单\",{\"1\":{\"214\":1,\"228\":1,\"245\":1,\"261\":2,\"262\":2,\"273\":1,\"325\":1,\"748\":1,\"749\":1}}],[\"单次\",{\"1\":{\"192\":1}}],[\"单调\",{\"1\":{\"107\":3,\"577\":1}}],[\"单词\",{\"1\":{\"105\":1,\"860\":1}}],[\"单层\",{\"1\":{\"70\":1,\"72\":1,\"81\":1,\"97\":1,\"222\":1}}],[\"单位\",{\"1\":{\"38\":1,\"170\":1,\"222\":3,\"228\":1,\"334\":1,\"337\":1,\"360\":1,\"379\":1,\"589\":1,\"590\":1,\"650\":1,\"701\":2,\"784\":1,\"787\":1,\"788\":1,\"804\":1,\"816\":1,\"835\":1}}],[\"单独\",{\"1\":{\"37\":1,\"103\":1,\"589\":1,\"612\":1,\"684\":1,\"744\":1,\"745\":1,\"958\":1}}],[\"单元\",{\"0\":{\"435\":1,\"440\":1},\"1\":{\"29\":5,\"31\":1,\"33\":1,\"44\":1,\"315\":1,\"322\":1,\"372\":1,\"398\":1,\"586\":1,\"609\":2,\"612\":1,\"620\":2,\"633\":1,\"662\":1,\"664\":1,\"676\":1,\"717\":2,\"762\":1,\"782\":1,\"824\":1,\"826\":1,\"830\":1}}],[\"单个\",{\"0\":{\"457\":1},\"1\":{\"10\":1,\"195\":1,\"227\":1,\"262\":1,\"311\":1,\"461\":1,\"492\":1,\"545\":1,\"559\":1,\"724\":1}}],[\"单例\",{\"1\":{\"4\":2,\"5\":3,\"11\":2,\"502\":3}}],[\"看不到\",{\"1\":{\"852\":1}}],[\"看成\",{\"1\":{\"690\":1,\"906\":1,\"928\":1}}],[\"看来\",{\"1\":{\"451\":1}}],[\"看上去\",{\"1\":{\"259\":1}}],[\"看作\",{\"1\":{\"225\":1,\"859\":1}}],[\"看到\",{\"1\":{\"210\":1,\"290\":1,\"332\":1,\"379\":1,\"467\":1,\"476\":1,\"577\":1,\"928\":2,\"938\":2,\"940\":1,\"961\":1}}],[\"看见\",{\"1\":{\"172\":1}}],[\"看看\",{\"1\":{\"166\":1,\"846\":1}}],[\"看出\",{\"1\":{\"69\":1,\"123\":1,\"371\":1,\"446\":1,\"563\":1}}],[\"看\",{\"1\":{\"10\":1,\"527\":1,\"769\":1,\"781\":1}}],[\"lpips\",{\"1\":{\"928\":1}}],[\"lr\",{\"1\":{\"901\":1,\"908\":2}}],[\"lm\",{\"1\":{\"894\":1}}],[\"ldm\",{\"1\":{\"877\":1,\"929\":1}}],[\"ldirection\",{\"1\":{\"862\":1}}],[\"ldgcnn\",{\"1\":{\"225\":1}}],[\"lk\",{\"1\":{\"531\":1}}],[\"lv\",{\"1\":{\"388\":1}}],[\"ln\",{\"1\":{\"373\":1}}],[\"lg2\",{\"1\":{\"323\":3}}],[\"lg1\",{\"1\":{\"323\":3}}],[\"lg\",{\"1\":{\"323\":2}}],[\"l2g\",{\"1\":{\"323\":1}}],[\"l2\",{\"1\":{\"308\":1,\"323\":2,\"859\":3}}],[\"l196c40\",{\"1\":{\"877\":2}}],[\"l1g\",{\"1\":{\"323\":1}}],[\"l1\",{\"1\":{\"295\":1,\"323\":2,\"338\":1,\"413\":1,\"928\":1}}],[\"ll\",{\"1\":{\"226\":1,\"801\":6}}],[\"lbm\",{\"1\":{\"191\":2}}],[\"lstm\",{\"1\":{\"449\":1}}],[\"lsmod\",{\"1\":{\"191\":1}}],[\"ls\",{\"1\":{\"170\":1,\"177\":1,\"179\":1,\"182\":1}}],[\"lcadeepestleaves\",{\"1\":{\"90\":2}}],[\"l\",{\"1\":{\"86\":4,\"87\":2,\"139\":4,\"172\":1,\"242\":1,\"338\":2,\"383\":3,\"451\":5,\"642\":5,\"644\":2,\"718\":2,\"719\":2,\"744\":1,\"859\":1,\"918\":1}}],[\"luminance\",{\"1\":{\"451\":1}}],[\"lu\",{\"1\":{\"82\":1}}],[\"lerp\",{\"1\":{\"963\":1}}],[\"lemon\",{\"1\":{\"957\":1}}],[\"leverage\",{\"1\":{\"945\":1}}],[\"levels\",{\"1\":{\"361\":1}}],[\"level\",{\"1\":{\"259\":2,\"873\":1,\"875\":5,\"887\":2,\"888\":1,\"901\":2}}],[\"levelorder\",{\"1\":{\"72\":4}}],[\"leader\",{\"1\":{\"759\":5}}],[\"leak\",{\"0\":{\"677\":1}}],[\"leaky\",{\"0\":{\"439\":1},\"1\":{\"449\":1}}],[\"learnt\",{\"1\":{\"344\":1}}],[\"learned\",{\"1\":{\"195\":1,\"859\":3,\"942\":1}}],[\"learnable\",{\"0\":{\"283\":1},\"1\":{\"195\":1,\"309\":2}}],[\"learning\",{\"0\":{\"212\":1},\"1\":{\"52\":1,\"261\":1,\"266\":2,\"275\":1,\"303\":1,\"321\":1,\"427\":2,\"856\":1,\"887\":2,\"959\":1}}],[\"less\",{\"1\":{\"427\":1}}],[\"len\",{\"1\":{\"304\":4,\"534\":2,\"721\":4,\"724\":2,\"782\":3,\"846\":2}}],[\"lengthoflongestsubstring\",{\"1\":{\"139\":2}}],[\"length\",{\"0\":{\"963\":1},\"1\":{\"41\":2,\"105\":8,\"114\":2,\"137\":2,\"138\":2,\"139\":1,\"305\":1,\"534\":2,\"690\":1,\"718\":3,\"719\":1,\"721\":3,\"724\":3,\"726\":2,\"744\":1,\"929\":3,\"963\":1}}],[\"leibler\",{\"1\":{\"349\":1}}],[\"lei\",{\"1\":{\"223\":1,\"227\":1}}],[\"le\",{\"1\":{\"218\":1}}],[\"lettermap\",{\"1\":{\"114\":1}}],[\"lettercombinations\",{\"1\":{\"114\":1}}],[\"leetcode\",{\"0\":{\"73\":1,\"74\":1,\"75\":1,\"90\":1,\"91\":1,\"98\":1,\"107\":1,\"108\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"118\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"125\":1,\"126\":1,\"128\":1,\"129\":1,\"131\":1,\"132\":1,\"135\":1,\"137\":1,\"138\":1,\"139\":1,\"142\":1,\"143\":1,\"146\":1,\"148\":1,\"152\":1,\"153\":1,\"154\":1},\"1\":{\"70\":3,\"72\":8,\"81\":1,\"82\":1,\"85\":1,\"86\":2,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"99\":1,\"100\":4,\"102\":12,\"103\":6,\"104\":8,\"105\":6,\"106\":3,\"126\":3,\"152\":1}}],[\"lefttreenum\",{\"1\":{\"80\":1}}],[\"leftdepth\",{\"1\":{\"80\":5}}],[\"left\",{\"1\":{\"69\":2,\"70\":7,\"71\":5,\"72\":18,\"73\":3,\"75\":6,\"76\":2,\"77\":10,\"78\":9,\"80\":10,\"81\":5,\"82\":8,\"83\":16,\"84\":2,\"85\":8,\"86\":1,\"87\":7,\"88\":3,\"89\":7,\"90\":14,\"91\":5,\"94\":1,\"95\":2,\"96\":7,\"97\":11,\"98\":6,\"99\":5,\"100\":5,\"102\":5,\"103\":5,\"104\":24,\"119\":4,\"137\":21,\"138\":7,\"139\":5,\"366\":1,\"383\":1,\"422\":1,\"426\":1}}],[\"lantent\",{\"0\":{\"923\":1}}],[\"langevin\",{\"0\":{\"905\":1},\"1\":{\"909\":1}}],[\"language\",{\"1\":{\"41\":2,\"422\":1,\"856\":1,\"864\":1,\"889\":1}}],[\"la\",{\"1\":{\"884\":1}}],[\"lambda\",{\"1\":{\"834\":2}}],[\"lab\",{\"1\":{\"360\":1}}],[\"labels\",{\"1\":{\"426\":4,\"859\":4}}],[\"labeled\",{\"1\":{\"422\":3,\"426\":3}}],[\"label\",{\"1\":{\"52\":2,\"359\":2,\"854\":1}}],[\"layernorm\",{\"1\":{\"877\":3}}],[\"layers\",{\"1\":{\"304\":1,\"305\":1,\"309\":2,\"344\":7,\"361\":1,\"380\":1}}],[\"layer\",{\"0\":{\"412\":1,\"413\":1},\"1\":{\"277\":1,\"309\":3,\"344\":1,\"380\":1,\"383\":3,\"408\":2,\"410\":2,\"419\":1,\"928\":1}}],[\"latent\",{\"0\":{\"924\":1,\"960\":1},\"1\":{\"864\":1,\"877\":1,\"882\":1,\"921\":1,\"922\":7,\"924\":2,\"928\":5,\"929\":1,\"952\":1,\"959\":5,\"960\":1,\"961\":3,\"963\":2}}],[\"late\",{\"1\":{\"770\":1}}],[\"latest\",{\"1\":{\"184\":1}}],[\"latticenet\",{\"1\":{\"246\":1}}],[\"lawin\",{\"1\":{\"245\":1}}],[\"larger\",{\"1\":{\"428\":1}}],[\"large\",{\"1\":{\"360\":1,\"422\":1,\"428\":1,\"929\":3}}],[\"largekernel3d\",{\"1\":{\"192\":1}}],[\"largest\",{\"1\":{\"427\":1,\"429\":1}}],[\"largestsumafterknegations\",{\"1\":{\"143\":1}}],[\"largestvalues\",{\"1\":{\"72\":1}}],[\"last\",{\"1\":{\"103\":2,\"539\":2,\"540\":2,\"543\":2,\"574\":4,\"845\":6}}],[\"lost\",{\"1\":{\"309\":1}}],[\"loss\",{\"1\":{\"54\":1,\"255\":3,\"260\":1,\"263\":1,\"338\":1,\"355\":2,\"356\":1,\"413\":1,\"416\":1,\"843\":1,\"854\":6,\"855\":2,\"859\":8,\"862\":1,\"864\":1,\"868\":2,\"893\":1,\"928\":3}}],[\"loop\",{\"1\":{\"283\":1,\"835\":4}}],[\"loadtxt\",{\"1\":{\"838\":2}}],[\"load\",{\"1\":{\"188\":1,\"846\":17}}],[\"location\",{\"1\":{\"357\":1,\"476\":1,\"846\":1}}],[\"locations\",{\"1\":{\"309\":1,\"361\":3}}],[\"locally\",{\"1\":{\"945\":1}}],[\"localspecgcn\",{\"1\":{\"226\":1}}],[\"local\",{\"0\":{\"612\":1,\"620\":1},\"1\":{\"174\":1,\"380\":1}}],[\"lock\",{\"0\":{\"530\":1,\"531\":1,\"532\":1},\"1\":{\"24\":1,\"27\":1,\"529\":4,\"530\":6,\"531\":7,\"532\":8}}],[\"locker\",{\"1\":{\"8\":1}}],[\"long\",{\"1\":{\"99\":3,\"104\":2,\"106\":6,\"535\":7,\"600\":2,\"632\":4,\"633\":3,\"642\":1,\"644\":1,\"799\":1,\"801\":6,\"804\":1,\"825\":1,\"826\":1,\"827\":1,\"828\":2,\"830\":7}}],[\"lower\",{\"1\":{\"208\":1}}],[\"lowestcommonancestor\",{\"1\":{\"89\":3,\"91\":3}}],[\"low\",{\"1\":{\"98\":10,\"380\":1,\"873\":1,\"875\":3}}],[\"logz\",{\"1\":{\"904\":1}}],[\"logdir\",{\"1\":{\"840\":1,\"841\":1}}],[\"log10\",{\"1\":{\"451\":1}}],[\"logit\",{\"1\":{\"353\":1,\"355\":2}}],[\"logits\",{\"0\":{\"351\":1},\"1\":{\"344\":1,\"351\":1,\"357\":3,\"358\":1,\"859\":3}}],[\"logq\",{\"1\":{\"348\":3,\"349\":6,\"904\":1}}],[\"logpdata\",{\"1\":{\"904\":4}}],[\"logp\",{\"1\":{\"347\":2,\"348\":1,\"349\":3,\"897\":19,\"904\":2,\"913\":2,\"917\":2,\"918\":1,\"941\":1,\"944\":1,\"947\":9}}],[\"log\",{\"1\":{\"80\":3,\"348\":2,\"349\":1,\"904\":2,\"905\":1}}],[\"logn\",{\"1\":{\"20\":1}}],[\"lt\",{\"0\":{\"15\":1,\"16\":1,\"17\":1,\"39\":1},\"1\":{\"15\":1,\"16\":3,\"17\":2,\"38\":1,\"39\":1}}],[\"lis\",{\"1\":{\"835\":4}}],[\"listnode\",{\"1\":{\"103\":80}}],[\"list\",{\"1\":{\"38\":3,\"304\":1,\"344\":1,\"548\":1,\"559\":2,\"563\":1,\"570\":2,\"837\":1}}],[\"li\",{\"1\":{\"769\":1}}],[\"limit\",{\"1\":{\"461\":4,\"469\":3}}],[\"limitations\",{\"0\":{\"358\":1}}],[\"light\",{\"1\":{\"875\":1}}],[\"lighting\",{\"1\":{\"340\":2}}],[\"lightdm\",{\"1\":{\"191\":2}}],[\"lidar\",{\"1\":{\"242\":1,\"245\":1,\"835\":1}}],[\"liu\",{\"1\":{\"225\":1}}],[\"lives\",{\"1\":{\"208\":1}}],[\"library\",{\"1\":{\"208\":1,\"312\":1}}],[\"lib\",{\"1\":{\"188\":1}}],[\"libgl1\",{\"1\":{\"166\":1}}],[\"libgl\",{\"0\":{\"166\":1},\"1\":{\"166\":1}}],[\"libmysqlclient\",{\"1\":{\"10\":1}}],[\"liwe\",{\"1\":{\"126\":2}}],[\"liweiwei1419\",{\"1\":{\"126\":1}}],[\"likelihood\",{\"1\":{\"912\":1}}],[\"likely\",{\"1\":{\"427\":1}}],[\"like\",{\"1\":{\"41\":1,\"191\":2,\"428\":1,\"868\":1}}],[\"linkage\",{\"1\":{\"225\":1}}],[\"lin\",{\"1\":{\"220\":1}}],[\"linbai\",{\"1\":{\"182\":1}}],[\"linecolor\",{\"1\":{\"837\":1}}],[\"linewidths\",{\"1\":{\"837\":2}}],[\"linear\",{\"0\":{\"435\":1},\"1\":{\"344\":6,\"380\":4,\"449\":1,\"867\":1,\"963\":1}}],[\"line\",{\"1\":{\"41\":1}}],[\"linux\",{\"0\":{\"492\":1,\"496\":1},\"1\":{\"13\":3,\"19\":1,\"27\":1,\"28\":3,\"30\":3,\"160\":1,\"174\":1,\"175\":1,\"188\":1,\"191\":3,\"492\":2,\"499\":2,\"545\":4,\"833\":4}}],[\"iclr\",{\"1\":{\"939\":1}}],[\"iccv\",{\"1\":{\"262\":1,\"361\":1,\"888\":1}}],[\"iccv2019\",{\"1\":{\"256\":1}}],[\"iccv2021\",{\"0\":{\"53\":1},\"1\":{\"53\":1}}],[\"ilvr\",{\"0\":{\"951\":1},\"1\":{\"938\":1,\"951\":1,\"952\":1}}],[\"ill\",{\"1\":{\"875\":1}}],[\"illustrated\",{\"1\":{\"321\":1}}],[\"illustration\",{\"1\":{\"314\":1,\"361\":1,\"383\":1}}],[\"ivlr\",{\"0\":{\"938\":1},\"1\":{\"939\":1}}],[\"iv\",{\"1\":{\"935\":1}}],[\"ieee\",{\"1\":{\"905\":1}}],[\"ieeexplore\",{\"1\":{\"905\":1}}],[\"i3\",{\"1\":{\"600\":2}}],[\"i2\",{\"1\":{\"600\":2,\"859\":1}}],[\"i1\",{\"1\":{\"600\":2,\"859\":1}}],[\"ignore\",{\"1\":{\"428\":1}}],[\"ir\",{\"1\":{\"394\":3}}],[\"ia\",{\"1\":{\"390\":1}}],[\"i0\",{\"1\":{\"332\":1}}],[\"ids\",{\"1\":{\"929\":5}}],[\"idea\",{\"1\":{\"890\":1}}],[\"identity\",{\"1\":{\"195\":1}}],[\"ida\",{\"1\":{\"801\":1}}],[\"id\",{\"1\":{\"181\":2,\"422\":1,\"458\":1,\"460\":1,\"468\":1,\"469\":1,\"530\":7,\"531\":7,\"841\":1,\"852\":1}}],[\"ipv4\",{\"1\":{\"186\":1}}],[\"ip\",{\"0\":{\"119\":1,\"491\":1},\"1\":{\"394\":2}}],[\"iii\",{\"0\":{\"113\":1},\"1\":{\"935\":1}}],[\"ii\",{\"0\":{\"116\":1,\"122\":1,\"126\":1,\"148\":1},\"1\":{\"72\":2,\"85\":2,\"102\":1,\"103\":1,\"104\":1,\"105\":2,\"122\":1,\"126\":2,\"152\":1,\"332\":1,\"626\":1,\"935\":1}}],[\"items\",{\"1\":{\"846\":2}}],[\"iter2\",{\"1\":{\"541\":4}}],[\"iter1\",{\"1\":{\"541\":4}}],[\"iter\",{\"1\":{\"539\":6,\"540\":9,\"545\":8,\"559\":1}}],[\"iterations\",{\"1\":{\"884\":1}}],[\"iterative\",{\"0\":{\"884\":1,\"901\":1},\"1\":{\"54\":4,\"901\":1,\"910\":3,\"952\":1}}],[\"iteratively\",{\"1\":{\"52\":2}}],[\"iterator\",{\"1\":{\"539\":10,\"540\":8,\"541\":7,\"543\":2,\"545\":1,\"559\":3,\"563\":2,\"574\":8,\"576\":1}}],[\"it\",{\"1\":{\"104\":3,\"184\":1,\"188\":1,\"202\":1,\"208\":2,\"309\":1,\"344\":1,\"380\":1,\"422\":1,\"426\":1,\"574\":4,\"576\":5,\"856\":2}}],[\"itcharge\",{\"1\":{\"69\":1,\"71\":1,\"503\":1}}],[\"imread\",{\"1\":{\"835\":1}}],[\"imofrmation\",{\"1\":{\"701\":1}}],[\"imooc\",{\"1\":{\"41\":1}}],[\"imbalanced\",{\"1\":{\"429\":1}}],[\"impoverished\",{\"1\":{\"427\":1}}],[\"important\",{\"1\":{\"427\":1}}],[\"import\",{\"1\":{\"344\":3,\"833\":1,\"835\":2,\"838\":3,\"840\":2,\"929\":1}}],[\"importerror\",{\"0\":{\"166\":1},\"1\":{\"166\":1}}],[\"implicit\",{\"1\":{\"912\":1}}],[\"implemented\",{\"1\":{\"476\":1}}],[\"implementation\",{\"1\":{\"344\":1}}],[\"impl\",{\"1\":{\"396\":1}}],[\"image2image\",{\"0\":{\"933\":1}}],[\"imagen\",{\"1\":{\"922\":1,\"929\":1}}],[\"imagenet\",{\"1\":{\"357\":1,\"370\":1,\"451\":2,\"858\":2,\"910\":1,\"928\":1}}],[\"imageio\",{\"1\":{\"835\":3}}],[\"images\",{\"0\":{\"945\":1},\"1\":{\"309\":1,\"340\":2,\"422\":12,\"424\":2,\"426\":1,\"428\":1,\"429\":4,\"835\":2,\"856\":1,\"859\":1,\"888\":1,\"890\":1,\"945\":2}}],[\"image\",{\"0\":{\"50\":1,\"51\":1,\"55\":1,\"901\":1,\"919\":1,\"934\":1,\"942\":1,\"944\":1,\"950\":1},\"1\":{\"41\":2,\"48\":1,\"54\":1,\"201\":1,\"293\":1,\"342\":1,\"359\":3,\"380\":4,\"397\":1,\"422\":2,\"426\":1,\"427\":1,\"859\":3,\"860\":1,\"862\":2,\"864\":2,\"887\":1,\"889\":1,\"901\":4,\"910\":2,\"921\":1,\"922\":1,\"939\":1,\"944\":1,\"945\":2,\"952\":2}}],[\"imgpaths\",{\"1\":{\"835\":3}}],[\"imgs2gif\",{\"1\":{\"835\":3}}],[\"img\",{\"1\":{\"41\":1,\"835\":2}}],[\"ifstream\",{\"1\":{\"781\":4,\"791\":1}}],[\"if\",{\"1\":{\"27\":1,\"44\":1,\"56\":1,\"70\":1,\"71\":7,\"72\":33,\"73\":4,\"74\":1,\"75\":8,\"76\":1,\"77\":5,\"78\":4,\"80\":3,\"81\":4,\"82\":8,\"83\":4,\"84\":4,\"85\":9,\"86\":2,\"87\":4,\"88\":2,\"89\":5,\"90\":9,\"91\":5,\"94\":3,\"95\":3,\"96\":1,\"97\":7,\"98\":3,\"99\":7,\"100\":13,\"103\":15,\"104\":21,\"105\":7,\"106\":10,\"107\":1,\"110\":1,\"112\":1,\"113\":2,\"114\":2,\"115\":2,\"116\":4,\"118\":3,\"119\":5,\"121\":1,\"122\":2,\"123\":3,\"125\":2,\"126\":4,\"128\":5,\"137\":9,\"138\":5,\"142\":1,\"143\":2,\"146\":2,\"152\":1,\"153\":2,\"170\":1,\"530\":1,\"531\":1,\"534\":2,\"540\":1,\"568\":1,\"595\":2,\"599\":2,\"600\":2,\"601\":3,\"689\":2,\"690\":1,\"695\":3,\"759\":1,\"781\":9,\"793\":2,\"817\":17,\"826\":1,\"827\":1,\"828\":3,\"829\":3,\"830\":8,\"835\":2,\"845\":2,\"846\":2,\"877\":1}}],[\"istream\",{\"1\":{\"781\":3,\"782\":2,\"791\":2}}],[\"isvalid\",{\"1\":{\"106\":1,\"128\":2}}],[\"isvalidbst\",{\"1\":{\"99\":5}}],[\"ishappy\",{\"1\":{\"104\":1}}],[\"isanagram\",{\"1\":{\"104\":1}}],[\"isbalanced\",{\"1\":{\"81\":1}}],[\"issymmetric\",{\"1\":{\"77\":1}}],[\"issametree\",{\"1\":{\"78\":3}}],[\"issame\",{\"1\":{\"77\":2}}],[\"is\",{\"1\":{\"22\":1,\"118\":2,\"119\":2,\"195\":1,\"201\":1,\"208\":1,\"261\":1,\"304\":1,\"309\":6,\"312\":1,\"314\":3,\"321\":2,\"361\":1,\"366\":1,\"383\":3,\"397\":1,\"422\":3,\"424\":1,\"426\":2,\"427\":2,\"428\":3,\"429\":1,\"451\":4,\"559\":1,\"690\":1,\"698\":2,\"724\":2,\"745\":1,\"834\":1,\"845\":2,\"856\":1,\"877\":3,\"910\":1,\"956\":1}}],[\"i\",{\"0\":{\"30\":1,\"32\":1,\"786\":1,\"787\":1,\"788\":1},\"1\":{\"13\":3,\"28\":1,\"29\":2,\"30\":14,\"31\":4,\"32\":3,\"33\":1,\"34\":1,\"39\":1,\"69\":5,\"72\":38,\"73\":3,\"74\":2,\"75\":3,\"84\":4,\"86\":4,\"87\":12,\"96\":1,\"99\":5,\"100\":5,\"102\":16,\"103\":3,\"104\":71,\"105\":32,\"106\":22,\"107\":9,\"114\":4,\"116\":9,\"118\":10,\"119\":5,\"121\":5,\"122\":8,\"123\":8,\"125\":7,\"126\":17,\"128\":12,\"142\":4,\"143\":7,\"146\":5,\"148\":5,\"152\":12,\"153\":4,\"165\":2,\"203\":1,\"242\":1,\"268\":1,\"282\":4,\"283\":2,\"292\":1,\"308\":1,\"332\":4,\"338\":6,\"347\":1,\"353\":1,\"354\":1,\"366\":4,\"394\":3,\"451\":5,\"492\":4,\"528\":3,\"529\":3,\"530\":3,\"531\":3,\"536\":1,\"542\":5,\"576\":4,\"589\":2,\"599\":3,\"600\":3,\"612\":9,\"613\":7,\"635\":3,\"639\":1,\"664\":12,\"665\":4,\"675\":2,\"676\":7,\"682\":1,\"683\":5,\"690\":12,\"745\":4,\"759\":9,\"781\":26,\"786\":2,\"788\":1,\"793\":3,\"800\":10,\"804\":3,\"827\":5,\"849\":2,\"859\":14,\"862\":3,\"867\":5,\"869\":5,\"896\":1,\"897\":1,\"900\":8,\"905\":1,\"913\":1,\"917\":1,\"918\":5,\"935\":1,\"959\":1}}],[\"inpainting\",{\"0\":{\"919\":1,\"934\":1,\"940\":1},\"1\":{\"940\":1}}],[\"input2\",{\"1\":{\"840\":3}}],[\"inputs\",{\"1\":{\"195\":1,\"304\":3,\"344\":4}}],[\"input\",{\"0\":{\"280\":1},\"1\":{\"49\":1,\"54\":1,\"201\":1,\"208\":1,\"314\":1,\"344\":1,\"366\":1,\"380\":2,\"695\":1,\"745\":1,\"840\":6,\"848\":1,\"929\":3,\"945\":3}}],[\"inmeta\",{\"1\":{\"856\":1}}],[\"inheritance\",{\"1\":{\"748\":2,\"749\":1}}],[\"inline\",{\"0\":{\"707\":1},\"1\":{\"599\":9,\"707\":9,\"708\":3,\"770\":1}}],[\"inat\",{\"1\":{\"429\":3}}],[\"inaturalist\",{\"0\":{\"429\":1},\"1\":{\"429\":1}}],[\"indoor\",{\"1\":{\"343\":1,\"426\":1}}],[\"index2\",{\"1\":{\"106\":5}}],[\"index1\",{\"1\":{\"106\":5}}],[\"index\",{\"1\":{\"54\":1,\"72\":7,\"86\":9,\"87\":8,\"96\":4,\"99\":3,\"103\":20,\"119\":2,\"142\":3,\"534\":2}}],[\"incomplete\",{\"1\":{\"845\":1}}],[\"include\",{\"1\":{\"524\":1,\"528\":6,\"529\":6,\"530\":6,\"531\":6,\"535\":2,\"536\":1,\"538\":2,\"539\":2,\"540\":2,\"541\":2,\"542\":2,\"543\":2,\"545\":3,\"547\":1,\"573\":1,\"576\":2,\"581\":1,\"583\":1,\"584\":1,\"589\":1,\"595\":1,\"598\":2,\"599\":1,\"600\":1,\"601\":1,\"605\":1,\"606\":1,\"612\":2,\"615\":1,\"624\":1,\"666\":1,\"667\":1,\"671\":1,\"683\":1,\"686\":2,\"690\":2,\"692\":1,\"695\":2,\"697\":1,\"698\":2,\"709\":1,\"713\":1,\"721\":1,\"722\":2,\"724\":1,\"745\":1,\"759\":2,\"769\":2,\"778\":1,\"781\":6,\"825\":1,\"826\":1,\"827\":1,\"828\":1,\"830\":2}}],[\"including\",{\"1\":{\"422\":1,\"429\":1}}],[\"increase\",{\"1\":{\"309\":1,\"528\":3,\"529\":3,\"530\":5,\"531\":5}}],[\"inception\",{\"1\":{\"225\":1,\"451\":11}}],[\"inner\",{\"1\":{\"305\":1}}],[\"infer\",{\"0\":{\"860\":1}}],[\"inference\",{\"0\":{\"286\":1},\"1\":{\"211\":2}}],[\"infile\",{\"1\":{\"781\":14}}],[\"info\",{\"1\":{\"263\":1}}],[\"infonce\",{\"1\":{\"255\":3}}],[\"information\",{\"1\":{\"195\":1,\"309\":2,\"321\":1}}],[\"inverse\",{\"1\":{\"309\":1}}],[\"inverttree\",{\"1\":{\"76\":3}}],[\"invariance\",{\"1\":{\"305\":1}}],[\"invariant\",{\"0\":{\"303\":1},\"1\":{\"305\":1}}],[\"invalid\",{\"1\":{\"182\":2}}],[\"inorder\",{\"1\":{\"86\":8,\"99\":4}}],[\"inordertraversal\",{\"1\":{\"70\":1,\"71\":1}}],[\"insight\",{\"1\":{\"956\":1}}],[\"inside\",{\"1\":{\"77\":2}}],[\"insect\",{\"1\":{\"429\":1}}],[\"insecta\",{\"1\":{\"429\":1}}],[\"inserting\",{\"1\":{\"559\":1}}],[\"insertintobst\",{\"1\":{\"95\":3}}],[\"insert\",{\"0\":{\"559\":1},\"1\":{\"103\":1,\"104\":2,\"123\":1,\"539\":6,\"559\":13,\"560\":1,\"574\":3,\"829\":1,\"830\":5}}],[\"instead\",{\"1\":{\"344\":2}}],[\"instances\",{\"1\":{\"422\":2}}],[\"instance\",{\"1\":{\"195\":5,\"198\":2,\"259\":1,\"422\":2,\"425\":1,\"426\":1,\"959\":2}}],[\"install\",{\"1\":{\"10\":1,\"166\":2,\"178\":1,\"185\":3,\"186\":1,\"189\":1,\"191\":1}}],[\"ins\",{\"1\":{\"197\":1}}],[\"in\",{\"0\":{\"50\":1,\"56\":1,\"422\":1},\"1\":{\"48\":1,\"188\":1,\"192\":1,\"195\":2,\"201\":1,\"208\":3,\"209\":3,\"261\":2,\"304\":6,\"305\":1,\"309\":3,\"314\":2,\"321\":2,\"344\":1,\"361\":2,\"380\":4,\"383\":6,\"422\":5,\"426\":1,\"427\":2,\"428\":1,\"665\":1,\"781\":3,\"793\":6,\"833\":1,\"835\":2,\"846\":4,\"849\":1,\"852\":1,\"867\":1,\"956\":1,\"959\":1}}],[\"intra\",{\"0\":{\"880\":1}}],[\"intro\",{\"0\":{\"386\":1,\"398\":1,\"922\":1}}],[\"introducing\",{\"1\":{\"372\":1}}],[\"introduction\",{\"1\":{\"359\":1}}],[\"integer\",{\"1\":{\"634\":2,\"781\":1}}],[\"inter\",{\"0\":{\"881\":1}}],[\"interleaving\",{\"1\":{\"500\":1}}],[\"internet\",{\"1\":{\"428\":1}}],[\"internimage\",{\"0\":{\"360\":1},\"1\":{\"360\":2,\"370\":6,\"377\":1}}],[\"internal\",{\"1\":{\"43\":1,\"476\":1}}],[\"interpolation\",{\"1\":{\"963\":1}}],[\"interpolations\",{\"0\":{\"960\":1},\"1\":{\"960\":1}}],[\"interpconv\",{\"1\":{\"223\":1}}],[\"interpreter\",{\"0\":{\"174\":1},\"1\":{\"174\":1}}],[\"intersection\",{\"1\":{\"104\":1}}],[\"interaction\",{\"1\":{\"51\":1}}],[\"interactive\",{\"0\":{\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"55\":1,\"56\":1},\"1\":{\"49\":1,\"51\":1,\"52\":3,\"53\":1,\"54\":3,\"55\":1}}],[\"into\",{\"1\":{\"261\":1,\"314\":1,\"366\":1,\"422\":1}}],[\"int\",{\"1\":{\"27\":1,\"69\":2,\"70\":6,\"71\":6,\"72\":51,\"73\":5,\"74\":3,\"75\":7,\"80\":8,\"81\":4,\"83\":5,\"84\":4,\"85\":10,\"86\":9,\"87\":14,\"90\":6,\"94\":1,\"95\":1,\"96\":5,\"97\":1,\"98\":2,\"99\":5,\"100\":18,\"102\":13,\"103\":18,\"104\":51,\"105\":11,\"106\":3,\"107\":10,\"112\":8,\"113\":8,\"114\":3,\"115\":8,\"116\":9,\"118\":4,\"119\":5,\"121\":7,\"122\":7,\"123\":8,\"125\":6,\"126\":6,\"128\":10,\"137\":12,\"138\":6,\"139\":9,\"142\":5,\"143\":7,\"146\":6,\"148\":4,\"152\":10,\"153\":5,\"524\":10,\"528\":5,\"529\":5,\"530\":8,\"531\":8,\"534\":2,\"535\":2,\"538\":8,\"539\":4,\"540\":3,\"541\":5,\"542\":5,\"543\":4,\"545\":1,\"548\":6,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"554\":1,\"559\":1,\"563\":2,\"564\":2,\"570\":2,\"573\":11,\"574\":2,\"576\":4,\"583\":2,\"586\":1,\"595\":14,\"597\":3,\"598\":9,\"599\":10,\"600\":3,\"601\":16,\"605\":10,\"606\":19,\"611\":4,\"612\":13,\"613\":3,\"615\":10,\"616\":1,\"617\":2,\"624\":1,\"632\":1,\"633\":2,\"634\":2,\"635\":3,\"637\":3,\"638\":2,\"639\":3,\"642\":2,\"650\":2,\"658\":1,\"661\":1,\"665\":3,\"666\":2,\"667\":3,\"670\":3,\"671\":5,\"672\":3,\"673\":4,\"675\":25,\"676\":3,\"683\":2,\"690\":5,\"695\":1,\"698\":2,\"704\":1,\"706\":1,\"707\":1,\"709\":6,\"712\":3,\"713\":2,\"717\":3,\"718\":12,\"719\":3,\"721\":28,\"722\":3,\"724\":12,\"729\":1,\"732\":3,\"734\":1,\"738\":2,\"739\":2,\"741\":1,\"744\":7,\"745\":10,\"749\":3,\"757\":3,\"759\":3,\"769\":6,\"781\":8,\"782\":2,\"798\":1,\"799\":1,\"801\":5,\"804\":2,\"816\":2,\"825\":1,\"826\":1,\"827\":1,\"828\":1,\"830\":4,\"837\":1}}],[\"initial\",{\"0\":{\"281\":1},\"1\":{\"874\":1}}],[\"initializer\",{\"1\":{\"548\":1,\"559\":2}}],[\"initialized\",{\"1\":{\"188\":1}}],[\"initialization\",{\"1\":{\"22\":1}}],[\"initramfs\",{\"1\":{\"191\":1}}],[\"init\",{\"1\":{\"10\":1,\"23\":1,\"24\":1,\"25\":1,\"27\":1,\"295\":1,\"304\":2,\"344\":2,\"845\":1,\"854\":3,\"877\":2}}],[\"ios\",{\"1\":{\"781\":9,\"782\":1,\"793\":34,\"794\":2}}],[\"iostream\",{\"1\":{\"524\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"535\":1,\"538\":1,\"539\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":1,\"545\":1,\"583\":1,\"595\":1,\"599\":1,\"600\":1,\"601\":1,\"605\":1,\"606\":1,\"612\":2,\"615\":1,\"624\":2,\"666\":1,\"671\":1,\"683\":1,\"690\":1,\"695\":1,\"698\":2,\"709\":1,\"713\":1,\"721\":1,\"722\":1,\"724\":1,\"745\":1,\"759\":1,\"769\":1,\"775\":1,\"780\":1,\"781\":3,\"789\":1,\"791\":1,\"825\":2,\"826\":1,\"827\":1,\"828\":1,\"830\":2}}],[\"iomanip\",{\"1\":{\"778\":1}}],[\"iou\",{\"1\":{\"202\":2,\"242\":1,\"254\":2,\"412\":2}}],[\"iocp\",{\"1\":{\"13\":1}}],[\"io\",{\"0\":{\"14\":1,\"492\":1},\"1\":{\"3\":3,\"13\":1,\"15\":3,\"30\":22,\"277\":1,\"301\":1,\"499\":1,\"901\":1,\"910\":1}}],[\"sns\",{\"1\":{\"838\":4}}],[\"sgd\",{\"1\":{\"957\":4}}],[\"sgi\",{\"1\":{\"563\":2}}],[\"sgc\",{\"1\":{\"226\":1}}],[\"square\",{\"1\":{\"837\":1,\"868\":1}}],[\"squeezing\",{\"0\":{\"385\":1},\"1\":{\"385\":1,\"390\":1}}],[\"squeeze\",{\"1\":{\"868\":1}}],[\"squeezesegv2\",{\"1\":{\"245\":1}}],[\"squeezenet\",{\"1\":{\"245\":1}}],[\"sqrt\",{\"1\":{\"589\":1,\"868\":4}}],[\"sql\",{\"1\":{\"457\":2,\"467\":1}}],[\"sky\",{\"1\":{\"422\":2}}],[\"smi\",{\"1\":{\"852\":2}}],[\"smaller\",{\"1\":{\"845\":1}}],[\"smallest\",{\"1\":{\"429\":1,\"690\":6}}],[\"small\",{\"1\":{\"427\":1}}],[\"smask\",{\"1\":{\"200\":1,\"201\":1}}],[\"smoothl1\",{\"1\":{\"416\":1}}],[\"smooth\",{\"1\":{\"413\":1}}],[\"synthetic\",{\"1\":{\"890\":1}}],[\"synthesizing\",{\"1\":{\"888\":1}}],[\"synthesis\",{\"0\":{\"942\":1,\"944\":1,\"950\":1},\"1\":{\"277\":1,\"862\":1,\"922\":1,\"939\":1,\"944\":1,\"958\":3,\"961\":1}}],[\"sys\",{\"1\":{\"833\":2}}],[\"symmetric\",{\"1\":{\"305\":2}}],[\"ssl\",{\"1\":{\"484\":2,\"485\":2}}],[\"ssim\",{\"1\":{\"451\":2,\"875\":1,\"910\":4}}],[\"ss\",{\"1\":{\"404\":1}}],[\"sst\",{\"1\":{\"273\":1}}],[\"sshd\",{\"1\":{\"186\":3}}],[\"ssh\",{\"0\":{\"186\":1},\"1\":{\"165\":1,\"184\":1,\"186\":10,\"189\":2}}],[\"sfcnn\",{\"1\":{\"223\":2}}],[\"slam\",{\"1\":{\"835\":1,\"846\":1}}],[\"sleep\",{\"1\":{\"528\":1,\"529\":1,\"530\":1,\"531\":1}}],[\"slp\",{\"1\":{\"222\":1}}],[\"slow\",{\"1\":{\"103\":5}}],[\"sr3\",{\"0\":{\"907\":1},\"1\":{\"453\":1,\"901\":1,\"910\":4}}],[\"srargmax\",{\"1\":{\"394\":1}}],[\"sr\",{\"1\":{\"391\":1,\"392\":1,\"393\":1,\"394\":5,\"909\":1}}],[\"src\",{\"1\":{\"290\":1,\"291\":1}}],[\"sreal\",{\"1\":{\"284\":2}}],[\"srinet\",{\"1\":{\"220\":1}}],[\"srn\",{\"1\":{\"220\":1}}],[\"s3dis\",{\"0\":{\"343\":1},\"1\":{\"192\":1,\"194\":1,\"199\":1,\"249\":1,\"254\":1,\"261\":1,\"343\":2}}],[\"sd\",{\"1\":{\"865\":1,\"882\":1,\"922\":2,\"927\":2,\"928\":1,\"929\":3,\"930\":1,\"935\":1}}],[\"sdedit\",{\"0\":{\"939\":1},\"1\":{\"939\":1}}],[\"sde\",{\"0\":{\"896\":1,\"897\":1,\"899\":1,\"900\":1},\"1\":{\"453\":1,\"896\":1,\"900\":1}}],[\"sdf\",{\"0\":{\"281\":1},\"1\":{\"277\":2,\"278\":1,\"281\":1,\"282\":5,\"340\":1}}],[\"sdb\",{\"1\":{\"172\":2}}],[\"sdch\",{\"1\":{\"41\":1}}],[\"shrink\",{\"1\":{\"574\":1}}],[\"shift\",{\"1\":{\"625\":1,\"884\":1}}],[\"shifted\",{\"1\":{\"383\":2}}],[\"shifting\",{\"1\":{\"379\":1}}],[\"short\",{\"1\":{\"632\":1,\"633\":2,\"642\":1,\"799\":1,\"804\":1}}],[\"show\",{\"1\":{\"427\":1,\"717\":1,\"838\":1}}],[\"shown\",{\"1\":{\"380\":2}}],[\"shot\",{\"0\":{\"237\":1},\"1\":{\"237\":1,\"857\":1,\"858\":1,\"876\":1,\"889\":2}}],[\"sharing\",{\"1\":{\"372\":1}}],[\"shared\",{\"0\":{\"166\":1,\"202\":1},\"1\":{\"166\":1,\"184\":1}}],[\"shapnet\",{\"1\":{\"259\":1}}],[\"shapes\",{\"1\":{\"361\":1}}],[\"shape\",{\"1\":{\"277\":1,\"304\":4,\"344\":1,\"380\":2,\"840\":1,\"846\":4,\"849\":1,\"868\":1}}],[\"shapecontextnet\",{\"1\":{\"228\":1}}],[\"shapenet\",{\"0\":{\"259\":1},\"1\":{\"220\":1,\"259\":1}}],[\"shapenetpart\",{\"1\":{\"194\":1}}],[\"sh\",{\"1\":{\"174\":2,\"175\":2}}],[\"shell\",{\"0\":{\"173\":1},\"1\":{\"174\":2,\"175\":1}}],[\"shuaiqidexiaojiejie\",{\"1\":{\"841\":2}}],[\"shufflenet\",{\"1\":{\"355\":1}}],[\"shuffle\",{\"1\":{\"220\":1,\"845\":1}}],[\"shu\",{\"1\":{\"82\":1}}],[\"scribbles\",{\"1\":{\"952\":1}}],[\"screen\",{\"0\":{\"159\":1,\"176\":1,\"177\":1,\"178\":1,\"179\":1,\"180\":1,\"181\":1,\"182\":1},\"1\":{\"177\":3,\"178\":1,\"179\":4,\"181\":2,\"182\":8}}],[\"science\",{\"1\":{\"959\":1}}],[\"scientific\",{\"1\":{\"862\":2}}],[\"scipt\",{\"1\":{\"191\":1}}],[\"scope\",{\"1\":{\"619\":4}}],[\"score\",{\"0\":{\"895\":1,\"904\":1,\"911\":1,\"915\":1,\"917\":1},\"1\":{\"451\":9,\"453\":1,\"745\":4,\"757\":1,\"769\":4,\"825\":6,\"826\":3,\"827\":2,\"828\":1,\"830\":8,\"895\":2,\"899\":1,\"904\":9,\"905\":1,\"911\":1,\"913\":4,\"915\":1,\"916\":2,\"917\":2,\"920\":2,\"942\":1}}],[\"scores\",{\"1\":{\"411\":1}}],[\"scenes\",{\"1\":{\"426\":2}}],[\"scene\",{\"0\":{\"266\":1},\"1\":{\"198\":2,\"266\":1,\"343\":1,\"422\":1,\"424\":2,\"426\":1}}],[\"scalars\",{\"1\":{\"372\":1}}],[\"scalable\",{\"1\":{\"266\":2}}],[\"scales\",{\"1\":{\"361\":1}}],[\"scale\",{\"1\":{\"272\":2,\"305\":1,\"360\":1,\"422\":1}}],[\"scaling\",{\"0\":{\"375\":1},\"1\":{\"192\":1,\"375\":1}}],[\"scan\",{\"1\":{\"835\":1}}],[\"scan6\",{\"1\":{\"342\":1}}],[\"scan1\",{\"1\":{\"342\":1}}],[\"scancomplete\",{\"1\":{\"246\":1}}],[\"scannetv2\",{\"1\":{\"194\":1,\"199\":2}}],[\"scannet200\",{\"1\":{\"192\":1}}],[\"scannet\",{\"1\":{\"192\":2,\"249\":1,\"254\":1,\"312\":1}}],[\"scheme\",{\"0\":{\"51\":1},\"1\":{\"51\":2,\"383\":1}}],[\"s\",{\"1\":{\"104\":4,\"105\":45,\"106\":10,\"118\":12,\"119\":12,\"137\":32,\"138\":10,\"139\":14,\"142\":5,\"163\":1,\"179\":1,\"182\":1,\"200\":1,\"201\":1,\"202\":1,\"281\":1,\"282\":7,\"334\":1,\"337\":1,\"338\":1,\"354\":1,\"406\":2,\"446\":3,\"451\":2,\"524\":2,\"535\":2,\"538\":3,\"539\":3,\"540\":19,\"541\":8,\"542\":13,\"543\":7,\"564\":2,\"565\":1,\"566\":1,\"567\":1,\"568\":1,\"605\":2,\"606\":2,\"626\":2,\"638\":2,\"687\":1,\"722\":2,\"745\":2,\"769\":5,\"904\":16,\"913\":1,\"918\":1}}],[\"special\",{\"1\":{\"427\":1}}],[\"sp\",{\"1\":{\"391\":1,\"392\":1,\"393\":1,\"394\":4,\"395\":4}}],[\"spvit\",{\"1\":{\"390\":2}}],[\"spred\",{\"1\":{\"284\":4}}],[\"splatnet\",{\"1\":{\"246\":1}}],[\"splits\",{\"1\":{\"422\":1}}],[\"splitstring\",{\"1\":{\"105\":2,\"534\":1}}],[\"split\",{\"0\":{\"849\":1},\"1\":{\"105\":1,\"119\":4,\"422\":3,\"534\":1,\"849\":5}}],[\"sphnet\",{\"1\":{\"222\":1}}],[\"spheral\",{\"1\":{\"222\":1}}],[\"spiderconv\",{\"1\":{\"222\":1}}],[\"spidercnn\",{\"1\":{\"222\":1}}],[\"spiralorder\",{\"1\":{\"102\":1}}],[\"spconv\",{\"0\":{\"208\":1},\"1\":{\"208\":2}}],[\"spaces\",{\"1\":{\"862\":2}}],[\"space\",{\"0\":{\"923\":1,\"960\":1},\"1\":{\"208\":3,\"959\":3,\"960\":1,\"963\":1}}],[\"spatial\",{\"0\":{\"207\":1},\"1\":{\"208\":1}}],[\"sparse\",{\"0\":{\"196\":1,\"204\":1,\"205\":1},\"1\":{\"192\":1,\"195\":1,\"208\":2,\"211\":1,\"273\":1,\"312\":2}}],[\"spformer\",{\"1\":{\"195\":1,\"199\":5,\"200\":1}}],[\"spm\",{\"1\":{\"54\":1}}],[\"sutdent\",{\"1\":{\"769\":1}}],[\"sun\",{\"1\":{\"745\":1,\"755\":6}}],[\"sunny\",{\"1\":{\"276\":1,\"401\":1}}],[\"supported\",{\"1\":{\"427\":1}}],[\"super\",{\"0\":{\"901\":1},\"1\":{\"304\":1,\"344\":1,\"429\":3,\"854\":1,\"875\":1,\"877\":1,\"910\":1}}],[\"supervision\",{\"0\":{\"955\":1},\"1\":{\"271\":2,\"856\":1,\"887\":1}}],[\"supervised\",{\"1\":{\"261\":1,\"262\":1,\"273\":2,\"887\":2,\"891\":1}}],[\"superpoints\",{\"1\":{\"195\":1,\"201\":1}}],[\"superpoint\",{\"1\":{\"195\":5,\"198\":2,\"199\":5,\"201\":4,\"202\":1}}],[\"suggests\",{\"1\":{\"261\":2}}],[\"surprised\",{\"1\":{\"427\":1}}],[\"surfel\",{\"1\":{\"270\":4}}],[\"surfaces\",{\"1\":{\"342\":1}}],[\"surface\",{\"0\":{\"282\":1,\"283\":1},\"1\":{\"208\":1}}],[\"survey\",{\"0\":{\"212\":1},\"1\":{\"359\":1}}],[\"such\",{\"0\":{\"166\":1},\"1\":{\"166\":1,\"175\":1,\"422\":3,\"427\":1}}],[\"suan\",{\"1\":{\"126\":2}}],[\"su\",{\"1\":{\"126\":2,\"246\":1}}],[\"subfolder\",{\"1\":{\"929\":2}}],[\"subvidision\",{\"1\":{\"283\":1}}],[\"subdivision\",{\"0\":{\"282\":1,\"283\":1}}],[\"submanifold\",{\"1\":{\"208\":2}}],[\"subset\",{\"1\":{\"220\":1,\"422\":2,\"426\":1,\"428\":1}}],[\"subsetswithdup\",{\"1\":{\"122\":1}}],[\"subsets\",{\"1\":{\"121\":1}}],[\"substring\",{\"1\":{\"534\":1}}],[\"substr\",{\"1\":{\"105\":5,\"118\":1,\"119\":1,\"137\":1,\"534\":4}}],[\"sub\",{\"1\":{\"118\":3,\"119\":4}}],[\"suo\",{\"1\":{\"82\":1}}],[\"summarized\",{\"1\":{\"942\":1}}],[\"summarywriter\",{\"1\":{\"840\":2}}],[\"sum3\",{\"1\":{\"757\":1}}],[\"sum2\",{\"1\":{\"757\":2}}],[\"sum1\",{\"1\":{\"757\":2}}],[\"sumofleftleaves\",{\"1\":{\"83\":4}}],[\"sum\",{\"0\":{\"850\":1},\"1\":{\"80\":2,\"104\":8,\"153\":6,\"303\":1,\"305\":1,\"745\":6}}],[\"sudo\",{\"1\":{\"10\":1,\"160\":1,\"166\":4,\"170\":4,\"171\":2,\"172\":7,\"189\":1,\"191\":10,\"852\":1}}],[\"sw\",{\"1\":{\"380\":2}}],[\"swish\",{\"0\":{\"442\":1},\"1\":{\"449\":1}}],[\"swin\",{\"0\":{\"378\":1},\"1\":{\"377\":1,\"379\":4,\"380\":4,\"383\":1,\"389\":1}}],[\"swinv2\",{\"1\":{\"370\":1}}],[\"switch\",{\"0\":{\"818\":1},\"1\":{\"44\":2,\"599\":1,\"818\":6}}],[\"swapfil\",{\"1\":{\"171\":1}}],[\"swapfile\",{\"1\":{\"170\":7,\"171\":2}}],[\"swapoff\",{\"1\":{\"171\":1}}],[\"swapon\",{\"1\":{\"170\":1}}],[\"swappairs\",{\"1\":{\"103\":4}}],[\"swap\",{\"0\":{\"170\":1,\"171\":1},\"1\":{\"76\":1,\"169\":2,\"170\":5,\"171\":2,\"543\":2,\"571\":3,\"574\":1}}],[\"souce\",{\"1\":{\"961\":2}}],[\"sourcestring\",{\"1\":{\"534\":1}}],[\"source\",{\"1\":{\"54\":1,\"961\":10}}],[\"sooner\",{\"1\":{\"911\":1}}],[\"song\",{\"1\":{\"910\":2,\"911\":2}}],[\"son\",{\"1\":{\"748\":1}}],[\"software\",{\"1\":{\"747\":1}}],[\"softmax\",{\"1\":{\"351\":2,\"372\":2,\"392\":4}}],[\"soft\",{\"1\":{\"294\":1}}],[\"sota\",{\"1\":{\"264\":1,\"325\":1,\"357\":4,\"875\":1}}],[\"som\",{\"1\":{\"227\":3}}],[\"so\",{\"0\":{\"166\":1},\"1\":{\"166\":1,\"227\":1,\"429\":1}}],[\"solving\",{\"1\":{\"894\":1}}],[\"solve\",{\"1\":{\"195\":1,\"427\":1}}],[\"solvenqueens\",{\"1\":{\"128\":1}}],[\"solo\",{\"1\":{\"402\":1}}],[\"solutions\",{\"1\":{\"81\":1,\"82\":1,\"126\":2}}],[\"solution\",{\"1\":{\"70\":1,\"72\":4,\"74\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"85\":1,\"87\":1,\"90\":1,\"96\":1,\"99\":2,\"100\":4,\"102\":1,\"103\":5,\"104\":6,\"105\":6,\"106\":2,\"107\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"118\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"125\":1,\"126\":1,\"128\":1,\"138\":1,\"139\":1,\"142\":1,\"143\":1,\"148\":1}}],[\"sorting\",{\"1\":{\"315\":1}}],[\"sorted\",{\"1\":{\"314\":1}}],[\"sortedarraytobst\",{\"1\":{\"96\":1}}],[\"sort\",{\"1\":{\"100\":1,\"104\":2,\"116\":1,\"122\":1,\"126\":1,\"142\":2,\"143\":1,\"305\":3,\"576\":2}}],[\"sockfd\",{\"1\":{\"15\":2}}],[\"socket\",{\"1\":{\"13\":3,\"15\":2,\"32\":8,\"34\":5,\"38\":3,\"39\":5}}],[\"savename\",{\"1\":{\"835\":3}}],[\"save\",{\"1\":{\"781\":2,\"846\":1}}],[\"sat\",{\"1\":{\"755\":2}}],[\"sa\",{\"1\":{\"174\":1,\"175\":1,\"304\":1,\"811\":1,\"841\":1,\"845\":1,\"875\":1}}],[\"sample\",{\"1\":{\"873\":1,\"884\":1,\"951\":1}}],[\"sampler\",{\"1\":{\"845\":2}}],[\"sampleset\",{\"1\":{\"342\":1}}],[\"sampling\",{\"0\":{\"869\":1},\"1\":{\"220\":1,\"312\":1,\"317\":1,\"361\":2,\"372\":1}}],[\"same\",{\"1\":{\"314\":1,\"422\":1,\"834\":2}}],[\"sam\",{\"1\":{\"48\":1}}],[\"safari\",{\"1\":{\"41\":1}}],[\"sex\",{\"1\":{\"707\":1,\"713\":4,\"722\":4,\"749\":3,\"757\":1}}],[\"seven\",{\"1\":{\"559\":1}}],[\"several\",{\"1\":{\"426\":1}}],[\"see\",{\"1\":{\"422\":2}}],[\"sequential\",{\"1\":{\"344\":1}}],[\"sequences\",{\"1\":{\"426\":1}}],[\"sequencer\",{\"0\":{\"315\":1},\"1\":{\"314\":1}}],[\"sequence\",{\"1\":{\"314\":1,\"848\":1}}],[\"seq\",{\"1\":{\"304\":1}}],[\"selu\",{\"0\":{\"441\":1}}],[\"selfattention\",{\"1\":{\"380\":1}}],[\"self\",{\"1\":{\"262\":1,\"271\":2,\"273\":2,\"304\":6,\"344\":18,\"380\":1,\"383\":3,\"854\":2,\"877\":21}}],[\"selece\",{\"1\":{\"38\":1}}],[\"selective\",{\"1\":{\"406\":4,\"408\":1,\"409\":1}}],[\"selection\",{\"0\":{\"49\":1,\"198\":1},\"1\":{\"49\":1}}],[\"select\",{\"0\":{\"38\":1,\"456\":1,\"493\":1},\"1\":{\"30\":1,\"38\":7,\"456\":1,\"457\":1,\"458\":2,\"459\":1,\"460\":2,\"461\":4,\"462\":1,\"467\":2,\"468\":1,\"469\":2,\"471\":2,\"492\":3,\"499\":1}}],[\"segcloud\",{\"1\":{\"246\":1}}],[\"segmentation\",{\"0\":{\"50\":1,\"51\":1,\"52\":1,\"55\":1,\"56\":1},\"1\":{\"51\":1,\"52\":3,\"53\":1,\"54\":3,\"195\":1,\"198\":2,\"201\":1,\"232\":1,\"359\":1,\"422\":5,\"425\":2,\"876\":1,\"887\":2,\"888\":1,\"890\":1,\"891\":1}}],[\"segment\",{\"1\":{\"48\":1,\"876\":1,\"889\":2}}],[\"seaborn\",{\"1\":{\"836\":3,\"838\":1}}],[\"seamlessly\",{\"1\":{\"195\":1}}],[\"searchbst\",{\"1\":{\"94\":3}}],[\"search\",{\"1\":{\"93\":1,\"165\":1,\"406\":4,\"408\":1,\"409\":1,\"956\":1}}],[\"sections\",{\"1\":{\"849\":3}}],[\"sec\",{\"1\":{\"195\":3,\"524\":2,\"605\":4,\"606\":3,\"709\":3,\"717\":3,\"732\":2}}],[\"second\",{\"1\":{\"90\":7,\"100\":4,\"104\":4,\"544\":2,\"545\":2}}],[\"serve\",{\"1\":{\"195\":1,\"380\":1}}],[\"server\",{\"1\":{\"43\":1,\"186\":2,\"476\":1}}],[\"service\",{\"1\":{\"186\":3,\"189\":1,\"191\":2,\"476\":1}}],[\"sensitive\",{\"0\":{\"367\":1}}],[\"sen\",{\"1\":{\"105\":16,\"534\":16}}],[\"send\",{\"1\":{\"30\":1}}],[\"setp\",{\"1\":{\"940\":1}}],[\"set6\",{\"1\":{\"548\":1,\"554\":1}}],[\"set5\",{\"1\":{\"548\":1}}],[\"set4\",{\"1\":{\"548\":1,\"552\":1,\"553\":1}}],[\"set3\",{\"1\":{\"548\":1,\"551\":1}}],[\"set2\",{\"1\":{\"548\":2,\"550\":1,\"559\":2}}],[\"set1\",{\"1\":{\"548\":4,\"549\":1,\"550\":1,\"551\":2,\"556\":1,\"557\":1,\"558\":1,\"559\":5,\"560\":1,\"561\":7,\"562\":1}}],[\"sets\",{\"1\":{\"342\":1,\"422\":1}}],[\"set\",{\"0\":{\"546\":1,\"549\":1,\"555\":1},\"1\":{\"103\":2,\"104\":10,\"123\":7,\"174\":2,\"175\":2,\"195\":1,\"342\":1,\"422\":3,\"426\":2,\"427\":1,\"546\":9,\"547\":1,\"548\":7,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"554\":1,\"559\":3,\"563\":1,\"717\":1,\"838\":1,\"845\":1}}],[\"settings\",{\"1\":{\"48\":1}}],[\"semantickitti\",{\"1\":{\"249\":1,\"254\":1}}],[\"semantic3d\",{\"1\":{\"249\":1,\"254\":2}}],[\"semantic\",{\"0\":{\"944\":1},\"1\":{\"195\":4,\"197\":1,\"359\":1,\"425\":1,\"426\":1,\"887\":3,\"888\":1,\"890\":1,\"891\":1,\"944\":1}}],[\"sem\",{\"1\":{\"23\":6,\"27\":9,\"197\":1}}],[\"styles\",{\"1\":{\"961\":2}}],[\"style\",{\"0\":{\"958\":1,\"961\":1},\"1\":{\"958\":4,\"961\":13}}],[\"stylegan2\",{\"1\":{\"955\":1,\"958\":1}}],[\"stylegan\",{\"1\":{\"454\":1,\"958\":4,\"960\":1,\"962\":1}}],[\"stu\",{\"1\":{\"760\":3,\"762\":2,\"830\":16}}],[\"stuff\",{\"1\":{\"422\":4}}],[\"stud\",{\"1\":{\"730\":4,\"745\":2,\"829\":2,\"830\":2}}],[\"stud2\",{\"1\":{\"704\":4,\"706\":1,\"722\":1,\"724\":3}}],[\"stud1\",{\"1\":{\"704\":4,\"706\":1,\"708\":1,\"709\":2,\"722\":5,\"724\":3,\"769\":2}}],[\"studies\",{\"1\":{\"427\":1}}],[\"student2\",{\"1\":{\"757\":3,\"758\":2}}],[\"student1\",{\"1\":{\"749\":3,\"757\":5,\"758\":3}}],[\"students\",{\"1\":{\"745\":2}}],[\"student\",{\"1\":{\"350\":1,\"355\":1,\"357\":2,\"704\":4,\"706\":4,\"707\":2,\"713\":8,\"722\":5,\"724\":1,\"730\":7,\"745\":13,\"749\":7,\"757\":4,\"758\":2,\"760\":2,\"762\":7,\"769\":10,\"825\":3,\"826\":9,\"827\":4,\"828\":6,\"829\":4,\"830\":38}}],[\"study\",{\"1\":{\"48\":1,\"427\":3}}],[\"stl\",{\"0\":{\"513\":1,\"533\":1},\"1\":{\"342\":1,\"546\":1,\"563\":4}}],[\"stein\",{\"1\":{\"904\":1}}],[\"stereo\",{\"0\":{\"286\":1}}],[\"steps\",{\"1\":{\"867\":1,\"868\":3,\"928\":1}}],[\"step\",{\"1\":{\"235\":2}}],[\"stft\",{\"1\":{\"223\":1}}],[\"stod\",{\"1\":{\"535\":5}}],[\"stof\",{\"1\":{\"535\":3}}],[\"stoull\",{\"1\":{\"535\":2}}],[\"stoul\",{\"1\":{\"535\":2}}],[\"stold\",{\"1\":{\"535\":2}}],[\"stol\",{\"1\":{\"535\":3}}],[\"stoll\",{\"1\":{\"106\":1,\"535\":4}}],[\"stochastic\",{\"0\":{\"871\":1,\"895\":1,\"962\":1},\"1\":{\"453\":1,\"871\":2,\"895\":1,\"939\":1,\"962\":1}}],[\"storage\",{\"1\":{\"609\":3,\"610\":1}}],[\"storing\",{\"1\":{\"309\":1}}],[\"stores\",{\"1\":{\"309\":1}}],[\"store\",{\"1\":{\"10\":1}}],[\"stop\",{\"1\":{\"191\":1}}],[\"stoi\",{\"1\":{\"119\":1,\"535\":3}}],[\"st\",{\"1\":{\"71\":19,\"559\":1}}],[\"stable\",{\"0\":{\"921\":1},\"1\":{\"864\":1,\"876\":1,\"921\":2,\"922\":1,\"929\":2}}],[\"stablediffusion\",{\"1\":{\"453\":1,\"864\":1}}],[\"standard\",{\"1\":{\"361\":1}}],[\"stanford\",{\"1\":{\"343\":1}}],[\"stage1\",{\"1\":{\"380\":1}}],[\"stage\",{\"1\":{\"314\":1,\"369\":1,\"380\":2,\"402\":2}}],[\"start\",{\"1\":{\"137\":3,\"138\":1,\"152\":3,\"186\":1,\"188\":1,\"191\":1}}],[\"startindex\",{\"1\":{\"112\":12,\"115\":10,\"116\":9,\"118\":5,\"119\":4,\"121\":3,\"122\":4,\"123\":3,\"125\":1}}],[\"starindex\",{\"1\":{\"112\":1,\"113\":7}}],[\"stacking\",{\"0\":{\"374\":1}}],[\"stack\",{\"0\":{\"563\":1},\"1\":{\"71\":3,\"99\":6,\"100\":6,\"106\":3,\"304\":3,\"563\":1,\"564\":1,\"570\":1,\"577\":1}}],[\"statistical\",{\"1\":{\"904\":1}}],[\"static\",{\"0\":{\"612\":1,\"617\":1},\"1\":{\"36\":1,\"37\":1,\"100\":1,\"143\":1,\"597\":5,\"609\":2,\"610\":1,\"611\":1,\"612\":4,\"617\":6,\"722\":3,\"744\":2,\"745\":6,\"770\":1}}],[\"status\",{\"1\":{\"186\":1}}],[\"states\",{\"1\":{\"929\":1}}],[\"state\",{\"1\":{\"44\":10,\"846\":4}}],[\"str3\",{\"1\":{\"695\":9}}],[\"strlen\",{\"0\":{\"690\":1},\"1\":{\"690\":3}}],[\"strcmp\",{\"0\":{\"689\":1},\"1\":{\"689\":7,\"690\":1}}],[\"strcpy\",{\"0\":{\"688\":1},\"1\":{\"688\":8,\"690\":2,\"695\":1}}],[\"strcat\",{\"1\":{\"687\":1}}],[\"str2\",{\"1\":{\"687\":2,\"688\":4,\"689\":6,\"693\":3,\"694\":1,\"695\":14,\"698\":5}}],[\"str1\",{\"1\":{\"687\":2,\"688\":7,\"689\":6,\"693\":5,\"694\":1,\"695\":16,\"698\":5}}],[\"stract\",{\"0\":{\"687\":1},\"1\":{\"687\":2}}],[\"strategies\",{\"1\":{\"427\":1}}],[\"strategy\",{\"0\":{\"320\":1,\"321\":1},\"1\":{\"54\":2,\"195\":1,\"314\":2,\"321\":2}}],[\"str\",{\"1\":{\"684\":2,\"685\":7,\"688\":2,\"689\":1,\"690\":12,\"693\":2,\"698\":7,\"835\":1,\"846\":2,\"848\":1}}],[\"strict\",{\"1\":{\"846\":1}}],[\"stride\",{\"1\":{\"273\":1}}],[\"strings\",{\"1\":{\"695\":1}}],[\"string2\",{\"1\":{\"692\":2}}],[\"string1\",{\"1\":{\"692\":2}}],[\"string\",{\"0\":{\"534\":1},\"1\":{\"82\":19,\"104\":4,\"105\":17,\"106\":5,\"114\":8,\"118\":7,\"119\":7,\"128\":6,\"137\":7,\"138\":2,\"139\":2,\"500\":1,\"534\":5,\"535\":12,\"545\":5,\"623\":1,\"632\":1,\"638\":3,\"668\":1,\"686\":2,\"687\":1,\"688\":1,\"689\":1,\"690\":16,\"691\":3,\"692\":6,\"693\":1,\"695\":6,\"696\":4,\"697\":1,\"698\":1,\"707\":1,\"722\":2,\"749\":1,\"759\":3,\"769\":6}}],[\"structure\",{\"1\":{\"451\":1}}],[\"structural\",{\"1\":{\"220\":1,\"451\":1}}],[\"struct\",{\"1\":{\"69\":1,\"70\":1,\"103\":1,\"637\":2,\"713\":1,\"756\":1,\"757\":6,\"758\":1,\"759\":1,\"825\":3,\"826\":1,\"827\":1,\"828\":1,\"830\":2}}],[\"stdlib\",{\"1\":{\"781\":1}}],[\"stdexcept\",{\"1\":{\"528\":1,\"529\":1,\"530\":1,\"531\":1}}],[\"stderr\",{\"1\":{\"28\":1}}],[\"stdout\",{\"1\":{\"28\":1}}],[\"stdin\",{\"1\":{\"28\":1}}],[\"std\",{\"0\":{\"532\":1},\"1\":{\"27\":1,\"500\":3,\"514\":1,\"524\":1,\"527\":1,\"528\":6,\"529\":11,\"530\":16,\"531\":17,\"532\":3,\"535\":1,\"538\":1,\"539\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":1,\"545\":1,\"563\":2,\"570\":6,\"573\":1,\"583\":1,\"595\":1,\"599\":1,\"600\":1,\"601\":1,\"605\":1,\"606\":1,\"612\":2,\"615\":1,\"624\":5,\"666\":1,\"671\":1,\"683\":1,\"690\":1,\"695\":1,\"698\":2,\"709\":1,\"713\":1,\"721\":1,\"722\":1,\"724\":1,\"745\":1,\"759\":1,\"769\":1,\"781\":4,\"825\":1,\"826\":1,\"827\":1,\"828\":1,\"830\":2}}],[\"svm\",{\"1\":{\"404\":1}}],[\"sv1\",{\"1\":{\"41\":1}}],[\"sv\",{\"1\":{\"23\":5}}],[\"siting\",{\"1\":{\"860\":1}}],[\"site\",{\"1\":{\"188\":1}}],[\"six\",{\"1\":{\"559\":1}}],[\"silberman\",{\"1\":{\"426\":1}}],[\"since\",{\"1\":{\"532\":3}}],[\"sinusoidal\",{\"1\":{\"322\":1}}],[\"single\",{\"0\":{\"237\":1},\"1\":{\"48\":1,\"195\":1,\"237\":1,\"273\":1,\"380\":1}}],[\"singleton\",{\"1\":{\"5\":1,\"502\":1}}],[\"sift\",{\"1\":{\"288\":1}}],[\"sizeof\",{\"1\":{\"662\":1,\"708\":1,\"769\":1,\"811\":1,\"814\":1}}],[\"size\",{\"1\":{\"72\":27,\"73\":3,\"75\":3,\"84\":3,\"86\":1,\"87\":5,\"96\":1,\"99\":2,\"100\":1,\"102\":4,\"103\":9,\"104\":11,\"105\":9,\"106\":2,\"107\":1,\"112\":4,\"113\":1,\"114\":3,\"115\":1,\"116\":2,\"118\":3,\"119\":6,\"121\":2,\"122\":2,\"123\":4,\"125\":3,\"126\":4,\"137\":5,\"138\":3,\"139\":2,\"142\":2,\"143\":2,\"146\":3,\"148\":1,\"152\":2,\"304\":1,\"366\":1,\"380\":2,\"534\":1,\"536\":2,\"538\":2,\"542\":6,\"571\":2,\"574\":2,\"576\":1,\"712\":1,\"834\":1,\"844\":1,\"845\":6,\"849\":6,\"859\":2,\"868\":4}}],[\"si\",{\"1\":{\"72\":3}}],[\"sim\",{\"1\":{\"905\":1}}],[\"simcse\",{\"1\":{\"255\":1}}],[\"simonovsky\",{\"1\":{\"225\":1}}],[\"simplified\",{\"1\":{\"304\":1}}],[\"simply\",{\"1\":{\"195\":1}}],[\"simpleclick\",{\"1\":{\"48\":1}}],[\"similarity\",{\"0\":{\"880\":1,\"881\":1},\"1\":{\"451\":1}}],[\"similar\",{\"1\":{\"48\":1}}],[\"signed\",{\"1\":{\"633\":1,\"804\":1}}],[\"signal\",{\"1\":{\"27\":2,\"261\":1,\"451\":1}}],[\"siggraph\",{\"1\":{\"301\":1}}],[\"sigmoid\",{\"0\":{\"445\":1,\"446\":1},\"1\":{\"202\":1,\"344\":1,\"371\":1,\"372\":2,\"437\":1,\"446\":4,\"449\":1}}],[\"sigio\",{\"1\":{\"30\":1}}],[\"sigalrm\",{\"1\":{\"19\":2,\"20\":3}}],[\"库中\",{\"1\":{\"691\":1,\"692\":1,\"793\":1}}],[\"库函数\",{\"0\":{\"602\":1},\"1\":{\"584\":1,\"589\":1}}],[\"库里\",{\"1\":{\"500\":1,\"534\":1}}],[\"库吗\",{\"1\":{\"191\":2}}],[\"库\",{\"1\":{\"10\":1}}],[\"安插\",{\"1\":{\"572\":2}}],[\"安装\",{\"0\":{\"159\":1,\"176\":1,\"177\":1,\"178\":1,\"185\":1,\"191\":1},\"1\":{\"10\":1,\"30\":1,\"165\":1,\"177\":1,\"182\":1,\"184\":1,\"186\":1,\"189\":1,\"191\":8}}],[\"安全\",{\"0\":{\"500\":1},\"1\":{\"5\":2,\"22\":1,\"484\":3,\"485\":2,\"499\":1,\"500\":2,\"502\":2,\"541\":1}}],[\"hq\",{\"1\":{\"910\":1}}],[\"hr\",{\"1\":{\"908\":2}}],[\"hrnet\",{\"1\":{\"53\":1}}],[\"hk\",{\"1\":{\"882\":1}}],[\"hypertext\",{\"1\":{\"475\":1}}],[\"hybrid\",{\"1\":{\"277\":1}}],[\"hwupdateh\",{\"1\":{\"399\":1}}],[\"hp\",{\"1\":{\"290\":1}}],[\"hiding\",{\"1\":{\"701\":1}}],[\"hidden\",{\"1\":{\"344\":9,\"929\":1}}],[\"hip\",{\"1\":{\"422\":1}}],[\"hints\",{\"1\":{\"350\":1}}],[\"hint\",{\"1\":{\"350\":1,\"559\":1}}],[\"history\",{\"1\":{\"309\":1}}],[\"hi\",{\"1\":{\"290\":1}}],[\"hierarchical\",{\"1\":{\"272\":2,\"379\":1,\"380\":1}}],[\"highly\",{\"1\":{\"429\":1}}],[\"highlighted\",{\"1\":{\"361\":3}}],[\"high\",{\"1\":{\"98\":9,\"277\":1,\"312\":1,\"862\":1,\"875\":3,\"922\":1}}],[\"hgnn\",{\"1\":{\"226\":1}}],[\"human\",{\"1\":{\"428\":1}}],[\"huang\",{\"1\":{\"246\":1}}],[\"hua\",{\"1\":{\"223\":1}}],[\"hui\",{\"1\":{\"126\":2}}],[\"horse\",{\"1\":{\"929\":1}}],[\"hour\",{\"1\":{\"524\":4,\"605\":5,\"606\":3,\"709\":11,\"717\":3,\"732\":8,\"734\":6}}],[\"how\",{\"1\":{\"427\":1,\"856\":1}}],[\"homography\",{\"0\":{\"290\":1}}],[\"home\",{\"1\":{\"191\":1,\"427\":1}}],[\"hops\",{\"1\":{\"226\":1}}],[\"host\",{\"1\":{\"41\":3,\"186\":1,\"394\":2}}],[\"handle\",{\"1\":{\"955\":1,\"956\":1}}],[\"hampers\",{\"1\":{\"344\":1}}],[\"hassani\",{\"1\":{\"225\":1}}],[\"hashmap\",{\"1\":{\"545\":1}}],[\"hash\",{\"1\":{\"209\":5,\"559\":1}}],[\"has\",{\"1\":{\"208\":1,\"261\":1,\"380\":1,\"422\":1,\"426\":2,\"429\":2}}],[\"haspathsum\",{\"1\":{\"85\":4}}],[\"hard\",{\"1\":{\"168\":3}}],[\"happy\",{\"1\":{\"104\":4}}],[\"have\",{\"1\":{\"104\":3,\"309\":1,\"380\":1}}],[\"heatmap\",{\"1\":{\"836\":2,\"837\":1,\"838\":2}}],[\"heads\",{\"1\":{\"877\":5}}],[\"headb\",{\"1\":{\"103\":3}}],[\"heada\",{\"1\":{\"103\":3}}],[\"head\",{\"0\":{\"202\":1},\"1\":{\"42\":2,\"103\":54,\"322\":1,\"399\":3,\"476\":1,\"825\":6,\"826\":9,\"827\":6,\"828\":10,\"829\":10,\"830\":40,\"877\":5}}],[\"header\",{\"1\":{\"41\":1}}],[\"hellow\",{\"1\":{\"624\":3}}],[\"hello\",{\"1\":{\"534\":1}}],[\"heterogeneous\",{\"1\":{\"427\":2}}],[\"height\",{\"1\":{\"305\":1,\"714\":1,\"718\":3,\"719\":2,\"721\":3,\"724\":3,\"726\":2,\"744\":9,\"745\":2}}],[\"here\",{\"1\":{\"42\":1,\"834\":1}}],[\"html\",{\"1\":{\"42\":6,\"424\":1}}],[\"https\",{\"0\":{\"483\":1,\"484\":1,\"485\":1},\"1\":{\"52\":1,\"54\":1,\"81\":1,\"82\":1,\"126\":2,\"174\":1,\"175\":1,\"212\":1,\"304\":1,\"360\":2,\"385\":2,\"427\":1,\"429\":1,\"484\":4,\"485\":2,\"811\":1,\"841\":1,\"845\":1,\"855\":1,\"875\":1,\"877\":1,\"905\":1,\"950\":1}}],[\"http1\",{\"1\":{\"41\":2}}],[\"http\",{\"0\":{\"40\":1,\"43\":1,\"45\":1,\"46\":1,\"473\":1,\"474\":1,\"475\":1,\"476\":1,\"478\":1,\"479\":1,\"480\":1,\"483\":1,\"484\":1,\"485\":1,\"486\":1,\"489\":1},\"1\":{\"3\":1,\"8\":2,\"19\":4,\"40\":1,\"41\":5,\"42\":5,\"43\":1,\"45\":3,\"46\":2,\"428\":1,\"473\":1,\"475\":1,\"476\":1,\"480\":6,\"484\":6,\"485\":2,\"489\":1,\"545\":7}}],[\"h\",{\"1\":{\"10\":1,\"172\":1,\"242\":1,\"288\":2,\"290\":3,\"291\":2,\"292\":2,\"293\":2,\"294\":5,\"299\":3,\"344\":9,\"347\":3,\"348\":3,\"349\":4,\"366\":1,\"370\":2,\"372\":1,\"380\":4,\"399\":3,\"411\":1,\"524\":2,\"595\":1,\"605\":2,\"606\":2,\"642\":2,\"682\":1,\"686\":1,\"692\":1,\"718\":2,\"719\":3,\"721\":3,\"724\":2,\"744\":2,\"781\":1,\"859\":1,\"928\":5}}],[\"/\",{\"0\":{\"30\":1,\"32\":1,\"34\":1,\"38\":2,\"230\":1,\"275\":1,\"786\":1,\"787\":1,\"788\":1,\"950\":1},\"1\":{\"10\":1,\"13\":4,\"19\":2,\"27\":14,\"28\":1,\"29\":2,\"30\":15,\"31\":4,\"32\":3,\"33\":3,\"34\":5,\"38\":1,\"39\":1,\"41\":16,\"42\":7,\"49\":1,\"52\":6,\"54\":6,\"69\":4,\"70\":2,\"71\":2,\"72\":25,\"76\":6,\"77\":14,\"80\":14,\"81\":8,\"82\":12,\"83\":6,\"85\":2,\"87\":2,\"90\":6,\"96\":1,\"97\":6,\"98\":8,\"99\":6,\"100\":21,\"103\":38,\"104\":22,\"105\":6,\"106\":7,\"107\":24,\"110\":2,\"112\":10,\"113\":2,\"114\":20,\"115\":6,\"116\":12,\"118\":7,\"119\":2,\"121\":12,\"122\":4,\"123\":2,\"126\":22,\"128\":8,\"137\":28,\"138\":12,\"139\":8,\"146\":4,\"148\":2,\"152\":6,\"160\":3,\"163\":3,\"165\":7,\"168\":3,\"170\":7,\"171\":4,\"172\":8,\"174\":15,\"175\":14,\"184\":4,\"186\":6,\"188\":8,\"191\":10,\"200\":1,\"208\":1,\"212\":4,\"229\":3,\"246\":1,\"255\":2,\"259\":2,\"262\":2,\"288\":3,\"290\":1,\"294\":1,\"298\":1,\"304\":9,\"305\":5,\"312\":1,\"313\":1,\"340\":1,\"342\":1,\"344\":4,\"354\":1,\"360\":8,\"366\":1,\"372\":2,\"380\":6,\"385\":8,\"411\":1,\"422\":3,\"424\":1,\"427\":3,\"428\":3,\"429\":7,\"446\":1,\"449\":1,\"451\":2,\"480\":1,\"484\":2,\"485\":2,\"492\":5,\"522\":8,\"524\":10,\"528\":4,\"529\":7,\"530\":7,\"531\":11,\"538\":8,\"539\":8,\"540\":10,\"541\":4,\"542\":10,\"543\":6,\"545\":27,\"548\":12,\"556\":2,\"557\":2,\"558\":2,\"559\":14,\"560\":2,\"561\":6,\"562\":2,\"563\":2,\"564\":2,\"573\":24,\"574\":6,\"575\":4,\"576\":8,\"585\":4,\"587\":4,\"589\":2,\"590\":4,\"594\":4,\"595\":16,\"599\":4,\"600\":10,\"601\":12,\"605\":12,\"606\":34,\"607\":2,\"611\":4,\"612\":6,\"613\":2,\"615\":6,\"620\":4,\"625\":4,\"633\":3,\"634\":4,\"635\":4,\"637\":4,\"638\":12,\"654\":6,\"661\":2,\"663\":1,\"664\":2,\"665\":2,\"666\":19,\"667\":2,\"668\":4,\"670\":6,\"671\":10,\"672\":4,\"673\":10,\"676\":14,\"682\":2,\"683\":8,\"685\":8,\"688\":4,\"690\":14,\"692\":6,\"693\":6,\"694\":2,\"695\":2,\"696\":4,\"698\":2,\"701\":4,\"703\":2,\"704\":6,\"706\":4,\"707\":4,\"709\":12,\"712\":10,\"713\":8,\"714\":6,\"717\":16,\"718\":16,\"720\":4,\"721\":12,\"722\":12,\"724\":16,\"725\":4,\"729\":12,\"730\":10,\"732\":22,\"734\":6,\"735\":18,\"744\":4,\"745\":37,\"749\":12,\"755\":6,\"756\":2,\"757\":8,\"759\":2,\"760\":4,\"769\":10,\"781\":58,\"786\":2,\"788\":1,\"793\":17,\"794\":2,\"798\":3,\"801\":1,\"805\":2,\"806\":2,\"808\":2,\"810\":3,\"811\":8,\"816\":2,\"818\":4,\"825\":22,\"826\":10,\"827\":2,\"828\":28,\"829\":28,\"830\":66,\"835\":4,\"838\":3,\"840\":1,\"841\":11,\"844\":1,\"845\":6,\"852\":2,\"855\":6,\"859\":3,\"864\":1,\"868\":2,\"875\":6,\"877\":9,\"887\":1,\"888\":1,\"905\":5,\"910\":1,\"921\":1,\"928\":2,\"929\":4,\"935\":1,\"950\":6}}],[\"找出\",{\"1\":{\"105\":1,\"110\":1,\"113\":1,\"139\":1,\"402\":1,\"469\":2,\"690\":1,\"781\":1}}],[\"找到\",{\"0\":{\"138\":1},\"1\":{\"89\":1,\"97\":3,\"104\":1,\"138\":1,\"191\":1,\"204\":1,\"210\":2,\"290\":1,\"394\":1,\"419\":2,\"534\":1,\"545\":1,\"557\":1,\"601\":1,\"714\":1,\"736\":1,\"818\":1,\"828\":3,\"830\":1,\"957\":3,\"961\":1}}],[\"找树\",{\"0\":{\"84\":1}}],[\"找\",{\"1\":{\"10\":1,\"43\":1,\"72\":1,\"165\":1,\"174\":1,\"534\":1,\"690\":1,\"828\":4,\"830\":3}}],[\"供主\",{\"1\":{\"584\":1}}],[\"供\",{\"1\":{\"10\":1,\"500\":1,\"785\":1}}],[\"放大\",{\"1\":{\"413\":1,\"910\":1}}],[\"放弃\",{\"1\":{\"153\":1,\"750\":1}}],[\"放置\",{\"1\":{\"128\":2,\"306\":1}}],[\"放\",{\"1\":{\"125\":1,\"191\":1,\"785\":1}}],[\"放进\",{\"1\":{\"107\":1}}],[\"放到\",{\"1\":{\"36\":1,\"97\":2,\"100\":1,\"595\":1,\"612\":1,\"777\":1,\"781\":1}}],[\"放入\",{\"1\":{\"25\":1,\"210\":1,\"419\":1,\"485\":1,\"664\":1}}],[\"放在\",{\"1\":{\"10\":2,\"82\":2,\"121\":3,\"122\":2,\"545\":1,\"595\":1,\"597\":1,\"609\":1,\"613\":2,\"615\":1,\"624\":1,\"651\":1,\"687\":1,\"707\":1,\"781\":1}}],[\"放回池\",{\"1\":{\"8\":1,\"35\":1}}],[\"生图\",{\"1\":{\"864\":1}}],[\"生出\",{\"1\":{\"741\":1,\"748\":1}}],[\"生命期\",{\"1\":{\"609\":1}}],[\"生命周期\",{\"1\":{\"22\":2,\"722\":1,\"729\":1}}],[\"生存期\",{\"0\":{\"609\":1}}],[\"生活\",{\"1\":{\"527\":1}}],[\"生物\",{\"1\":{\"436\":1}}],[\"生信\",{\"1\":{\"317\":1}}],[\"生成器\",{\"1\":{\"211\":1,\"284\":1,\"314\":5,\"316\":2,\"320\":3,\"322\":2,\"323\":1,\"864\":1,\"955\":1,\"963\":2}}],[\"生成\",{\"0\":{\"292\":1,\"329\":1,\"334\":1,\"336\":1,\"451\":1,\"452\":1,\"454\":1,\"835\":1,\"902\":1,\"912\":1,\"936\":1,\"941\":1,\"943\":1},\"1\":{\"10\":3,\"40\":1,\"42\":1,\"46\":1,\"47\":1,\"50\":1,\"192\":1,\"197\":1,\"199\":1,\"200\":1,\"204\":1,\"205\":1,\"211\":1,\"224\":1,\"225\":2,\"232\":1,\"234\":1,\"235\":1,\"237\":1,\"245\":1,\"246\":1,\"260\":1,\"268\":2,\"277\":4,\"284\":1,\"300\":1,\"303\":1,\"304\":2,\"314\":3,\"316\":2,\"320\":3,\"322\":1,\"323\":6,\"325\":1,\"327\":2,\"329\":1,\"334\":1,\"349\":1,\"393\":1,\"394\":1,\"410\":1,\"411\":2,\"417\":1,\"422\":1,\"451\":12,\"453\":2,\"454\":1,\"485\":1,\"717\":1,\"722\":1,\"832\":1,\"835\":3,\"862\":4,\"863\":4,\"864\":4,\"865\":1,\"868\":2,\"887\":2,\"888\":2,\"890\":1,\"892\":1,\"893\":1,\"901\":2,\"902\":2,\"906\":4,\"910\":1,\"911\":1,\"922\":4,\"924\":2,\"926\":2,\"928\":2,\"935\":2,\"936\":1,\"938\":7,\"939\":1,\"940\":9,\"941\":4,\"944\":1,\"945\":1,\"947\":4,\"949\":5,\"951\":5,\"952\":4,\"953\":5,\"955\":2,\"957\":6,\"958\":5,\"959\":1,\"961\":3,\"962\":1,\"963\":1}}],[\"生产者\",{\"1\":{\"4\":1,\"11\":1}}],[\"构思\",{\"1\":{\"312\":1}}],[\"构成\",{\"0\":{\"750\":1},\"1\":{\"226\":1,\"277\":1,\"467\":1,\"572\":1,\"649\":1,\"701\":3,\"714\":1,\"805\":1,\"819\":1,\"825\":1,\"923\":1}}],[\"构造\",{\"0\":{\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"554\":1},\"1\":{\"27\":1,\"44\":1,\"86\":3,\"96\":1,\"103\":1,\"225\":4,\"226\":2,\"228\":1,\"268\":1,\"531\":1,\"548\":4,\"560\":1,\"717\":2,\"722\":2,\"750\":1,\"868\":1,\"902\":1,\"904\":1}}],[\"构造函数\",{\"0\":{\"532\":1,\"538\":1,\"699\":1,\"716\":1,\"717\":1,\"718\":1,\"720\":1,\"721\":1,\"726\":1,\"729\":2},\"1\":{\"5\":1,\"22\":2,\"27\":1,\"502\":1,\"510\":1,\"524\":2,\"530\":2,\"532\":6,\"560\":1,\"605\":2,\"606\":4,\"710\":1,\"714\":1,\"716\":1,\"717\":14,\"718\":8,\"719\":3,\"720\":16,\"721\":16,\"722\":9,\"724\":2,\"726\":8,\"729\":10,\"730\":8,\"745\":1,\"750\":3,\"769\":2,\"793\":3}}],[\"构建\",{\"0\":{\"289\":1,\"291\":1,\"373\":1},\"1\":{\"10\":1,\"86\":1,\"202\":1,\"209\":1,\"210\":3,\"220\":1,\"222\":1,\"227\":3,\"229\":1,\"290\":1,\"304\":2,\"314\":1,\"316\":1,\"317\":1,\"370\":4,\"380\":1,\"398\":1,\"730\":1,\"826\":1,\"889\":1,\"925\":1}}],[\"每张\",{\"1\":{\"961\":1}}],[\"每帧\",{\"1\":{\"835\":1}}],[\"每块\",{\"1\":{\"419\":2,\"849\":1}}],[\"每组\",{\"1\":{\"372\":1}}],[\"每条\",{\"1\":{\"303\":1,\"625\":1}}],[\"每幅\",{\"1\":{\"288\":1}}],[\"每体素\",{\"1\":{\"246\":1}}],[\"每点\",{\"1\":{\"246\":1,\"248\":1}}],[\"每天\",{\"1\":{\"148\":2}}],[\"每层\",{\"1\":{\"125\":1}}],[\"每\",{\"1\":{\"54\":2,\"55\":1,\"70\":2,\"72\":3,\"123\":1,\"128\":2,\"199\":1,\"225\":1,\"227\":2,\"288\":1,\"292\":2,\"303\":2,\"334\":1,\"369\":1,\"380\":1,\"394\":1,\"406\":1,\"408\":1,\"419\":1,\"598\":1,\"612\":1,\"691\":1,\"696\":2,\"717\":1,\"718\":1,\"730\":2,\"732\":1,\"736\":1,\"748\":2,\"769\":1,\"781\":2,\"785\":1,\"790\":1,\"793\":2,\"818\":2,\"825\":1,\"859\":2,\"873\":1,\"887\":1,\"906\":2,\"938\":1,\"940\":3,\"944\":1,\"951\":1,\"958\":2,\"962\":1}}],[\"每种\",{\"1\":{\"40\":1,\"193\":1,\"411\":1}}],[\"每隔\",{\"1\":{\"20\":1,\"30\":1,\"103\":1}}],[\"每次\",{\"1\":{\"10\":1,\"13\":1,\"17\":1,\"20\":4,\"38\":1,\"52\":2,\"55\":2,\"70\":2,\"94\":1,\"107\":1,\"137\":1,\"227\":1,\"332\":1,\"480\":1,\"528\":1,\"612\":2,\"722\":1,\"793\":1,\"830\":1}}],[\"每个\",{\"1\":{\"8\":1,\"10\":1,\"19\":1,\"28\":1,\"29\":1,\"38\":1,\"41\":1,\"55\":2,\"64\":1,\"72\":3,\"86\":1,\"113\":1,\"192\":1,\"193\":1,\"195\":1,\"196\":1,\"201\":2,\"202\":1,\"218\":2,\"219\":1,\"220\":4,\"223\":5,\"224\":2,\"225\":9,\"226\":4,\"227\":3,\"228\":2,\"232\":1,\"235\":1,\"243\":1,\"245\":2,\"246\":4,\"268\":1,\"270\":2,\"281\":1,\"282\":2,\"283\":1,\"288\":2,\"290\":2,\"291\":1,\"292\":1,\"294\":1,\"299\":1,\"300\":1,\"305\":2,\"308\":8,\"310\":1,\"311\":2,\"315\":1,\"319\":5,\"321\":1,\"322\":2,\"323\":1,\"332\":1,\"342\":2,\"353\":1,\"366\":3,\"372\":1,\"380\":3,\"392\":1,\"394\":2,\"395\":1,\"398\":1,\"399\":2,\"402\":1,\"410\":1,\"411\":5,\"415\":3,\"419\":4,\"469\":1,\"492\":1,\"528\":1,\"538\":1,\"590\":1,\"595\":1,\"609\":1,\"619\":1,\"625\":1,\"654\":1,\"696\":2,\"701\":1,\"722\":1,\"726\":1,\"730\":1,\"741\":1,\"744\":1,\"759\":1,\"768\":1,\"769\":1,\"882\":1,\"884\":1,\"887\":2,\"902\":1,\"923\":1,\"958\":1}}],[\"若干\",{\"1\":{\"922\":1}}],[\"若干个\",{\"1\":{\"43\":1,\"688\":1,\"696\":1,\"756\":1,\"787\":1,\"807\":2}}],[\"若要\",{\"1\":{\"790\":1}}],[\"若有\",{\"1\":{\"732\":1}}],[\"若无则\",{\"1\":{\"616\":1}}],[\"若该\",{\"1\":{\"19\":1}}],[\"若\",{\"1\":{\"10\":1,\"20\":1,\"23\":2,\"30\":1,\"34\":1,\"38\":2,\"186\":1,\"290\":1,\"292\":1,\"347\":1,\"349\":2,\"556\":1,\"583\":1,\"586\":1,\"587\":1,\"589\":3,\"613\":1,\"616\":1,\"676\":1,\"701\":1,\"745\":1,\"793\":2,\"810\":1}}],[\"等长\",{\"1\":{\"938\":1,\"951\":1}}],[\"等级\",{\"1\":{\"758\":1}}],[\"等式\",{\"1\":{\"661\":1,\"815\":1}}],[\"等价\",{\"1\":{\"222\":1,\"246\":1,\"347\":1,\"349\":1,\"664\":1,\"666\":2,\"667\":1,\"698\":1,\"709\":1,\"760\":3,\"809\":1,\"859\":1}}],[\"等于\",{\"1\":{\"81\":1,\"97\":1,\"107\":2,\"137\":1,\"138\":5,\"322\":1,\"395\":2,\"689\":1,\"755\":1,\"798\":1,\"809\":3,\"826\":2}}],[\"等\",{\"1\":{\"13\":1,\"28\":2,\"29\":1,\"30\":1,\"31\":2,\"41\":1,\"54\":1,\"58\":1,\"69\":1,\"172\":2,\"193\":1,\"217\":1,\"218\":3,\"219\":1,\"220\":5,\"222\":2,\"223\":5,\"225\":3,\"226\":4,\"227\":1,\"228\":5,\"245\":6,\"246\":8,\"247\":2,\"254\":1,\"262\":1,\"277\":1,\"288\":1,\"293\":1,\"299\":1,\"300\":1,\"301\":1,\"306\":1,\"313\":1,\"325\":1,\"359\":1,\"370\":1,\"386\":1,\"402\":1,\"449\":2,\"492\":1,\"500\":1,\"527\":2,\"544\":1,\"581\":1,\"609\":1,\"650\":1,\"658\":1,\"676\":1,\"677\":1,\"707\":1,\"712\":1,\"730\":1,\"781\":2,\"787\":1,\"828\":1,\"855\":1,\"863\":1,\"875\":3,\"910\":1,\"935\":1,\"938\":1,\"940\":1,\"952\":1,\"958\":2,\"961\":4}}],[\"等等\",{\"1\":{\"10\":1,\"110\":1,\"416\":1,\"563\":1,\"958\":1}}],[\"等待\",{\"1\":{\"8\":1,\"23\":2,\"24\":1,\"25\":3,\"30\":4,\"32\":2,\"492\":6,\"530\":4,\"833\":1}}],[\"或负\",{\"1\":{\"893\":1}}],[\"或本块\",{\"1\":{\"816\":1}}],[\"或假\",{\"1\":{\"810\":1}}],[\"或称\",{\"1\":{\"706\":1}}],[\"或前\",{\"1\":{\"461\":1}}],[\"或小块\",{\"1\":{\"398\":1}}],[\"或\",{\"0\":{\"175\":1},\"1\":{\"10\":1,\"15\":2,\"30\":1,\"41\":1,\"97\":1,\"128\":2,\"168\":1,\"175\":1,\"192\":1,\"193\":1,\"195\":1,\"198\":1,\"199\":3,\"200\":1,\"208\":1,\"222\":1,\"254\":1,\"270\":1,\"273\":1,\"284\":1,\"299\":1,\"303\":2,\"349\":1,\"371\":1,\"392\":1,\"449\":1,\"469\":1,\"476\":3,\"492\":5,\"500\":1,\"537\":1,\"544\":1,\"558\":1,\"572\":1,\"595\":1,\"601\":1,\"639\":1,\"642\":1,\"657\":1,\"676\":2,\"677\":1,\"724\":1,\"741\":1,\"748\":3,\"768\":1,\"781\":1,\"782\":2,\"785\":2,\"793\":1,\"794\":1,\"804\":1,\"810\":2,\"811\":1,\"817\":1,\"859\":1,\"860\":1,\"863\":1,\"940\":1,\"952\":1,\"959\":1}}],[\"或者说\",{\"1\":{\"654\":1}}],[\"或者\",{\"1\":{\"10\":1,\"22\":1,\"38\":1,\"44\":1,\"55\":1,\"70\":1,\"71\":4,\"86\":1,\"93\":2,\"103\":1,\"168\":1,\"203\":2,\"224\":1,\"304\":1,\"344\":1,\"379\":1,\"386\":1,\"390\":1,\"398\":1,\"417\":1,\"449\":1,\"525\":1,\"534\":1,\"563\":1,\"576\":1,\"586\":3,\"590\":1,\"592\":1,\"598\":1,\"599\":1,\"600\":1,\"601\":1,\"612\":1,\"620\":1,\"644\":2,\"652\":1,\"663\":1,\"665\":1,\"668\":1,\"669\":1,\"671\":1,\"688\":1,\"689\":1,\"690\":1,\"701\":1,\"704\":1,\"706\":2,\"707\":2,\"715\":1,\"720\":1,\"722\":4,\"730\":1,\"744\":2,\"745\":2,\"755\":1,\"757\":1,\"769\":2,\"770\":1,\"777\":1,\"785\":1,\"791\":1,\"793\":1,\"800\":1,\"801\":1,\"804\":1,\"809\":1,\"810\":1,\"811\":1,\"817\":1,\"818\":1,\"825\":2,\"837\":2,\"864\":1,\"938\":1,\"944\":1,\"951\":1,\"958\":1,\"959\":2}}],[\"输送到\",{\"1\":{\"787\":1}}],[\"输出\",{\"0\":{\"507\":1,\"685\":1,\"694\":1,\"772\":1,\"774\":1,\"778\":1,\"779\":1},\"1\":{\"10\":1,\"28\":1,\"72\":3,\"82\":2,\"98\":1,\"100\":1,\"121\":1,\"137\":3,\"138\":3,\"139\":3,\"175\":3,\"177\":1,\"189\":1,\"191\":1,\"195\":1,\"205\":1,\"209\":1,\"210\":4,\"223\":2,\"245\":1,\"246\":2,\"281\":1,\"288\":3,\"294\":1,\"304\":1,\"322\":1,\"350\":2,\"351\":1,\"380\":1,\"402\":1,\"410\":1,\"419\":1,\"446\":1,\"492\":1,\"528\":1,\"534\":1,\"541\":2,\"542\":3,\"545\":1,\"567\":1,\"601\":2,\"606\":2,\"612\":1,\"624\":1,\"668\":2,\"683\":1,\"685\":7,\"687\":1,\"690\":1,\"698\":5,\"709\":2,\"722\":1,\"734\":1,\"755\":2,\"759\":1,\"769\":6,\"775\":3,\"776\":4,\"777\":2,\"778\":2,\"780\":1,\"781\":18,\"782\":3,\"785\":6,\"787\":3,\"788\":2,\"789\":1,\"790\":1,\"791\":2,\"793\":14,\"794\":3,\"801\":1,\"804\":1,\"806\":1,\"816\":1,\"825\":3,\"827\":1,\"830\":1,\"841\":1,\"843\":1,\"846\":1,\"854\":1,\"882\":1,\"887\":1,\"892\":1,\"906\":1,\"908\":1,\"909\":1,\"910\":1,\"940\":3,\"957\":2}}],[\"输入输出\",{\"0\":{\"773\":1},\"1\":{\"623\":1,\"685\":2,\"694\":2,\"781\":4,\"787\":1,\"788\":1,\"789\":4,\"790\":3,\"791\":2,\"793\":4}}],[\"输入\",{\"0\":{\"209\":1,\"305\":1,\"507\":1,\"685\":1,\"694\":1,\"772\":1,\"780\":1},\"1\":{\"10\":1,\"28\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"72\":1,\"82\":2,\"98\":1,\"106\":2,\"121\":1,\"137\":3,\"138\":2,\"139\":3,\"171\":1,\"174\":2,\"179\":1,\"181\":1,\"182\":1,\"189\":1,\"191\":1,\"192\":1,\"195\":2,\"196\":2,\"197\":1,\"198\":2,\"200\":2,\"201\":2,\"205\":2,\"208\":1,\"209\":4,\"210\":8,\"218\":2,\"220\":2,\"222\":2,\"223\":2,\"225\":1,\"228\":3,\"237\":1,\"246\":1,\"262\":2,\"265\":1,\"280\":2,\"284\":2,\"288\":5,\"292\":2,\"294\":1,\"301\":3,\"303\":1,\"304\":3,\"305\":2,\"306\":3,\"311\":1,\"314\":2,\"315\":1,\"317\":1,\"322\":1,\"351\":1,\"359\":1,\"366\":1,\"370\":1,\"371\":1,\"372\":1,\"379\":1,\"380\":2,\"398\":2,\"404\":1,\"415\":1,\"419\":2,\"426\":1,\"492\":2,\"600\":1,\"668\":1,\"685\":2,\"690\":1,\"694\":2,\"695\":1,\"745\":1,\"780\":1,\"781\":7,\"782\":3,\"785\":2,\"787\":1,\"788\":2,\"790\":1,\"791\":2,\"793\":5,\"794\":2,\"826\":7,\"830\":7,\"834\":1,\"840\":2,\"852\":2,\"854\":1,\"859\":3,\"863\":2,\"864\":1,\"868\":1,\"882\":1,\"887\":1,\"889\":1,\"901\":2,\"906\":1,\"907\":1,\"908\":1,\"909\":2,\"910\":1,\"928\":2,\"929\":5,\"941\":1,\"949\":1,\"957\":2,\"958\":3,\"961\":1}}],[\"输错\",{\"1\":{\"10\":1}}],[\"提倡\",{\"1\":{\"704\":1,\"757\":1}}],[\"提前\",{\"1\":{\"290\":1,\"606\":7,\"615\":3}}],[\"提\",{\"1\":{\"259\":1,\"370\":1,\"406\":2}}],[\"提将\",{\"1\":{\"223\":1}}],[\"提案\",{\"1\":{\"202\":3}}],[\"提议\",{\"1\":{\"200\":1}}],[\"提醒\",{\"1\":{\"168\":1,\"191\":1}}],[\"提交\",{\"1\":{\"168\":1}}],[\"提取\",{\"0\":{\"61\":1,\"846\":1},\"1\":{\"193\":1,\"196\":1,\"200\":2,\"201\":1,\"217\":1,\"218\":1,\"220\":6,\"223\":1,\"225\":1,\"227\":1,\"228\":4,\"232\":1,\"235\":2,\"246\":2,\"247\":2,\"256\":1,\"263\":1,\"280\":1,\"283\":2,\"288\":4,\"314\":5,\"316\":2,\"319\":5,\"320\":4,\"322\":3,\"366\":1,\"404\":2,\"408\":1,\"409\":1,\"410\":1,\"415\":1,\"416\":1,\"451\":1,\"781\":2,\"839\":1,\"859\":1,\"869\":1,\"929\":2}}],[\"提高效率\",{\"1\":{\"744\":1}}],[\"提高\",{\"1\":{\"53\":1,\"94\":1,\"193\":1,\"194\":1,\"211\":1,\"217\":1,\"222\":1,\"225\":1,\"228\":1,\"246\":2,\"254\":1,\"257\":1,\"282\":1,\"288\":1,\"320\":3,\"525\":1,\"893\":1}}],[\"提出\",{\"1\":{\"49\":1,\"51\":1,\"53\":1,\"192\":1,\"193\":1,\"194\":1,\"199\":3,\"211\":1,\"217\":2,\"218\":4,\"220\":2,\"222\":5,\"223\":4,\"225\":5,\"226\":4,\"227\":1,\"228\":8,\"232\":1,\"245\":2,\"246\":7,\"247\":5,\"248\":2,\"276\":1,\"306\":1,\"312\":1,\"320\":2,\"370\":2,\"379\":3,\"380\":1,\"386\":1,\"390\":1,\"398\":2,\"404\":1,\"419\":1,\"863\":1,\"864\":1,\"929\":1,\"952\":1,\"955\":1}}],[\"提升\",{\"1\":{\"38\":1,\"54\":1,\"276\":1,\"357\":3,\"480\":1,\"922\":1}}],[\"提到\",{\"1\":{\"13\":1,\"209\":1,\"320\":1,\"357\":1,\"359\":1,\"960\":2}}],[\"提示信息\",{\"1\":{\"476\":1}}],[\"提示\",{\"1\":{\"10\":1,\"137\":1,\"138\":1,\"139\":1,\"174\":1,\"191\":1,\"322\":1,\"860\":2}}],[\"提供\",{\"1\":{\"3\":1,\"5\":1,\"25\":1,\"50\":1,\"54\":1,\"315\":1,\"316\":1,\"322\":2,\"355\":5,\"357\":2,\"379\":1,\"423\":1,\"467\":1,\"476\":1,\"502\":1,\"527\":4,\"530\":1,\"546\":1,\"563\":5,\"570\":1,\"600\":1,\"621\":1,\"623\":1,\"682\":1,\"691\":1,\"712\":1,\"720\":2,\"730\":6,\"737\":2,\"747\":1,\"760\":1,\"786\":1,\"793\":1,\"858\":1,\"909\":1,\"926\":3,\"935\":1}}],[\"网关\",{\"1\":{\"476\":1}}],[\"网格\",{\"1\":{\"218\":5,\"221\":1,\"223\":6,\"225\":1,\"228\":2,\"246\":2,\"277\":2,\"280\":1,\"281\":1,\"282\":3,\"283\":2,\"284\":4,\"301\":5,\"303\":1,\"307\":2,\"308\":5,\"310\":1,\"311\":5,\"312\":2,\"371\":2,\"372\":1,\"398\":3}}],[\"网络服务\",{\"1\":{\"476\":1}}],[\"网络层\",{\"1\":{\"392\":1,\"399\":1,\"484\":1}}],[\"网络结构\",{\"1\":{\"52\":1,\"219\":1,\"288\":1,\"293\":1,\"310\":1,\"337\":1,\"357\":1,\"912\":1,\"958\":1}}],[\"网络\",{\"0\":{\"216\":1,\"219\":1,\"220\":1,\"221\":1,\"224\":1,\"227\":1,\"245\":1,\"310\":1,\"496\":1,\"874\":1},\"1\":{\"13\":5,\"29\":3,\"30\":1,\"47\":1,\"52\":1,\"53\":3,\"62\":2,\"64\":1,\"65\":4,\"199\":2,\"217\":1,\"218\":7,\"219\":1,\"220\":6,\"221\":3,\"222\":3,\"224\":1,\"225\":4,\"226\":1,\"227\":3,\"228\":4,\"229\":10,\"237\":1,\"245\":1,\"246\":4,\"247\":2,\"248\":2,\"254\":1,\"256\":1,\"259\":1,\"260\":1,\"263\":3,\"276\":1,\"281\":2,\"282\":1,\"288\":2,\"293\":1,\"294\":1,\"301\":1,\"303\":2,\"306\":2,\"307\":2,\"308\":2,\"310\":2,\"319\":5,\"331\":1,\"332\":1,\"340\":2,\"355\":1,\"359\":1,\"369\":3,\"375\":1,\"379\":1,\"380\":1,\"398\":2,\"399\":6,\"436\":4,\"480\":1,\"492\":1,\"499\":1,\"875\":3,\"891\":1,\"904\":1,\"917\":1,\"957\":4,\"958\":3,\"961\":3}}],[\"网页\",{\"1\":{\"10\":1,\"19\":1}}],[\"网站\",{\"1\":{\"10\":1,\"19\":2}}],[\"”\",{\"1\":{\"10\":2,\"22\":2,\"55\":2,\"153\":7,\"191\":4,\"208\":1,\"214\":2,\"229\":4,\"242\":5,\"249\":2,\"261\":1,\"290\":1,\"293\":1,\"347\":1,\"349\":1,\"355\":7,\"396\":3,\"429\":2,\"437\":1,\"465\":1,\"476\":2,\"527\":3,\"529\":3,\"530\":2,\"532\":1,\"546\":1,\"624\":3,\"652\":2,\"657\":1,\"665\":2,\"676\":1,\"708\":1,\"730\":1,\"735\":1,\"736\":1,\"752\":6,\"758\":1,\"760\":1,\"781\":2,\"810\":1,\"846\":1,\"854\":1,\"860\":3,\"922\":1,\"924\":1,\"957\":1,\"958\":1}}],[\"已满\",{\"1\":{\"775\":1}}],[\"已知\",{\"1\":{\"86\":6,\"290\":1,\"617\":1,\"827\":1,\"869\":1}}],[\"已有\",{\"1\":{\"55\":1,\"372\":1,\"634\":2,\"725\":2,\"729\":1,\"748\":5,\"793\":3,\"825\":1,\"827\":1,\"829\":1}}],[\"已经\",{\"0\":{\"852\":1},\"1\":{\"30\":1,\"36\":1,\"71\":1,\"81\":2,\"82\":1,\"85\":1,\"112\":2,\"122\":1,\"137\":1,\"153\":1,\"192\":1,\"218\":1,\"254\":1,\"290\":1,\"476\":1,\"529\":1,\"532\":1,\"589\":1,\"612\":1,\"616\":1,\"639\":1,\"665\":1,\"683\":1,\"685\":1,\"693\":1,\"695\":1,\"701\":1,\"704\":1,\"707\":1,\"713\":1,\"714\":1,\"728\":1,\"745\":1,\"775\":1,\"781\":1,\"793\":2,\"804\":1,\"827\":1,\"828\":1,\"829\":1,\"830\":1,\"839\":1,\"852\":1,\"875\":1,\"929\":1,\"952\":1}}],[\"已用\",{\"1\":{\"10\":1}}],[\"已\",{\"0\":{\"177\":1},\"1\":{\"10\":2,\"13\":1,\"43\":2,\"137\":1,\"311\":1,\"342\":1,\"476\":1,\"671\":1,\"676\":1,\"677\":1,\"730\":1,\"745\":1,\"748\":2,\"749\":1,\"789\":1,\"793\":2}}],[\"您\",{\"1\":{\"10\":2,\"168\":1,\"174\":3}}],[\"“\",{\"0\":{\"175\":1},\"1\":{\"10\":2,\"22\":2,\"55\":2,\"153\":7,\"191\":4,\"208\":1,\"214\":2,\"229\":4,\"242\":5,\"249\":2,\"261\":1,\"290\":1,\"293\":1,\"347\":1,\"349\":1,\"355\":7,\"396\":3,\"429\":2,\"437\":1,\"465\":1,\"476\":2,\"527\":3,\"529\":3,\"530\":2,\"532\":1,\"546\":1,\"624\":3,\"648\":1,\"652\":2,\"657\":1,\"665\":2,\"676\":1,\"708\":1,\"730\":1,\"735\":1,\"736\":1,\"752\":6,\"758\":1,\"760\":1,\"781\":2,\"810\":1,\"846\":1,\"854\":1,\"860\":3,\"922\":1,\"924\":1,\"957\":1,\"958\":1}}],[\"上百\",{\"1\":{\"875\":1}}],[\"上例\",{\"1\":{\"676\":1,\"713\":1,\"730\":1,\"735\":1,\"828\":1}}],[\"上乘\",{\"1\":{\"612\":1}}],[\"上加\",{\"1\":{\"598\":1}}],[\"上边\",{\"1\":{\"530\":1}}],[\"上锁\",{\"1\":{\"529\":6,\"530\":4,\"531\":2,\"532\":1}}],[\"上场\",{\"1\":{\"528\":1}}],[\"上能\",{\"1\":{\"401\":1}}],[\"上式\",{\"1\":{\"399\":1,\"913\":1}}],[\"上身\",{\"1\":{\"398\":1}}],[\"上去\",{\"1\":{\"379\":1}}],[\"上海\",{\"1\":{\"360\":1}}],[\"上点\",{\"1\":{\"290\":2}}],[\"上会\",{\"1\":{\"246\":1}}],[\"上图\",{\"1\":{\"210\":1,\"963\":1}}],[\"上下文\",{\"1\":{\"193\":1,\"194\":1,\"201\":1,\"220\":1,\"222\":1,\"227\":1,\"228\":1,\"247\":2,\"386\":2,\"926\":1}}],[\"上下\",{\"1\":{\"168\":1,\"312\":1}}],[\"上层\",{\"1\":{\"82\":1}}],[\"上述情况\",{\"1\":{\"528\":1}}],[\"上述\",{\"1\":{\"51\":1,\"226\":1,\"227\":1,\"228\":1,\"372\":1,\"391\":1,\"396\":1,\"485\":1,\"529\":1,\"531\":1,\"534\":1,\"676\":2,\"852\":1,\"922\":1,\"924\":1}}],[\"上限\",{\"1\":{\"38\":2}}],[\"上面\",{\"1\":{\"13\":1,\"38\":1,\"99\":1,\"116\":1,\"165\":1,\"186\":1,\"191\":2,\"342\":1,\"410\":1,\"462\":1,\"485\":1,\"528\":1,\"637\":1,\"689\":1,\"718\":1,\"793\":1,\"809\":1,\"817\":1,\"827\":1,\"830\":1,\"958\":1}}],[\"上\",{\"0\":{\"337\":1},\"1\":{\"10\":1,\"11\":1,\"13\":1,\"19\":1,\"31\":1,\"32\":7,\"34\":5,\"38\":1,\"39\":2,\"43\":1,\"54\":2,\"55\":3,\"72\":1,\"89\":1,\"97\":3,\"103\":1,\"105\":1,\"112\":1,\"123\":1,\"126\":7,\"128\":2,\"153\":1,\"168\":1,\"174\":1,\"191\":1,\"201\":1,\"210\":2,\"217\":1,\"218\":3,\"220\":1,\"222\":1,\"223\":6,\"225\":3,\"226\":3,\"227\":1,\"228\":3,\"229\":1,\"234\":1,\"242\":2,\"245\":4,\"246\":1,\"254\":3,\"257\":1,\"259\":2,\"261\":1,\"262\":1,\"268\":1,\"283\":1,\"284\":1,\"290\":4,\"292\":1,\"294\":1,\"299\":1,\"303\":2,\"304\":1,\"312\":9,\"313\":1,\"325\":2,\"337\":1,\"342\":2,\"344\":2,\"348\":1,\"355\":5,\"357\":2,\"358\":1,\"370\":1,\"371\":1,\"379\":5,\"390\":1,\"396\":1,\"399\":1,\"404\":1,\"408\":1,\"413\":1,\"417\":1,\"419\":4,\"446\":1,\"476\":1,\"485\":2,\"527\":2,\"545\":2,\"590\":1,\"596\":1,\"598\":1,\"606\":1,\"612\":3,\"640\":1,\"701\":1,\"704\":1,\"714\":2,\"719\":1,\"729\":1,\"732\":1,\"748\":2,\"769\":2,\"776\":2,\"781\":3,\"784\":1,\"785\":1,\"799\":1,\"811\":2,\"835\":1,\"837\":2,\"859\":1,\"875\":1,\"882\":1,\"884\":1,\"895\":1,\"901\":1,\"904\":1,\"910\":2,\"917\":1,\"922\":1,\"928\":2,\"935\":1,\"938\":2,\"939\":1,\"940\":2,\"941\":1,\"951\":1,\"957\":2,\"958\":1,\"963\":2}}],[\"你\",{\"1\":{\"10\":2,\"19\":2,\"41\":1,\"72\":1,\"82\":1,\"85\":5,\"128\":1,\"137\":1,\"139\":2,\"168\":2,\"184\":2,\"191\":8,\"380\":1,\"485\":2,\"707\":1,\"863\":1,\"912\":1}}],[\"过渡\",{\"1\":{\"953\":1}}],[\"过大\",{\"1\":{\"928\":2}}],[\"过多\",{\"1\":{\"621\":1,\"769\":1}}],[\"过多时\",{\"1\":{\"10\":1}}],[\"过早\",{\"1\":{\"446\":1}}],[\"过后\",{\"1\":{\"419\":1}}],[\"过去\",{\"1\":{\"357\":2}}],[\"过度\",{\"1\":{\"294\":1,\"399\":2,\"891\":1,\"892\":1,\"893\":1}}],[\"过滤\",{\"0\":{\"470\":1},\"1\":{\"116\":1,\"198\":1,\"246\":1,\"299\":3,\"463\":1,\"471\":2,\"923\":1}}],[\"过来\",{\"1\":{\"22\":1,\"82\":1,\"750\":2,\"827\":1}}],[\"过程中将\",{\"1\":{\"229\":1}}],[\"过程\",{\"0\":{\"804\":1,\"908\":1,\"909\":1,\"937\":1},\"1\":{\"13\":1,\"44\":1,\"45\":1,\"70\":2,\"89\":2,\"126\":2,\"174\":1,\"198\":1,\"220\":1,\"222\":2,\"225\":1,\"227\":1,\"228\":1,\"246\":2,\"259\":1,\"294\":1,\"307\":2,\"309\":1,\"315\":2,\"322\":1,\"337\":1,\"338\":2,\"344\":1,\"372\":2,\"384\":1,\"395\":1,\"417\":1,\"484\":1,\"591\":1,\"592\":1,\"599\":1,\"609\":2,\"621\":1,\"623\":1,\"717\":1,\"770\":3,\"785\":1,\"799\":1,\"806\":1,\"843\":1,\"859\":1,\"860\":1,\"867\":2,\"875\":2,\"887\":1,\"889\":1,\"895\":1,\"896\":1,\"897\":4,\"901\":1,\"904\":1,\"906\":2,\"907\":4,\"913\":1,\"923\":1,\"928\":2,\"929\":1,\"938\":7,\"939\":6,\"940\":4,\"949\":1,\"951\":6,\"952\":2,\"958\":1,\"963\":1}}],[\"过于\",{\"1\":{\"10\":1,\"347\":1,\"451\":1}}],[\"过\",{\"1\":{\"10\":1,\"13\":1,\"49\":1,\"115\":1,\"118\":1,\"122\":1,\"123\":1,\"174\":1,\"191\":3,\"270\":1,\"451\":2,\"467\":1,\"704\":1,\"744\":1,\"828\":2,\"830\":1,\"862\":1,\"928\":2}}],[\"都加\",{\"1\":{\"769\":1}}],[\"都\",{\"1\":{\"10\":2,\"13\":1,\"20\":1,\"28\":1,\"30\":1,\"36\":2,\"38\":5,\"39\":1,\"43\":1,\"49\":1,\"50\":1,\"52\":4,\"54\":1,\"55\":1,\"70\":1,\"72\":1,\"75\":1,\"77\":1,\"85\":1,\"89\":1,\"94\":1,\"97\":5,\"103\":1,\"123\":1,\"125\":2,\"137\":2,\"168\":1,\"170\":1,\"175\":1,\"193\":1,\"196\":1,\"220\":1,\"223\":1,\"242\":2,\"246\":1,\"254\":1,\"290\":2,\"291\":1,\"303\":1,\"304\":1,\"308\":1,\"312\":1,\"338\":1,\"356\":1,\"357\":2,\"371\":1,\"379\":4,\"380\":3,\"384\":1,\"392\":1,\"398\":1,\"399\":1,\"402\":1,\"406\":1,\"409\":1,\"411\":1,\"451\":1,\"465\":1,\"469\":1,\"476\":2,\"480\":2,\"492\":2,\"500\":1,\"525\":1,\"528\":3,\"529\":1,\"546\":1,\"559\":1,\"563\":1,\"572\":1,\"573\":2,\"581\":1,\"583\":1,\"590\":1,\"595\":2,\"600\":3,\"601\":1,\"607\":1,\"611\":1,\"612\":3,\"616\":1,\"617\":3,\"619\":2,\"621\":2,\"625\":1,\"644\":1,\"652\":1,\"671\":1,\"676\":4,\"689\":1,\"691\":1,\"693\":1,\"701\":1,\"706\":1,\"707\":2,\"708\":3,\"710\":1,\"715\":1,\"721\":1,\"722\":2,\"730\":1,\"736\":1,\"741\":1,\"744\":1,\"745\":1,\"748\":2,\"752\":1,\"756\":1,\"759\":2,\"766\":2,\"769\":3,\"781\":3,\"793\":2,\"804\":1,\"806\":2,\"815\":1,\"818\":2,\"825\":1,\"826\":1,\"829\":1,\"859\":2,\"864\":1,\"875\":2,\"882\":1,\"887\":1,\"902\":2,\"906\":1,\"922\":1,\"929\":2,\"940\":2,\"944\":1,\"958\":2,\"959\":1,\"961\":1,\"962\":1}}],[\"人物\",{\"1\":{\"958\":1}}],[\"人脸\",{\"1\":{\"910\":2,\"958\":5,\"962\":1}}],[\"人为\",{\"1\":{\"907\":1}}],[\"人眼\",{\"1\":{\"875\":2}}],[\"人数\",{\"1\":{\"745\":2}}],[\"人类\",{\"1\":{\"423\":1,\"910\":1}}],[\"人们\",{\"1\":{\"247\":1,\"349\":1}}],[\"人员\",{\"1\":{\"55\":1}}],[\"人\",{\"1\":{\"10\":1,\"55\":1,\"191\":1,\"217\":1,\"218\":3,\"220\":5,\"222\":2,\"223\":5,\"225\":3,\"226\":4,\"227\":1,\"228\":5,\"245\":5,\"246\":7,\"247\":2,\"306\":1,\"379\":1,\"398\":1,\"416\":1,\"428\":1}}],[\"相差\",{\"1\":{\"917\":1}}],[\"相连\",{\"1\":{\"887\":1}}],[\"相除\",{\"1\":{\"798\":1}}],[\"相匹配\",{\"1\":{\"735\":1,\"818\":1}}],[\"相减\",{\"1\":{\"676\":2}}],[\"相当\",{\"1\":{\"355\":2,\"370\":1,\"386\":1}}],[\"相当于\",{\"1\":{\"52\":1,\"55\":1,\"80\":1,\"85\":1,\"137\":2,\"184\":1,\"594\":1,\"595\":1,\"621\":1,\"642\":2,\"648\":1,\"696\":1,\"722\":1,\"740\":1,\"865\":1,\"935\":1}}],[\"相结合\",{\"1\":{\"273\":1,\"889\":1,\"926\":1}}],[\"相机\",{\"1\":{\"245\":1,\"260\":1,\"261\":1,\"265\":1,\"290\":10,\"299\":1,\"332\":1,\"334\":3,\"342\":1}}],[\"相反\",{\"1\":{\"226\":1,\"354\":1,\"446\":1,\"589\":1,\"722\":1}}],[\"相乘\",{\"1\":{\"225\":2,\"226\":1}}],[\"相位\",{\"1\":{\"223\":1}}],[\"相\",{\"1\":{\"223\":1,\"257\":1,\"354\":1,\"391\":1,\"392\":1,\"625\":1,\"829\":1}}],[\"相互促进\",{\"1\":{\"273\":1}}],[\"相互依赖\",{\"1\":{\"227\":1}}],[\"相互\",{\"1\":{\"128\":1,\"217\":1,\"322\":1,\"349\":2,\"583\":1,\"676\":1,\"701\":1,\"724\":1,\"926\":1,\"959\":1}}],[\"相加\",{\"1\":{\"104\":1,\"113\":1,\"294\":1,\"295\":1,\"676\":1,\"883\":1,\"884\":1}}],[\"相交\",{\"1\":{\"103\":2}}],[\"相似之处\",{\"1\":{\"344\":1}}],[\"相似性\",{\"1\":{\"192\":1,\"226\":1,\"270\":1,\"354\":1,\"386\":1,\"391\":1,\"451\":1}}],[\"相似\",{\"1\":{\"103\":1,\"226\":1,\"255\":2,\"268\":1,\"292\":1,\"303\":2,\"312\":1,\"325\":1,\"354\":1,\"370\":1,\"371\":1,\"391\":2,\"393\":2,\"394\":4,\"395\":3,\"701\":1,\"703\":1,\"709\":1,\"726\":1,\"859\":5,\"864\":2,\"880\":1,\"881\":1,\"882\":1,\"884\":2,\"887\":3,\"938\":1,\"939\":1,\"951\":1}}],[\"相等\",{\"1\":{\"66\":1,\"107\":1,\"304\":1,\"546\":1,\"589\":1,\"689\":1,\"828\":1}}],[\"相比之下\",{\"1\":{\"244\":1,\"332\":1}}],[\"相比\",{\"0\":{\"446\":1},\"1\":{\"54\":1,\"201\":1,\"218\":1,\"221\":1,\"225\":1,\"227\":1,\"228\":1,\"234\":1,\"245\":1,\"250\":1,\"265\":1,\"273\":1,\"277\":1,\"288\":1,\"294\":1,\"312\":1,\"337\":1,\"355\":1,\"357\":3,\"372\":2,\"863\":1,\"910\":1,\"924\":1,\"935\":3,\"957\":1}}],[\"相邻\",{\"1\":{\"53\":1,\"106\":1,\"200\":1,\"220\":1,\"222\":1,\"223\":8,\"226\":1,\"293\":1,\"303\":1,\"305\":1,\"379\":1,\"380\":1,\"399\":4,\"887\":1,\"963\":1}}],[\"相同点\",{\"1\":{\"126\":1,\"437\":1}}],[\"相同\",{\"0\":{\"78\":1},\"1\":{\"52\":1,\"77\":2,\"90\":1,\"103\":1,\"113\":1,\"126\":2,\"138\":2,\"197\":1,\"222\":1,\"223\":1,\"246\":1,\"250\":1,\"294\":1,\"304\":1,\"311\":1,\"318\":1,\"342\":1,\"468\":1,\"509\":1,\"539\":1,\"544\":1,\"545\":3,\"571\":1,\"574\":1,\"586\":1,\"600\":4,\"601\":3,\"666\":1,\"683\":1,\"689\":1,\"693\":1,\"695\":1,\"696\":1,\"708\":3,\"717\":1,\"718\":1,\"720\":1,\"734\":1,\"737\":1,\"750\":1,\"758\":1,\"762\":1,\"766\":4,\"769\":4,\"777\":1,\"793\":1,\"804\":1,\"809\":1,\"818\":1,\"859\":1,\"860\":1,\"887\":1,\"955\":1}}],[\"相对而言\",{\"1\":{\"748\":1}}],[\"相对\",{\"1\":{\"38\":1,\"220\":2,\"222\":2,\"223\":1,\"226\":1,\"227\":1,\"228\":1,\"242\":1,\"293\":1,\"303\":1,\"305\":1,\"307\":1,\"319\":1,\"322\":1,\"342\":1,\"349\":1,\"398\":1,\"399\":1,\"484\":1,\"541\":1,\"928\":1}}],[\"相应\",{\"1\":{\"16\":2,\"44\":1,\"137\":1,\"259\":1,\"270\":1,\"354\":1,\"391\":1,\"394\":1,\"492\":2,\"688\":1,\"701\":1,\"961\":1}}],[\"相信\",{\"1\":{\"10\":1}}],[\"相关性\",{\"1\":{\"228\":1,\"312\":1,\"358\":1,\"890\":1,\"910\":1}}],[\"相关联\",{\"1\":{\"223\":1,\"227\":1}}],[\"相关\",{\"0\":{\"877\":1},\"1\":{\"8\":2,\"35\":2,\"174\":1,\"222\":1,\"223\":1,\"225\":2,\"227\":1,\"246\":2,\"257\":1,\"271\":1,\"303\":1,\"308\":1,\"353\":2,\"354\":1,\"355\":1,\"357\":1,\"369\":1,\"492\":3,\"528\":1,\"625\":1,\"908\":1}}],[\"老铁干\",{\"1\":{\"535\":1}}],[\"老\",{\"1\":{\"10\":1}}],[\"及其\",{\"1\":{\"223\":2,\"590\":1}}],[\"及本\",{\"1\":{\"174\":1,\"175\":1,\"304\":1,\"811\":1,\"841\":1,\"845\":1,\"875\":1}}],[\"及时\",{\"1\":{\"53\":1,\"85\":1}}],[\"及\",{\"0\":{\"505\":1,\"665\":1,\"795\":1},\"1\":{\"10\":1,\"30\":1,\"31\":1,\"137\":2,\"359\":1,\"570\":1,\"891\":1,\"894\":1}}],[\"新开\",{\"1\":{\"826\":2}}],[\"新类\",{\"1\":{\"701\":1,\"748\":1}}],[\"新元素\",{\"1\":{\"559\":1,\"560\":1}}],[\"新增\",{\"1\":{\"539\":1,\"830\":1}}],[\"新手\",{\"1\":{\"536\":1}}],[\"新机制\",{\"1\":{\"370\":1}}],[\"新纪录\",{\"1\":{\"370\":1}}],[\"新兴\",{\"1\":{\"242\":1}}],[\"新型\",{\"1\":{\"199\":1,\"398\":1}}],[\"新颖\",{\"1\":{\"199\":1}}],[\"新建\",{\"1\":{\"10\":1,\"72\":1,\"714\":2,\"748\":2,\"749\":1}}],[\"新\",{\"0\":{\"634\":1,\"637\":1,\"638\":1,\"639\":1},\"1\":{\"10\":1,\"16\":1,\"31\":2,\"34\":2,\"39\":1,\"43\":1,\"52\":1,\"55\":2,\"86\":1,\"87\":1,\"97\":2,\"103\":6,\"172\":1,\"192\":1,\"225\":1,\"228\":1,\"263\":1,\"283\":1,\"303\":2,\"304\":3,\"308\":2,\"325\":1,\"355\":1,\"370\":1,\"379\":1,\"390\":1,\"393\":1,\"476\":3,\"601\":1,\"634\":1,\"637\":3,\"639\":5,\"676\":1,\"691\":1,\"701\":1,\"710\":1,\"714\":2,\"728\":1,\"729\":2,\"748\":2,\"749\":4,\"750\":5,\"768\":1,\"769\":2,\"793\":5,\"794\":1,\"825\":1,\"826\":4,\"829\":2,\"830\":3,\"858\":2,\"860\":4,\"902\":1,\"910\":1,\"911\":1,\"941\":1}}],[\"保险柜\",{\"1\":{\"527\":1}}],[\"保持一致\",{\"1\":{\"298\":1}}],[\"保持\",{\"1\":{\"107\":1,\"199\":1,\"305\":1,\"307\":1,\"395\":1,\"883\":1,\"892\":1,\"924\":1,\"938\":1,\"951\":1}}],[\"保留字\",{\"1\":{\"657\":1}}],[\"保留\",{\"1\":{\"55\":1,\"198\":1,\"217\":1,\"245\":1,\"246\":1,\"301\":1,\"311\":1,\"312\":1,\"386\":3,\"391\":6,\"392\":3,\"393\":1,\"394\":1,\"395\":5,\"612\":4,\"701\":1,\"744\":1,\"769\":1,\"837\":1,\"923\":1,\"924\":1,\"926\":1,\"938\":1,\"939\":2}}],[\"保护\",{\"0\":{\"509\":1},\"1\":{\"24\":1,\"527\":6,\"529\":3,\"530\":2,\"531\":1,\"609\":1,\"749\":1,\"752\":5,\"769\":1}}],[\"保存\",{\"1\":{\"10\":1,\"70\":1,\"71\":1,\"175\":1,\"391\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"785\":2,\"835\":1,\"846\":2,\"854\":1,\"924\":1,\"926\":2}}],[\"保证\",{\"1\":{\"5\":1,\"22\":1,\"103\":1,\"106\":1,\"119\":1,\"137\":1,\"202\":1,\"290\":1,\"303\":2,\"306\":2,\"392\":1,\"436\":1,\"469\":1,\"484\":1,\"485\":1,\"502\":1,\"590\":1,\"671\":1,\"676\":1,\"736\":1,\"844\":1,\"857\":1,\"928\":1,\"929\":1}}],[\"如学\",{\"1\":{\"828\":1}}],[\"如上\",{\"1\":{\"685\":1}}],[\"如上例\",{\"1\":{\"98\":1}}],[\"如人\",{\"1\":{\"425\":1}}],[\"如图\",{\"1\":{\"220\":1,\"233\":1,\"234\":1,\"235\":1,\"244\":2,\"250\":1,\"307\":1,\"308\":1,\"321\":1,\"380\":1}}],[\"如下\",{\"1\":{\"23\":1,\"32\":1,\"49\":1,\"55\":1,\"71\":3,\"72\":1,\"85\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"110\":1,\"126\":1,\"191\":1,\"201\":1,\"260\":1,\"268\":1,\"288\":1,\"342\":1,\"349\":1,\"350\":1,\"366\":1,\"372\":1,\"386\":1,\"399\":1,\"419\":1,\"451\":1,\"471\":1,\"530\":1,\"563\":1,\"594\":1,\"721\":4,\"732\":1,\"827\":2,\"852\":1,\"854\":1,\"860\":1,\"928\":2,\"938\":1,\"940\":1,\"951\":1,\"960\":1}}],[\"如\",{\"1\":{\"17\":1,\"30\":1,\"31\":1,\"34\":1,\"184\":1,\"193\":2,\"216\":1,\"217\":1,\"218\":1,\"221\":1,\"225\":2,\"227\":2,\"254\":1,\"299\":1,\"373\":1,\"402\":2,\"449\":1,\"544\":1,\"581\":1,\"589\":1,\"599\":1,\"600\":1,\"606\":2,\"607\":1,\"612\":1,\"619\":1,\"642\":1,\"676\":1,\"681\":1,\"688\":2,\"689\":1,\"714\":4,\"719\":1,\"724\":1,\"725\":1,\"734\":1,\"735\":1,\"741\":1,\"748\":1,\"769\":1,\"785\":2,\"789\":1,\"793\":3,\"794\":2,\"811\":1,\"852\":1,\"875\":1}}],[\"如何\",{\"0\":{\"10\":1,\"841\":1},\"1\":{\"10\":1,\"81\":1,\"83\":1,\"89\":1,\"100\":1,\"115\":1,\"128\":1,\"137\":1,\"174\":1,\"193\":4,\"210\":1,\"217\":1,\"242\":1,\"271\":1,\"304\":1,\"364\":1,\"419\":1,\"460\":1,\"461\":1,\"469\":1,\"485\":1,\"500\":2,\"509\":1,\"528\":1,\"654\":1,\"701\":1,\"750\":1,\"769\":1,\"863\":1,\"867\":1,\"882\":1,\"955\":1}}],[\"如果\",{\"1\":{\"8\":1,\"17\":1,\"19\":1,\"20\":1,\"23\":2,\"34\":1,\"35\":1,\"55\":1,\"69\":3,\"70\":1,\"71\":8,\"75\":1,\"81\":1,\"83\":2,\"85\":4,\"86\":4,\"87\":1,\"88\":4,\"89\":1,\"91\":3,\"93\":3,\"94\":5,\"95\":4,\"97\":7,\"98\":1,\"99\":1,\"103\":1,\"104\":1,\"106\":5,\"107\":2,\"126\":1,\"137\":5,\"139\":1,\"143\":1,\"152\":1,\"153\":2,\"166\":1,\"168\":1,\"174\":2,\"191\":3,\"268\":1,\"290\":1,\"298\":1,\"355\":1,\"379\":1,\"412\":2,\"436\":1,\"446\":3,\"449\":1,\"451\":1,\"457\":1,\"467\":1,\"469\":1,\"476\":1,\"524\":1,\"528\":2,\"529\":6,\"534\":3,\"541\":1,\"544\":1,\"545\":2,\"559\":3,\"563\":1,\"566\":1,\"576\":1,\"589\":2,\"590\":1,\"594\":1,\"595\":2,\"597\":1,\"598\":2,\"599\":1,\"600\":1,\"604\":1,\"606\":1,\"609\":2,\"611\":2,\"612\":2,\"613\":1,\"615\":2,\"617\":1,\"621\":3,\"624\":1,\"635\":1,\"649\":1,\"671\":4,\"673\":1,\"676\":3,\"682\":2,\"683\":1,\"684\":1,\"685\":1,\"689\":5,\"694\":1,\"698\":1,\"703\":1,\"706\":1,\"707\":2,\"712\":1,\"713\":1,\"714\":4,\"715\":2,\"717\":1,\"720\":3,\"721\":2,\"722\":5,\"724\":1,\"726\":1,\"730\":4,\"734\":1,\"735\":1,\"738\":1,\"741\":2,\"743\":1,\"744\":2,\"745\":1,\"749\":1,\"750\":2,\"755\":1,\"766\":1,\"768\":1,\"769\":12,\"781\":5,\"785\":2,\"793\":11,\"804\":1,\"808\":2,\"811\":1,\"817\":1,\"818\":1,\"824\":1,\"826\":3,\"828\":10,\"829\":12,\"830\":12,\"833\":1,\"846\":1,\"852\":3,\"860\":1,\"863\":1,\"904\":1,\"906\":1,\"922\":1,\"929\":1,\"938\":1,\"941\":1,\"951\":1,\"957\":2,\"959\":1}}],[\"空表\",{\"1\":{\"828\":4,\"830\":3}}],[\"空语句\",{\"1\":{\"816\":2}}],[\"空值\",{\"1\":{\"676\":1}}],[\"空白\",{\"1\":{\"625\":1}}],[\"空字符\",{\"1\":{\"612\":1,\"648\":1,\"682\":1}}],[\"空域\",{\"1\":{\"370\":1,\"372\":3}}],[\"空位\",{\"1\":{\"128\":1}}],[\"空的\",{\"1\":{\"106\":1}}],[\"空格\",{\"1\":{\"105\":1,\"139\":1,\"534\":2,\"658\":2,\"694\":1}}],[\"空树\",{\"1\":{\"93\":1,\"96\":2}}],[\"空栈\",{\"1\":{\"71\":2}}],[\"空时\",{\"1\":{\"71\":3,\"72\":2}}],[\"空则\",{\"1\":{\"71\":3,\"72\":1,\"75\":1,\"568\":1}}],[\"空行\",{\"1\":{\"41\":6,\"42\":5,\"72\":1}}],[\"空\",{\"0\":{\"549\":1,\"667\":1},\"1\":{\"16\":1,\"69\":1,\"71\":3,\"75\":1,\"77\":3,\"89\":1,\"93\":2,\"94\":3,\"95\":2,\"96\":1,\"97\":9,\"99\":1,\"106\":3,\"137\":2,\"538\":1,\"548\":1,\"568\":2,\"667\":1,\"668\":1,\"676\":6,\"712\":1,\"714\":1,\"717\":1,\"719\":1,\"720\":1,\"825\":1,\"829\":2,\"830\":2,\"929\":1}}],[\"空闲\",{\"1\":{\"8\":1,\"38\":1,\"184\":1}}],[\"空间布局\",{\"1\":{\"938\":1}}],[\"空间信息\",{\"1\":{\"53\":1}}],[\"空间\",{\"0\":{\"225\":1,\"711\":1,\"712\":1,\"713\":1,\"923\":1},\"1\":{\"8\":1,\"13\":1,\"16\":1,\"35\":1,\"36\":2,\"53\":1,\"80\":1,\"105\":1,\"125\":1,\"171\":1,\"202\":1,\"208\":2,\"211\":1,\"220\":2,\"222\":6,\"224\":1,\"225\":4,\"227\":2,\"228\":3,\"246\":5,\"247\":2,\"268\":2,\"288\":1,\"290\":2,\"300\":1,\"312\":4,\"318\":1,\"322\":2,\"332\":1,\"334\":3,\"342\":1,\"370\":2,\"371\":1,\"372\":1,\"374\":1,\"398\":1,\"525\":1,\"572\":1,\"609\":7,\"611\":2,\"612\":3,\"624\":1,\"666\":1,\"702\":1,\"708\":6,\"710\":1,\"712\":9,\"713\":8,\"714\":1,\"715\":1,\"732\":2,\"735\":1,\"744\":10,\"769\":1,\"782\":2,\"785\":1,\"862\":2,\"864\":1,\"922\":5,\"923\":1,\"925\":6,\"935\":1,\"941\":1,\"957\":1,\"959\":2}}],[\";\",{\"1\":{\"8\":1,\"19\":1,\"24\":1,\"27\":10,\"41\":9,\"42\":1,\"44\":8,\"69\":4,\"70\":12,\"71\":29,\"72\":154,\"73\":14,\"74\":6,\"75\":19,\"76\":5,\"77\":10,\"78\":7,\"80\":19,\"81\":10,\"82\":30,\"83\":13,\"84\":12,\"85\":29,\"86\":15,\"87\":28,\"88\":6,\"89\":8,\"90\":20,\"91\":6,\"94\":4,\"95\":5,\"96\":8,\"97\":21,\"98\":8,\"99\":33,\"100\":60,\"102\":25,\"103\":148,\"104\":98,\"105\":57,\"106\":32,\"107\":19,\"110\":4,\"112\":16,\"113\":13,\"114\":25,\"115\":14,\"116\":18,\"118\":22,\"119\":20,\"121\":13,\"122\":14,\"123\":15,\"125\":16,\"126\":18,\"128\":23,\"137\":43,\"138\":19,\"139\":24,\"142\":10,\"143\":11,\"146\":10,\"148\":6,\"152\":17,\"153\":6,\"299\":1,\"325\":2,\"361\":2,\"367\":1,\"392\":1,\"429\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"461\":2,\"462\":1,\"467\":1,\"468\":1,\"469\":2,\"471\":1,\"522\":4,\"524\":14,\"525\":5,\"528\":11,\"529\":14,\"530\":17,\"531\":16,\"532\":3,\"534\":9,\"535\":5,\"537\":1,\"538\":7,\"539\":12,\"540\":14,\"541\":12,\"542\":14,\"543\":7,\"545\":9,\"548\":6,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"554\":1,\"556\":1,\"557\":1,\"558\":1,\"559\":7,\"560\":1,\"561\":3,\"562\":1,\"563\":1,\"564\":1,\"566\":1,\"567\":1,\"568\":2,\"570\":1,\"573\":9,\"574\":21,\"575\":6,\"576\":11,\"583\":4,\"589\":2,\"590\":3,\"594\":3,\"595\":18,\"598\":2,\"599\":9,\"600\":13,\"601\":11,\"605\":17,\"606\":27,\"607\":1,\"611\":1,\"612\":28,\"613\":5,\"615\":9,\"616\":1,\"617\":2,\"621\":2,\"624\":6,\"634\":2,\"635\":2,\"637\":4,\"638\":6,\"639\":3,\"654\":3,\"658\":5,\"661\":3,\"664\":1,\"665\":7,\"666\":12,\"667\":2,\"668\":7,\"670\":5,\"671\":8,\"672\":5,\"673\":7,\"675\":13,\"676\":13,\"681\":3,\"682\":1,\"683\":16,\"684\":2,\"685\":6,\"687\":4,\"688\":7,\"689\":6,\"690\":19,\"692\":2,\"693\":6,\"694\":2,\"695\":20,\"696\":2,\"698\":19,\"703\":1,\"704\":8,\"706\":7,\"707\":5,\"709\":18,\"712\":4,\"713\":14,\"714\":6,\"717\":13,\"718\":13,\"720\":2,\"721\":29,\"722\":16,\"724\":19,\"725\":5,\"726\":3,\"729\":9,\"730\":2,\"732\":11,\"734\":4,\"735\":11,\"738\":8,\"739\":2,\"740\":1,\"741\":4,\"744\":6,\"745\":28,\"749\":13,\"755\":12,\"756\":2,\"757\":20,\"758\":5,\"759\":18,\"760\":11,\"762\":3,\"766\":1,\"769\":24,\"781\":71,\"782\":4,\"793\":6,\"794\":2,\"798\":2,\"804\":3,\"806\":1,\"807\":2,\"808\":1,\"810\":5,\"816\":4,\"817\":5,\"818\":16,\"819\":1,\"825\":21,\"826\":21,\"827\":16,\"828\":18,\"829\":14,\"830\":98,\"852\":4,\"862\":1}}],[\"来得及\",{\"1\":{\"530\":1}}],[\"来自\",{\"1\":{\"137\":1,\"195\":2,\"198\":1,\"201\":1,\"202\":1,\"233\":1,\"247\":1,\"284\":1,\"311\":1,\"320\":1,\"379\":1,\"436\":1,\"863\":1,\"893\":2,\"901\":1}}],[\"来源于\",{\"1\":{\"225\":1,\"263\":1,\"957\":1}}],[\"来源\",{\"1\":{\"126\":1}}],[\"来看\",{\"1\":{\"85\":1,\"210\":1,\"436\":1,\"529\":1}}],[\"来说\",{\"0\":{\"613\":1},\"1\":{\"38\":1,\"69\":2,\"290\":1,\"355\":1,\"370\":1,\"530\":1,\"865\":1,\"875\":2,\"935\":1,\"941\":1,\"957\":1}}],[\"来讲\",{\"1\":{\"10\":1,\"153\":1}}],[\"来\",{\"0\":{\"855\":1},\"1\":{\"8\":3,\"13\":3,\"19\":1,\"28\":1,\"34\":1,\"41\":1,\"44\":1,\"53\":2,\"70\":3,\"72\":2,\"89\":1,\"107\":1,\"126\":1,\"137\":1,\"172\":1,\"174\":1,\"184\":1,\"195\":1,\"196\":1,\"198\":1,\"199\":1,\"201\":2,\"202\":2,\"208\":1,\"217\":2,\"218\":5,\"220\":6,\"222\":7,\"223\":3,\"225\":4,\"226\":3,\"227\":2,\"228\":3,\"232\":1,\"242\":1,\"245\":5,\"246\":10,\"247\":4,\"259\":1,\"263\":1,\"273\":2,\"281\":1,\"283\":1,\"290\":1,\"299\":1,\"303\":2,\"308\":1,\"312\":2,\"316\":1,\"319\":2,\"323\":1,\"337\":1,\"355\":1,\"386\":1,\"390\":1,\"391\":1,\"392\":3,\"393\":1,\"395\":5,\"396\":1,\"398\":1,\"399\":1,\"400\":1,\"419\":1,\"451\":2,\"476\":1,\"484\":1,\"485\":1,\"524\":1,\"525\":1,\"532\":1,\"535\":1,\"563\":3,\"570\":1,\"573\":1,\"575\":1,\"600\":3,\"635\":1,\"670\":1,\"676\":1,\"684\":2,\"695\":1,\"709\":1,\"712\":1,\"722\":1,\"755\":1,\"766\":1,\"768\":1,\"817\":1,\"834\":1,\"849\":1,\"858\":1,\"859\":4,\"860\":1,\"862\":1,\"864\":3,\"875\":2,\"887\":1,\"893\":1,\"900\":1,\"904\":3,\"905\":1,\"917\":1,\"922\":1,\"923\":2,\"925\":1,\"928\":1,\"929\":3,\"930\":1,\"935\":1,\"938\":2,\"939\":2,\"940\":1,\"944\":2,\"952\":1,\"958\":1,\"963\":1}}],[\"用花\",{\"1\":{\"817\":1}}],[\"用流\",{\"0\":{\"779\":1},\"1\":{\"775\":1}}],[\"用同\",{\"1\":{\"769\":2}}],[\"用俩\",{\"1\":{\"718\":1}}],[\"用类\",{\"1\":{\"692\":1,\"741\":1,\"745\":1}}],[\"用用\",{\"1\":{\"671\":1}}],[\"用常\",{\"1\":{\"654\":1}}],[\"用宏\",{\"1\":{\"652\":1}}],[\"用单\",{\"1\":{\"647\":1}}],[\"用途\",{\"1\":{\"617\":1,\"671\":1,\"714\":1}}],[\"用法\",{\"0\":{\"533\":1,\"635\":1},\"1\":{\"532\":1,\"540\":1,\"572\":1,\"577\":1,\"624\":1,\"667\":1,\"776\":1}}],[\"用处\",{\"1\":{\"527\":1,\"776\":1,\"863\":1}}],[\"用吗\",{\"1\":{\"401\":1,\"667\":1}}],[\"用下\",{\"1\":{\"312\":1}}],[\"用体素\",{\"1\":{\"218\":1}}],[\"用作\",{\"1\":{\"201\":1,\"225\":1,\"229\":1}}],[\"用另\",{\"1\":{\"137\":1}}],[\"用套\",{\"1\":{\"30\":1}}],[\"用到\",{\"1\":{\"10\":1,\"379\":1,\"419\":1,\"476\":1,\"606\":1,\"613\":1,\"616\":1,\"781\":1,\"957\":1}}],[\"用于\",{\"0\":{\"791\":1},\"1\":{\"10\":1,\"23\":2,\"24\":2,\"25\":2,\"28\":4,\"29\":2,\"34\":2,\"38\":2,\"49\":1,\"53\":1,\"71\":1,\"169\":1,\"199\":1,\"214\":2,\"216\":1,\"218\":2,\"219\":1,\"220\":2,\"222\":2,\"226\":2,\"228\":2,\"245\":1,\"246\":2,\"257\":3,\"262\":1,\"272\":1,\"281\":1,\"283\":1,\"312\":1,\"314\":4,\"315\":2,\"322\":2,\"323\":2,\"349\":1,\"370\":1,\"372\":2,\"398\":2,\"451\":1,\"476\":1,\"485\":1,\"529\":1,\"545\":4,\"617\":2,\"635\":1,\"651\":1,\"714\":1,\"718\":1,\"781\":1,\"833\":1,\"860\":1,\"887\":1,\"905\":1,\"935\":1,\"958\":2,\"963\":1}}],[\"用户名\",{\"1\":{\"10\":5,\"172\":1,\"191\":1}}],[\"用户\",{\"1\":{\"10\":8,\"13\":1,\"19\":1,\"30\":1,\"38\":1,\"41\":3,\"51\":3,\"52\":1,\"53\":1,\"54\":1,\"186\":1,\"277\":1,\"485\":3,\"609\":1,\"613\":1,\"652\":1,\"713\":1,\"714\":1,\"717\":3,\"718\":1,\"720\":2,\"722\":1,\"726\":1,\"740\":1,\"775\":1,\"776\":1,\"785\":1,\"787\":2,\"789\":1,\"825\":1}}],[\"用户注册\",{\"1\":{\"10\":1}}],[\"用\",{\"0\":{\"613\":1,\"614\":1,\"617\":1,\"634\":1,\"638\":1,\"711\":1,\"719\":1,\"896\":1},\"1\":{\"8\":1,\"30\":1,\"49\":1,\"55\":3,\"70\":1,\"72\":1,\"82\":1,\"91\":1,\"99\":2,\"103\":3,\"104\":2,\"105\":1,\"126\":1,\"137\":2,\"152\":1,\"153\":1,\"160\":1,\"165\":1,\"169\":1,\"175\":2,\"196\":1,\"220\":1,\"222\":1,\"228\":1,\"270\":1,\"288\":1,\"290\":1,\"322\":1,\"348\":1,\"354\":1,\"379\":2,\"392\":2,\"394\":1,\"399\":1,\"461\":1,\"462\":1,\"476\":2,\"544\":2,\"559\":1,\"563\":1,\"577\":1,\"589\":1,\"594\":1,\"595\":1,\"598\":2,\"599\":1,\"600\":5,\"601\":1,\"611\":1,\"612\":2,\"614\":1,\"615\":2,\"617\":2,\"619\":1,\"621\":1,\"623\":1,\"634\":3,\"635\":2,\"637\":1,\"639\":5,\"649\":1,\"658\":1,\"661\":1,\"662\":2,\"663\":1,\"665\":2,\"670\":1,\"671\":6,\"676\":2,\"682\":1,\"683\":1,\"684\":2,\"685\":5,\"688\":2,\"689\":1,\"690\":2,\"691\":1,\"693\":2,\"694\":1,\"695\":5,\"696\":2,\"697\":4,\"698\":5,\"708\":1,\"710\":1,\"712\":1,\"713\":2,\"714\":5,\"715\":1,\"716\":1,\"717\":1,\"718\":1,\"719\":1,\"722\":1,\"725\":4,\"726\":1,\"729\":1,\"730\":1,\"734\":1,\"735\":1,\"739\":2,\"741\":2,\"743\":2,\"744\":1,\"748\":1,\"750\":1,\"755\":1,\"762\":3,\"766\":2,\"767\":1,\"769\":6,\"770\":2,\"775\":1,\"776\":1,\"778\":1,\"781\":6,\"782\":2,\"785\":4,\"788\":1,\"789\":1,\"793\":1,\"794\":1,\"816\":1,\"819\":1,\"824\":2,\"825\":4,\"826\":4,\"827\":2,\"836\":1,\"859\":2,\"863\":1,\"864\":2,\"873\":2,\"875\":3,\"884\":1,\"896\":1,\"904\":4,\"906\":1,\"917\":1,\"923\":2,\"925\":1,\"935\":1,\"939\":1,\"941\":1,\"947\":1,\"957\":1,\"958\":1,\"959\":1,\"963\":1}}],[\"用来\",{\"1\":{\"8\":1,\"13\":1,\"41\":2,\"42\":1,\"85\":1,\"379\":1,\"524\":1,\"527\":1,\"559\":1,\"576\":1,\"634\":1,\"635\":1,\"639\":1,\"663\":1,\"668\":1,\"680\":1,\"690\":1,\"703\":1,\"708\":1,\"736\":1,\"745\":1,\"755\":1,\"775\":1,\"791\":3,\"826\":1,\"830\":1,\"857\":1,\"907\":1,\"958\":1}}],[\"所能\",{\"1\":{\"940\":1}}],[\"所需\",{\"1\":{\"858\":1}}],[\"所说\",{\"1\":{\"854\":1}}],[\"所要\",{\"1\":{\"828\":1,\"830\":1}}],[\"所属\",{\"1\":{\"735\":1}}],[\"所用\",{\"1\":{\"598\":1,\"609\":1}}],[\"所指\",{\"1\":{\"575\":1,\"671\":4,\"673\":1,\"826\":2,\"829\":4}}],[\"所述\",{\"1\":{\"227\":1}}],[\"所知\",{\"1\":{\"198\":1}}],[\"所示\",{\"1\":{\"98\":1,\"201\":1,\"220\":1,\"233\":1,\"234\":1,\"235\":1,\"244\":2,\"250\":1,\"288\":1,\"299\":1,\"307\":1,\"308\":1,\"321\":1,\"332\":1,\"366\":1,\"380\":1,\"386\":1,\"419\":1,\"471\":1,\"530\":1,\"860\":1,\"928\":2,\"940\":1}}],[\"所在位置\",{\"1\":{\"97\":1}}],[\"所在\",{\"1\":{\"41\":1,\"208\":1,\"319\":1,\"402\":1,\"545\":1,\"736\":1,\"769\":1}}],[\"所\",{\"1\":{\"19\":1,\"30\":1,\"41\":1,\"198\":1,\"218\":1,\"223\":1,\"226\":1,\"229\":1,\"347\":2,\"349\":1,\"370\":1,\"467\":1,\"574\":1,\"599\":1,\"611\":1,\"637\":1,\"664\":2,\"671\":1,\"676\":1,\"682\":1,\"708\":2,\"713\":1,\"732\":5,\"736\":1,\"740\":1,\"744\":3,\"755\":1,\"757\":1,\"760\":1,\"762\":1,\"782\":1,\"825\":1,\"828\":1,\"929\":1,\"938\":1,\"951\":1}}],[\"所以\",{\"1\":{\"10\":1,\"17\":1,\"22\":1,\"50\":1,\"52\":1,\"80\":1,\"82\":1,\"96\":1,\"138\":1,\"139\":3,\"259\":1,\"348\":1,\"357\":1,\"379\":7,\"380\":5,\"398\":1,\"411\":2,\"476\":1,\"480\":1,\"485\":1,\"529\":1,\"531\":1,\"532\":1,\"541\":1,\"544\":1,\"563\":2,\"605\":1,\"606\":1,\"676\":3,\"718\":2,\"722\":1,\"744\":1,\"745\":1,\"750\":1,\"781\":1,\"843\":1,\"854\":1,\"869\":1,\"896\":1,\"910\":1,\"927\":1,\"928\":1,\"957\":1}}],[\"所有者\",{\"1\":{\"160\":1}}],[\"所有\",{\"0\":{\"82\":1,\"138\":1,\"459\":1},\"1\":{\"8\":1,\"10\":1,\"19\":1,\"25\":1,\"28\":1,\"34\":2,\"36\":1,\"38\":2,\"46\":1,\"55\":2,\"72\":1,\"82\":1,\"85\":2,\"93\":2,\"103\":1,\"106\":1,\"113\":2,\"126\":1,\"128\":1,\"137\":6,\"138\":1,\"168\":1,\"179\":1,\"182\":1,\"192\":3,\"194\":1,\"198\":1,\"203\":1,\"204\":2,\"214\":2,\"220\":1,\"222\":1,\"223\":3,\"225\":1,\"226\":1,\"227\":2,\"228\":3,\"229\":2,\"246\":1,\"247\":1,\"282\":2,\"288\":2,\"290\":2,\"298\":1,\"300\":1,\"303\":1,\"304\":1,\"308\":1,\"320\":1,\"338\":1,\"342\":4,\"353\":1,\"357\":1,\"379\":2,\"384\":1,\"394\":1,\"395\":1,\"398\":1,\"399\":1,\"406\":1,\"417\":1,\"451\":4,\"459\":1,\"460\":2,\"461\":1,\"465\":2,\"471\":2,\"540\":1,\"545\":1,\"561\":1,\"563\":3,\"574\":1,\"583\":1,\"590\":1,\"607\":2,\"612\":1,\"615\":1,\"621\":1,\"652\":1,\"715\":1,\"722\":1,\"730\":1,\"738\":1,\"744\":1,\"748\":2,\"752\":1,\"758\":1,\"769\":2,\"798\":1,\"825\":1,\"828\":1,\"829\":1,\"844\":1,\"848\":1,\"855\":1,\"858\":1,\"924\":1,\"940\":1,\"955\":1}}],[\"所谓\",{\"1\":{\"8\":1,\"53\":1,\"530\":1,\"601\":1,\"736\":1,\"923\":1}}],[\"操作符\",{\"0\":{\"472\":1},\"1\":{\"545\":1}}],[\"操作过程\",{\"1\":{\"95\":1}}],[\"操作系统\",{\"0\":{\"499\":1},\"1\":{\"13\":5,\"28\":3,\"70\":2,\"500\":1,\"527\":1,\"624\":1,\"784\":1}}],[\"操作\",{\"0\":{\"571\":1,\"574\":1,\"781\":1,\"782\":1,\"791\":1},\"1\":{\"8\":2,\"10\":1,\"13\":2,\"16\":4,\"19\":1,\"23\":4,\"24\":2,\"25\":1,\"28\":1,\"30\":10,\"31\":2,\"43\":1,\"69\":1,\"86\":1,\"87\":1,\"95\":2,\"96\":2,\"97\":1,\"172\":3,\"191\":1,\"209\":1,\"210\":1,\"211\":1,\"220\":1,\"225\":1,\"226\":1,\"228\":1,\"245\":1,\"268\":1,\"304\":1,\"307\":1,\"308\":3,\"312\":1,\"332\":1,\"379\":1,\"380\":1,\"390\":1,\"392\":4,\"419\":6,\"527\":1,\"528\":6,\"529\":4,\"561\":2,\"584\":1,\"589\":1,\"655\":2,\"693\":1,\"701\":5,\"709\":1,\"713\":2,\"717\":1,\"722\":2,\"782\":1,\"791\":1,\"793\":2,\"817\":1,\"827\":1,\"845\":1,\"855\":1,\"922\":3,\"940\":1,\"945\":1,\"962\":1}}],[\"而后\",{\"1\":{\"938\":1,\"951\":1}}],[\"而池\",{\"1\":{\"225\":1}}],[\"而言\",{\"1\":{\"192\":1,\"209\":1,\"318\":1,\"319\":1,\"323\":1,\"337\":1,\"348\":1,\"366\":1,\"392\":1,\"415\":1,\"708\":2}}],[\"而用\",{\"1\":{\"72\":1}}],[\"而且\",{\"1\":{\"17\":1,\"30\":1,\"143\":1,\"250\":1,\"259\":1,\"380\":1,\"384\":1,\"437\":1,\"575\":1,\"577\":1,\"607\":1,\"710\":1,\"828\":1,\"830\":1,\"864\":1,\"922\":1,\"924\":1}}],[\"而是\",{\"1\":{\"13\":1,\"348\":1,\"446\":1,\"476\":1,\"527\":1,\"528\":1,\"530\":1,\"546\":1,\"612\":2,\"659\":1,\"665\":1,\"691\":1,\"696\":1,\"713\":1,\"714\":1,\"715\":1,\"722\":1,\"726\":1,\"729\":1,\"735\":1,\"744\":1,\"745\":3,\"766\":1,\"828\":1,\"873\":1,\"901\":2,\"913\":1,\"922\":1,\"939\":1}}],[\"而\",{\"0\":{\"613\":1},\"1\":{\"8\":1,\"13\":1,\"17\":1,\"23\":1,\"51\":1,\"53\":2,\"69\":1,\"72\":1,\"85\":1,\"97\":1,\"99\":1,\"125\":1,\"153\":1,\"174\":1,\"192\":1,\"199\":2,\"202\":1,\"225\":1,\"246\":1,\"259\":1,\"261\":1,\"270\":1,\"290\":2,\"301\":1,\"312\":1,\"314\":1,\"322\":1,\"323\":1,\"332\":1,\"340\":1,\"355\":1,\"357\":2,\"370\":1,\"379\":2,\"390\":1,\"391\":1,\"392\":2,\"395\":2,\"399\":1,\"411\":2,\"461\":1,\"467\":1,\"469\":1,\"484\":1,\"485\":2,\"492\":1,\"530\":1,\"535\":1,\"540\":1,\"545\":1,\"546\":1,\"563\":1,\"577\":3,\"594\":1,\"596\":1,\"599\":3,\"600\":1,\"601\":2,\"607\":1,\"609\":2,\"612\":3,\"616\":1,\"617\":1,\"621\":2,\"637\":1,\"639\":1,\"642\":1,\"671\":3,\"676\":2,\"683\":1,\"684\":2,\"685\":2,\"689\":1,\"690\":2,\"693\":2,\"695\":1,\"696\":2,\"701\":2,\"702\":1,\"707\":1,\"708\":4,\"710\":1,\"712\":1,\"720\":1,\"721\":2,\"726\":1,\"740\":1,\"744\":4,\"745\":4,\"750\":2,\"752\":2,\"755\":1,\"766\":1,\"767\":1,\"769\":3,\"785\":1,\"789\":2,\"790\":1,\"791\":2,\"793\":1,\"807\":1,\"833\":1,\"859\":2,\"860\":1,\"864\":2,\"904\":1,\"910\":1,\"922\":1,\"927\":1,\"928\":1,\"929\":1,\"930\":1,\"935\":1,\"938\":1,\"940\":3,\"947\":1,\"951\":1,\"957\":1,\"958\":1}}],[\"程度\",{\"1\":{\"436\":1,\"451\":1,\"884\":1,\"938\":1,\"939\":1,\"951\":1}}],[\"程从\",{\"1\":{\"32\":1,\"34\":1}}],[\"程往\",{\"1\":{\"32\":2}}],[\"程和\",{\"1\":{\"31\":1}}],[\"程序执行\",{\"1\":{\"609\":2,\"621\":1}}],[\"程序运行\",{\"1\":{\"609\":1,\"656\":1,\"659\":1,\"661\":1,\"677\":1,\"767\":1,\"785\":1,\"833\":2}}],[\"程序结构\",{\"0\":{\"581\":1}}],[\"程序员\",{\"1\":{\"175\":1}}],[\"程序逻辑\",{\"1\":{\"44\":1}}],[\"程序设计\",{\"1\":{\"28\":1,\"701\":2,\"747\":2}}],[\"程序\",{\"0\":{\"616\":1},\"1\":{\"13\":2,\"34\":2,\"411\":1,\"525\":1,\"527\":1,\"530\":1,\"581\":1,\"583\":2,\"589\":1,\"590\":1,\"599\":1,\"609\":5,\"611\":1,\"612\":3,\"613\":1,\"614\":1,\"615\":1,\"616\":1,\"620\":3,\"621\":2,\"623\":1,\"624\":5,\"635\":2,\"639\":1,\"650\":1,\"652\":1,\"654\":1,\"671\":1,\"677\":2,\"684\":1,\"690\":1,\"698\":1,\"701\":4,\"708\":1,\"713\":3,\"722\":2,\"729\":2,\"744\":3,\"745\":2,\"757\":1,\"762\":2,\"766\":1,\"769\":1,\"781\":6,\"785\":2,\"816\":1,\"825\":1,\"827\":2}}],[\"程由\",{\"1\":{\"13\":1}}],[\"程\",{\"1\":{\"8\":1,\"31\":1,\"32\":4,\"34\":2,\"46\":1}}],[\"态\",{\"1\":{\"8\":1,\"38\":1}}],[\"成就\",{\"1\":{\"952\":1}}],[\"成绩\",{\"1\":{\"730\":1,\"745\":2}}],[\"成对\",{\"1\":{\"380\":1}}],[\"成分\",{\"1\":{\"373\":1}}],[\"成立\",{\"1\":{\"357\":1}}],[\"成正比\",{\"1\":{\"282\":1}}],[\"成为\",{\"1\":{\"232\":1,\"301\":1,\"355\":1,\"395\":1,\"398\":1,\"537\":1,\"597\":1,\"599\":1,\"617\":1,\"750\":1,\"769\":1,\"816\":1,\"940\":1}}],[\"成本\",{\"1\":{\"223\":1,\"257\":1,\"332\":1,\"370\":1,\"386\":2,\"922\":2,\"935\":1}}],[\"成果\",{\"0\":{\"858\":1},\"1\":{\"172\":1,\"257\":1}}],[\"成篮\",{\"1\":{\"102\":1}}],[\"成千上万\",{\"1\":{\"38\":1}}],[\"成员\",{\"0\":{\"36\":1,\"37\":1,\"521\":1,\"606\":1,\"705\":1,\"706\":1,\"707\":1,\"708\":1,\"709\":1,\"719\":1,\"733\":1,\"734\":1,\"735\":1,\"740\":1,\"742\":2,\"743\":1,\"744\":1,\"745\":1,\"751\":1,\"752\":1,\"779\":1},\"1\":{\"36\":11,\"37\":13,\"509\":2,\"525\":2,\"534\":1,\"544\":1,\"545\":1,\"546\":1,\"604\":4,\"605\":5,\"606\":7,\"607\":1,\"612\":26,\"703\":8,\"705\":3,\"706\":2,\"707\":8,\"708\":11,\"709\":7,\"715\":4,\"716\":1,\"717\":8,\"718\":1,\"719\":4,\"722\":2,\"724\":4,\"726\":1,\"732\":6,\"733\":2,\"734\":6,\"735\":15,\"736\":11,\"740\":1,\"741\":2,\"743\":1,\"744\":27,\"745\":50,\"748\":3,\"749\":5,\"750\":25,\"751\":2,\"752\":11,\"756\":8,\"757\":4,\"758\":4,\"759\":1,\"760\":7,\"766\":2,\"769\":17,\"770\":1,\"778\":1,\"781\":3,\"782\":1,\"793\":4,\"794\":1,\"811\":3,\"825\":4,\"826\":1}}],[\"成熟\",{\"1\":{\"32\":1}}],[\"成功\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"43\":1,\"94\":1,\"172\":1,\"210\":1,\"214\":1,\"257\":1,\"357\":1,\"370\":1,\"476\":4,\"529\":6,\"530\":3,\"531\":1,\"532\":1,\"559\":1,\"561\":2,\"712\":1,\"714\":1,\"781\":2,\"793\":1,\"860\":1}}],[\"成\",{\"1\":{\"8\":1,\"13\":1,\"17\":1,\"24\":1,\"30\":1,\"32\":1,\"34\":2,\"49\":1,\"54\":1,\"191\":1,\"203\":1,\"210\":1,\"301\":1,\"303\":1,\"307\":1,\"314\":1,\"315\":1,\"318\":1,\"322\":1,\"380\":1,\"391\":1,\"399\":1,\"543\":1,\"606\":1,\"671\":1,\"701\":1,\"745\":1,\"859\":1,\"864\":1,\"883\":1,\"901\":1,\"941\":1,\"958\":1,\"959\":1}}],[\"设为\",{\"1\":{\"793\":1}}],[\"设备\",{\"1\":{\"776\":1,\"781\":2,\"788\":1,\"789\":1}}],[\"设立\",{\"1\":{\"708\":1}}],[\"设定\",{\"1\":{\"261\":1,\"542\":1,\"828\":1,\"902\":1}}],[\"设计所\",{\"1\":{\"701\":1}}],[\"设计者\",{\"1\":{\"480\":1}}],[\"设计\",{\"1\":{\"53\":1,\"65\":1,\"103\":1,\"192\":2,\"193\":1,\"194\":1,\"202\":1,\"211\":2,\"220\":2,\"221\":1,\"303\":1,\"355\":1,\"370\":2,\"372\":1,\"384\":1,\"392\":1,\"399\":2,\"467\":1,\"683\":1,\"701\":1,\"750\":2,\"893\":1,\"904\":1,\"912\":1,\"935\":1}}],[\"设计模式\",{\"0\":{\"5\":1}}],[\"设置\",{\"0\":{\"158\":1,\"169\":1,\"170\":1,\"310\":1},\"1\":{\"8\":1,\"17\":1,\"20\":2,\"30\":1,\"69\":1,\"170\":4,\"175\":2,\"186\":3,\"290\":2,\"303\":1,\"308\":1,\"338\":1,\"342\":1,\"357\":3,\"396\":1,\"411\":1,\"542\":1,\"543\":2,\"573\":2,\"705\":1,\"794\":1,\"826\":1,\"837\":4,\"845\":2,\"848\":1,\"929\":1,\"953\":2}}],[\"wthunt\",{\"1\":{\"875\":1}}],[\"wx6487d58cca837\",{\"1\":{\"852\":1}}],[\"wxyz\",{\"1\":{\"114\":2}}],[\"w1\",{\"1\":{\"446\":1,\"961\":2}}],[\"w0\",{\"1\":{\"446\":1}}],[\"w2\",{\"1\":{\"399\":1,\"961\":2}}],[\"wj\",{\"1\":{\"395\":4}}],[\"wg\",{\"1\":{\"372\":2}}],[\"wguided\",{\"1\":{\"350\":1}}],[\"wk\",{\"1\":{\"371\":2,\"372\":1,\"882\":1}}],[\"wke\",{\"1\":{\"139\":1}}],[\"w\",{\"0\":{\"383\":1},\"1\":{\"288\":2,\"291\":2,\"292\":2,\"293\":2,\"294\":5,\"299\":3,\"344\":3,\"366\":1,\"372\":2,\"380\":6,\"399\":3,\"411\":1,\"718\":2,\"719\":2,\"721\":4,\"724\":2,\"744\":1,\"769\":2,\"840\":2,\"858\":1,\"859\":5,\"897\":1,\"928\":3,\"958\":6,\"959\":3,\"963\":3}}],[\"what\",{\"1\":{\"530\":1,\"531\":1,\"856\":1}}],[\"whereas\",{\"1\":{\"429\":1}}],[\"where\",{\"0\":{\"471\":1,\"472\":1},\"1\":{\"261\":1,\"471\":6}}],[\"white\",{\"1\":{\"837\":1}}],[\"whint\",{\"1\":{\"350\":1}}],[\"which\",{\"1\":{\"208\":1,\"309\":1,\"314\":1,\"321\":1,\"344\":1,\"427\":1,\"428\":1}}],[\"while\",{\"1\":{\"44\":1,\"71\":3,\"72\":7,\"73\":1,\"75\":1,\"80\":2,\"82\":1,\"84\":1,\"85\":1,\"97\":2,\"99\":1,\"100\":1,\"102\":1,\"103\":17,\"104\":8,\"105\":2,\"106\":1,\"107\":1,\"118\":1,\"137\":7,\"138\":3,\"139\":3,\"142\":1,\"152\":1,\"309\":1,\"427\":1,\"534\":1,\"540\":1,\"541\":2,\"781\":2,\"816\":1,\"819\":3,\"825\":1,\"826\":1,\"827\":2,\"828\":1,\"829\":1,\"830\":5}}],[\"wupdate2\",{\"1\":{\"399\":1}}],[\"wupdate1\",{\"1\":{\"399\":1}}],[\"wupdate\",{\"1\":{\"399\":4}}],[\"wu\",{\"1\":{\"218\":1,\"245\":1}}],[\"wsl\",{\"1\":{\"186\":1}}],[\"wq\",{\"1\":{\"175\":1}}],[\"well\",{\"1\":{\"956\":1}}],[\"weijiawu\",{\"1\":{\"888\":1}}],[\"weights\",{\"1\":{\"372\":1}}],[\"weighted\",{\"1\":{\"309\":1,\"891\":1}}],[\"weakly\",{\"1\":{\"887\":2,\"891\":1}}],[\"weather\",{\"1\":{\"427\":1}}],[\"were\",{\"1\":{\"854\":1}}],[\"week\",{\"1\":{\"755\":3}}],[\"weekday\",{\"1\":{\"755\":6}}],[\"wed\",{\"1\":{\"755\":2}}],[\"we\",{\"1\":{\"201\":1,\"208\":1,\"261\":1,\"305\":1,\"309\":1,\"344\":1,\"427\":2,\"945\":2}}],[\"wen\",{\"1\":{\"82\":1}}],[\"webp\",{\"1\":{\"41\":1}}],[\"web\",{\"1\":{\"11\":1}}],[\"webserver\",{\"0\":{\"2\":1},\"1\":{\"0\":1}}],[\"will\",{\"1\":{\"845\":1}}],[\"wiley\",{\"1\":{\"41\":1}}],[\"widows\",{\"1\":{\"781\":1}}],[\"width\",{\"1\":{\"718\":3,\"719\":1,\"721\":3,\"724\":3,\"726\":2,\"744\":1,\"745\":1}}],[\"wi\",{\"1\":{\"395\":4}}],[\"wise\",{\"1\":{\"195\":1,\"372\":1,\"945\":1}}],[\"wigglemaxlength\",{\"1\":{\"146\":1}}],[\"window\",{\"1\":{\"85\":1,\"122\":1,\"137\":23,\"138\":5,\"139\":5,\"379\":1,\"380\":1,\"383\":4}}],[\"windows\",{\"1\":{\"13\":2,\"41\":2,\"174\":3,\"383\":3}}],[\"within\",{\"1\":{\"380\":1,\"383\":1}}],[\"with\",{\"0\":{\"50\":1,\"282\":1,\"320\":1,\"944\":1},\"1\":{\"48\":1,\"53\":1,\"54\":4,\"192\":1,\"198\":1,\"211\":2,\"256\":1,\"262\":1,\"266\":1,\"271\":3,\"272\":1,\"273\":3,\"304\":1,\"309\":3,\"313\":1,\"314\":1,\"342\":1,\"343\":1,\"359\":2,\"360\":1,\"397\":1,\"422\":6,\"424\":1,\"426\":1,\"427\":1,\"428\":2,\"429\":1,\"529\":4,\"840\":1,\"862\":1,\"864\":2,\"871\":1,\"887\":2,\"888\":1,\"889\":1,\"890\":2,\"922\":1,\"939\":2,\"940\":1,\"944\":2,\"945\":2,\"947\":2,\"952\":1}}],[\"wrn\",{\"1\":{\"355\":1}}],[\"wr\",{\"1\":{\"350\":1}}],[\"wrox\",{\"1\":{\"41\":1}}],[\"write\",{\"1\":{\"13\":1,\"46\":1,\"782\":4}}],[\"www\",{\"1\":{\"41\":3,\"427\":1,\"428\":1}}],[\"wout\",{\"1\":{\"399\":1}}],[\"would\",{\"1\":{\"191\":2}}],[\"word\",{\"1\":{\"693\":2}}],[\"words\",{\"1\":{\"559\":3}}],[\"world\",{\"1\":{\"427\":1,\"624\":3}}],[\"worth\",{\"1\":{\"397\":1}}],[\"workday\",{\"1\":{\"755\":10}}],[\"work\",{\"0\":{\"358\":1,\"387\":1,\"872\":1},\"1\":{\"755\":1,\"835\":1}}],[\"workers\",{\"1\":{\"845\":2}}],[\"worker\",{\"1\":{\"8\":1,\"845\":1}}],[\"wooyang2018\",{\"1\":{\"186\":1}}],[\"wow64\",{\"1\":{\"41\":1}}],[\"wage\",{\"1\":{\"769\":4}}],[\"wagg\",{\"1\":{\"399\":3}}],[\"wall\",{\"1\":{\"422\":1}}],[\"warp\",{\"1\":{\"332\":1,\"959\":1}}],[\"ward\",{\"1\":{\"225\":1}}],[\"warning\",{\"1\":{\"31\":1,\"48\":1,\"86\":1,\"93\":1,\"104\":1,\"165\":1,\"191\":1,\"201\":1,\"229\":1,\"536\":1,\"544\":2,\"557\":1,\"595\":1,\"599\":1,\"612\":1,\"654\":1,\"695\":1,\"715\":1,\"760\":1,\"769\":1,\"793\":1}}],[\"wang\",{\"1\":{\"218\":1,\"226\":1,\"713\":1}}],[\"wasserstein\",{\"1\":{\"884\":2}}],[\"was\",{\"1\":{\"188\":1,\"422\":3}}],[\"wait\",{\"1\":{\"8\":1,\"17\":2,\"23\":2,\"25\":1,\"27\":2,\"32\":5,\"38\":1,\"39\":4}}],[\"个块\",{\"1\":{\"955\":1}}],[\"个性\",{\"1\":{\"750\":1}}],[\"个类\",{\"1\":{\"423\":1}}],[\"个值\",{\"1\":{\"413\":1,\"539\":1}}],[\"个组\",{\"1\":{\"372\":1}}],[\"个原\",{\"1\":{\"288\":1}}],[\"个点\",{\"1\":{\"196\":1,\"203\":1,\"254\":1,\"312\":2,\"317\":2,\"323\":1,\"884\":1}}],[\"个字符\",{\"1\":{\"105\":1,\"685\":1,\"687\":2,\"688\":3,\"698\":1}}],[\"个数\",{\"0\":{\"80\":1},\"1\":{\"38\":2,\"110\":4,\"113\":1,\"228\":1,\"542\":2,\"544\":1,\"589\":1,\"590\":1,\"600\":2,\"601\":5,\"676\":1,\"682\":2,\"690\":1,\"720\":1,\"730\":2,\"735\":1,\"750\":1,\"766\":2,\"769\":1,\"781\":1,\"814\":1,\"824\":1,\"826\":1,\"830\":1}}],[\"个\",{\"0\":{\"108\":1},\"1\":{\"8\":1,\"19\":1,\"38\":1,\"44\":1,\"72\":2,\"103\":6,\"104\":1,\"112\":2,\"126\":1,\"128\":1,\"137\":2,\"201\":1,\"203\":1,\"222\":2,\"226\":2,\"263\":2,\"288\":2,\"290\":3,\"292\":1,\"301\":1,\"305\":1,\"317\":2,\"334\":1,\"371\":4,\"372\":1,\"380\":1,\"384\":1,\"391\":3,\"392\":1,\"396\":2,\"399\":1,\"404\":2,\"408\":1,\"411\":4,\"417\":4,\"423\":2,\"425\":2,\"476\":2,\"527\":1,\"532\":4,\"542\":1,\"543\":1,\"545\":1,\"573\":4,\"574\":1,\"600\":1,\"638\":2,\"657\":1,\"676\":1,\"688\":3,\"690\":1,\"696\":1,\"712\":1,\"714\":1,\"730\":2,\"781\":2,\"782\":2,\"826\":1,\"859\":2,\"882\":3,\"939\":1,\"959\":1}}],[\"mcmc\",{\"1\":{\"905\":2}}],[\"mccnn\",{\"1\":{\"222\":1}}],[\"mm\",{\"1\":{\"892\":1,\"893\":1}}],[\"mmf\",{\"1\":{\"242\":1}}],[\"md\",{\"1\":{\"453\":1}}],[\"mn1\",{\"1\":{\"451\":1}}],[\"mno\",{\"1\":{\"114\":2}}],[\"mgk\",{\"1\":{\"372\":4}}],[\"mhsa\",{\"1\":{\"370\":3,\"371\":1,\"372\":3,\"373\":1}}],[\"mhbn\",{\"1\":{\"217\":1}}],[\"mresconv\",{\"1\":{\"310\":2}}],[\"mtx\",{\"1\":{\"529\":8,\"530\":3,\"531\":4}}],[\"mt\",{\"1\":{\"283\":1}}],[\"m2ae\",{\"0\":{\"272\":1},\"1\":{\"272\":1}}],[\"mvs\",{\"1\":{\"342\":5}}],[\"mvsnet\",{\"0\":{\"286\":1},\"1\":{\"329\":1,\"332\":1,\"340\":1}}],[\"mvpnet\",{\"1\":{\"247\":1}}],[\"mvcnn\",{\"1\":{\"217\":1}}],[\"mlp\",{\"0\":{\"220\":1},\"1\":{\"201\":1,\"202\":1,\"219\":1,\"220\":4,\"222\":7,\"223\":1,\"225\":3,\"227\":2,\"228\":1,\"229\":1,\"248\":2,\"281\":1,\"322\":1}}],[\"mk\",{\"1\":{\"371\":3,\"372\":1}}],[\"mkfs\",{\"1\":{\"172\":1}}],[\"mkswap\",{\"1\":{\"170\":1}}],[\"myloss\",{\"1\":{\"854\":1}}],[\"mylinkedlist\",{\"1\":{\"103\":2}}],[\"my\",{\"1\":{\"854\":3,\"855\":1}}],[\"myqueue\",{\"1\":{\"107\":2,\"570\":1}}],[\"mysql\",{\"1\":{\"10\":13,\"456\":1,\"460\":1,\"461\":1,\"463\":1,\"465\":1,\"469\":1}}],[\"mixing\",{\"0\":{\"961\":1},\"1\":{\"961\":2}}],[\"mib\",{\"1\":{\"852\":2}}],[\"mimsave\",{\"1\":{\"835\":1}}],[\"mime\",{\"1\":{\"42\":1}}],[\"mian\",{\"1\":{\"683\":1}}],[\"missing\",{\"1\":{\"426\":1}}],[\"misalignment\",{\"1\":{\"202\":1}}],[\"milliseconds\",{\"1\":{\"528\":1,\"529\":1,\"530\":1,\"531\":1}}],[\"million\",{\"1\":{\"424\":1}}],[\"milioto\",{\"1\":{\"245\":1}}],[\"mit\",{\"1\":{\"424\":1,\"425\":1}}],[\"mi\",{\"1\":{\"395\":4}}],[\"middle\",{\"1\":{\"361\":1,\"961\":1}}],[\"microsoft\",{\"0\":{\"422\":1},\"1\":{\"361\":1,\"422\":1,\"426\":1}}],[\"miou\",{\"1\":{\"192\":1,\"214\":1,\"249\":1,\"261\":2}}],[\"minus\",{\"1\":{\"868\":2}}],[\"minute\",{\"1\":{\"524\":2,\"605\":4,\"606\":3,\"709\":1,\"717\":3,\"732\":2}}],[\"minibatch\",{\"1\":{\"859\":2}}],[\"minimalegl\",{\"1\":{\"188\":1}}],[\"minimal\",{\"1\":{\"188\":1}}],[\"ming\",{\"1\":{\"246\":1}}],[\"minkowski\",{\"1\":{\"312\":2}}],[\"minkowskinet\",{\"1\":{\"246\":1}}],[\"minkowskiengine\",{\"1\":{\"203\":1,\"312\":1}}],[\"minkengine\",{\"0\":{\"203\":1}}],[\"minwindow\",{\"1\":{\"137\":1}}],[\"minlen\",{\"1\":{\"137\":7,\"138\":1}}],[\"mindepth\",{\"1\":{\"75\":4}}],[\"min\",{\"1\":{\"72\":1,\"75\":8,\"99\":1,\"100\":1,\"153\":1,\"650\":1,\"709\":3,\"738\":1}}],[\"metric\",{\"1\":{\"928\":1}}],[\"method\",{\"0\":{\"200\":1,\"380\":1,\"391\":1,\"399\":1,\"873\":1,\"927\":1,\"938\":1,\"951\":1},\"1\":{\"938\":1,\"951\":1}}],[\"methods\",{\"0\":{\"252\":1},\"1\":{\"48\":1,\"232\":1}}],[\"mean\",{\"0\":{\"848\":1},\"1\":{\"848\":3,\"854\":1,\"855\":1,\"868\":1,\"884\":1}}],[\"memory\",{\"0\":{\"677\":1},\"1\":{\"845\":2,\"852\":1}}],[\"megvii\",{\"1\":{\"385\":1}}],[\"merging\",{\"0\":{\"382\":1,\"884\":1},\"1\":{\"380\":3}}],[\"merge\",{\"1\":{\"309\":1}}],[\"mergetrees\",{\"1\":{\"88\":3}}],[\"message\",{\"1\":{\"701\":1}}],[\"meshdiffusion\",{\"1\":{\"340\":1}}],[\"meshpool\",{\"1\":{\"310\":1}}],[\"meshconv\",{\"1\":{\"304\":1,\"310\":2}}],[\"meshcov\",{\"1\":{\"304\":1}}],[\"meshcnn\",{\"0\":{\"301\":1},\"1\":{\"301\":2,\"304\":1,\"305\":1,\"311\":1,\"312\":9,\"340\":1}}],[\"meshes\",{\"1\":{\"303\":1}}],[\"mesh\",{\"0\":{\"304\":1,\"308\":1,\"309\":1},\"1\":{\"277\":1,\"304\":2,\"305\":10,\"309\":4,\"312\":3}}],[\"mesa\",{\"1\":{\"166\":1}}],[\"mechanism\",{\"1\":{\"195\":1,\"372\":1}}],[\"media\",{\"1\":{\"160\":1}}],[\"medium\",{\"1\":{\"54\":1,\"856\":1}}],[\"medical\",{\"1\":{\"48\":1}}],[\"markov\",{\"1\":{\"905\":1}}],[\"marching\",{\"1\":{\"277\":2}}],[\"malloc\",{\"1\":{\"623\":1,\"712\":1}}],[\"mammal\",{\"1\":{\"429\":1}}],[\"mammalia\",{\"1\":{\"429\":1}}],[\"master\",{\"1\":{\"429\":1}}],[\"masking\",{\"0\":{\"320\":1,\"321\":1},\"1\":{\"314\":2,\"321\":2}}],[\"masks\",{\"1\":{\"202\":1,\"321\":1,\"422\":2}}],[\"masked\",{\"0\":{\"266\":1,\"384\":1},\"1\":{\"201\":1,\"266\":1,\"272\":2,\"273\":2}}],[\"mask\",{\"0\":{\"418\":1},\"1\":{\"52\":1,\"54\":6,\"55\":2,\"195\":1,\"200\":2,\"201\":1,\"202\":3,\"228\":1,\"314\":1,\"321\":1,\"366\":2,\"377\":1,\"392\":1,\"395\":2,\"402\":1,\"419\":2,\"837\":1,\"888\":1,\"940\":1,\"945\":3}}],[\"makes\",{\"1\":{\"309\":1}}],[\"making\",{\"1\":{\"305\":1,\"344\":1}}],[\"mae\",{\"1\":{\"273\":1,\"319\":1}}],[\"manipulation\",{\"1\":{\"862\":1}}],[\"manipulating\",{\"1\":{\"426\":1}}],[\"manifold\",{\"1\":{\"303\":4}}],[\"many\",{\"1\":{\"261\":1}}],[\"manner\",{\"1\":{\"195\":1}}],[\"mao\",{\"1\":{\"223\":1}}],[\"macarons\",{\"0\":{\"271\":1},\"1\":{\"271\":1}}],[\"macc\",{\"1\":{\"214\":3,\"229\":1}}],[\"machine\",{\"1\":{\"44\":1,\"959\":1}}],[\"main\",{\"0\":{\"583\":1},\"1\":{\"168\":2,\"524\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"535\":1,\"538\":1,\"539\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":1,\"545\":1,\"583\":11,\"595\":1,\"599\":1,\"600\":1,\"601\":1,\"605\":1,\"606\":1,\"612\":2,\"615\":1,\"620\":1,\"621\":1,\"624\":1,\"666\":1,\"671\":1,\"690\":1,\"695\":1,\"698\":2,\"709\":1,\"713\":1,\"718\":1,\"721\":1,\"722\":7,\"724\":1,\"729\":1,\"745\":3,\"759\":1,\"769\":1,\"781\":4,\"825\":1,\"830\":2}}],[\"ma\",{\"1\":{\"126\":4}}],[\"magazine\",{\"1\":{\"104\":2}}],[\"mathcal\",{\"1\":{\"905\":1}}],[\"matmul\",{\"0\":{\"851\":1}}],[\"matplotlib\",{\"1\":{\"838\":1}}],[\"materials\",{\"1\":{\"340\":2}}],[\"matlab\",{\"1\":{\"184\":1,\"342\":1}}],[\"matching\",{\"1\":{\"195\":1,\"904\":3}}],[\"match\",{\"1\":{\"137\":8,\"138\":4,\"913\":1}}],[\"matrix\",{\"1\":{\"102\":9}}],[\"matting\",{\"1\":{\"55\":1}}],[\"mapping\",{\"0\":{\"959\":1},\"1\":{\"271\":2,\"422\":1,\"958\":2,\"959\":2,\"961\":1,\"963\":1}}],[\"map50\",{\"1\":{\"192\":2}}],[\"map12\",{\"1\":{\"104\":5}}],[\"maps\",{\"1\":{\"104\":10,\"380\":2,\"410\":1,\"884\":3}}],[\"map\",{\"0\":{\"544\":1,\"545\":1,\"882\":1},\"1\":{\"49\":1,\"51\":1,\"54\":1,\"100\":5,\"102\":1,\"104\":6,\"114\":11,\"137\":4,\"138\":2,\"139\":2,\"199\":1,\"214\":1,\"297\":1,\"359\":1,\"361\":3,\"366\":2,\"370\":2,\"410\":1,\"500\":1,\"544\":7,\"545\":15,\"563\":1,\"834\":7,\"838\":2,\"846\":1,\"880\":1,\"881\":1,\"882\":1,\"883\":3,\"884\":1,\"891\":2}}],[\"may\",{\"1\":{\"42\":1,\"188\":1}}],[\"maxi2\",{\"1\":{\"451\":1}}],[\"maxout\",{\"0\":{\"444\":1},\"1\":{\"449\":2}}],[\"maxsubarray\",{\"1\":{\"153\":1}}],[\"maxslidingwindow\",{\"1\":{\"107\":1}}],[\"maxpooling\",{\"1\":{\"223\":1}}],[\"maxpos\",{\"1\":{\"152\":4}}],[\"maxprofit\",{\"1\":{\"148\":1}}],[\"maxchilderndepth\",{\"1\":{\"74\":4}}],[\"maxdepth\",{\"1\":{\"73\":4,\"74\":2,\"90\":8}}],[\"max\",{\"1\":{\"10\":1,\"19\":2,\"73\":1,\"74\":1,\"75\":1,\"81\":1,\"87\":8,\"90\":3,\"100\":5,\"137\":2,\"139\":2,\"148\":1,\"152\":2,\"220\":2,\"225\":2,\"228\":1,\"309\":1,\"312\":1,\"399\":2,\"574\":1,\"589\":1,\"595\":6,\"598\":2,\"599\":6,\"600\":5,\"601\":9,\"615\":3,\"650\":1,\"654\":1,\"676\":3,\"738\":1,\"740\":2,\"781\":6,\"808\":2,\"929\":3}}],[\"moving\",{\"1\":{\"891\":2}}],[\"move\",{\"1\":{\"172\":2,\"548\":1}}],[\"moved\",{\"1\":{\"43\":1,\"476\":1}}],[\"monte\",{\"1\":{\"905\":1}}],[\"month\",{\"1\":{\"606\":5,\"637\":1,\"757\":1}}],[\"mon\",{\"1\":{\"755\":7}}],[\"money\",{\"1\":{\"665\":1}}],[\"more\",{\"0\":{\"369\":1,\"385\":1,\"944\":1},\"1\":{\"369\":1,\"385\":1,\"422\":2,\"424\":3,\"427\":1,\"428\":1,\"944\":1}}],[\"morton\",{\"1\":{\"314\":1,\"315\":3,\"318\":2}}],[\"mostly\",{\"1\":{\"261\":1}}],[\"motion\",{\"0\":{\"955\":1},\"1\":{\"897\":1}}],[\"motivation\",{\"0\":{\"257\":1}}],[\"mothn\",{\"1\":{\"54\":2}}],[\"mo\",{\"1\":{\"220\":1}}],[\"mobaxterm\",{\"0\":{\"183\":1},\"1\":{\"164\":1,\"186\":3}}],[\"mozilla\",{\"1\":{\"41\":2}}],[\"modified\",{\"1\":{\"476\":1}}],[\"modulation\",{\"1\":{\"372\":1}}],[\"modules\",{\"1\":{\"877\":1}}],[\"module\",{\"0\":{\"854\":1},\"1\":{\"304\":1,\"314\":1,\"344\":1,\"854\":1,\"855\":1,\"877\":1}}],[\"mode\",{\"1\":{\"834\":2}}],[\"modeset\",{\"1\":{\"191\":1}}],[\"modeling\",{\"0\":{\"895\":1},\"1\":{\"895\":1,\"910\":1,\"911\":1}}],[\"models\",{\"0\":{\"866\":1,\"904\":1,\"938\":1,\"940\":1,\"942\":1,\"950\":1,\"951\":1,\"953\":1},\"1\":{\"304\":1,\"305\":1,\"340\":2,\"344\":1,\"360\":1,\"427\":2,\"856\":1,\"862\":1,\"888\":1,\"901\":2,\"904\":1,\"910\":1,\"911\":1,\"912\":3,\"922\":1,\"938\":1,\"940\":1,\"951\":1,\"953\":1}}],[\"modelnet10\",{\"1\":{\"229\":2}}],[\"modelnet\",{\"1\":{\"220\":1}}],[\"model\",{\"0\":{\"279\":1,\"911\":1},\"1\":{\"48\":1,\"344\":1,\"375\":1,\"422\":1,\"453\":1,\"840\":3,\"846\":18,\"864\":1,\"865\":1,\"867\":1,\"868\":2,\"904\":1,\"913\":1,\"921\":1,\"924\":1,\"929\":3,\"935\":1}}],[\"modprobe\",{\"1\":{\"191\":1}}],[\"mod\",{\"1\":{\"16\":2}}],[\"mum\",{\"1\":{\"757\":1}}],[\"mutil\",{\"1\":{\"262\":1}}],[\"mutex\",{\"0\":{\"526\":1,\"527\":1},\"1\":{\"24\":4,\"25\":2,\"27\":5,\"514\":1,\"527\":4,\"528\":8,\"529\":14,\"530\":7,\"531\":6,\"532\":3}}],[\"multiprocessing\",{\"1\":{\"845\":1}}],[\"multiple\",{\"1\":{\"314\":1,\"748\":1}}],[\"multiply\",{\"1\":{\"202\":1}}],[\"multitask\",{\"1\":{\"427\":2}}],[\"multi\",{\"0\":{\"286\":1},\"1\":{\"232\":1,\"261\":1,\"272\":2,\"359\":2,\"372\":1,\"426\":1,\"952\":1}}],[\"mukewang\",{\"1\":{\"41\":1}}],[\"msa\",{\"0\":{\"383\":1,\"384\":1},\"1\":{\"380\":4}}],[\"msemaxi2\",{\"1\":{\"451\":1}}],[\"mse\",{\"1\":{\"270\":1,\"451\":2,\"854\":1,\"855\":1,\"910\":1}}],[\"msie\",{\"1\":{\"41\":1}}],[\"ms\",{\"1\":{\"20\":2,\"422\":4}}],[\"m\",{\"1\":{\"8\":2,\"27\":8,\"54\":2,\"137\":6,\"170\":3,\"174\":2,\"202\":1,\"242\":1,\"254\":2,\"284\":3,\"317\":1,\"321\":2,\"334\":3,\"350\":2,\"370\":2,\"394\":1,\"395\":1,\"451\":2,\"524\":2,\"532\":2,\"589\":1,\"599\":3,\"605\":2,\"606\":4,\"654\":5,\"682\":1,\"713\":1,\"722\":1,\"758\":1,\"874\":2,\"927\":3,\"928\":1,\"929\":1,\"945\":2}}],[\"函数库\",{\"1\":{\"626\":1}}],[\"函数参数\",{\"0\":{\"586\":1,\"710\":1,\"762\":1},\"1\":{\"589\":2,\"600\":1,\"710\":2,\"722\":1,\"762\":1,\"769\":1}}],[\"函数指针\",{\"1\":{\"44\":1}}],[\"函数调用\",{\"0\":{\"588\":1},\"1\":{\"25\":1,\"583\":2,\"589\":2,\"590\":1,\"595\":4,\"596\":1,\"597\":1,\"599\":2,\"600\":1,\"609\":3,\"611\":1,\"612\":4,\"621\":1,\"687\":1,\"705\":1,\"710\":1,\"722\":4,\"729\":3,\"769\":1,\"811\":1,\"816\":1}}],[\"函数\",{\"0\":{\"37\":1,\"285\":1,\"338\":1,\"420\":1,\"434\":1,\"447\":1,\"449\":1,\"506\":1,\"511\":1,\"535\":1,\"539\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":1,\"555\":1,\"574\":1,\"580\":1,\"582\":1,\"583\":1,\"584\":1,\"585\":1,\"587\":1,\"590\":1,\"591\":1,\"592\":1,\"593\":1,\"596\":2,\"597\":1,\"598\":1,\"599\":1,\"600\":1,\"601\":1,\"604\":1,\"605\":2,\"606\":1,\"687\":1,\"688\":1,\"689\":1,\"690\":1,\"699\":1,\"705\":1,\"706\":1,\"707\":2,\"708\":1,\"722\":1,\"735\":1,\"740\":1,\"742\":1,\"745\":1,\"746\":1,\"763\":1,\"764\":1,\"765\":1,\"767\":1,\"768\":1,\"771\":1,\"779\":1,\"847\":1,\"853\":1,\"854\":1,\"855\":1,\"918\":1},\"1\":{\"8\":3,\"13\":1,\"19\":2,\"20\":4,\"22\":2,\"23\":4,\"24\":4,\"25\":7,\"27\":4,\"30\":11,\"37\":8,\"38\":5,\"46\":2,\"102\":1,\"104\":1,\"105\":1,\"210\":1,\"220\":2,\"222\":11,\"225\":1,\"226\":1,\"228\":2,\"248\":1,\"284\":1,\"303\":1,\"304\":2,\"322\":1,\"323\":1,\"348\":1,\"349\":1,\"354\":2,\"371\":1,\"372\":1,\"377\":1,\"392\":1,\"399\":8,\"446\":2,\"449\":3,\"509\":1,\"510\":1,\"511\":3,\"525\":2,\"529\":1,\"530\":4,\"532\":2,\"534\":8,\"535\":4,\"539\":3,\"544\":1,\"545\":4,\"546\":1,\"559\":2,\"565\":1,\"566\":1,\"568\":1,\"570\":1,\"571\":1,\"574\":5,\"577\":3,\"581\":5,\"582\":1,\"583\":22,\"584\":7,\"585\":5,\"586\":2,\"587\":9,\"589\":9,\"590\":23,\"591\":3,\"592\":4,\"594\":2,\"595\":11,\"596\":2,\"597\":10,\"598\":24,\"599\":20,\"600\":17,\"601\":15,\"602\":3,\"604\":7,\"605\":10,\"606\":17,\"607\":4,\"609\":9,\"610\":2,\"611\":6,\"612\":14,\"614\":1,\"615\":4,\"619\":3,\"620\":14,\"621\":8,\"623\":4,\"625\":3,\"638\":2,\"642\":1,\"659\":1,\"668\":1,\"671\":3,\"675\":4,\"676\":1,\"686\":1,\"687\":2,\"688\":4,\"689\":5,\"690\":5,\"695\":1,\"701\":2,\"703\":4,\"705\":5,\"706\":6,\"707\":21,\"708\":13,\"709\":2,\"710\":3,\"712\":2,\"713\":1,\"714\":1,\"717\":8,\"718\":3,\"719\":3,\"720\":2,\"721\":1,\"722\":37,\"724\":2,\"729\":8,\"732\":4,\"735\":27,\"736\":8,\"737\":1,\"740\":2,\"741\":4,\"744\":4,\"745\":31,\"748\":1,\"749\":1,\"750\":9,\"756\":1,\"757\":1,\"762\":3,\"766\":7,\"767\":5,\"768\":2,\"769\":88,\"770\":9,\"775\":1,\"778\":1,\"781\":8,\"782\":4,\"793\":6,\"794\":1,\"816\":2,\"826\":6,\"827\":2,\"828\":1,\"830\":6,\"839\":2,\"848\":1,\"854\":6,\"855\":4,\"869\":1,\"901\":1,\"902\":1,\"904\":3,\"917\":1,\"959\":1}}],[\"数位\",{\"1\":{\"923\":1}}],[\"数百个\",{\"1\":{\"864\":1,\"922\":1}}],[\"数百万个\",{\"1\":{\"245\":1}}],[\"数是\",{\"1\":{\"676\":1}}],[\"数为\",{\"1\":{\"645\":1}}],[\"数符\",{\"1\":{\"645\":1}}],[\"数字证书\",{\"1\":{\"484\":1,\"485\":1}}],[\"数字\",{\"1\":{\"113\":2,\"139\":1,\"535\":1,\"642\":2,\"645\":2,\"648\":1,\"657\":2,\"781\":1,\"801\":2,\"811\":1,\"837\":1,\"841\":1}}],[\"数里\",{\"1\":{\"112\":1}}],[\"数学\",{\"1\":{\"103\":1,\"347\":1,\"602\":1,\"855\":1,\"884\":1}}],[\"数目\",{\"1\":{\"38\":4,\"223\":1,\"562\":1}}],[\"数量级\",{\"1\":{\"228\":1,\"325\":1}}],[\"数量\",{\"0\":{\"542\":1},\"1\":{\"38\":1,\"110\":1,\"112\":2,\"137\":2,\"201\":1,\"203\":1,\"210\":1,\"218\":1,\"229\":1,\"246\":1,\"290\":1,\"308\":1,\"322\":1,\"366\":1,\"370\":2,\"372\":2,\"384\":1,\"386\":1,\"390\":1,\"394\":1,\"395\":2,\"429\":1,\"436\":1,\"537\":1,\"817\":1,\"874\":1,\"883\":1,\"884\":1,\"922\":1,\"927\":1,\"929\":2}}],[\"数值数据\",{\"1\":{\"785\":1}}],[\"数值\",{\"0\":{\"641\":1,\"799\":1},\"1\":{\"23\":1,\"77\":2,\"107\":8,\"209\":1,\"357\":1,\"587\":1,\"612\":1,\"632\":2,\"633\":3,\"640\":1,\"681\":1,\"759\":1,\"804\":2,\"810\":2,\"811\":2}}],[\"数\",{\"1\":{\"8\":1,\"88\":1,\"104\":1,\"126\":4,\"293\":1,\"349\":1,\"399\":1,\"595\":1,\"633\":1,\"642\":4,\"648\":1,\"665\":1,\"712\":1,\"713\":1,\"811\":4,\"848\":1}}],[\"数组名\",{\"1\":{\"685\":3,\"688\":2,\"689\":1,\"690\":2,\"693\":2}}],[\"数组\",{\"0\":{\"102\":1,\"143\":1,\"153\":1,\"552\":1,\"678\":1,\"679\":1,\"680\":1,\"685\":1,\"696\":1,\"730\":1,\"759\":1},\"1\":{\"8\":1,\"38\":2,\"71\":1,\"85\":2,\"96\":6,\"100\":3,\"102\":5,\"104\":2,\"114\":1,\"116\":1,\"122\":1,\"125\":1,\"126\":1,\"223\":1,\"504\":1,\"537\":4,\"538\":1,\"548\":1,\"563\":1,\"573\":2,\"574\":1,\"619\":1,\"638\":4,\"639\":3,\"675\":3,\"676\":5,\"680\":3,\"681\":1,\"682\":6,\"683\":7,\"684\":7,\"685\":4,\"687\":5,\"688\":12,\"689\":2,\"690\":6,\"691\":1,\"693\":1,\"695\":1,\"696\":7,\"697\":1,\"698\":3,\"712\":4,\"713\":3,\"719\":2,\"730\":13,\"745\":1,\"759\":3,\"769\":1,\"781\":5,\"824\":2}}],[\"数据编码\",{\"1\":{\"922\":1}}],[\"数据文件\",{\"1\":{\"785\":2}}],[\"数据项\",{\"1\":{\"756\":1}}],[\"数据共享\",{\"0\":{\"509\":1},\"1\":{\"743\":1,\"744\":1}}],[\"数据类型\",{\"0\":{\"504\":1,\"630\":1,\"631\":1,\"675\":1,\"754\":1},\"1\":{\"504\":1,\"581\":1,\"611\":1,\"665\":1,\"691\":1,\"734\":1,\"737\":1,\"744\":1,\"756\":1,\"787\":1,\"837\":1}}],[\"数据分布\",{\"1\":{\"259\":1,\"577\":1,\"901\":1,\"902\":1,\"904\":1,\"905\":1,\"912\":2,\"916\":2,\"920\":1,\"941\":1}}],[\"数据格式\",{\"1\":{\"246\":1,\"787\":1,\"788\":1}}],[\"数据流\",{\"1\":{\"211\":1,\"790\":1}}],[\"数据处理\",{\"1\":{\"204\":1}}],[\"数据量\",{\"1\":{\"193\":1,\"843\":1,\"845\":1,\"858\":1}}],[\"数据结构\",{\"1\":{\"72\":1,\"193\":1,\"577\":1,\"714\":1}}],[\"数据包\",{\"1\":{\"44\":1}}],[\"数据\",{\"0\":{\"213\":1,\"227\":1,\"269\":1,\"341\":1,\"342\":1,\"421\":1,\"455\":1,\"466\":1,\"467\":1,\"470\":1,\"515\":1,\"579\":1,\"719\":1,\"734\":1,\"762\":1,\"778\":1,\"836\":1,\"842\":1,\"915\":1},\"1\":{\"4\":1,\"10\":1,\"11\":1,\"13\":9,\"15\":1,\"16\":3,\"17\":7,\"19\":2,\"25\":2,\"29\":1,\"30\":4,\"31\":2,\"32\":5,\"34\":1,\"36\":1,\"38\":1,\"39\":4,\"41\":5,\"44\":1,\"46\":1,\"54\":1,\"65\":1,\"192\":1,\"194\":2,\"198\":1,\"208\":1,\"211\":1,\"218\":1,\"219\":1,\"220\":1,\"222\":1,\"226\":1,\"227\":1,\"229\":4,\"237\":1,\"242\":1,\"246\":6,\"249\":1,\"254\":1,\"257\":4,\"259\":8,\"261\":1,\"262\":2,\"263\":1,\"268\":2,\"301\":1,\"304\":2,\"306\":1,\"312\":1,\"315\":3,\"316\":1,\"317\":1,\"318\":2,\"319\":2,\"320\":5,\"325\":1,\"342\":5,\"355\":4,\"357\":2,\"370\":2,\"377\":2,\"380\":1,\"423\":2,\"425\":1,\"428\":1,\"436\":2,\"437\":1,\"451\":7,\"456\":1,\"457\":2,\"463\":2,\"467\":2,\"469\":1,\"471\":1,\"476\":3,\"480\":3,\"485\":2,\"492\":2,\"509\":1,\"512\":1,\"525\":1,\"543\":1,\"546\":4,\"574\":1,\"577\":1,\"584\":2,\"586\":2,\"605\":2,\"606\":5,\"607\":1,\"609\":1,\"610\":2,\"611\":1,\"612\":1,\"621\":2,\"633\":1,\"663\":1,\"665\":2,\"668\":1,\"675\":4,\"676\":1,\"680\":1,\"698\":1,\"701\":4,\"703\":2,\"708\":2,\"713\":2,\"715\":3,\"716\":1,\"717\":3,\"718\":2,\"719\":3,\"722\":1,\"724\":3,\"726\":1,\"734\":6,\"736\":2,\"743\":1,\"744\":5,\"745\":3,\"748\":1,\"749\":2,\"750\":1,\"755\":1,\"756\":1,\"759\":1,\"766\":1,\"769\":4,\"775\":3,\"781\":4,\"782\":2,\"784\":2,\"785\":4,\"787\":2,\"788\":1,\"790\":2,\"791\":2,\"793\":5,\"798\":1,\"799\":1,\"801\":1,\"804\":1,\"809\":1,\"810\":5,\"825\":4,\"826\":4,\"827\":1,\"830\":3,\"832\":1,\"843\":3,\"845\":2,\"858\":3,\"859\":1,\"860\":1,\"875\":3,\"891\":1,\"902\":3,\"904\":3,\"909\":1,\"913\":1,\"915\":2,\"920\":1,\"923\":1,\"924\":1,\"925\":3,\"926\":1,\"928\":2,\"929\":1,\"935\":2,\"938\":1,\"941\":1,\"951\":1,\"957\":7,\"958\":1,\"959\":3}}],[\"数据库\",{\"0\":{\"9\":1,\"10\":1,\"463\":1},\"1\":{\"3\":2,\"10\":9,\"29\":1,\"464\":1}}],[\"_\",{\"0\":{\"530\":1,\"531\":1,\"532\":1,\"545\":1,\"546\":1,\"555\":1,\"562\":1,\"578\":1},\"1\":{\"8\":7,\"10\":18,\"16\":4,\"17\":2,\"19\":5,\"23\":6,\"24\":8,\"25\":8,\"27\":19,\"28\":3,\"30\":1,\"32\":5,\"38\":5,\"39\":6,\"44\":27,\"46\":3,\"51\":1,\"53\":1,\"54\":24,\"70\":1,\"71\":3,\"72\":21,\"75\":7,\"82\":18,\"85\":16,\"86\":16,\"87\":4,\"99\":2,\"100\":10,\"102\":6,\"103\":22,\"104\":17,\"105\":8,\"107\":5,\"112\":3,\"113\":3,\"114\":4,\"115\":3,\"116\":3,\"118\":4,\"119\":13,\"121\":4,\"122\":3,\"123\":4,\"125\":3,\"126\":3,\"128\":1,\"137\":6,\"138\":3,\"139\":2,\"152\":3,\"153\":1,\"165\":2,\"168\":1,\"174\":1,\"179\":2,\"182\":5,\"184\":3,\"186\":5,\"189\":2,\"191\":3,\"197\":2,\"209\":6,\"276\":2,\"282\":1,\"292\":1,\"298\":2,\"303\":2,\"304\":30,\"305\":39,\"309\":1,\"317\":1,\"318\":1,\"338\":1,\"342\":1,\"344\":43,\"350\":1,\"356\":1,\"359\":2,\"366\":1,\"371\":1,\"375\":1,\"377\":2,\"399\":1,\"401\":2,\"406\":1,\"411\":1,\"429\":1,\"457\":1,\"458\":3,\"460\":1,\"461\":2,\"462\":1,\"467\":2,\"468\":5,\"469\":7,\"471\":4,\"503\":1,\"528\":11,\"529\":15,\"530\":13,\"531\":15,\"532\":12,\"534\":5,\"535\":4,\"536\":2,\"539\":6,\"540\":6,\"541\":7,\"542\":2,\"543\":2,\"544\":4,\"545\":17,\"546\":6,\"547\":1,\"548\":7,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"554\":1,\"559\":3,\"562\":1,\"572\":3,\"574\":7,\"577\":2,\"578\":2,\"650\":2,\"657\":1,\"664\":7,\"665\":5,\"666\":13,\"690\":9,\"717\":2,\"732\":8,\"735\":4,\"749\":1,\"755\":3,\"781\":10,\"801\":4,\"811\":1,\"834\":5,\"835\":6,\"837\":3,\"838\":11,\"840\":11,\"841\":1,\"845\":19,\"846\":44,\"848\":2,\"849\":9,\"852\":2,\"854\":18,\"855\":3,\"859\":34,\"868\":25,\"872\":1,\"875\":1,\"877\":25,\"887\":1,\"902\":1,\"905\":2,\"909\":1,\"911\":1,\"929\":20,\"953\":1,\"957\":3,\"959\":1}}],[\"见到\",{\"1\":{\"606\":1}}],[\"见上图\",{\"1\":{\"373\":1}}],[\"见\",{\"0\":{\"707\":1},\"1\":{\"8\":1,\"49\":1,\"100\":1,\"299\":1,\"307\":1,\"620\":1,\"761\":1,\"793\":1,\"928\":1,\"935\":1}}],[\"释放\",{\"0\":{\"714\":1},\"1\":{\"8\":1,\"10\":3,\"19\":2,\"22\":1,\"35\":1,\"529\":4,\"530\":2,\"531\":2,\"586\":1,\"609\":6,\"611\":3,\"612\":4,\"677\":2,\"714\":5,\"722\":7,\"744\":2,\"825\":1}}],[\"执行\",{\"0\":{\"626\":1},\"1\":{\"8\":3,\"10\":1,\"20\":2,\"23\":1,\"25\":1,\"30\":5,\"34\":2,\"35\":1,\"43\":1,\"97\":1,\"126\":1,\"137\":1,\"160\":1,\"171\":1,\"174\":1,\"192\":1,\"222\":2,\"224\":1,\"227\":1,\"500\":1,\"525\":1,\"528\":2,\"529\":1,\"530\":1,\"531\":1,\"583\":1,\"584\":1,\"585\":2,\"586\":1,\"587\":1,\"599\":1,\"609\":4,\"611\":1,\"613\":1,\"621\":1,\"626\":1,\"659\":1,\"701\":1,\"707\":1,\"708\":2,\"712\":1,\"713\":1,\"714\":5,\"717\":5,\"722\":4,\"800\":1,\"806\":1,\"813\":1,\"816\":1,\"817\":2,\"818\":8,\"819\":2,\"833\":2}}],[\"把握\",{\"1\":{\"863\":1}}],[\"把\",{\"1\":{\"8\":1,\"13\":1,\"17\":3,\"19\":1,\"25\":1,\"35\":1,\"44\":1,\"55\":1,\"85\":2,\"97\":2,\"99\":1,\"100\":1,\"112\":1,\"116\":1,\"126\":1,\"137\":1,\"148\":1,\"165\":1,\"175\":2,\"203\":1,\"210\":1,\"293\":1,\"300\":1,\"304\":1,\"357\":2,\"379\":5,\"380\":2,\"384\":1,\"398\":1,\"399\":1,\"480\":1,\"524\":2,\"590\":1,\"597\":1,\"598\":1,\"599\":1,\"611\":1,\"615\":1,\"621\":1,\"668\":1,\"682\":1,\"690\":1,\"698\":1,\"701\":4,\"710\":1,\"713\":1,\"714\":1,\"717\":1,\"735\":1,\"736\":1,\"739\":1,\"744\":2,\"748\":1,\"750\":2,\"755\":2,\"769\":2,\"770\":1,\"781\":3,\"785\":1,\"787\":2,\"801\":1,\"807\":1,\"816\":1,\"824\":1,\"826\":1,\"828\":1,\"852\":1,\"875\":1,\"887\":1,\"944\":1}}],[\"后置\",{\"1\":{\"813\":1}}],[\"后移\",{\"1\":{\"793\":1,\"827\":1,\"829\":4,\"830\":1}}],[\"后才行\",{\"1\":{\"769\":1}}],[\"后会\",{\"1\":{\"750\":1}}],[\"后析构\",{\"1\":{\"722\":1}}],[\"后要\",{\"1\":{\"529\":1}}],[\"后端\",{\"1\":{\"476\":1}}],[\"后者\",{\"1\":{\"332\":1,\"874\":2}}],[\"后处理\",{\"0\":{\"296\":1},\"1\":{\"237\":1,\"245\":1}}],[\"后继\",{\"1\":{\"97\":3}}],[\"后序\",{\"1\":{\"70\":1,\"71\":1,\"80\":1,\"86\":8,\"89\":1,\"90\":1}}],[\"后缀\",{\"0\":{\"163\":1},\"1\":{\"66\":1,\"106\":1}}],[\"后面\",{\"1\":{\"41\":1,\"42\":2,\"49\":1,\"82\":1,\"105\":1,\"175\":1,\"242\":1,\"249\":1,\"311\":1,\"380\":2,\"529\":1,\"606\":1,\"642\":1,\"644\":2,\"649\":1,\"676\":1,\"684\":1,\"687\":1,\"730\":1,\"738\":2,\"740\":1,\"749\":1,\"757\":1,\"801\":2,\"807\":1,\"818\":1,\"826\":2,\"828\":1,\"830\":1,\"882\":1,\"958\":1}}],[\"后续\",{\"1\":{\"17\":1,\"103\":1,\"174\":1,\"315\":2,\"316\":1,\"322\":4,\"323\":1,\"379\":1,\"476\":1,\"884\":1}}],[\"后\",{\"0\":{\"143\":1},\"1\":{\"8\":2,\"10\":1,\"13\":3,\"17\":1,\"19\":2,\"30\":3,\"34\":1,\"35\":1,\"39\":1,\"40\":1,\"46\":1,\"55\":2,\"100\":1,\"103\":3,\"104\":1,\"107\":1,\"174\":1,\"175\":1,\"184\":3,\"191\":2,\"198\":1,\"201\":2,\"209\":2,\"228\":1,\"246\":1,\"282\":1,\"283\":1,\"290\":2,\"292\":2,\"300\":1,\"304\":1,\"314\":3,\"315\":1,\"316\":1,\"320\":1,\"322\":1,\"323\":1,\"332\":1,\"337\":1,\"348\":1,\"355\":1,\"370\":1,\"372\":1,\"380\":2,\"391\":3,\"399\":2,\"413\":1,\"416\":1,\"417\":1,\"458\":1,\"529\":1,\"530\":3,\"531\":1,\"539\":2,\"576\":1,\"609\":1,\"612\":2,\"658\":3,\"670\":1,\"687\":2,\"695\":1,\"722\":1,\"769\":6,\"780\":1,\"806\":1,\"813\":1,\"825\":1,\"827\":1,\"828\":2,\"833\":1,\"854\":1,\"857\":1,\"860\":1,\"864\":1,\"901\":1,\"904\":3,\"929\":2,\"938\":7,\"939\":1,\"940\":7,\"951\":5,\"957\":1,\"958\":1,\"962\":1}}],[\"好看\",{\"1\":{\"875\":1}}],[\"好处\",{\"1\":{\"355\":1,\"379\":1,\"745\":1,\"949\":1}}],[\"好\",{\"1\":{\"8\":1,\"13\":3,\"35\":1,\"55\":1,\"89\":1,\"170\":1,\"209\":1,\"218\":1,\"222\":1,\"257\":1,\"262\":1,\"273\":1,\"329\":1,\"334\":1,\"369\":1,\"379\":1,\"398\":1,\"411\":1,\"451\":1,\"485\":1,\"527\":1,\"621\":1,\"863\":2,\"907\":1,\"928\":1,\"929\":4,\"957\":1}}],[\"完美\",{\"1\":{\"875\":1,\"902\":1}}],[\"完会\",{\"1\":{\"165\":1}}],[\"完毕\",{\"1\":{\"71\":2,\"609\":1,\"611\":1,\"722\":1,\"729\":1}}],[\"完后\",{\"1\":{\"39\":1,\"44\":1,\"825\":1}}],[\"完整版\",{\"1\":{\"921\":1}}],[\"完整性\",{\"1\":{\"342\":1,\"485\":2}}],[\"完整\",{\"1\":{\"13\":1,\"119\":1,\"282\":1,\"342\":2,\"386\":1,\"590\":1,\"729\":1,\"845\":1,\"940\":1}}],[\"完善\",{\"1\":{\"13\":2}}],[\"完\",{\"1\":{\"8\":1,\"13\":2,\"35\":1,\"39\":1,\"46\":1,\"70\":1,\"85\":2,\"112\":1,\"782\":1,\"818\":1,\"825\":1}}],[\"完全一致\",{\"1\":{\"910\":1}}],[\"完全相同\",{\"1\":{\"600\":1,\"701\":1,\"725\":1,\"728\":1}}],[\"完全\",{\"0\":{\"80\":1,\"462\":1},\"1\":{\"8\":1,\"34\":1,\"35\":1,\"55\":1,\"69\":1,\"80\":1,\"225\":1,\"310\":1,\"322\":1,\"462\":2,\"673\":1,\"721\":1,\"858\":1,\"906\":1,\"938\":1,\"944\":1,\"951\":1}}],[\"完成\",{\"0\":{\"855\":1},\"1\":{\"3\":1,\"13\":3,\"29\":1,\"30\":3,\"31\":1,\"33\":1,\"43\":1,\"44\":1,\"103\":2,\"209\":1,\"246\":1,\"254\":1,\"307\":1,\"384\":1,\"392\":1,\"413\":1,\"426\":1,\"528\":1,\"529\":2,\"563\":1,\"589\":1,\"659\":1,\"701\":1,\"714\":1,\"722\":1,\"724\":1,\"816\":1,\"826\":1,\"855\":1,\"860\":1,\"957\":1}}],[\"被\",{\"1\":{\"8\":3,\"10\":2,\"16\":1,\"20\":3,\"25\":1,\"28\":2,\"30\":1,\"32\":1,\"35\":1,\"38\":1,\"39\":3,\"40\":1,\"43\":3,\"51\":1,\"53\":1,\"55\":1,\"85\":1,\"94\":1,\"97\":6,\"103\":1,\"126\":5,\"175\":1,\"192\":1,\"201\":1,\"202\":1,\"209\":1,\"220\":1,\"222\":4,\"223\":2,\"225\":7,\"226\":1,\"227\":2,\"228\":1,\"242\":1,\"246\":1,\"257\":1,\"261\":1,\"282\":1,\"290\":1,\"308\":2,\"312\":1,\"314\":3,\"315\":2,\"316\":1,\"318\":1,\"320\":1,\"322\":3,\"342\":1,\"354\":1,\"355\":2,\"366\":1,\"379\":1,\"386\":2,\"390\":1,\"391\":1,\"392\":1,\"395\":3,\"398\":2,\"404\":1,\"415\":1,\"419\":1,\"423\":1,\"436\":1,\"437\":2,\"485\":1,\"527\":1,\"537\":1,\"544\":2,\"546\":1,\"559\":3,\"563\":2,\"583\":1,\"584\":1,\"586\":1,\"587\":1,\"590\":1,\"596\":3,\"597\":2,\"598\":1,\"599\":1,\"600\":3,\"603\":1,\"606\":1,\"612\":1,\"617\":4,\"620\":3,\"652\":2,\"654\":1,\"661\":1,\"671\":1,\"687\":1,\"688\":2,\"698\":1,\"701\":1,\"703\":4,\"705\":1,\"707\":2,\"717\":1,\"720\":2,\"722\":3,\"728\":1,\"729\":2,\"736\":2,\"738\":2,\"744\":2,\"748\":1,\"752\":7,\"766\":1,\"769\":6,\"770\":3,\"781\":1,\"810\":1,\"811\":1,\"827\":1,\"830\":1,\"843\":1,\"845\":1,\"849\":1,\"852\":1,\"859\":1,\"865\":1,\"882\":1,\"907\":1,\"935\":1,\"939\":1,\"940\":4}}],[\"在内\",{\"1\":{\"690\":1}}],[\"在此之前\",{\"1\":{\"606\":1}}],[\"在体\",{\"1\":{\"222\":1}}],[\"在实践中\",{\"1\":{\"202\":1,\"246\":1}}],[\"在我看来\",{\"1\":{\"174\":1}}],[\"在线\",{\"1\":{\"52\":1,\"165\":1}}],[\"在析构\",{\"1\":{\"22\":1}}],[\"在\",{\"0\":{\"615\":1,\"616\":1,\"706\":1,\"740\":1,\"846\":1,\"852\":1,\"915\":1},\"1\":{\"8\":2,\"10\":4,\"13\":4,\"17\":3,\"20\":3,\"22\":2,\"27\":1,\"28\":3,\"30\":1,\"31\":2,\"32\":1,\"34\":2,\"35\":1,\"36\":2,\"38\":3,\"39\":2,\"41\":1,\"43\":1,\"44\":2,\"50\":1,\"51\":2,\"53\":4,\"54\":2,\"55\":2,\"70\":2,\"72\":3,\"85\":1,\"86\":1,\"87\":1,\"91\":2,\"94\":1,\"97\":4,\"100\":1,\"103\":3,\"105\":3,\"106\":2,\"122\":1,\"123\":1,\"126\":6,\"128\":1,\"137\":4,\"153\":1,\"168\":1,\"171\":1,\"172\":1,\"174\":2,\"175\":1,\"184\":3,\"191\":1,\"192\":4,\"194\":2,\"195\":1,\"198\":3,\"199\":1,\"200\":3,\"201\":2,\"202\":1,\"209\":3,\"210\":4,\"211\":1,\"218\":1,\"220\":3,\"222\":13,\"223\":6,\"224\":1,\"225\":6,\"226\":4,\"227\":4,\"228\":7,\"229\":2,\"234\":1,\"242\":3,\"245\":1,\"246\":5,\"248\":1,\"254\":6,\"257\":5,\"259\":4,\"261\":2,\"262\":1,\"268\":1,\"270\":1,\"282\":5,\"283\":3,\"284\":3,\"288\":2,\"290\":5,\"291\":1,\"298\":2,\"299\":4,\"300\":1,\"303\":2,\"304\":3,\"305\":1,\"306\":3,\"307\":2,\"308\":3,\"310\":1,\"311\":1,\"312\":7,\"313\":1,\"314\":4,\"315\":1,\"316\":1,\"319\":2,\"320\":2,\"321\":1,\"322\":5,\"323\":1,\"325\":3,\"332\":3,\"334\":1,\"337\":1,\"338\":1,\"342\":4,\"348\":3,\"349\":2,\"354\":1,\"355\":8,\"356\":1,\"357\":6,\"358\":1,\"359\":1,\"366\":1,\"369\":1,\"370\":3,\"371\":1,\"372\":7,\"373\":1,\"379\":10,\"380\":3,\"390\":1,\"391\":4,\"392\":3,\"394\":2,\"398\":6,\"399\":2,\"400\":2,\"401\":1,\"402\":1,\"404\":1,\"406\":1,\"408\":1,\"410\":1,\"411\":2,\"412\":2,\"413\":1,\"416\":1,\"419\":7,\"423\":2,\"436\":1,\"437\":2,\"449\":2,\"451\":2,\"459\":1,\"465\":2,\"467\":1,\"468\":1,\"471\":3,\"476\":3,\"480\":3,\"484\":2,\"485\":1,\"492\":4,\"500\":1,\"509\":1,\"522\":1,\"524\":1,\"525\":1,\"527\":3,\"528\":2,\"529\":1,\"530\":3,\"532\":1,\"534\":3,\"535\":1,\"537\":1,\"540\":2,\"545\":4,\"559\":2,\"566\":1,\"570\":1,\"572\":2,\"577\":3,\"581\":2,\"583\":5,\"584\":1,\"585\":1,\"589\":3,\"590\":5,\"591\":1,\"592\":1,\"594\":1,\"595\":7,\"597\":3,\"598\":10,\"599\":6,\"600\":2,\"604\":2,\"605\":1,\"606\":9,\"607\":1,\"609\":6,\"610\":2,\"611\":6,\"612\":13,\"613\":2,\"614\":2,\"615\":2,\"616\":3,\"617\":4,\"619\":1,\"620\":13,\"621\":7,\"623\":1,\"633\":1,\"635\":2,\"637\":1,\"639\":1,\"650\":1,\"652\":1,\"656\":1,\"659\":2,\"661\":2,\"665\":1,\"666\":2,\"667\":1,\"671\":3,\"672\":2,\"676\":6,\"682\":1,\"684\":2,\"688\":1,\"690\":1,\"692\":2,\"694\":1,\"696\":2,\"697\":1,\"698\":2,\"701\":5,\"704\":3,\"706\":2,\"707\":8,\"708\":3,\"709\":3,\"710\":2,\"713\":2,\"714\":7,\"715\":2,\"717\":11,\"718\":7,\"719\":3,\"720\":3,\"721\":6,\"722\":18,\"724\":1,\"725\":1,\"726\":1,\"729\":6,\"730\":8,\"732\":4,\"734\":3,\"735\":3,\"736\":2,\"738\":3,\"739\":2,\"740\":2,\"741\":5,\"743\":1,\"744\":11,\"745\":8,\"748\":3,\"749\":3,\"750\":7,\"751\":2,\"755\":4,\"756\":1,\"758\":1,\"762\":1,\"766\":4,\"767\":2,\"768\":1,\"769\":14,\"770\":5,\"775\":2,\"776\":3,\"780\":1,\"781\":8,\"782\":1,\"784\":1,\"785\":6,\"788\":2,\"789\":2,\"793\":7,\"800\":2,\"801\":1,\"804\":2,\"805\":1,\"806\":1,\"807\":1,\"813\":1,\"814\":1,\"816\":1,\"817\":2,\"818\":3,\"825\":2,\"826\":1,\"828\":2,\"829\":11,\"830\":7,\"833\":4,\"835\":1,\"836\":1,\"837\":1,\"839\":2,\"840\":1,\"843\":2,\"845\":2,\"852\":3,\"854\":1,\"858\":2,\"859\":4,\"860\":2,\"863\":2,\"864\":2,\"875\":1,\"882\":2,\"887\":1,\"889\":1,\"893\":1,\"904\":1,\"906\":2,\"907\":1,\"910\":2,\"915\":1,\"916\":2,\"917\":1,\"922\":5,\"923\":1,\"925\":1,\"926\":1,\"928\":7,\"929\":3,\"935\":2,\"938\":2,\"940\":9,\"941\":1,\"945\":1,\"952\":3,\"953\":4,\"955\":2,\"957\":2,\"959\":2,\"960\":1,\"961\":1,\"962\":1,\"963\":1}}],[\"在于\",{\"1\":{\"5\":1,\"49\":1,\"86\":1,\"288\":1,\"380\":1,\"386\":1,\"390\":1,\"502\":1,\"529\":1,\"540\":1,\"546\":1,\"781\":1,\"864\":1,\"922\":1,\"947\":1,\"958\":1}}],[\"这项\",{\"1\":{\"955\":1}}],[\"这碗\",{\"1\":{\"535\":1}}],[\"这点\",{\"1\":{\"480\":1}}],[\"这对\",{\"1\":{\"480\":1}}],[\"这条\",{\"1\":{\"471\":1}}],[\"这类\",{\"1\":{\"402\":1,\"611\":1,\"737\":1,\"875\":1}}],[\"这么\",{\"1\":{\"379\":1,\"530\":1,\"862\":1,\"875\":1}}],[\"这会\",{\"1\":{\"372\":1}}],[\"这使\",{\"1\":{\"277\":1}}],[\"这篇\",{\"1\":{\"257\":1,\"359\":1,\"379\":2,\"938\":1,\"940\":1,\"951\":1}}],[\"这是\",{\"1\":{\"257\":1,\"325\":1,\"766\":1,\"781\":1}}],[\"这次\",{\"1\":{\"210\":1,\"529\":1}}],[\"这张\",{\"1\":{\"209\":1}}],[\"这棵\",{\"1\":{\"86\":2,\"126\":1}}],[\"这一\",{\"1\":{\"28\":1,\"198\":1,\"299\":1,\"390\":1,\"949\":1}}],[\"这时\",{\"1\":{\"20\":1,\"607\":1,\"612\":2,\"617\":1,\"729\":1,\"740\":1,\"794\":1}}],[\"这时候\",{\"1\":{\"19\":1,\"85\":1,\"379\":1,\"744\":1}}],[\"这套\",{\"1\":{\"13\":1}}],[\"这里\",{\"1\":{\"13\":1,\"32\":1,\"33\":1,\"70\":1,\"80\":1,\"82\":2,\"85\":1,\"87\":1,\"96\":1,\"97\":1,\"99\":2,\"103\":2,\"104\":3,\"105\":1,\"112\":1,\"115\":1,\"122\":1,\"126\":1,\"146\":1,\"191\":1,\"209\":1,\"229\":1,\"259\":1,\"319\":1,\"322\":1,\"349\":1,\"380\":1,\"399\":1,\"419\":1,\"529\":1,\"532\":1,\"585\":1,\"605\":2,\"698\":2,\"704\":1,\"717\":1,\"724\":1,\"745\":1,\"757\":1,\"818\":1,\"827\":1,\"852\":1,\"922\":1,\"928\":2,\"929\":1,\"958\":1}}],[\"这个\",{\"0\":{\"34\":1},\"1\":{\"13\":1,\"15\":1,\"17\":1,\"20\":2,\"25\":1,\"30\":3,\"38\":2,\"55\":1,\"70\":1,\"82\":1,\"85\":4,\"89\":1,\"93\":1,\"126\":1,\"128\":1,\"137\":2,\"175\":1,\"209\":1,\"210\":5,\"245\":1,\"259\":2,\"270\":1,\"273\":1,\"282\":1,\"291\":1,\"293\":1,\"303\":1,\"314\":1,\"315\":1,\"316\":1,\"320\":2,\"322\":1,\"347\":2,\"357\":1,\"379\":4,\"380\":1,\"384\":1,\"399\":1,\"412\":3,\"416\":1,\"437\":2,\"467\":1,\"500\":1,\"527\":1,\"530\":1,\"532\":1,\"559\":2,\"573\":1,\"575\":1,\"583\":1,\"600\":2,\"604\":1,\"676\":1,\"714\":1,\"736\":1,\"738\":1,\"755\":1,\"781\":1,\"826\":1,\"846\":1,\"860\":1,\"863\":1,\"882\":1,\"884\":1,\"887\":1,\"902\":3,\"904\":2,\"929\":2,\"939\":1,\"940\":4,\"944\":1,\"958\":1,\"959\":2,\"961\":1}}],[\"这样的话\",{\"1\":{\"480\":1}}],[\"这样\",{\"1\":{\"10\":1,\"13\":1,\"20\":1,\"89\":1,\"94\":1,\"104\":1,\"107\":1,\"112\":1,\"114\":1,\"126\":2,\"137\":2,\"168\":1,\"191\":1,\"192\":1,\"263\":1,\"282\":1,\"292\":1,\"303\":1,\"304\":1,\"306\":1,\"315\":1,\"319\":1,\"348\":1,\"356\":1,\"380\":1,\"419\":1,\"437\":1,\"522\":1,\"524\":1,\"528\":1,\"530\":1,\"590\":1,\"598\":1,\"599\":1,\"606\":1,\"667\":1,\"671\":1,\"710\":1,\"713\":1,\"714\":2,\"738\":1,\"739\":1,\"745\":1,\"767\":1,\"794\":1,\"829\":1,\"863\":1,\"864\":1,\"922\":1,\"929\":1,\"952\":1,\"959\":1}}],[\"这些\",{\"1\":{\"10\":1,\"19\":1,\"28\":1,\"49\":1,\"52\":1,\"53\":1,\"126\":2,\"137\":1,\"138\":1,\"192\":2,\"195\":1,\"197\":1,\"199\":2,\"209\":2,\"216\":1,\"217\":3,\"218\":2,\"220\":1,\"222\":1,\"223\":2,\"225\":2,\"226\":1,\"227\":2,\"228\":2,\"232\":1,\"233\":2,\"234\":2,\"235\":2,\"237\":2,\"245\":3,\"246\":4,\"248\":1,\"254\":1,\"283\":1,\"299\":1,\"311\":1,\"314\":1,\"315\":1,\"318\":1,\"320\":1,\"322\":1,\"323\":1,\"342\":1,\"379\":1,\"380\":1,\"390\":3,\"393\":1,\"398\":1,\"404\":1,\"423\":1,\"425\":1,\"492\":2,\"500\":3,\"601\":2,\"611\":1,\"619\":1,\"620\":2,\"682\":1,\"695\":1,\"707\":1,\"714\":1,\"717\":1,\"720\":1,\"724\":1,\"750\":1,\"769\":2,\"910\":1,\"959\":3}}],[\"这\",{\"1\":{\"8\":2,\"10\":1,\"13\":1,\"20\":1,\"30\":3,\"35\":1,\"52\":2,\"53\":1,\"70\":1,\"72\":2,\"85\":2,\"86\":2,\"126\":1,\"153\":1,\"174\":1,\"175\":1,\"202\":1,\"210\":3,\"218\":1,\"242\":1,\"254\":1,\"259\":1,\"260\":1,\"261\":1,\"263\":2,\"270\":1,\"273\":1,\"282\":1,\"283\":1,\"303\":1,\"307\":1,\"308\":1,\"312\":1,\"314\":2,\"322\":2,\"355\":4,\"356\":1,\"357\":3,\"370\":1,\"371\":1,\"372\":2,\"379\":2,\"380\":2,\"392\":1,\"404\":1,\"409\":1,\"411\":1,\"413\":1,\"469\":1,\"530\":1,\"535\":1,\"601\":1,\"676\":2,\"691\":1,\"720\":1,\"738\":1,\"744\":1,\"745\":1,\"769\":1,\"781\":1,\"793\":1,\"829\":1,\"859\":1,\"860\":1,\"863\":1,\"922\":1,\"925\":1,\"935\":1,\"939\":1,\"940\":1,\"959\":1,\"960\":1}}],[\"这组\",{\"1\":{\"8\":1,\"35\":1}}],[\"这种\",{\"1\":{\"5\":1,\"10\":2,\"19\":1,\"30\":1,\"72\":2,\"85\":2,\"98\":1,\"116\":1,\"246\":1,\"312\":1,\"320\":2,\"337\":1,\"349\":2,\"355\":1,\"370\":1,\"372\":1,\"379\":3,\"384\":1,\"419\":1,\"502\":1,\"527\":1,\"530\":1,\"559\":2,\"590\":1,\"599\":1,\"609\":1,\"617\":1,\"620\":1,\"672\":1,\"701\":1,\"704\":1,\"708\":1,\"714\":1,\"715\":1,\"750\":1,\"762\":1,\"770\":1,\"787\":1,\"824\":1,\"825\":1,\"852\":1,\"857\":1,\"859\":1,\"863\":2,\"864\":1,\"887\":1,\"902\":1,\"904\":1,\"926\":1,\"949\":1,\"962\":1}}],[\"资源\",{\"1\":{\"8\":7,\"19\":2,\"22\":6,\"35\":6,\"41\":3,\"43\":4,\"476\":9}}],[\"一轮\",{\"1\":{\"843\":1}}],[\"一串\",{\"1\":{\"835\":1}}],[\"一侧\",{\"1\":{\"814\":1}}],[\"一批\",{\"1\":{\"788\":1,\"859\":1}}],[\"一一列举\",{\"1\":{\"755\":1}}],[\"一一对应\",{\"1\":{\"589\":1}}],[\"一代\",{\"1\":{\"748\":2}}],[\"一份\",{\"1\":{\"744\":2}}],[\"一例\",{\"1\":{\"719\":1}}],[\"一句\",{\"1\":{\"714\":1,\"904\":1}}],[\"一目了然\",{\"1\":{\"635\":1}}],[\"一物\",{\"1\":{\"601\":1}}],[\"一段\",{\"1\":{\"563\":1,\"572\":2,\"708\":1,\"713\":1,\"714\":1,\"782\":2,\"957\":1}}],[\"一段时间\",{\"1\":{\"30\":2}}],[\"一切正常\",{\"1\":{\"476\":1}}],[\"一章\",{\"1\":{\"467\":1}}],[\"一级\",{\"1\":{\"446\":1}}],[\"一类\",{\"1\":{\"416\":1,\"701\":1,\"708\":1,\"738\":1,\"766\":1,\"769\":8}}],[\"一共\",{\"1\":{\"416\":1}}],[\"一帧\",{\"1\":{\"406\":1}}],[\"一模一样\",{\"1\":{\"380\":1,\"451\":1}}],[\"一方面\",{\"1\":{\"356\":1,\"357\":1}}],[\"一摞\",{\"1\":{\"293\":1}}],[\"一页\",{\"1\":{\"292\":1}}],[\"一列\",{\"1\":{\"292\":1,\"859\":1}}],[\"一位\",{\"1\":{\"290\":1,\"837\":1}}],[\"一对\",{\"1\":{\"268\":1,\"713\":1}}],[\"一对一\",{\"1\":{\"202\":1}}],[\"一块\",{\"1\":{\"263\":1,\"419\":1,\"656\":1}}],[\"一项\",{\"1\":{\"217\":1,\"273\":1}}],[\"一张\",{\"1\":{\"210\":1,\"290\":2,\"294\":1,\"379\":1,\"398\":1,\"404\":1,\"860\":2,\"880\":1,\"922\":1,\"940\":1}}],[\"一系列\",{\"1\":{\"201\":1,\"209\":1,\"227\":1,\"248\":1,\"268\":1,\"308\":1,\"398\":1,\"835\":1,\"901\":1,\"938\":1,\"951\":1,\"959\":1}}],[\"一半\",{\"1\":{\"198\":1}}],[\"一致性\",{\"1\":{\"246\":2,\"298\":1,\"312\":1,\"893\":1}}],[\"一致\",{\"1\":{\"192\":1,\"194\":1,\"246\":1,\"290\":1,\"298\":1,\"529\":1,\"587\":1,\"590\":1,\"612\":1,\"804\":1,\"858\":1,\"935\":1,\"940\":2}}],[\"一都\",{\"1\":{\"191\":1}}],[\"一点\",{\"1\":{\"170\":1,\"312\":1,\"925\":1}}],[\"一遍\",{\"1\":{\"138\":1,\"191\":1}}],[\"一题\",{\"1\":{\"103\":1}}],[\"一维\",{\"1\":{\"102\":1,\"208\":1,\"220\":1,\"315\":1,\"318\":1,\"537\":1,\"675\":1,\"690\":1,\"864\":1}}],[\"一颗\",{\"1\":{\"86\":1}}],[\"一下\",{\"1\":{\"86\":1,\"186\":1,\"259\":1,\"348\":1,\"419\":1,\"530\":2,\"532\":1,\"607\":1,\"760\":1,\"844\":1}}],[\"一条\",{\"1\":{\"85\":2,\"318\":1,\"658\":1,\"901\":1}}],[\"一样\",{\"1\":{\"72\":2,\"103\":1,\"126\":5,\"312\":1,\"344\":1,\"371\":1,\"379\":2,\"380\":1,\"416\":1,\"480\":1,\"484\":1,\"563\":1,\"567\":1,\"601\":1,\"704\":1,\"708\":1,\"709\":1,\"735\":1,\"744\":1,\"745\":1,\"766\":1,\"781\":1,\"785\":1,\"817\":1,\"849\":1,\"854\":1,\"874\":1,\"922\":1,\"930\":2}}],[\"一层\",{\"1\":{\"70\":2,\"72\":7,\"77\":1,\"123\":1,\"201\":1,\"223\":2,\"225\":1,\"227\":4,\"312\":1,\"769\":1,\"958\":2}}],[\"一起\",{\"1\":{\"54\":1,\"153\":1,\"284\":1,\"355\":1,\"465\":1,\"701\":1,\"805\":1,\"830\":2,\"868\":1}}],[\"一部分\",{\"1\":{\"38\":1,\"41\":1,\"174\":1,\"263\":1,\"321\":1,\"355\":1,\"390\":1,\"476\":1,\"595\":2,\"609\":1,\"647\":1,\"701\":1,\"745\":2,\"750\":2,\"923\":1}}],[\"一棵树\",{\"0\":{\"79\":1}}],[\"一棵\",{\"1\":{\"38\":1,\"86\":6,\"93\":1,\"96\":2}}],[\"一般\",{\"0\":{\"589\":1},\"1\":{\"36\":1,\"38\":1,\"50\":1,\"69\":1,\"110\":1,\"160\":1,\"165\":1,\"191\":1,\"349\":1,\"351\":1,\"451\":1,\"459\":1,\"471\":1,\"525\":1,\"584\":1,\"590\":1,\"597\":1,\"600\":1,\"606\":1,\"607\":1,\"612\":1,\"613\":1,\"615\":1,\"621\":1,\"639\":1,\"651\":1,\"663\":1,\"665\":1,\"668\":1,\"671\":1,\"703\":1,\"707\":2,\"708\":1,\"712\":1,\"717\":1,\"718\":1,\"719\":1,\"725\":2,\"726\":2,\"732\":1,\"734\":1,\"735\":1,\"739\":1,\"740\":1,\"744\":1,\"745\":1,\"749\":1,\"750\":1,\"762\":1,\"784\":1,\"788\":1,\"793\":2,\"798\":1,\"801\":2,\"807\":1,\"816\":1,\"837\":1,\"875\":1,\"903\":1,\"959\":1}}],[\"一旦\",{\"1\":{\"30\":1,\"55\":1,\"126\":1,\"153\":1,\"195\":1,\"436\":1}}],[\"一节\",{\"1\":{\"30\":1,\"332\":1}}],[\"一步步\",{\"1\":{\"906\":1,\"913\":1}}],[\"一步到位\",{\"1\":{\"799\":1}}],[\"一步\",{\"1\":{\"30\":2,\"106\":1,\"210\":2,\"260\":1,\"283\":1,\"290\":1,\"294\":1,\"417\":1,\"828\":1,\"906\":2,\"922\":1,\"938\":1,\"939\":1,\"940\":4,\"944\":1,\"951\":1}}],[\"一\",{\"1\":{\"23\":1,\"71\":1,\"104\":1,\"174\":1,\"293\":1,\"318\":1,\"350\":1,\"393\":1,\"545\":1,\"590\":1,\"616\":1,\"862\":2,\"903\":1}}],[\"一种\",{\"0\":{\"834\":1},\"1\":{\"23\":1,\"25\":1,\"44\":3,\"53\":1,\"94\":1,\"128\":1,\"199\":2,\"218\":4,\"220\":1,\"222\":1,\"223\":3,\"225\":5,\"226\":3,\"227\":2,\"228\":4,\"229\":1,\"245\":1,\"246\":1,\"272\":1,\"308\":1,\"312\":1,\"313\":1,\"315\":2,\"319\":1,\"320\":1,\"323\":1,\"325\":1,\"370\":1,\"379\":2,\"390\":1,\"393\":2,\"394\":1,\"398\":2,\"402\":3,\"451\":1,\"476\":1,\"492\":2,\"527\":1,\"545\":1,\"609\":1,\"668\":1,\"691\":1,\"701\":1,\"703\":1,\"704\":1,\"705\":1,\"715\":1,\"717\":1,\"744\":1,\"769\":2,\"793\":1,\"824\":1,\"832\":1,\"864\":1,\"891\":1,\"902\":1,\"904\":1,\"910\":1,\"913\":1,\"926\":1,\"935\":1,\"955\":1}}],[\"一次性\",{\"1\":{\"39\":1,\"366\":1,\"415\":1,\"542\":1}}],[\"一次\",{\"1\":{\"20\":1,\"25\":1,\"27\":1,\"39\":1,\"53\":1,\"54\":3,\"55\":1,\"85\":3,\"103\":1,\"113\":1,\"126\":8,\"152\":2,\"384\":1,\"528\":1,\"606\":1,\"612\":6,\"683\":1,\"685\":1,\"703\":1,\"717\":2,\"722\":1,\"748\":1,\"852\":1,\"873\":1,\"882\":1,\"940\":1,\"962\":1}}],[\"一直\",{\"1\":{\"19\":1}}],[\"一套\",{\"1\":{\"13\":1}}],[\"一行\",{\"1\":{\"10\":1,\"72\":1,\"128\":1,\"469\":1,\"625\":1,\"735\":1,\"738\":1,\"741\":1,\"781\":3,\"859\":1}}],[\"一些\",{\"1\":{\"10\":1,\"42\":1,\"69\":1,\"168\":1,\"228\":1,\"250\":1,\"254\":2,\"312\":1,\"357\":1,\"379\":1,\"386\":3,\"480\":1,\"529\":1,\"536\":1,\"613\":1,\"722\":1,\"735\":1,\"816\":1,\"855\":3,\"893\":1,\"910\":1,\"923\":1,\"939\":1,\"944\":1}}],[\"一定\",{\"1\":{\"8\":1,\"20\":1,\"51\":1,\"55\":1,\"85\":1,\"97\":1,\"110\":3,\"126\":1,\"153\":1,\"259\":1,\"342\":2,\"392\":1,\"413\":1,\"451\":3,\"465\":1,\"589\":1,\"676\":1,\"691\":1,\"701\":1,\"730\":1,\"732\":1,\"745\":1,\"816\":1,\"887\":1,\"938\":1,\"951\":1}}],[\"一线\",{\"1\":{\"8\":1}}],[\"一组\",{\"1\":{\"8\":1,\"35\":1,\"38\":1,\"192\":1,\"195\":1,\"217\":1,\"220\":1,\"222\":1,\"225\":1,\"228\":1,\"246\":1,\"257\":1,\"314\":1,\"411\":1,\"492\":3,\"701\":2,\"890\":1}}],[\"一个多\",{\"1\":{\"864\":1}}],[\"一个个\",{\"1\":{\"864\":1}}],[\"一个头\",{\"1\":{\"825\":1}}],[\"一个三维\",{\"1\":{\"223\":1,\"280\":1,\"284\":2}}],[\"一个点\",{\"1\":{\"55\":1,\"220\":1,\"223\":1,\"244\":1,\"260\":2,\"268\":1,\"307\":1,\"314\":2,\"322\":1,\"334\":1}}],[\"一个\",{\"0\":{\"179\":1,\"594\":1,\"615\":1,\"637\":2,\"639\":1,\"842\":2},\"1\":{\"4\":1,\"5\":4,\"8\":3,\"10\":8,\"11\":1,\"19\":2,\"20\":1,\"22\":1,\"23\":1,\"26\":1,\"28\":4,\"30\":3,\"32\":1,\"35\":1,\"36\":2,\"38\":2,\"39\":5,\"46\":1,\"52\":1,\"54\":1,\"70\":1,\"71\":4,\"72\":6,\"75\":1,\"82\":1,\"85\":2,\"86\":1,\"93\":2,\"95\":1,\"96\":1,\"100\":3,\"103\":4,\"104\":1,\"110\":2,\"122\":1,\"126\":5,\"128\":2,\"137\":3,\"139\":2,\"152\":1,\"153\":4,\"172\":1,\"192\":2,\"193\":7,\"194\":3,\"199\":1,\"201\":1,\"202\":2,\"211\":2,\"217\":5,\"218\":1,\"220\":7,\"222\":2,\"223\":4,\"225\":6,\"226\":2,\"227\":2,\"228\":4,\"242\":2,\"246\":1,\"247\":2,\"254\":1,\"257\":2,\"262\":1,\"280\":3,\"281\":2,\"282\":1,\"283\":1,\"284\":1,\"288\":1,\"290\":5,\"293\":3,\"298\":1,\"299\":3,\"301\":1,\"304\":3,\"305\":1,\"306\":2,\"307\":1,\"308\":3,\"309\":1,\"310\":4,\"314\":3,\"315\":2,\"317\":1,\"318\":1,\"322\":1,\"344\":5,\"347\":3,\"355\":1,\"357\":1,\"364\":1,\"369\":2,\"370\":2,\"374\":1,\"379\":8,\"380\":10,\"390\":2,\"391\":1,\"392\":2,\"394\":1,\"398\":5,\"399\":2,\"402\":1,\"404\":4,\"406\":2,\"408\":3,\"409\":1,\"411\":1,\"412\":1,\"419\":1,\"436\":1,\"437\":1,\"451\":2,\"461\":1,\"467\":2,\"469\":2,\"476\":1,\"492\":2,\"500\":1,\"502\":4,\"524\":3,\"527\":2,\"528\":1,\"529\":4,\"530\":2,\"534\":5,\"537\":1,\"538\":5,\"539\":6,\"540\":4,\"541\":3,\"545\":6,\"559\":5,\"561\":1,\"563\":1,\"564\":1,\"570\":1,\"573\":4,\"574\":4,\"575\":4,\"582\":2,\"583\":6,\"587\":2,\"589\":2,\"590\":2,\"591\":2,\"592\":1,\"594\":1,\"595\":4,\"597\":2,\"598\":2,\"599\":1,\"600\":4,\"601\":4,\"604\":1,\"606\":7,\"607\":4,\"609\":2,\"612\":3,\"613\":1,\"615\":1,\"616\":3,\"617\":2,\"620\":2,\"621\":3,\"634\":2,\"635\":1,\"637\":1,\"639\":1,\"642\":3,\"647\":2,\"649\":4,\"652\":2,\"663\":2,\"664\":1,\"665\":5,\"666\":1,\"667\":1,\"668\":2,\"669\":2,\"671\":1,\"673\":1,\"675\":5,\"676\":8,\"683\":1,\"684\":7,\"685\":2,\"688\":12,\"689\":2,\"691\":3,\"693\":1,\"696\":7,\"697\":2,\"698\":4,\"701\":10,\"707\":2,\"708\":2,\"709\":3,\"710\":1,\"712\":8,\"713\":9,\"714\":10,\"715\":2,\"717\":4,\"718\":1,\"720\":7,\"721\":5,\"722\":11,\"724\":1,\"725\":2,\"726\":2,\"728\":2,\"729\":6,\"730\":7,\"732\":2,\"735\":5,\"736\":2,\"738\":3,\"739\":1,\"740\":2,\"741\":4,\"744\":2,\"745\":3,\"748\":13,\"749\":1,\"750\":3,\"751\":1,\"755\":3,\"756\":2,\"757\":1,\"758\":2,\"759\":1,\"769\":8,\"775\":4,\"781\":5,\"785\":6,\"787\":1,\"790\":2,\"791\":1,\"793\":18,\"801\":3,\"806\":1,\"807\":1,\"810\":1,\"814\":3,\"816\":1,\"818\":7,\"825\":11,\"826\":10,\"827\":2,\"828\":8,\"829\":6,\"830\":15,\"833\":1,\"834\":1,\"839\":1,\"843\":2,\"845\":1,\"854\":3,\"859\":5,\"864\":3,\"865\":1,\"867\":1,\"868\":1,\"887\":2,\"896\":1,\"901\":1,\"902\":3,\"904\":2,\"906\":2,\"909\":1,\"913\":1,\"917\":2,\"922\":3,\"923\":1,\"925\":1,\"928\":6,\"929\":4,\"935\":1,\"938\":2,\"940\":1,\"941\":5,\"944\":1,\"947\":2,\"951\":2,\"952\":2,\"953\":1,\"957\":6,\"958\":1,\"961\":1,\"963\":3}}],[\".\",{\"0\":{\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"166\":2,\"196\":1,\"848\":1,\"849\":1,\"850\":1,\"851\":1,\"854\":1},\"1\":{\"8\":5,\"10\":1,\"11\":1,\"22\":1,\"23\":2,\"24\":2,\"25\":4,\"26\":1,\"34\":1,\"35\":4,\"41\":13,\"48\":1,\"52\":3,\"53\":1,\"54\":6,\"55\":1,\"69\":1,\"70\":2,\"71\":24,\"72\":75,\"73\":7,\"75\":7,\"81\":1,\"82\":17,\"84\":7,\"85\":14,\"86\":13,\"87\":7,\"90\":10,\"94\":4,\"95\":3,\"96\":1,\"97\":3,\"99\":7,\"100\":20,\"102\":8,\"103\":3,\"104\":39,\"105\":39,\"106\":29,\"107\":16,\"112\":7,\"113\":4,\"114\":6,\"115\":4,\"116\":7,\"118\":8,\"119\":13,\"121\":6,\"122\":7,\"123\":11,\"125\":6,\"126\":11,\"128\":4,\"137\":17,\"138\":8,\"139\":3,\"142\":6,\"143\":4,\"146\":3,\"148\":1,\"152\":2,\"160\":1,\"163\":3,\"166\":3,\"172\":1,\"174\":5,\"175\":3,\"188\":8,\"189\":4,\"191\":19,\"195\":8,\"201\":1,\"202\":1,\"205\":1,\"208\":3,\"212\":1,\"229\":1,\"232\":1,\"249\":1,\"255\":1,\"256\":1,\"261\":3,\"273\":1,\"276\":1,\"277\":2,\"282\":6,\"299\":1,\"301\":2,\"303\":2,\"304\":20,\"305\":19,\"309\":12,\"312\":2,\"313\":1,\"314\":5,\"321\":3,\"340\":2,\"344\":47,\"358\":1,\"359\":6,\"360\":2,\"361\":7,\"366\":1,\"367\":1,\"369\":1,\"370\":1,\"371\":6,\"372\":3,\"375\":1,\"380\":3,\"383\":4,\"385\":2,\"392\":2,\"406\":1,\"411\":1,\"422\":11,\"423\":1,\"424\":5,\"425\":1,\"426\":7,\"427\":10,\"428\":5,\"429\":5,\"437\":1,\"446\":2,\"449\":3,\"453\":1,\"462\":1,\"465\":1,\"473\":1,\"503\":1,\"524\":2,\"528\":5,\"529\":13,\"530\":15,\"531\":15,\"534\":14,\"536\":3,\"537\":1,\"539\":9,\"540\":14,\"541\":7,\"542\":10,\"543\":5,\"544\":2,\"545\":7,\"548\":2,\"551\":2,\"556\":1,\"557\":1,\"558\":1,\"559\":12,\"560\":1,\"561\":6,\"562\":1,\"565\":1,\"566\":1,\"567\":1,\"568\":1,\"573\":3,\"574\":19,\"575\":6,\"576\":10,\"605\":5,\"606\":5,\"617\":2,\"626\":7,\"645\":1,\"671\":1,\"686\":1,\"692\":1,\"704\":12,\"709\":12,\"717\":1,\"718\":2,\"722\":2,\"724\":2,\"726\":3,\"732\":6,\"734\":3,\"735\":1,\"736\":1,\"744\":2,\"745\":3,\"757\":4,\"758\":3,\"759\":4,\"760\":7,\"766\":1,\"769\":2,\"781\":44,\"782\":3,\"785\":3,\"793\":11,\"794\":5,\"811\":3,\"813\":1,\"825\":9,\"830\":6,\"833\":2,\"834\":5,\"835\":7,\"836\":3,\"837\":2,\"838\":9,\"840\":8,\"841\":2,\"845\":9,\"846\":25,\"848\":3,\"849\":7,\"852\":1,\"854\":4,\"855\":6,\"856\":1,\"859\":6,\"860\":2,\"862\":4,\"864\":1,\"868\":9,\"869\":6,\"875\":2,\"876\":1,\"877\":23,\"884\":1,\"887\":2,\"888\":1,\"889\":5,\"891\":2,\"894\":1,\"895\":1,\"896\":3,\"897\":3,\"901\":2,\"905\":2,\"910\":6,\"911\":1,\"913\":3,\"921\":2,\"922\":1,\"926\":1,\"929\":9,\"936\":1,\"938\":3,\"945\":3,\"947\":1,\"950\":3,\"951\":3,\"956\":1,\"958\":1}}],[\"浪费\",{\"1\":{\"8\":1,\"19\":1,\"20\":1,\"35\":1,\"69\":1,\"165\":1,\"370\":1,\"677\":1}}],[\"换句话\",{\"1\":{\"941\":1}}],[\"换句话说\",{\"1\":{\"347\":1,\"940\":1}}],[\"换个\",{\"1\":{\"875\":1}}],[\"换用\",{\"1\":{\"837\":1}}],[\"换行\",{\"1\":{\"648\":1}}],[\"换行符\",{\"1\":{\"174\":2,\"775\":1}}],[\"换成\",{\"1\":{\"600\":1,\"639\":1,\"781\":1,\"887\":1}}],[\"换言之\",{\"1\":{\"355\":1}}],[\"换取\",{\"1\":{\"8\":1,\"35\":1}}],[\"换\",{\"1\":{\"8\":1,\"35\":1}}],[\"？\",{\"0\":{\"8\":1,\"13\":1,\"16\":2,\"17\":1,\"480\":1,\"484\":1,\"485\":1,\"852\":1,\"916\":1},\"1\":{\"30\":1,\"72\":1,\"81\":1,\"82\":1,\"85\":2,\"89\":1,\"99\":1,\"103\":1,\"104\":1,\"118\":1,\"126\":1,\"137\":1,\"146\":1,\"169\":1,\"174\":1,\"191\":3,\"208\":1,\"261\":3,\"270\":3,\"273\":1,\"304\":2,\"309\":1,\"347\":1,\"366\":1,\"401\":1,\"419\":1,\"457\":1,\"464\":1,\"465\":1,\"485\":1,\"509\":1,\"530\":1,\"563\":1,\"577\":1,\"589\":1,\"606\":1,\"612\":2,\"615\":1,\"621\":2,\"654\":2,\"666\":7,\"667\":3,\"686\":1,\"688\":3,\"690\":3,\"721\":3,\"722\":1,\"726\":1,\"766\":2,\"769\":4,\"798\":2,\"852\":1,\"863\":1,\"864\":4,\"867\":1,\"884\":1}}],[\"要素\",{\"1\":{\"701\":1}}],[\"要轻\",{\"1\":{\"446\":1}}],[\"要分\",{\"1\":{\"411\":1}}],[\"要么\",{\"1\":{\"379\":3}}],[\"要少\",{\"1\":{\"218\":1}}],[\"要取\",{\"1\":{\"146\":1}}],[\"要算\",{\"1\":{\"112\":1}}],[\"要弹\",{\"1\":{\"107\":1}}],[\"要加\",{\"1\":{\"105\":1,\"745\":1,\"920\":1}}],[\"要用\",{\"1\":{\"103\":1,\"707\":1,\"793\":1}}],[\"要是\",{\"1\":{\"89\":1,\"701\":1}}],[\"要求\",{\"1\":{\"30\":1,\"137\":1,\"202\":1,\"218\":1,\"583\":1,\"589\":2,\"606\":1,\"621\":1,\"684\":1,\"693\":1,\"695\":1,\"696\":1,\"707\":1,\"735\":1,\"744\":1,\"745\":1,\"750\":2}}],[\"要\",{\"0\":{\"8\":1,\"916\":1},\"1\":{\"8\":1,\"10\":1,\"13\":1,\"17\":1,\"39\":1,\"41\":3,\"42\":1,\"43\":2,\"85\":1,\"97\":4,\"105\":1,\"112\":1,\"118\":1,\"121\":1,\"122\":1,\"126\":2,\"137\":1,\"170\":1,\"193\":1,\"291\":1,\"293\":1,\"307\":1,\"379\":1,\"449\":1,\"465\":1,\"476\":1,\"529\":1,\"534\":2,\"546\":1,\"583\":1,\"585\":1,\"605\":1,\"609\":1,\"613\":1,\"616\":1,\"673\":1,\"676\":1,\"690\":2,\"698\":2,\"710\":1,\"717\":1,\"720\":1,\"722\":1,\"730\":1,\"735\":1,\"741\":1,\"745\":3,\"756\":1,\"769\":1,\"782\":1,\"785\":1,\"791\":1,\"828\":9,\"829\":6,\"830\":13,\"835\":1,\"849\":2,\"889\":1,\"920\":1,\"922\":3,\"929\":2,\"958\":1,\"959\":1}}],[\"要考\",{\"1\":{\"5\":1,\"502\":1}}],[\"唯一\",{\"1\":{\"5\":1,\"86\":8,\"137\":1,\"204\":1,\"502\":1,\"545\":1,\"546\":1,\"814\":1}}],[\"私有\",{\"1\":{\"5\":1,\"36\":2,\"502\":1,\"604\":2,\"605\":3,\"606\":5,\"607\":1,\"612\":2,\"703\":2,\"734\":1,\"745\":1,\"749\":2,\"752\":5}}],[\"私有化\",{\"1\":{\"5\":1,\"502\":1}}],[\"；\",{\"1\":{\"5\":1,\"15\":2,\"23\":2,\"29\":2,\"42\":1,\"64\":1,\"69\":1,\"105\":1,\"126\":2,\"174\":2,\"191\":2,\"210\":2,\"211\":3,\"221\":1,\"290\":1,\"294\":1,\"301\":4,\"304\":3,\"338\":1,\"356\":1,\"357\":2,\"359\":1,\"370\":2,\"371\":1,\"372\":2,\"379\":1,\"391\":3,\"392\":2,\"402\":1,\"411\":1,\"465\":3,\"502\":1,\"527\":2,\"529\":1,\"535\":8,\"544\":1,\"545\":1,\"546\":2,\"556\":1,\"577\":2,\"581\":1,\"585\":4,\"589\":1,\"590\":2,\"600\":2,\"607\":1,\"619\":4,\"654\":1,\"663\":1,\"664\":1,\"668\":2,\"670\":1,\"673\":1,\"702\":1,\"709\":1,\"713\":2,\"717\":1,\"718\":1,\"729\":1,\"730\":1,\"744\":2,\"745\":1,\"776\":1,\"785\":2,\"793\":2,\"811\":2,\"826\":1,\"845\":1,\"848\":1,\"922\":1,\"928\":2,\"961\":2}}],[\"防止\",{\"1\":{\"5\":1,\"53\":1,\"209\":1,\"502\":1,\"525\":1,\"600\":1,\"624\":1,\"671\":1,\"726\":1,\"829\":1,\"830\":1,\"928\":1}}],[\"以图\",{\"1\":{\"864\":1}}],[\"以此\",{\"1\":{\"793\":1}}],[\"以此类推\",{\"1\":{\"209\":1,\"304\":1}}],[\"以为\",{\"1\":{\"720\":1}}],[\"以使\",{\"1\":{\"714\":1}}],[\"以类\",{\"1\":{\"701\":1}}],[\"以外\",{\"1\":{\"583\":1,\"604\":1,\"790\":1}}],[\"以分\",{\"1\":{\"457\":1,\"816\":1}}],[\"以零为\",{\"1\":{\"446\":1}}],[\"以自\",{\"1\":{\"314\":1}}],[\"以来\",{\"1\":{\"242\":1}}],[\"以其\",{\"1\":{\"223\":1}}],[\"以多值\",{\"1\":{\"222\":1}}],[\"以点\",{\"1\":{\"221\":1}}],[\"以下几点\",{\"1\":{\"257\":2,\"875\":1}}],[\"以下\",{\"1\":{\"97\":1,\"171\":2,\"191\":1,\"193\":1,\"229\":1,\"242\":1,\"254\":1,\"257\":1,\"259\":1,\"301\":1,\"308\":1,\"353\":2,\"372\":1,\"412\":1,\"423\":1,\"485\":1,\"500\":1,\"577\":1,\"599\":1,\"741\":1,\"751\":1,\"833\":1,\"863\":1,\"875\":1,\"935\":1,\"940\":1}}],[\"以中序\",{\"1\":{\"86\":2,\"93\":1}}],[\"以前\",{\"1\":{\"86\":2,\"191\":1,\"935\":1}}],[\"以便\",{\"1\":{\"53\":1,\"315\":1,\"590\":1,\"701\":1,\"793\":1,\"902\":1}}],[\"以免\",{\"1\":{\"36\":1,\"612\":2,\"617\":1,\"714\":1}}],[\"以上\",{\"1\":{\"23\":1,\"24\":1,\"257\":1,\"259\":1,\"412\":1,\"574\":1,\"648\":1,\"667\":1,\"671\":1,\"673\":1,\"830\":1,\"852\":1,\"940\":3,\"944\":1}}],[\"以后\",{\"1\":{\"17\":1,\"38\":1,\"86\":2,\"172\":1,\"379\":1,\"606\":1,\"612\":1,\"676\":1,\"785\":1}}],[\"以\",{\"1\":{\"5\":1,\"8\":1,\"20\":1,\"23\":2,\"24\":3,\"25\":1,\"34\":1,\"44\":1,\"81\":1,\"113\":1,\"137\":1,\"168\":2,\"174\":2,\"198\":2,\"202\":1,\"204\":1,\"210\":2,\"217\":2,\"218\":2,\"222\":2,\"223\":1,\"225\":1,\"228\":2,\"233\":1,\"234\":1,\"242\":1,\"246\":1,\"277\":1,\"282\":1,\"293\":1,\"305\":1,\"312\":2,\"317\":1,\"318\":1,\"319\":2,\"320\":2,\"322\":2,\"323\":1,\"342\":1,\"348\":1,\"370\":3,\"372\":1,\"379\":1,\"392\":2,\"393\":1,\"398\":1,\"423\":1,\"425\":1,\"436\":1,\"449\":1,\"458\":1,\"469\":1,\"502\":1,\"528\":1,\"534\":1,\"545\":1,\"546\":1,\"563\":2,\"581\":1,\"584\":1,\"586\":1,\"587\":1,\"594\":1,\"600\":1,\"612\":1,\"614\":1,\"616\":1,\"619\":1,\"621\":1,\"624\":1,\"633\":1,\"645\":1,\"648\":1,\"651\":1,\"662\":1,\"671\":1,\"701\":1,\"713\":2,\"718\":1,\"721\":2,\"730\":1,\"732\":1,\"744\":1,\"781\":5,\"782\":1,\"784\":1,\"785\":1,\"787\":1,\"788\":2,\"789\":2,\"790\":1,\"791\":1,\"793\":8,\"806\":1,\"816\":1,\"817\":1,\"828\":1,\"837\":1,\"859\":1,\"863\":1,\"882\":1,\"889\":1,\"902\":1,\"929\":1,\"935\":1,\"953\":2}}],[\"以及\",{\"1\":{\"3\":1,\"41\":1,\"49\":1,\"54\":1,\"160\":1,\"255\":2,\"268\":1,\"283\":1,\"303\":1,\"314\":1,\"320\":1,\"342\":1,\"370\":2,\"380\":1,\"559\":1,\"889\":1,\"909\":1,\"928\":2}}],[\"就行\",{\"1\":{\"707\":1}}],[\"就行了\",{\"1\":{\"160\":1}}],[\"就算\",{\"1\":{\"412\":2}}],[\"就要\",{\"1\":{\"85\":1,\"624\":1,\"730\":1}}],[\"就会用\",{\"1\":{\"738\":1}}],[\"就会\",{\"1\":{\"15\":1,\"17\":1}}],[\"就绪\",{\"1\":{\"13\":2,\"16\":2,\"30\":4,\"32\":2,\"38\":4}}],[\"就是\",{\"1\":{\"8\":1,\"10\":1,\"13\":3,\"31\":1,\"53\":1,\"55\":1,\"70\":1,\"72\":3,\"77\":1,\"85\":2,\"88\":3,\"89\":2,\"96\":1,\"97\":3,\"107\":1,\"110\":1,\"148\":1,\"153\":1,\"169\":1,\"172\":1,\"191\":1,\"210\":1,\"304\":2,\"344\":1,\"347\":1,\"348\":1,\"357\":1,\"379\":5,\"380\":5,\"399\":3,\"402\":1,\"410\":1,\"411\":1,\"419\":1,\"476\":3,\"480\":1,\"524\":1,\"527\":1,\"529\":4,\"530\":2,\"537\":1,\"563\":1,\"574\":1,\"575\":1,\"582\":1,\"598\":1,\"601\":2,\"607\":1,\"663\":1,\"676\":1,\"687\":1,\"701\":1,\"730\":1,\"732\":1,\"735\":1,\"738\":1,\"748\":1,\"766\":1,\"769\":1,\"781\":1,\"785\":1,\"789\":1,\"804\":1,\"811\":2,\"827\":1,\"843\":1,\"852\":1,\"854\":1,\"860\":1,\"901\":1,\"906\":1,\"920\":2,\"922\":1,\"939\":1,\"940\":1,\"957\":1,\"958\":1,\"959\":3,\"962\":1}}],[\"就\",{\"1\":{\"5\":2,\"8\":1,\"13\":2,\"15\":1,\"17\":1,\"19\":1,\"30\":4,\"34\":1,\"35\":1,\"36\":2,\"55\":3,\"69\":1,\"70\":3,\"85\":4,\"86\":1,\"88\":2,\"89\":3,\"97\":1,\"103\":1,\"106\":1,\"107\":3,\"110\":1,\"123\":1,\"126\":5,\"137\":1,\"141\":1,\"153\":1,\"184\":1,\"191\":3,\"195\":1,\"210\":1,\"262\":1,\"290\":1,\"292\":1,\"294\":1,\"355\":4,\"357\":1,\"379\":6,\"380\":1,\"384\":1,\"436\":2,\"437\":1,\"451\":1,\"465\":1,\"480\":2,\"485\":1,\"502\":2,\"524\":1,\"528\":2,\"530\":2,\"546\":1,\"563\":1,\"598\":1,\"599\":2,\"600\":1,\"604\":1,\"606\":2,\"609\":1,\"612\":3,\"621\":1,\"671\":1,\"676\":2,\"684\":2,\"709\":1,\"714\":3,\"715\":1,\"717\":1,\"720\":2,\"721\":1,\"726\":1,\"735\":1,\"736\":2,\"738\":1,\"739\":1,\"740\":1,\"744\":4,\"745\":1,\"748\":1,\"767\":1,\"769\":3,\"770\":1,\"790\":1,\"793\":2,\"794\":1,\"818\":3,\"826\":1,\"827\":1,\"828\":2,\"829\":1,\"852\":1,\"857\":2,\"858\":1,\"863\":1,\"875\":1,\"904\":2,\"906\":2,\"922\":1,\"938\":1,\"940\":1,\"941\":1,\"949\":2,\"951\":1,\"955\":1,\"957\":2}}],[\"⼀\",{\"1\":{\"5\":1,\"15\":3,\"17\":4,\"103\":1,\"137\":4,\"502\":1}}],[\"）\",{\"0\":{\"73\":1,\"74\":1,\"75\":1,\"90\":1,\"91\":1,\"98\":1,\"107\":1,\"108\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"118\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"125\":1,\"126\":1,\"128\":1,\"129\":1,\"131\":1,\"132\":1,\"135\":1,\"137\":1,\"138\":1,\"139\":1,\"142\":1,\"143\":1,\"146\":1,\"148\":1,\"152\":1,\"153\":1,\"154\":1,\"237\":1,\"366\":1,\"426\":1,\"582\":1,\"611\":2,\"612\":1,\"613\":1,\"614\":1,\"617\":1,\"620\":1,\"645\":1,\"667\":1,\"677\":1,\"707\":2,\"722\":1,\"732\":1,\"799\":1},\"1\":{\"5\":2,\"8\":3,\"10\":1,\"11\":1,\"13\":2,\"19\":1,\"28\":4,\"30\":2,\"32\":1,\"34\":2,\"36\":1,\"41\":3,\"42\":1,\"51\":1,\"53\":1,\"69\":3,\"70\":3,\"71\":2,\"72\":9,\"77\":1,\"85\":6,\"86\":2,\"88\":2,\"89\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":11,\"99\":2,\"100\":4,\"102\":13,\"103\":6,\"104\":9,\"105\":6,\"106\":4,\"107\":1,\"110\":1,\"126\":1,\"137\":2,\"138\":1,\"152\":1,\"182\":1,\"192\":4,\"195\":7,\"199\":3,\"201\":1,\"205\":1,\"208\":1,\"209\":1,\"210\":5,\"214\":1,\"216\":1,\"217\":1,\"218\":2,\"220\":1,\"221\":1,\"222\":7,\"223\":4,\"225\":7,\"226\":2,\"227\":7,\"228\":1,\"232\":1,\"233\":3,\"234\":1,\"235\":1,\"243\":3,\"244\":1,\"245\":1,\"246\":3,\"247\":1,\"249\":4,\"254\":2,\"260\":2,\"268\":1,\"270\":1,\"273\":1,\"275\":1,\"282\":1,\"288\":1,\"290\":5,\"293\":1,\"294\":1,\"299\":2,\"303\":7,\"304\":1,\"307\":4,\"309\":1,\"311\":2,\"312\":1,\"313\":1,\"314\":4,\"315\":4,\"317\":2,\"318\":2,\"319\":1,\"321\":1,\"322\":6,\"323\":2,\"342\":1,\"344\":3,\"348\":1,\"349\":1,\"350\":1,\"353\":1,\"354\":4,\"355\":4,\"357\":1,\"358\":1,\"359\":2,\"380\":3,\"391\":3,\"392\":2,\"400\":1,\"402\":1,\"404\":1,\"406\":1,\"411\":1,\"423\":1,\"425\":1,\"426\":1,\"436\":2,\"437\":1,\"449\":1,\"451\":7,\"484\":1,\"492\":1,\"500\":1,\"502\":2,\"524\":1,\"525\":1,\"527\":1,\"529\":2,\"530\":3,\"532\":1,\"534\":1,\"536\":1,\"545\":3,\"546\":1,\"559\":2,\"560\":1,\"563\":2,\"572\":1,\"583\":4,\"584\":2,\"586\":4,\"587\":1,\"589\":1,\"590\":5,\"592\":1,\"595\":1,\"596\":1,\"597\":1,\"598\":2,\"599\":2,\"600\":1,\"601\":1,\"604\":2,\"605\":2,\"606\":2,\"607\":3,\"609\":4,\"610\":1,\"611\":3,\"612\":6,\"614\":1,\"615\":1,\"617\":2,\"619\":2,\"620\":1,\"621\":2,\"624\":1,\"626\":4,\"633\":2,\"634\":1,\"638\":1,\"640\":1,\"642\":4,\"657\":2,\"659\":2,\"661\":1,\"663\":1,\"664\":1,\"665\":2,\"666\":1,\"667\":1,\"668\":1,\"670\":1,\"671\":4,\"673\":1,\"676\":2,\"688\":1,\"691\":1,\"693\":2,\"696\":1,\"701\":4,\"703\":1,\"706\":1,\"707\":2,\"708\":1,\"709\":1,\"712\":2,\"713\":1,\"714\":2,\"717\":1,\"718\":1,\"721\":1,\"722\":4,\"724\":1,\"726\":1,\"730\":2,\"735\":1,\"739\":1,\"745\":4,\"747\":1,\"748\":9,\"749\":1,\"750\":5,\"756\":1,\"762\":1,\"766\":1,\"769\":7,\"770\":4,\"775\":2,\"781\":2,\"782\":1,\"784\":1,\"785\":3,\"787\":1,\"791\":1,\"793\":7,\"799\":1,\"804\":3,\"807\":2,\"808\":2,\"810\":2,\"811\":3,\"813\":3,\"814\":2,\"815\":1,\"816\":1,\"817\":3,\"818\":2,\"819\":2,\"824\":1,\"825\":1,\"826\":1,\"828\":3,\"829\":3,\"830\":2,\"833\":2,\"835\":1,\"841\":1,\"848\":2,\"858\":1,\"859\":6,\"860\":1,\"862\":2,\"863\":3,\"864\":2,\"875\":2,\"884\":1,\"891\":3,\"893\":2,\"894\":1,\"896\":1,\"904\":3,\"906\":2,\"908\":1,\"910\":1,\"913\":1,\"921\":1,\"922\":1,\"923\":1,\"924\":1,\"928\":9,\"929\":5,\"935\":3,\"938\":3,\"940\":1,\"947\":2,\"951\":3,\"957\":2,\"959\":5,\"963\":2}}],[\"虑\",{\"1\":{\"5\":1,\"502\":1}}],[\"（\",{\"0\":{\"73\":1,\"74\":1,\"75\":1,\"90\":1,\"91\":1,\"98\":1,\"107\":1,\"108\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"118\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"125\":1,\"126\":1,\"128\":1,\"129\":1,\"131\":1,\"132\":1,\"135\":1,\"137\":1,\"138\":1,\"139\":1,\"142\":1,\"143\":1,\"146\":1,\"148\":1,\"152\":1,\"153\":1,\"154\":1,\"237\":1,\"366\":1,\"426\":1,\"582\":1,\"611\":2,\"612\":1,\"613\":1,\"614\":1,\"617\":1,\"620\":1,\"645\":1,\"667\":1,\"677\":1,\"707\":2,\"722\":1,\"732\":1,\"799\":1},\"1\":{\"5\":2,\"8\":3,\"10\":1,\"11\":1,\"13\":2,\"19\":1,\"28\":4,\"30\":2,\"32\":1,\"34\":2,\"36\":1,\"41\":3,\"42\":1,\"51\":1,\"53\":1,\"69\":3,\"70\":3,\"71\":2,\"72\":9,\"77\":1,\"85\":6,\"86\":2,\"88\":2,\"89\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":11,\"99\":2,\"100\":4,\"102\":13,\"103\":6,\"104\":9,\"105\":6,\"106\":4,\"107\":1,\"110\":1,\"126\":1,\"137\":2,\"138\":1,\"152\":1,\"182\":1,\"192\":4,\"195\":7,\"199\":1,\"201\":1,\"205\":1,\"208\":1,\"209\":1,\"210\":5,\"214\":1,\"216\":1,\"217\":1,\"218\":2,\"220\":1,\"221\":1,\"222\":7,\"223\":4,\"225\":7,\"226\":2,\"227\":7,\"228\":1,\"232\":1,\"233\":3,\"234\":1,\"235\":1,\"243\":3,\"244\":1,\"245\":1,\"246\":3,\"247\":1,\"249\":4,\"254\":2,\"260\":2,\"268\":1,\"270\":1,\"273\":1,\"275\":1,\"282\":1,\"288\":1,\"290\":5,\"293\":1,\"294\":1,\"299\":2,\"303\":7,\"304\":1,\"307\":4,\"309\":1,\"311\":2,\"312\":1,\"313\":1,\"314\":4,\"315\":4,\"317\":2,\"318\":2,\"319\":1,\"321\":1,\"322\":6,\"323\":2,\"342\":1,\"344\":3,\"349\":1,\"350\":1,\"353\":1,\"354\":4,\"355\":4,\"357\":1,\"358\":1,\"359\":2,\"372\":1,\"380\":3,\"391\":3,\"392\":2,\"400\":1,\"402\":1,\"404\":1,\"406\":1,\"411\":1,\"423\":1,\"425\":1,\"426\":1,\"436\":2,\"437\":1,\"449\":1,\"451\":7,\"484\":1,\"492\":1,\"500\":1,\"502\":2,\"524\":1,\"525\":1,\"527\":1,\"529\":2,\"530\":3,\"532\":1,\"534\":1,\"536\":1,\"545\":3,\"546\":1,\"559\":2,\"560\":1,\"563\":2,\"572\":1,\"583\":4,\"584\":2,\"586\":4,\"587\":1,\"589\":1,\"590\":5,\"592\":1,\"595\":1,\"596\":1,\"597\":1,\"598\":2,\"599\":2,\"600\":1,\"601\":1,\"604\":2,\"605\":2,\"606\":2,\"607\":3,\"609\":4,\"610\":1,\"611\":3,\"612\":6,\"614\":1,\"615\":1,\"617\":2,\"619\":2,\"620\":1,\"621\":2,\"624\":1,\"626\":4,\"633\":2,\"634\":1,\"638\":1,\"640\":1,\"642\":4,\"657\":2,\"659\":2,\"661\":1,\"663\":1,\"664\":1,\"665\":2,\"666\":1,\"667\":1,\"668\":1,\"670\":1,\"671\":4,\"673\":1,\"676\":2,\"688\":1,\"691\":1,\"693\":2,\"696\":1,\"701\":4,\"703\":1,\"706\":1,\"707\":2,\"708\":1,\"709\":1,\"712\":2,\"713\":1,\"714\":2,\"717\":1,\"718\":1,\"721\":1,\"722\":4,\"724\":1,\"726\":1,\"730\":2,\"735\":1,\"739\":1,\"745\":4,\"747\":1,\"748\":9,\"749\":1,\"750\":5,\"756\":1,\"762\":1,\"766\":1,\"769\":7,\"770\":4,\"775\":2,\"781\":2,\"782\":1,\"784\":1,\"785\":3,\"787\":1,\"791\":1,\"793\":7,\"799\":1,\"804\":3,\"807\":2,\"808\":2,\"810\":2,\"811\":3,\"813\":3,\"814\":2,\"815\":1,\"816\":1,\"817\":3,\"818\":2,\"819\":2,\"824\":1,\"825\":1,\"826\":1,\"828\":3,\"829\":3,\"830\":2,\"833\":2,\"835\":1,\"841\":1,\"848\":2,\"858\":1,\"859\":6,\"860\":1,\"862\":2,\"863\":3,\"864\":2,\"875\":2,\"884\":1,\"891\":3,\"892\":1,\"893\":2,\"894\":1,\"896\":1,\"904\":3,\"906\":2,\"908\":1,\"910\":1,\"913\":1,\"921\":1,\"922\":1,\"923\":1,\"924\":1,\"928\":9,\"929\":5,\"935\":3,\"938\":3,\"940\":1,\"947\":2,\"951\":3,\"957\":2,\"959\":5,\"963\":2}}],[\"去除\",{\"1\":{\"234\":1,\"925\":1}}],[\"去重\",{\"1\":{\"104\":2}}],[\"去掉\",{\"1\":{\"85\":1,\"436\":1}}],[\"去\",{\"0\":{\"937\":1},\"1\":{\"5\":1,\"30\":3,\"38\":1,\"72\":1,\"85\":1,\"97\":2,\"104\":2,\"122\":2,\"123\":1,\"126\":4,\"228\":1,\"379\":2,\"411\":1,\"502\":1,\"546\":1,\"606\":1,\"652\":1,\"721\":1,\"735\":1,\"769\":2,\"828\":1,\"901\":2,\"904\":1,\"906\":1,\"907\":1,\"938\":1,\"939\":1,\"940\":10,\"961\":1}}],[\"会为\",{\"1\":{\"732\":1,\"769\":1}}],[\"会加\",{\"1\":{\"649\":1}}],[\"会细讲\",{\"1\":{\"380\":1}}],[\"会话\",{\"0\":{\"179\":1,\"181\":1},\"1\":{\"181\":4,\"182\":1}}],[\"会点\",{\"1\":{\"50\":1}}],[\"会\",{\"0\":{\"16\":1},\"1\":{\"5\":1,\"8\":1,\"10\":2,\"13\":1,\"15\":1,\"16\":1,\"17\":1,\"19\":1,\"20\":1,\"22\":1,\"25\":1,\"27\":2,\"30\":1,\"38\":1,\"51\":1,\"52\":1,\"53\":2,\"54\":1,\"55\":2,\"69\":2,\"70\":3,\"82\":1,\"93\":1,\"94\":1,\"103\":1,\"104\":1,\"110\":1,\"121\":2,\"122\":1,\"123\":1,\"126\":3,\"153\":1,\"168\":1,\"175\":2,\"181\":2,\"191\":3,\"202\":1,\"209\":2,\"246\":2,\"262\":1,\"270\":1,\"322\":1,\"349\":1,\"355\":3,\"356\":1,\"372\":1,\"380\":1,\"386\":1,\"390\":1,\"399\":1,\"411\":1,\"436\":1,\"437\":1,\"465\":2,\"476\":3,\"485\":2,\"502\":1,\"528\":2,\"529\":1,\"530\":2,\"537\":1,\"540\":3,\"541\":1,\"542\":1,\"546\":1,\"559\":2,\"574\":1,\"599\":3,\"600\":1,\"613\":1,\"621\":1,\"654\":1,\"676\":1,\"691\":1,\"694\":1,\"701\":1,\"710\":1,\"712\":1,\"714\":2,\"717\":1,\"721\":1,\"729\":1,\"730\":1,\"744\":1,\"750\":1,\"766\":1,\"769\":5,\"793\":1,\"818\":1,\"828\":1,\"830\":2,\"875\":1,\"882\":1,\"910\":1,\"922\":1,\"923\":1,\"938\":1,\"940\":2,\"958\":1}}],[\"才能\",{\"1\":{\"13\":1,\"30\":2,\"40\":1,\"85\":1,\"86\":1,\"500\":1,\"583\":1,\"600\":1,\"606\":2,\"748\":1}}],[\"才\",{\"1\":{\"5\":1,\"13\":1,\"15\":2,\"17\":1,\"30\":2,\"38\":1,\"75\":1,\"77\":1,\"395\":1,\"436\":1,\"484\":1,\"502\":1,\"527\":1,\"606\":1,\"707\":1,\"717\":1,\"722\":1,\"777\":1,\"859\":1}}],[\"时原\",{\"1\":{\"938\":1,\"951\":1}}],[\"时所\",{\"1\":{\"929\":1}}],[\"时先对\",{\"1\":{\"817\":1}}],[\"时形\",{\"1\":{\"762\":1}}],[\"时才\",{\"1\":{\"744\":1}}],[\"时使\",{\"1\":{\"736\":1}}],[\"时不赋\",{\"1\":{\"612\":1}}],[\"时不加\",{\"1\":{\"599\":1}}],[\"时赋\",{\"1\":{\"612\":1,\"758\":2}}],[\"时分秒\",{\"1\":{\"606\":1}}],[\"时加\",{\"1\":{\"599\":1,\"617\":1}}],[\"时值\",{\"1\":{\"589\":1,\"612\":1}}],[\"时用\",{\"1\":{\"574\":1,\"720\":1,\"781\":1,\"782\":1}}],[\"时会\",{\"1\":{\"322\":1,\"390\":1,\"540\":1,\"724\":1}}],[\"时空\",{\"1\":{\"246\":1,\"254\":2}}],[\"时报\",{\"1\":{\"188\":1}}],[\"时刻\",{\"1\":{\"26\":1,\"39\":1,\"529\":1,\"868\":3}}],[\"时候\",{\"0\":{\"16\":1},\"1\":{\"8\":1,\"10\":3,\"16\":4,\"19\":1,\"22\":2,\"35\":1,\"38\":1,\"70\":1,\"75\":1,\"85\":3,\"86\":1,\"96\":1,\"99\":1,\"107\":1,\"146\":1,\"153\":3,\"174\":1,\"261\":1,\"312\":1,\"348\":1,\"406\":1,\"419\":1,\"468\":1,\"528\":1,\"530\":1,\"594\":1,\"599\":1,\"609\":1,\"611\":2,\"612\":3,\"652\":1,\"654\":1,\"661\":1,\"665\":1,\"698\":1,\"717\":5,\"718\":3,\"722\":2,\"740\":1,\"744\":2,\"775\":1,\"793\":1,\"818\":1,\"830\":2,\"833\":1,\"845\":1,\"846\":1,\"848\":1,\"852\":1,\"873\":2,\"904\":1,\"940\":1,\"945\":1,\"961\":1}}],[\"时\",{\"1\":{\"5\":2,\"8\":1,\"10\":2,\"13\":1,\"16\":4,\"17\":1,\"23\":2,\"25\":3,\"30\":5,\"34\":1,\"36\":1,\"38\":2,\"39\":2,\"43\":1,\"44\":1,\"53\":1,\"55\":1,\"64\":1,\"69\":1,\"86\":1,\"94\":1,\"97\":1,\"168\":1,\"184\":1,\"280\":1,\"290\":2,\"292\":2,\"312\":1,\"342\":1,\"348\":3,\"349\":2,\"355\":3,\"386\":1,\"398\":1,\"399\":1,\"419\":1,\"437\":1,\"471\":1,\"476\":2,\"492\":2,\"500\":1,\"502\":2,\"524\":1,\"530\":2,\"531\":2,\"537\":1,\"540\":1,\"541\":1,\"570\":1,\"583\":1,\"584\":2,\"586\":8,\"587\":1,\"589\":1,\"594\":1,\"595\":1,\"597\":1,\"598\":3,\"599\":2,\"600\":3,\"605\":2,\"606\":3,\"609\":3,\"611\":1,\"612\":7,\"613\":1,\"614\":1,\"617\":1,\"620\":1,\"621\":4,\"635\":1,\"658\":1,\"659\":2,\"665\":1,\"671\":1,\"672\":1,\"682\":1,\"684\":1,\"685\":2,\"688\":1,\"690\":1,\"692\":1,\"693\":1,\"698\":2,\"701\":2,\"703\":1,\"705\":1,\"706\":1,\"707\":1,\"708\":2,\"710\":3,\"712\":1,\"714\":5,\"715\":1,\"718\":2,\"720\":3,\"721\":6,\"722\":13,\"726\":2,\"729\":6,\"730\":5,\"732\":1,\"736\":3,\"738\":1,\"739\":1,\"740\":2,\"741\":2,\"744\":1,\"745\":2,\"750\":2,\"755\":2,\"756\":1,\"769\":7,\"770\":2,\"775\":1,\"776\":1,\"788\":1,\"789\":1,\"791\":1,\"793\":2,\"798\":1,\"801\":1,\"804\":1,\"813\":1,\"818\":1,\"819\":1,\"824\":1,\"849\":2,\"854\":1,\"859\":1,\"862\":1,\"864\":1,\"875\":1,\"889\":1,\"890\":1,\"891\":1,\"904\":1,\"928\":3,\"938\":3,\"940\":1,\"947\":1,\"951\":3}}],[\"时间差\",{\"1\":{\"20\":2}}],[\"时间\",{\"1\":{\"5\":1,\"8\":1,\"20\":7,\"30\":3,\"35\":1,\"38\":1,\"42\":1,\"80\":2,\"125\":1,\"137\":3,\"165\":1,\"170\":1,\"218\":1,\"220\":2,\"502\":1,\"559\":1,\"606\":1,\"609\":1,\"613\":2,\"707\":3,\"710\":1,\"762\":1,\"769\":1,\"785\":2,\"922\":1,\"938\":2,\"951\":1,\"963\":3}}],[\"当向\",{\"1\":{\"775\":1}}],[\"当用\",{\"1\":{\"594\":1}}],[\"当成\",{\"1\":{\"544\":1}}],[\"当做\",{\"1\":{\"379\":1,\"676\":1}}],[\"当仅\",{\"1\":{\"355\":1}}],[\"当单\",{\"1\":{\"290\":1}}],[\"当中\",{\"1\":{\"217\":1,\"288\":1}}],[\"当作\",{\"1\":{\"137\":1,\"152\":1}}],[\"当然\",{\"1\":{\"81\":1,\"85\":1,\"573\":1,\"855\":1}}],[\"当队\",{\"1\":{\"72\":1}}],[\"当根\",{\"1\":{\"71\":2}}],[\"当栈\",{\"1\":{\"71\":1}}],[\"当树\",{\"1\":{\"69\":1}}],[\"当该\",{\"1\":{\"39\":1}}],[\"当下\",{\"1\":{\"39\":1}}],[\"当有\",{\"1\":{\"16\":2,\"34\":1}}],[\"当前目录\",{\"1\":{\"793\":1}}],[\"当前\",{\"0\":{\"180\":1},\"1\":{\"10\":2,\"20\":5,\"38\":1,\"44\":2,\"71\":10,\"72\":1,\"81\":2,\"85\":2,\"97\":11,\"107\":3,\"137\":2,\"153\":1,\"170\":1,\"223\":2,\"227\":1,\"277\":1,\"282\":1,\"290\":2,\"370\":1,\"436\":1,\"446\":1,\"476\":1,\"528\":3,\"529\":3,\"530\":1,\"531\":1,\"532\":1,\"539\":1,\"543\":1,\"545\":1,\"570\":1,\"571\":1,\"714\":1,\"736\":1,\"793\":1,\"833\":2,\"841\":1,\"859\":1}}],[\"当\",{\"1\":{\"5\":2,\"8\":3,\"10\":2,\"15\":1,\"16\":4,\"17\":1,\"19\":1,\"22\":2,\"24\":1,\"25\":2,\"30\":4,\"32\":2,\"35\":2,\"38\":4,\"55\":1,\"72\":1,\"75\":1,\"85\":2,\"96\":1,\"99\":1,\"104\":1,\"168\":1,\"169\":1,\"280\":1,\"348\":2,\"355\":2,\"369\":1,\"370\":1,\"386\":1,\"502\":2,\"530\":2,\"537\":1,\"542\":1,\"611\":1,\"613\":1,\"722\":2,\"729\":1,\"736\":1,\"766\":1,\"769\":2,\"781\":1,\"793\":1,\"818\":2,\"819\":1,\"849\":2,\"875\":1,\"890\":1,\"904\":1,\"910\":1,\"928\":3,\"929\":1}}],[\"不太\",{\"1\":{\"923\":1}}],[\"不太能\",{\"1\":{\"390\":1}}],[\"不了\",{\"1\":{\"904\":1}}],[\"不错\",{\"1\":{\"893\":1}}],[\"不佳\",{\"1\":{\"875\":1,\"910\":1}}],[\"不在乎\",{\"1\":{\"860\":1}}],[\"不填\",{\"1\":{\"837\":1}}],[\"不应\",{\"1\":{\"829\":1}}],[\"不准\",{\"1\":{\"793\":1}}],[\"不行\",{\"1\":{\"769\":2}}],[\"不易\",{\"1\":{\"745\":1}}],[\"不随\",{\"1\":{\"744\":1}}],[\"不慎\",{\"1\":{\"726\":1}}],[\"不加\",{\"1\":{\"704\":1,\"782\":2,\"818\":1}}],[\"不起作用\",{\"1\":{\"621\":1}}],[\"不需\",{\"1\":{\"613\":1}}],[\"不先\",{\"1\":{\"606\":1}}],[\"不写\",{\"1\":{\"590\":1,\"611\":1,\"735\":1,\"749\":1,\"818\":1}}],[\"不论\",{\"1\":{\"572\":1,\"708\":3,\"744\":1}}],[\"不速之客\",{\"1\":{\"527\":1}}],[\"不做\",{\"1\":{\"485\":1}}],[\"不必\",{\"1\":{\"480\":1,\"583\":1,\"584\":1,\"590\":1,\"594\":1,\"598\":1,\"613\":1,\"701\":1,\"713\":1,\"720\":1,\"745\":1,\"769\":1,\"775\":1,\"833\":2}}],[\"不必要\",{\"1\":{\"202\":1}}],[\"不定\",{\"1\":{\"457\":1}}],[\"不像\",{\"1\":{\"451\":1}}],[\"不以\",{\"1\":{\"446\":1}}],[\"不大\",{\"1\":{\"419\":1,\"863\":1}}],[\"不受\",{\"1\":{\"398\":1,\"949\":2}}],[\"不一致性\",{\"1\":{\"390\":1,\"940\":2}}],[\"不利于\",{\"1\":{\"370\":1}}],[\"不合理\",{\"1\":{\"270\":1,\"356\":1}}],[\"不够\",{\"1\":{\"259\":1,\"398\":1}}],[\"不仅仅\",{\"1\":{\"259\":1}}],[\"不仅\",{\"1\":{\"250\":1,\"379\":2,\"460\":1,\"601\":1,\"606\":1,\"607\":1,\"654\":1,\"696\":1,\"730\":1,\"852\":1,\"924\":1}}],[\"不变\",{\"1\":{\"220\":2,\"222\":2,\"225\":2,\"227\":1,\"228\":2,\"301\":1,\"303\":2,\"307\":1,\"392\":1,\"395\":1,\"522\":1,\"671\":1,\"801\":1,\"804\":1,\"938\":1,\"951\":1}}],[\"不变性\",{\"1\":{\"202\":1,\"220\":2,\"222\":1,\"223\":3,\"226\":1,\"228\":1,\"260\":1,\"301\":1,\"303\":1,\"305\":1,\"306\":1,\"312\":1,\"863\":1}}],[\"不确定性\",{\"1\":{\"201\":1,\"322\":1,\"897\":1}}],[\"不规则\",{\"1\":{\"193\":1,\"221\":1,\"229\":3,\"244\":1,\"248\":1,\"254\":1,\"312\":2,\"314\":1,\"315\":1}}],[\"不怕\",{\"1\":{\"191\":1}}],[\"不足\",{\"0\":{\"842\":1},\"1\":{\"169\":1,\"372\":1,\"929\":1}}],[\"不想\",{\"1\":{\"168\":1,\"594\":1,\"671\":1}}],[\"不让\",{\"1\":{\"153\":1}}],[\"不少\",{\"1\":{\"137\":1,\"480\":1,\"620\":1,\"750\":1}}],[\"不止\",{\"1\":{\"104\":1,\"600\":1}}],[\"不要\",{\"1\":{\"85\":1,\"121\":1,\"530\":1,\"587\":1,\"612\":1,\"708\":1,\"743\":1,\"769\":1,\"804\":1,\"939\":1}}],[\"不用\",{\"1\":{\"85\":1,\"104\":1,\"114\":1,\"122\":1,\"304\":1,\"583\":1,\"611\":1,\"615\":1,\"710\":1,\"721\":1,\"781\":1,\"789\":1}}],[\"不带\",{\"1\":{\"82\":1}}],[\"不如\",{\"1\":{\"38\":1,\"355\":1,\"357\":1,\"762\":1,\"855\":1}}],[\"不高\",{\"1\":{\"38\":1,\"787\":1}}],[\"不能引用\",{\"1\":{\"612\":1}}],[\"不能\",{\"1\":{\"36\":1,\"37\":2,\"49\":1,\"55\":2,\"86\":2,\"87\":1,\"98\":1,\"103\":1,\"104\":2,\"113\":1,\"123\":1,\"128\":1,\"152\":1,\"153\":1,\"299\":1,\"334\":1,\"355\":1,\"357\":1,\"379\":1,\"451\":1,\"460\":1,\"485\":1,\"522\":3,\"525\":5,\"545\":2,\"546\":1,\"567\":1,\"570\":1,\"575\":1,\"583\":4,\"589\":1,\"591\":1,\"595\":1,\"596\":1,\"597\":1,\"599\":1,\"600\":1,\"601\":1,\"603\":1,\"605\":1,\"606\":1,\"607\":2,\"612\":3,\"617\":1,\"619\":1,\"620\":2,\"639\":1,\"642\":2,\"644\":1,\"654\":1,\"657\":3,\"661\":3,\"665\":2,\"668\":2,\"670\":1,\"671\":3,\"672\":3,\"673\":1,\"675\":4,\"676\":1,\"683\":3,\"688\":5,\"689\":1,\"693\":1,\"703\":2,\"712\":1,\"715\":2,\"717\":1,\"719\":1,\"720\":1,\"721\":1,\"722\":1,\"724\":1,\"730\":2,\"734\":1,\"735\":3,\"739\":1,\"740\":1,\"741\":1,\"744\":1,\"745\":1,\"750\":2,\"752\":4,\"755\":2,\"760\":1,\"766\":1,\"769\":2,\"781\":1,\"785\":1,\"789\":1,\"793\":2,\"794\":1,\"818\":1,\"825\":1,\"843\":1,\"845\":1}}],[\"不管\",{\"1\":{\"30\":1,\"528\":1,\"666\":1}}],[\"不停\",{\"1\":{\"30\":1}}],[\"不适\",{\"1\":{\"28\":1,\"372\":1}}],[\"不过\",{\"1\":{\"28\":1,\"370\":1,\"527\":1,\"690\":1,\"928\":2}}],[\"不会\",{\"1\":{\"17\":1,\"38\":1,\"126\":1,\"168\":1,\"451\":1,\"546\":2,\"559\":1,\"574\":1,\"620\":1,\"676\":1,\"710\":1,\"726\":1,\"767\":1,\"890\":1}}],[\"不空\",{\"1\":{\"16\":1}}],[\"不满\",{\"1\":{\"16\":1}}],[\"不为\",{\"1\":{\"16\":1,\"71\":2,\"72\":1,\"97\":2,\"826\":1}}],[\"不可避免\",{\"1\":{\"245\":2}}],[\"不可\",{\"1\":{\"15\":2,\"16\":2,\"342\":1,\"436\":1,\"528\":1,\"612\":1,\"688\":1,\"757\":1}}],[\"不是\",{\"0\":{\"613\":1},\"1\":{\"13\":3,\"51\":1,\"53\":2,\"75\":1,\"77\":1,\"81\":1,\"83\":1,\"99\":1,\"106\":4,\"118\":1,\"125\":1,\"139\":1,\"153\":1,\"174\":1,\"186\":1,\"259\":1,\"270\":1,\"301\":1,\"308\":1,\"332\":1,\"340\":1,\"357\":1,\"379\":1,\"392\":1,\"398\":1,\"461\":1,\"476\":2,\"500\":1,\"528\":1,\"577\":2,\"590\":1,\"594\":1,\"599\":2,\"605\":1,\"607\":2,\"609\":1,\"612\":2,\"621\":1,\"637\":1,\"639\":1,\"650\":1,\"654\":1,\"659\":1,\"662\":1,\"671\":1,\"684\":1,\"685\":2,\"690\":1,\"691\":1,\"692\":1,\"693\":1,\"696\":2,\"707\":1,\"712\":1,\"715\":1,\"721\":1,\"722\":1,\"726\":1,\"729\":1,\"735\":2,\"738\":1,\"739\":1,\"744\":2,\"745\":3,\"750\":1,\"755\":2,\"766\":1,\"767\":1,\"769\":2,\"775\":2,\"790\":1,\"791\":2,\"806\":1,\"816\":1,\"818\":1,\"825\":2,\"828\":5,\"830\":3,\"884\":1,\"913\":1,\"923\":1,\"958\":1,\"959\":1,\"960\":1}}],[\"不断更新\",{\"1\":{\"152\":1}}],[\"不断\",{\"1\":{\"10\":1,\"71\":2,\"137\":2,\"698\":1,\"769\":1,\"864\":1,\"939\":1,\"940\":1,\"957\":1}}],[\"不到\",{\"1\":{\"10\":1,\"36\":1,\"43\":1,\"174\":1,\"534\":1,\"612\":1,\"769\":1,\"828\":3,\"830\":2,\"957\":1}}],[\"不再\",{\"1\":{\"8\":1,\"137\":2,\"314\":2,\"348\":1,\"419\":1,\"451\":1,\"527\":1,\"532\":1,\"546\":1,\"818\":1,\"825\":1,\"826\":2,\"873\":1,\"901\":2,\"961\":1}}],[\"不\",{\"0\":{\"17\":1,\"182\":1,\"915\":1},\"1\":{\"5\":1,\"13\":2,\"17\":1,\"19\":1,\"30\":3,\"32\":1,\"38\":1,\"39\":1,\"43\":1,\"51\":1,\"53\":1,\"55\":3,\"69\":1,\"70\":1,\"72\":1,\"77\":2,\"81\":1,\"85\":1,\"89\":1,\"97\":3,\"103\":3,\"104\":1,\"106\":1,\"112\":1,\"115\":2,\"137\":2,\"138\":1,\"139\":1,\"174\":1,\"175\":1,\"193\":1,\"198\":1,\"199\":3,\"210\":1,\"226\":1,\"237\":1,\"248\":1,\"260\":1,\"261\":2,\"271\":1,\"282\":1,\"290\":1,\"306\":2,\"308\":1,\"312\":1,\"322\":1,\"342\":1,\"344\":1,\"349\":1,\"350\":1,\"353\":2,\"357\":1,\"369\":1,\"372\":3,\"379\":1,\"386\":1,\"391\":1,\"394\":1,\"396\":1,\"416\":1,\"417\":1,\"429\":1,\"449\":1,\"451\":4,\"457\":1,\"461\":1,\"465\":1,\"467\":1,\"469\":1,\"471\":2,\"476\":4,\"484\":2,\"492\":1,\"502\":1,\"528\":2,\"529\":4,\"544\":1,\"563\":4,\"570\":2,\"573\":1,\"577\":1,\"583\":1,\"586\":1,\"587\":1,\"590\":1,\"595\":3,\"600\":1,\"601\":1,\"604\":1,\"606\":1,\"612\":7,\"617\":1,\"620\":1,\"621\":1,\"647\":1,\"667\":1,\"668\":2,\"670\":1,\"671\":3,\"675\":1,\"676\":2,\"684\":2,\"685\":1,\"689\":1,\"690\":1,\"693\":2,\"696\":2,\"701\":1,\"702\":1,\"704\":2,\"707\":1,\"708\":4,\"714\":1,\"715\":1,\"717\":5,\"718\":1,\"720\":1,\"721\":1,\"722\":5,\"724\":1,\"744\":7,\"745\":5,\"750\":1,\"755\":1,\"762\":1,\"769\":4,\"777\":1,\"785\":2,\"788\":2,\"793\":7,\"799\":1,\"804\":1,\"809\":2,\"816\":2,\"817\":1,\"818\":1,\"824\":1,\"825\":1,\"826\":4,\"828\":1,\"829\":5,\"830\":2,\"833\":2,\"843\":1,\"845\":2,\"848\":1,\"852\":1,\"855\":1,\"858\":2,\"859\":2,\"863\":1,\"875\":2,\"882\":1,\"889\":1,\"893\":3,\"904\":1,\"910\":1,\"912\":1,\"922\":2,\"935\":2,\"940\":2,\"955\":1,\"957\":4,\"959\":1}}],[\"不同之处\",{\"1\":{\"380\":1}}],[\"不同于\",{\"1\":{\"332\":1,\"373\":1}}],[\"不同点\",{\"1\":{\"86\":1,\"126\":1,\"288\":1,\"529\":1,\"776\":1,\"777\":1}}],[\"不同\",{\"0\":{\"460\":1,\"579\":1,\"799\":1},\"1\":{\"5\":1,\"30\":1,\"36\":1,\"43\":1,\"44\":1,\"53\":1,\"97\":1,\"103\":1,\"104\":1,\"125\":1,\"128\":2,\"193\":3,\"194\":1,\"211\":1,\"216\":1,\"217\":1,\"220\":1,\"222\":1,\"223\":1,\"225\":1,\"226\":1,\"227\":3,\"228\":2,\"229\":2,\"233\":1,\"242\":1,\"243\":1,\"245\":1,\"246\":3,\"250\":1,\"257\":4,\"260\":2,\"262\":2,\"277\":1,\"300\":2,\"315\":1,\"332\":5,\"338\":1,\"342\":1,\"356\":1,\"372\":5,\"379\":1,\"380\":1,\"396\":1,\"402\":2,\"423\":2,\"451\":1,\"460\":2,\"465\":1,\"502\":1,\"512\":1,\"541\":1,\"545\":1,\"577\":2,\"586\":2,\"589\":2,\"600\":3,\"601\":6,\"609\":1,\"612\":1,\"617\":1,\"620\":3,\"645\":1,\"654\":1,\"676\":3,\"689\":3,\"696\":1,\"701\":3,\"708\":4,\"710\":1,\"714\":1,\"717\":1,\"718\":4,\"720\":2,\"729\":2,\"736\":1,\"737\":1,\"745\":1,\"750\":2,\"751\":3,\"756\":2,\"757\":2,\"759\":1,\"766\":4,\"769\":13,\"782\":1,\"785\":1,\"799\":1,\"801\":2,\"804\":1,\"835\":1,\"837\":1,\"846\":1,\"860\":1,\"882\":1,\"883\":2,\"884\":3,\"900\":1,\"916\":2,\"918\":1,\"928\":2,\"961\":5}}],[\"指南\",{\"1\":{\"536\":1}}],[\"指纹\",{\"1\":{\"485\":2}}],[\"指明\",{\"1\":{\"476\":1}}],[\"指出\",{\"1\":{\"379\":1}}],[\"指标\",{\"0\":{\"214\":1,\"450\":1,\"451\":1},\"1\":{\"249\":1,\"323\":1,\"370\":1,\"377\":1,\"875\":4,\"884\":1,\"963\":1}}],[\"指由\",{\"1\":{\"138\":1}}],[\"指数\",{\"0\":{\"440\":1,\"645\":1},\"1\":{\"80\":1,\"218\":1,\"299\":1,\"645\":3,\"804\":1,\"891\":2}}],[\"指示\",{\"1\":{\"43\":1,\"284\":1,\"460\":1,\"461\":1}}],[\"指定\",{\"0\":{\"469\":1},\"1\":{\"42\":1,\"181\":1,\"184\":1,\"205\":1,\"410\":1,\"468\":1,\"469\":2,\"471\":1,\"522\":1,\"539\":1,\"540\":2,\"545\":1,\"559\":2,\"563\":2,\"570\":1,\"594\":1,\"595\":6,\"596\":1,\"599\":1,\"600\":1,\"605\":1,\"611\":1,\"612\":1,\"613\":1,\"634\":2,\"635\":1,\"637\":1,\"650\":1,\"669\":2,\"672\":2,\"690\":2,\"693\":1,\"705\":1,\"707\":3,\"712\":3,\"713\":1,\"714\":1,\"718\":3,\"721\":7,\"730\":1,\"736\":1,\"738\":1,\"739\":1,\"740\":1,\"744\":1,\"745\":1,\"750\":1,\"755\":1,\"776\":1,\"782\":1,\"793\":9,\"794\":1,\"819\":1,\"849\":1,\"893\":1}}],[\"指令性\",{\"1\":{\"599\":1}}],[\"指令\",{\"1\":{\"30\":1,\"166\":1,\"528\":1,\"581\":1,\"598\":1,\"613\":1,\"624\":1,\"781\":1}}],[\"指代\",{\"1\":{\"28\":1}}],[\"指导\",{\"1\":{\"22\":1,\"273\":1,\"277\":1,\"323\":1,\"952\":1}}],[\"指向\",{\"0\":{\"517\":1,\"519\":1,\"522\":1,\"523\":1,\"670\":1,\"671\":1,\"673\":1,\"732\":1,\"733\":1,\"734\":1,\"735\":1,\"760\":1},\"1\":{\"5\":1,\"28\":1,\"103\":4,\"465\":3,\"502\":1,\"522\":4,\"523\":1,\"524\":1,\"525\":5,\"539\":3,\"540\":1,\"541\":4,\"545\":5,\"559\":3,\"561\":1,\"575\":5,\"638\":1,\"664\":3,\"665\":3,\"666\":2,\"667\":2,\"668\":4,\"669\":1,\"670\":6,\"671\":22,\"672\":6,\"673\":2,\"675\":14,\"676\":10,\"697\":1,\"698\":4,\"708\":1,\"709\":5,\"712\":2,\"713\":1,\"714\":4,\"732\":8,\"733\":2,\"734\":6,\"735\":14,\"736\":3,\"760\":6,\"762\":1,\"767\":2,\"769\":17,\"770\":1,\"781\":1,\"782\":3,\"793\":1,\"811\":1,\"824\":1,\"825\":7,\"826\":17,\"827\":2,\"828\":15,\"829\":12,\"830\":16}}],[\"指针\",{\"0\":{\"100\":1,\"516\":1,\"517\":1,\"518\":1,\"519\":1,\"522\":1,\"523\":1,\"663\":1,\"665\":1,\"666\":1,\"667\":1,\"668\":1,\"669\":1,\"670\":1,\"671\":1,\"672\":1,\"673\":1,\"674\":1,\"675\":1,\"676\":1,\"697\":1,\"698\":1,\"731\":1,\"732\":2,\"733\":1,\"734\":1,\"735\":1,\"736\":1,\"760\":1},\"1\":{\"5\":1,\"22\":1,\"30\":1,\"37\":2,\"72\":2,\"82\":1,\"94\":1,\"95\":1,\"99\":2,\"100\":2,\"102\":2,\"103\":4,\"104\":2,\"137\":5,\"465\":5,\"502\":1,\"504\":1,\"522\":4,\"523\":1,\"524\":1,\"525\":3,\"540\":2,\"541\":2,\"544\":1,\"573\":2,\"575\":8,\"605\":1,\"612\":2,\"638\":5,\"639\":1,\"663\":6,\"664\":2,\"665\":13,\"666\":5,\"667\":6,\"668\":8,\"669\":2,\"670\":7,\"671\":25,\"672\":9,\"673\":5,\"675\":13,\"676\":31,\"686\":1,\"693\":1,\"697\":1,\"698\":6,\"708\":1,\"709\":3,\"710\":1,\"712\":3,\"713\":7,\"714\":7,\"732\":7,\"733\":4,\"734\":5,\"735\":18,\"736\":7,\"745\":3,\"760\":2,\"761\":1,\"762\":2,\"766\":2,\"767\":2,\"768\":1,\"769\":21,\"770\":2,\"782\":3,\"793\":7,\"811\":1,\"824\":1,\"825\":4,\"826\":4,\"827\":3,\"828\":5,\"829\":4,\"830\":9}}],[\"指\",{\"1\":{\"5\":2,\"29\":1,\"30\":2,\"33\":1,\"34\":2,\"82\":1,\"86\":1,\"93\":1,\"105\":2,\"263\":2,\"396\":1,\"502\":2,\"539\":1,\"558\":1,\"573\":1,\"609\":1,\"610\":1,\"648\":1,\"677\":1,\"755\":1,\"784\":1,\"793\":1,\"923\":1,\"958\":2}}],[\"：\",{\"0\":{\"193\":1,\"194\":1,\"404\":1,\"405\":1,\"406\":1,\"527\":1,\"639\":1,\"642\":1,\"664\":1,\"681\":1,\"787\":1,\"788\":1,\"843\":1,\"844\":1,\"845\":1,\"892\":1,\"893\":1,\"912\":1,\"918\":1,\"938\":1},\"1\":{\"5\":4,\"10\":2,\"15\":2,\"19\":2,\"20\":1,\"23\":2,\"28\":4,\"30\":3,\"32\":1,\"41\":1,\"42\":1,\"43\":14,\"44\":1,\"49\":1,\"50\":1,\"53\":1,\"54\":1,\"55\":3,\"60\":1,\"61\":1,\"63\":2,\"70\":4,\"71\":6,\"72\":4,\"77\":7,\"80\":2,\"81\":2,\"82\":7,\"85\":2,\"86\":5,\"88\":1,\"90\":1,\"93\":3,\"94\":2,\"95\":2,\"96\":2,\"97\":11,\"98\":2,\"99\":1,\"104\":2,\"105\":1,\"106\":4,\"110\":7,\"113\":1,\"121\":1,\"122\":1,\"125\":1,\"126\":8,\"137\":11,\"139\":1,\"153\":3,\"165\":3,\"166\":1,\"168\":3,\"171\":2,\"174\":6,\"175\":5,\"179\":1,\"180\":1,\"182\":4,\"188\":1,\"191\":5,\"192\":1,\"193\":1,\"199\":2,\"201\":2,\"211\":1,\"220\":1,\"222\":1,\"229\":1,\"232\":1,\"237\":1,\"242\":2,\"243\":1,\"244\":1,\"250\":2,\"254\":1,\"257\":3,\"261\":1,\"262\":1,\"268\":1,\"272\":1,\"273\":1,\"277\":3,\"278\":1,\"288\":6,\"290\":1,\"294\":2,\"303\":1,\"304\":8,\"312\":6,\"314\":4,\"315\":3,\"323\":1,\"332\":2,\"334\":1,\"338\":1,\"342\":1,\"347\":2,\"348\":3,\"349\":3,\"350\":1,\"353\":3,\"354\":1,\"355\":4,\"356\":1,\"359\":2,\"360\":3,\"366\":2,\"370\":3,\"372\":2,\"373\":1,\"379\":1,\"385\":3,\"386\":1,\"391\":1,\"392\":3,\"393\":2,\"394\":4,\"395\":3,\"398\":3,\"399\":5,\"402\":3,\"409\":1,\"411\":1,\"419\":5,\"423\":1,\"425\":1,\"426\":1,\"429\":1,\"435\":1,\"449\":1,\"451\":16,\"456\":1,\"457\":1,\"461\":1,\"462\":1,\"468\":1,\"469\":1,\"485\":5,\"492\":4,\"499\":2,\"500\":1,\"502\":4,\"524\":1,\"527\":1,\"528\":4,\"529\":9,\"530\":6,\"531\":3,\"532\":2,\"534\":1,\"535\":9,\"536\":1,\"537\":2,\"538\":5,\"539\":4,\"540\":4,\"541\":7,\"542\":5,\"543\":3,\"545\":5,\"563\":1,\"565\":1,\"566\":1,\"567\":1,\"568\":1,\"570\":2,\"571\":2,\"573\":2,\"574\":21,\"575\":6,\"577\":2,\"583\":3,\"584\":4,\"586\":4,\"589\":4,\"590\":6,\"595\":3,\"597\":1,\"598\":3,\"599\":3,\"600\":1,\"601\":1,\"605\":1,\"606\":5,\"607\":1,\"609\":5,\"610\":2,\"612\":7,\"613\":3,\"615\":1,\"616\":3,\"617\":1,\"619\":1,\"621\":2,\"623\":2,\"624\":4,\"625\":1,\"626\":3,\"635\":1,\"642\":3,\"644\":2,\"645\":1,\"654\":1,\"656\":1,\"658\":2,\"663\":4,\"664\":1,\"666\":4,\"667\":1,\"668\":1,\"670\":2,\"671\":2,\"672\":1,\"681\":1,\"684\":2,\"685\":1,\"690\":2,\"693\":1,\"695\":1,\"696\":1,\"698\":2,\"701\":5,\"704\":1,\"705\":3,\"708\":2,\"709\":1,\"713\":1,\"717\":1,\"718\":3,\"719\":1,\"720\":1,\"721\":3,\"722\":5,\"729\":2,\"732\":2,\"733\":2,\"735\":5,\"738\":2,\"739\":1,\"740\":1,\"741\":2,\"744\":5,\"745\":5,\"747\":1,\"748\":7,\"752\":2,\"755\":1,\"756\":1,\"757\":1,\"760\":1,\"762\":3,\"766\":1,\"769\":9,\"770\":4,\"776\":1,\"777\":1,\"781\":2,\"782\":1,\"785\":2,\"787\":3,\"788\":2,\"793\":3,\"800\":2,\"801\":1,\"804\":1,\"806\":2,\"807\":2,\"808\":1,\"809\":5,\"810\":1,\"811\":9,\"813\":1,\"816\":1,\"817\":5,\"818\":1,\"824\":1,\"827\":2,\"828\":3,\"830\":3,\"833\":1,\"841\":3,\"845\":3,\"848\":1,\"849\":3,\"852\":5,\"854\":2,\"855\":1,\"859\":4,\"862\":2,\"863\":1,\"864\":1,\"867\":5,\"869\":3,\"873\":1,\"875\":5,\"887\":2,\"897\":7,\"903\":2,\"904\":2,\"908\":2,\"910\":2,\"912\":2,\"913\":2,\"916\":1,\"917\":3,\"920\":2,\"922\":1,\"928\":1,\"929\":2,\"935\":1,\"938\":2,\"951\":2,\"953\":1,\"959\":2}}],[\"饿汉\",{\"1\":{\"5\":2,\"502\":2}}],[\"式子\",{\"1\":{\"399\":1}}],[\"式\",{\"0\":{\"799\":1},\"1\":{\"5\":4,\"24\":1,\"49\":1,\"219\":2,\"349\":1,\"379\":1,\"380\":2,\"406\":1,\"502\":4,\"545\":1,\"793\":1,\"806\":1,\"863\":1}}],[\"懒汉\",{\"1\":{\"5\":2,\"502\":2}}],[\"点间\",{\"1\":{\"372\":1}}],[\"点成\",{\"1\":{\"372\":1}}],[\"点如式\",{\"1\":{\"332\":1}}],[\"点块\",{\"0\":{\"317\":1},\"1\":{\"314\":8,\"315\":9,\"316\":3,\"317\":1,\"318\":2,\"319\":5,\"320\":1,\"322\":7,\"323\":4}}],[\"点边\",{\"1\":{\"304\":1}}],[\"点将\",{\"1\":{\"259\":1}}],[\"点积\",{\"1\":{\"228\":1}}],[\"点上\",{\"1\":{\"228\":1,\"411\":1}}],[\"点到点\",{\"1\":{\"227\":1}}],[\"点聚\",{\"1\":{\"225\":1}}],[\"点式\",{\"0\":{\"220\":1},\"1\":{\"219\":1,\"229\":1}}],[\"点中\",{\"1\":{\"195\":1}}],[\"点云渣\",{\"1\":{\"318\":1}}],[\"点云下\",{\"1\":{\"313\":1}}],[\"点云自\",{\"0\":{\"255\":1}}],[\"点云上\",{\"1\":{\"229\":1,\"246\":1,\"248\":1}}],[\"点云\",{\"0\":{\"239\":1,\"316\":1,\"333\":1},\"1\":{\"192\":1,\"193\":15,\"194\":8,\"195\":1,\"196\":1,\"200\":1,\"201\":1,\"203\":3,\"214\":2,\"216\":1,\"217\":1,\"218\":4,\"220\":2,\"221\":2,\"222\":4,\"223\":3,\"225\":1,\"226\":2,\"227\":3,\"228\":13,\"229\":2,\"237\":1,\"243\":2,\"244\":3,\"245\":9,\"246\":10,\"247\":1,\"248\":1,\"254\":3,\"256\":1,\"257\":3,\"259\":1,\"260\":3,\"262\":1,\"268\":3,\"270\":3,\"272\":1,\"273\":6,\"276\":2,\"300\":2,\"301\":1,\"313\":1,\"314\":3,\"315\":8,\"316\":2,\"317\":3,\"318\":1,\"319\":1,\"320\":5,\"322\":3,\"323\":1,\"325\":2,\"327\":1,\"332\":2,\"334\":1,\"337\":2,\"340\":1,\"342\":5,\"401\":1,\"426\":1,\"953\":4}}],[\"点击\",{\"1\":{\"49\":2,\"50\":4,\"52\":3,\"53\":1,\"54\":3,\"55\":4}}],[\"点\",{\"0\":{\"219\":1,\"248\":1,\"276\":1,\"334\":1,\"952\":1},\"1\":{\"5\":1,\"52\":1,\"191\":2,\"193\":3,\"195\":1,\"196\":1,\"199\":2,\"200\":1,\"203\":1,\"209\":4,\"218\":4,\"219\":1,\"220\":11,\"221\":1,\"222\":5,\"223\":11,\"224\":2,\"225\":10,\"226\":4,\"227\":4,\"228\":5,\"229\":3,\"234\":1,\"243\":1,\"244\":3,\"245\":3,\"246\":3,\"247\":3,\"248\":3,\"250\":1,\"254\":4,\"259\":3,\"260\":3,\"262\":1,\"268\":6,\"270\":6,\"273\":2,\"276\":1,\"280\":1,\"290\":3,\"292\":2,\"299\":3,\"312\":3,\"313\":1,\"314\":3,\"317\":3,\"319\":2,\"322\":2,\"323\":5,\"327\":1,\"332\":3,\"334\":1,\"342\":8,\"369\":1,\"371\":4,\"372\":2,\"411\":1,\"419\":1,\"502\":1,\"570\":1,\"615\":1,\"816\":1,\"828\":2,\"830\":2,\"955\":1,\"963\":2}}],[\"它们\",{\"1\":{\"174\":1,\"192\":1,\"200\":1,\"232\":1,\"235\":1,\"237\":1,\"254\":1,\"282\":1,\"299\":1,\"314\":1,\"318\":1,\"332\":1,\"348\":1,\"391\":1,\"597\":1,\"609\":1,\"611\":1,\"620\":1,\"635\":1,\"701\":2,\"707\":1,\"755\":1,\"759\":1,\"781\":1,\"793\":1,\"859\":1,\"882\":1,\"929\":1,\"959\":1}}],[\"它\",{\"1\":{\"5\":2,\"8\":3,\"10\":1,\"23\":1,\"30\":1,\"32\":1,\"35\":1,\"44\":1,\"49\":1,\"53\":1,\"54\":1,\"69\":1,\"93\":2,\"137\":1,\"138\":5,\"174\":1,\"191\":1,\"193\":1,\"194\":4,\"195\":1,\"199\":2,\"208\":2,\"214\":1,\"217\":1,\"218\":1,\"220\":2,\"225\":1,\"228\":3,\"250\":2,\"301\":1,\"306\":1,\"308\":1,\"312\":1,\"314\":1,\"322\":2,\"342\":1,\"355\":1,\"370\":2,\"379\":4,\"423\":2,\"460\":1,\"485\":1,\"492\":2,\"502\":2,\"545\":1,\"559\":1,\"589\":1,\"601\":1,\"615\":1,\"620\":1,\"670\":3,\"671\":2,\"675\":1,\"676\":1,\"684\":1,\"698\":1,\"701\":2,\"710\":1,\"729\":2,\"730\":1,\"735\":1,\"736\":2,\"741\":1,\"744\":2,\"745\":1,\"755\":1,\"769\":1,\"775\":1,\"781\":3,\"785\":1,\"793\":1,\"817\":1,\"825\":1,\"826\":4,\"827\":1,\"828\":2,\"830\":2,\"860\":1,\"863\":1,\"892\":1,\"907\":1,\"922\":2,\"928\":1,\"935\":2,\"955\":1,\"957\":1,\"958\":1}}],[\"并非\",{\"1\":{\"721\":1,\"807\":1}}],[\"并非易事\",{\"1\":{\"246\":1}}],[\"并行处理\",{\"1\":{\"395\":1}}],[\"并行\",{\"1\":{\"392\":1}}],[\"并不等于\",{\"1\":{\"609\":1}}],[\"并不多\",{\"1\":{\"530\":1}}],[\"并不知道\",{\"1\":{\"348\":1,\"476\":1}}],[\"并不需要\",{\"1\":{\"13\":1,\"436\":1,\"714\":1}}],[\"并未\",{\"1\":{\"192\":1}}],[\"并且\",{\"1\":{\"13\":1,\"15\":1,\"23\":1,\"38\":1,\"41\":1,\"53\":1,\"69\":1,\"70\":1,\"128\":1,\"202\":1,\"222\":1,\"234\":1,\"242\":1,\"246\":1,\"259\":1,\"282\":1,\"299\":1,\"315\":1,\"322\":1,\"366\":1,\"370\":1,\"371\":1,\"390\":1,\"406\":1,\"410\":1,\"413\":1,\"415\":1,\"419\":1,\"768\":1,\"769\":1,\"863\":2,\"935\":1,\"938\":2,\"939\":1,\"953\":1}}],[\"并发\",{\"0\":{\"12\":1,\"33\":1},\"1\":{\"31\":1,\"33\":2,\"34\":2,\"492\":1}}],[\"并用\",{\"1\":{\"5\":1,\"218\":1,\"222\":1,\"502\":1,\"573\":1,\"717\":1,\"729\":1,\"826\":1}}],[\"并\",{\"0\":{\"162\":1,\"172\":1,\"846\":1},\"1\":{\"5\":3,\"8\":1,\"20\":1,\"28\":1,\"30\":2,\"32\":3,\"34\":3,\"35\":1,\"46\":1,\"71\":5,\"72\":1,\"94\":1,\"95\":1,\"97\":2,\"103\":1,\"141\":1,\"153\":1,\"186\":1,\"192\":1,\"194\":1,\"195\":1,\"196\":1,\"197\":1,\"198\":1,\"199\":4,\"200\":1,\"202\":1,\"204\":1,\"217\":1,\"218\":1,\"220\":6,\"222\":1,\"223\":2,\"224\":1,\"225\":6,\"226\":3,\"227\":1,\"228\":3,\"237\":1,\"246\":2,\"247\":1,\"248\":1,\"249\":1,\"257\":1,\"262\":1,\"270\":1,\"271\":1,\"273\":3,\"282\":2,\"283\":2,\"284\":1,\"290\":1,\"293\":1,\"294\":1,\"300\":1,\"301\":1,\"303\":2,\"306\":1,\"308\":1,\"314\":1,\"315\":2,\"316\":1,\"319\":1,\"320\":3,\"322\":2,\"332\":1,\"338\":1,\"355\":2,\"357\":1,\"370\":2,\"372\":1,\"379\":1,\"390\":1,\"391\":1,\"392\":1,\"398\":1,\"404\":1,\"410\":2,\"419\":2,\"468\":1,\"476\":2,\"492\":3,\"502\":3,\"530\":2,\"539\":1,\"573\":2,\"574\":1,\"577\":1,\"583\":1,\"620\":1,\"671\":2,\"676\":1,\"692\":1,\"696\":2,\"698\":1,\"709\":1,\"712\":2,\"714\":2,\"718\":2,\"720\":1,\"722\":2,\"729\":1,\"730\":1,\"735\":2,\"738\":1,\"745\":1,\"748\":1,\"750\":1,\"767\":1,\"769\":2,\"770\":1,\"775\":1,\"781\":3,\"785\":1,\"793\":1,\"794\":1,\"818\":1,\"826\":2,\"828\":1,\"829\":1,\"830\":1,\"839\":1,\"859\":1,\"863\":1,\"864\":1,\"887\":1,\"907\":1,\"910\":1,\"926\":1,\"935\":1,\"957\":1,\"959\":1}}],[\"有无\",{\"1\":{\"769\":1}}],[\"有值\",{\"1\":{\"755\":1}}],[\"有分\",{\"1\":{\"703\":1,\"730\":1}}],[\"有用\",{\"1\":{\"642\":1}}],[\"有时\",{\"1\":{\"614\":1,\"617\":1,\"769\":1,\"801\":1}}],[\"有时候\",{\"1\":{\"530\":1,\"957\":2}}],[\"有的是\",{\"1\":{\"467\":1}}],[\"有所区别\",{\"1\":{\"835\":1}}],[\"有所\",{\"1\":{\"449\":1}}],[\"有主\",{\"1\":{\"395\":1}}],[\"有利\",{\"1\":{\"370\":1,\"371\":1}}],[\"有益\",{\"1\":{\"355\":1}}],[\"有害\",{\"1\":{\"355\":1,\"419\":1}}],[\"有趣\",{\"1\":{\"301\":1,\"355\":1}}],[\"有助于\",{\"1\":{\"254\":1}}],[\"有待\",{\"1\":{\"242\":1}}],[\"有关\",{\"0\":{\"675\":1,\"727\":1},\"1\":{\"209\":1,\"223\":1,\"355\":2,\"358\":1,\"590\":2,\"663\":1,\"701\":3}}],[\"有着\",{\"1\":{\"193\":1,\"395\":1}}],[\"有些\",{\"1\":{\"191\":1,\"222\":1,\"467\":1,\"750\":1}}],[\"有点\",{\"0\":{\"150\":1},\"1\":{\"271\":1}}],[\"有序性\",{\"1\":{\"97\":1}}],[\"有序\",{\"1\":{\"91\":1,\"93\":1,\"96\":1,\"102\":2,\"314\":3,\"315\":4,\"316\":1}}],[\"有右子\",{\"1\":{\"71\":1}}],[\"有向图\",{\"1\":{\"44\":1}}],[\"有限\",{\"0\":{\"44\":1},\"1\":{\"44\":5,\"62\":1,\"65\":1,\"220\":1,\"254\":1,\"320\":1,\"606\":1,\"940\":1}}],[\"有效性\",{\"1\":{\"325\":1,\"355\":1,\"357\":1,\"370\":1}}],[\"有效\",{\"1\":{\"31\":1,\"38\":1,\"53\":1,\"63\":1,\"64\":1,\"104\":1,\"106\":1,\"113\":1,\"171\":1,\"192\":2,\"193\":1,\"194\":1,\"208\":1,\"218\":1,\"228\":1,\"235\":1,\"246\":1,\"254\":1,\"257\":1,\"260\":1,\"262\":1,\"271\":1,\"276\":1,\"284\":1,\"322\":1,\"338\":1,\"355\":1,\"370\":1,\"391\":1,\"398\":1,\"437\":2,\"619\":1,\"620\":6,\"621\":1,\"684\":1,\"741\":2,\"817\":1,\"925\":1,\"935\":1}}],[\"有没有\",{\"1\":{\"30\":1,\"38\":1,\"863\":1}}],[\"有误\",{\"1\":{\"10\":1,\"476\":1}}],[\"有\",{\"0\":{\"259\":1,\"480\":1,\"484\":1,\"593\":1},\"1\":{\"5\":1,\"13\":1,\"15\":1,\"16\":2,\"17\":4,\"23\":2,\"25\":1,\"26\":1,\"27\":1,\"28\":2,\"30\":2,\"31\":2,\"32\":3,\"33\":1,\"34\":2,\"36\":1,\"38\":2,\"39\":3,\"41\":1,\"43\":2,\"52\":2,\"53\":1,\"54\":1,\"71\":1,\"80\":1,\"82\":1,\"88\":1,\"97\":2,\"99\":1,\"103\":3,\"110\":5,\"112\":1,\"126\":1,\"137\":1,\"168\":2,\"174\":1,\"191\":1,\"193\":2,\"199\":1,\"201\":1,\"217\":1,\"224\":1,\"225\":1,\"242\":2,\"244\":2,\"254\":1,\"259\":2,\"262\":1,\"277\":1,\"282\":1,\"284\":1,\"301\":1,\"308\":1,\"312\":1,\"313\":1,\"322\":1,\"344\":1,\"349\":1,\"355\":1,\"356\":1,\"357\":1,\"379\":7,\"380\":4,\"392\":2,\"399\":1,\"402\":3,\"411\":2,\"425\":1,\"436\":2,\"437\":1,\"451\":1,\"467\":1,\"468\":1,\"476\":2,\"480\":2,\"492\":3,\"502\":1,\"527\":1,\"528\":1,\"532\":2,\"544\":1,\"577\":3,\"583\":1,\"584\":4,\"585\":1,\"587\":1,\"594\":1,\"595\":3,\"601\":1,\"606\":1,\"610\":2,\"612\":1,\"619\":1,\"621\":1,\"624\":1,\"625\":1,\"633\":1,\"650\":1,\"654\":1,\"658\":2,\"662\":1,\"666\":1,\"675\":1,\"676\":2,\"684\":1,\"686\":1,\"690\":1,\"691\":1,\"701\":1,\"707\":1,\"709\":1,\"715\":1,\"717\":1,\"720\":3,\"721\":7,\"722\":4,\"724\":1,\"730\":4,\"737\":1,\"741\":2,\"744\":2,\"745\":1,\"748\":3,\"749\":1,\"751\":1,\"755\":1,\"757\":1,\"759\":1,\"768\":1,\"769\":2,\"781\":1,\"787\":1,\"790\":1,\"793\":1,\"804\":1,\"806\":1,\"818\":1,\"825\":1,\"826\":1,\"827\":1,\"828\":1,\"829\":1,\"830\":2,\"835\":1,\"846\":1,\"852\":1,\"875\":1,\"882\":1,\"901\":1,\"902\":1,\"904\":1,\"912\":1,\"935\":1,\"940\":1,\"944\":1,\"947\":1,\"953\":1,\"955\":1,\"959\":1}}],[\")\",{\"0\":{\"55\":1,\"422\":1,\"435\":1,\"556\":1,\"557\":1,\"558\":1,\"559\":1,\"560\":1,\"561\":1,\"562\":1,\"657\":1,\"717\":1,\"848\":1,\"849\":1,\"850\":1,\"851\":1,\"923\":1},\"1\":{\"5\":1,\"8\":5,\"10\":10,\"11\":1,\"17\":3,\"19\":1,\"20\":4,\"23\":2,\"25\":1,\"27\":12,\"31\":2,\"38\":1,\"41\":4,\"42\":1,\"44\":6,\"46\":3,\"51\":2,\"52\":1,\"53\":3,\"54\":1,\"55\":1,\"56\":1,\"69\":6,\"70\":19,\"71\":36,\"72\":158,\"73\":18,\"74\":5,\"75\":23,\"76\":5,\"77\":10,\"78\":7,\"80\":16,\"81\":11,\"82\":45,\"83\":14,\"84\":14,\"85\":34,\"86\":25,\"87\":25,\"88\":5,\"89\":8,\"90\":24,\"91\":8,\"94\":6,\"95\":7,\"96\":9,\"97\":12,\"98\":8,\"99\":25,\"100\":49,\"102\":14,\"103\":77,\"104\":105,\"105\":64,\"106\":54,\"107\":24,\"110\":4,\"112\":17,\"113\":11,\"114\":13,\"115\":12,\"116\":18,\"118\":20,\"119\":23,\"121\":12,\"122\":16,\"123\":19,\"125\":16,\"126\":20,\"128\":18,\"137\":35,\"138\":15,\"139\":10,\"142\":11,\"143\":13,\"146\":7,\"148\":4,\"152\":10,\"153\":4,\"160\":1,\"166\":1,\"172\":1,\"174\":3,\"195\":4,\"203\":2,\"208\":2,\"209\":1,\"210\":6,\"214\":7,\"220\":5,\"221\":3,\"222\":1,\"229\":1,\"232\":3,\"242\":2,\"246\":1,\"255\":1,\"256\":2,\"259\":3,\"261\":1,\"262\":1,\"263\":1,\"265\":1,\"268\":4,\"273\":1,\"276\":3,\"277\":1,\"280\":2,\"281\":4,\"282\":16,\"284\":1,\"290\":1,\"293\":1,\"299\":6,\"301\":3,\"303\":5,\"304\":24,\"305\":27,\"307\":4,\"308\":5,\"309\":8,\"310\":1,\"312\":2,\"313\":1,\"314\":4,\"317\":1,\"321\":1,\"332\":5,\"334\":1,\"338\":7,\"340\":2,\"342\":7,\"343\":1,\"344\":39,\"347\":9,\"348\":19,\"349\":28,\"350\":2,\"353\":4,\"354\":3,\"355\":3,\"356\":2,\"357\":1,\"358\":1,\"359\":7,\"361\":2,\"363\":2,\"364\":2,\"366\":6,\"367\":1,\"369\":1,\"370\":9,\"371\":6,\"372\":4,\"373\":1,\"380\":5,\"383\":2,\"392\":2,\"395\":3,\"398\":2,\"399\":18,\"401\":1,\"404\":2,\"406\":2,\"408\":1,\"409\":1,\"410\":3,\"411\":4,\"412\":2,\"413\":2,\"416\":2,\"417\":1,\"419\":1,\"422\":10,\"423\":1,\"425\":1,\"426\":3,\"429\":6,\"435\":1,\"446\":11,\"449\":5,\"451\":29,\"465\":1,\"467\":1,\"469\":3,\"471\":1,\"473\":1,\"502\":1,\"503\":1,\"522\":1,\"524\":6,\"525\":2,\"528\":9,\"529\":16,\"530\":19,\"531\":18,\"532\":10,\"534\":18,\"535\":5,\"536\":3,\"537\":3,\"538\":14,\"539\":22,\"540\":25,\"541\":18,\"542\":19,\"543\":12,\"544\":1,\"545\":16,\"546\":1,\"548\":7,\"550\":1,\"551\":3,\"552\":1,\"553\":1,\"556\":1,\"557\":3,\"558\":1,\"559\":15,\"560\":1,\"561\":6,\"562\":1,\"563\":1,\"565\":1,\"566\":1,\"567\":1,\"568\":2,\"570\":8,\"571\":4,\"573\":10,\"574\":20,\"575\":6,\"576\":16,\"577\":4,\"578\":1,\"583\":5,\"584\":1,\"585\":2,\"586\":1,\"587\":2,\"589\":6,\"590\":4,\"594\":4,\"595\":19,\"597\":2,\"598\":3,\"599\":7,\"600\":9,\"601\":13,\"605\":10,\"606\":12,\"609\":1,\"610\":4,\"611\":1,\"612\":10,\"613\":2,\"615\":4,\"624\":1,\"626\":1,\"638\":2,\"654\":5,\"662\":1,\"663\":1,\"666\":3,\"668\":2,\"670\":1,\"671\":6,\"675\":10,\"676\":4,\"683\":3,\"686\":1,\"687\":2,\"688\":4,\"689\":8,\"690\":12,\"695\":5,\"698\":3,\"701\":4,\"703\":1,\"704\":1,\"706\":4,\"707\":2,\"708\":1,\"709\":3,\"712\":4,\"713\":1,\"714\":1,\"717\":6,\"718\":12,\"719\":5,\"720\":1,\"721\":20,\"722\":12,\"724\":9,\"725\":2,\"726\":2,\"729\":8,\"730\":4,\"732\":6,\"735\":12,\"738\":7,\"739\":2,\"740\":2,\"741\":2,\"744\":2,\"745\":19,\"748\":1,\"749\":4,\"752\":1,\"755\":2,\"759\":5,\"760\":5,\"762\":6,\"766\":1,\"769\":24,\"770\":1,\"781\":54,\"782\":4,\"793\":8,\"794\":2,\"801\":10,\"805\":1,\"806\":2,\"808\":1,\"809\":6,\"810\":3,\"811\":4,\"813\":1,\"814\":1,\"816\":1,\"817\":11,\"818\":3,\"819\":1,\"825\":2,\"826\":4,\"827\":4,\"828\":7,\"829\":8,\"830\":45,\"833\":2,\"834\":6,\"835\":10,\"836\":1,\"837\":1,\"838\":6,\"840\":12,\"845\":3,\"846\":27,\"848\":2,\"849\":9,\"852\":1,\"854\":11,\"855\":4,\"856\":1,\"859\":12,\"862\":5,\"864\":1,\"867\":4,\"868\":13,\"869\":45,\"871\":1,\"875\":1,\"877\":21,\"882\":1,\"884\":1,\"887\":4,\"888\":1,\"889\":3,\"891\":2,\"892\":1,\"893\":3,\"894\":1,\"895\":1,\"896\":2,\"897\":81,\"900\":23,\"901\":5,\"902\":3,\"903\":4,\"904\":44,\"905\":4,\"907\":1,\"910\":6,\"911\":1,\"913\":3,\"917\":8,\"918\":4,\"921\":2,\"922\":1,\"925\":1,\"928\":1,\"929\":9,\"935\":7,\"936\":1,\"938\":2,\"940\":1,\"941\":1,\"944\":3,\"947\":12,\"951\":2,\"952\":1,\"957\":1,\"958\":2,\"959\":4,\"961\":3,\"963\":2}}],[\"(\",{\"0\":{\"55\":1,\"422\":1,\"435\":1,\"556\":1,\"557\":1,\"558\":1,\"559\":1,\"560\":1,\"561\":1,\"562\":1,\"657\":1,\"717\":1,\"848\":1,\"849\":1,\"850\":1,\"851\":1,\"923\":1},\"1\":{\"5\":1,\"8\":5,\"10\":10,\"11\":1,\"17\":3,\"19\":1,\"20\":4,\"23\":2,\"25\":1,\"27\":12,\"31\":2,\"38\":1,\"41\":4,\"42\":1,\"44\":6,\"46\":3,\"51\":2,\"52\":1,\"53\":3,\"54\":1,\"55\":1,\"56\":1,\"69\":6,\"70\":19,\"71\":36,\"72\":158,\"73\":18,\"74\":5,\"75\":23,\"76\":5,\"77\":10,\"78\":7,\"80\":16,\"81\":11,\"82\":45,\"83\":14,\"84\":14,\"85\":34,\"86\":25,\"87\":25,\"88\":5,\"89\":8,\"90\":24,\"91\":8,\"94\":6,\"95\":7,\"96\":9,\"97\":12,\"98\":8,\"99\":25,\"100\":49,\"102\":14,\"103\":75,\"104\":105,\"105\":64,\"106\":55,\"107\":24,\"110\":4,\"112\":17,\"113\":11,\"114\":13,\"115\":12,\"116\":18,\"118\":20,\"119\":23,\"121\":12,\"122\":16,\"123\":19,\"125\":16,\"126\":20,\"128\":18,\"137\":35,\"138\":15,\"139\":10,\"142\":11,\"143\":13,\"146\":7,\"148\":4,\"152\":10,\"153\":4,\"160\":1,\"166\":1,\"172\":1,\"174\":3,\"195\":5,\"203\":2,\"208\":2,\"209\":1,\"210\":6,\"214\":7,\"220\":5,\"221\":3,\"222\":1,\"229\":1,\"232\":3,\"242\":2,\"246\":1,\"255\":1,\"256\":2,\"259\":3,\"261\":1,\"262\":1,\"263\":1,\"265\":1,\"268\":4,\"273\":1,\"276\":3,\"277\":1,\"280\":2,\"281\":4,\"282\":16,\"284\":1,\"290\":1,\"293\":1,\"299\":5,\"301\":3,\"303\":5,\"304\":24,\"305\":27,\"307\":4,\"308\":2,\"309\":8,\"310\":1,\"312\":2,\"313\":1,\"314\":4,\"317\":1,\"321\":1,\"332\":5,\"334\":1,\"338\":7,\"340\":2,\"342\":7,\"343\":1,\"344\":39,\"347\":9,\"348\":20,\"349\":28,\"350\":2,\"353\":4,\"354\":3,\"355\":3,\"356\":2,\"357\":1,\"358\":1,\"359\":7,\"361\":2,\"363\":2,\"364\":2,\"366\":6,\"367\":1,\"369\":1,\"370\":9,\"371\":6,\"372\":3,\"373\":1,\"380\":5,\"383\":2,\"392\":2,\"395\":3,\"398\":2,\"399\":19,\"401\":1,\"404\":2,\"406\":2,\"408\":1,\"409\":1,\"410\":3,\"411\":4,\"412\":2,\"413\":2,\"416\":2,\"417\":1,\"419\":1,\"422\":10,\"423\":1,\"425\":1,\"426\":3,\"429\":6,\"435\":1,\"446\":11,\"449\":5,\"451\":29,\"465\":1,\"467\":1,\"469\":3,\"471\":1,\"473\":1,\"502\":1,\"503\":1,\"522\":1,\"524\":6,\"525\":2,\"528\":9,\"529\":16,\"530\":19,\"531\":18,\"532\":10,\"534\":18,\"535\":5,\"536\":3,\"537\":3,\"538\":13,\"539\":21,\"540\":24,\"541\":18,\"542\":19,\"543\":11,\"544\":1,\"545\":16,\"546\":1,\"548\":7,\"550\":1,\"551\":3,\"552\":1,\"553\":1,\"556\":1,\"557\":3,\"558\":1,\"559\":15,\"560\":1,\"561\":6,\"562\":1,\"563\":1,\"565\":1,\"566\":1,\"567\":1,\"568\":2,\"570\":8,\"571\":4,\"573\":10,\"574\":20,\"575\":6,\"576\":16,\"577\":4,\"578\":1,\"583\":5,\"584\":1,\"585\":2,\"586\":1,\"587\":2,\"589\":6,\"590\":4,\"594\":4,\"595\":19,\"597\":2,\"598\":3,\"599\":7,\"600\":9,\"601\":13,\"605\":10,\"606\":12,\"609\":1,\"610\":4,\"611\":1,\"612\":10,\"613\":2,\"615\":4,\"624\":1,\"626\":1,\"638\":2,\"654\":5,\"662\":1,\"663\":1,\"666\":3,\"668\":2,\"670\":1,\"671\":6,\"675\":10,\"676\":4,\"683\":3,\"686\":1,\"687\":2,\"688\":4,\"689\":8,\"690\":12,\"695\":5,\"698\":3,\"701\":4,\"703\":1,\"704\":1,\"706\":4,\"707\":2,\"708\":1,\"709\":3,\"712\":4,\"713\":1,\"714\":1,\"717\":6,\"718\":12,\"719\":5,\"720\":1,\"721\":20,\"722\":12,\"724\":9,\"725\":2,\"726\":2,\"729\":8,\"730\":4,\"732\":6,\"735\":12,\"738\":7,\"739\":2,\"740\":2,\"741\":2,\"744\":2,\"745\":19,\"748\":1,\"749\":4,\"752\":1,\"755\":2,\"759\":5,\"760\":5,\"762\":6,\"766\":1,\"769\":24,\"770\":1,\"781\":54,\"782\":4,\"793\":8,\"794\":2,\"801\":10,\"805\":1,\"806\":2,\"808\":1,\"809\":6,\"810\":3,\"811\":4,\"813\":1,\"814\":1,\"816\":1,\"817\":11,\"818\":3,\"819\":1,\"825\":2,\"826\":4,\"827\":4,\"828\":7,\"829\":8,\"830\":45,\"833\":2,\"834\":6,\"835\":10,\"836\":1,\"837\":1,\"838\":6,\"840\":12,\"845\":3,\"846\":27,\"848\":2,\"849\":9,\"852\":1,\"854\":11,\"855\":4,\"856\":1,\"859\":12,\"862\":5,\"864\":1,\"867\":4,\"868\":13,\"869\":45,\"871\":1,\"875\":1,\"877\":21,\"882\":1,\"884\":1,\"887\":4,\"888\":1,\"889\":3,\"891\":2,\"893\":3,\"894\":1,\"895\":1,\"896\":2,\"897\":81,\"900\":22,\"901\":5,\"902\":3,\"903\":4,\"904\":45,\"905\":4,\"907\":1,\"910\":6,\"911\":1,\"913\":3,\"917\":8,\"918\":4,\"921\":2,\"922\":1,\"925\":1,\"928\":1,\"929\":9,\"935\":7,\"936\":1,\"938\":2,\"940\":1,\"941\":1,\"944\":3,\"947\":12,\"951\":2,\"952\":1,\"957\":1,\"958\":2,\"959\":4,\"961\":3,\"963\":2}}],[\"类族\",{\"1\":{\"768\":2}}],[\"类比\",{\"0\":{\"732\":1}}],[\"类求\",{\"1\":{\"718\":1}}],[\"类时\",{\"1\":{\"717\":1,\"744\":1,\"749\":1}}],[\"类体\",{\"1\":{\"604\":1,\"605\":1,\"606\":2,\"707\":3,\"738\":1}}],[\"类别\",{\"0\":{\"608\":1,\"610\":1},\"1\":{\"192\":1,\"193\":1,\"214\":2,\"229\":1,\"232\":1,\"242\":1,\"254\":2,\"344\":1,\"354\":1,\"392\":1,\"400\":1,\"404\":1,\"416\":2,\"423\":1,\"425\":1,\"451\":3,\"504\":1,\"585\":1,\"610\":5,\"611\":2,\"857\":1,\"858\":2,\"859\":1,\"860\":1,\"887\":2,\"940\":1}}],[\"类名\",{\"1\":{\"36\":1,\"606\":2,\"607\":1,\"612\":1,\"703\":1,\"704\":1,\"706\":3,\"717\":3,\"718\":1,\"719\":1,\"722\":1,\"725\":2,\"729\":3,\"732\":1,\"735\":4,\"738\":1,\"744\":4,\"749\":1}}],[\"类外\",{\"0\":{\"706\":1},\"1\":{\"36\":3,\"612\":3,\"703\":2,\"706\":1,\"707\":4,\"708\":1,\"709\":1,\"718\":1,\"732\":1,\"734\":3,\"735\":1,\"744\":1,\"745\":1,\"769\":2}}],[\"类中应\",{\"1\":{\"709\":1}}],[\"类中\",{\"1\":{\"27\":1,\"354\":1,\"355\":1,\"525\":1,\"604\":1,\"606\":3,\"607\":2,\"715\":2,\"720\":2,\"721\":1,\"724\":1,\"726\":1,\"729\":1,\"735\":1,\"745\":2,\"793\":1,\"855\":1}}],[\"类来\",{\"0\":{\"854\":1},\"1\":{\"22\":1,\"748\":1}}],[\"类似\",{\"0\":{\"886\":1},\"1\":{\"10\":2,\"85\":1,\"86\":2,\"95\":1,\"96\":1,\"103\":1,\"104\":1,\"196\":1,\"198\":2,\"220\":1,\"227\":1,\"244\":1,\"245\":1,\"288\":2,\"293\":2,\"298\":1,\"301\":1,\"305\":1,\"312\":1,\"318\":1,\"319\":1,\"322\":1,\"344\":1,\"372\":1,\"386\":1,\"412\":1,\"417\":1,\"476\":2,\"492\":1,\"524\":1,\"574\":1,\"606\":1,\"681\":1,\"737\":1,\"744\":1,\"776\":1,\"781\":1,\"854\":1,\"884\":2,\"887\":1,\"909\":1,\"928\":1}}],[\"类型转换\",{\"0\":{\"535\":1,\"799\":1,\"801\":1,\"804\":1},\"1\":{\"587\":1,\"676\":1,\"755\":1,\"801\":1,\"804\":1,\"811\":1}}],[\"类型学\",{\"1\":{\"282\":1}}],[\"类型\",{\"0\":{\"579\":1,\"634\":1,\"637\":1,\"638\":1,\"639\":1,\"703\":1,\"755\":1,\"756\":1,\"778\":1,\"799\":1},\"1\":{\"8\":1,\"41\":4,\"42\":2,\"43\":1,\"44\":1,\"70\":1,\"85\":1,\"199\":1,\"221\":1,\"225\":1,\"227\":1,\"229\":1,\"237\":1,\"476\":1,\"512\":1,\"527\":1,\"532\":1,\"537\":1,\"539\":1,\"543\":1,\"545\":1,\"564\":1,\"571\":1,\"573\":3,\"574\":1,\"586\":2,\"587\":8,\"589\":1,\"590\":11,\"597\":2,\"600\":12,\"601\":5,\"610\":1,\"623\":2,\"633\":1,\"634\":5,\"635\":5,\"637\":4,\"638\":6,\"639\":12,\"642\":1,\"654\":1,\"656\":1,\"658\":1,\"662\":2,\"663\":1,\"665\":5,\"666\":2,\"668\":5,\"671\":1,\"675\":3,\"676\":9,\"683\":1,\"691\":3,\"703\":1,\"704\":2,\"713\":4,\"715\":1,\"717\":2,\"718\":2,\"720\":2,\"722\":1,\"729\":4,\"735\":5,\"738\":9,\"739\":3,\"740\":4,\"741\":11,\"744\":1,\"745\":1,\"748\":3,\"750\":1,\"755\":7,\"756\":7,\"757\":6,\"759\":2,\"762\":2,\"766\":2,\"769\":4,\"775\":3,\"781\":2,\"787\":2,\"799\":2,\"801\":6,\"804\":2,\"810\":2,\"818\":2,\"826\":3,\"828\":2,\"830\":4}}],[\"类仅\",{\"1\":{\"5\":1,\"502\":1}}],[\"类\",{\"0\":{\"508\":1,\"691\":1,\"700\":1,\"702\":1,\"703\":1,\"705\":1,\"737\":1,\"740\":1,\"742\":1,\"743\":1,\"791\":1},\"1\":{\"4\":1,\"5\":3,\"11\":1,\"27\":1,\"36\":2,\"45\":1,\"214\":1,\"237\":1,\"353\":7,\"354\":5,\"355\":2,\"416\":1,\"423\":1,\"429\":1,\"476\":5,\"502\":3,\"509\":1,\"524\":3,\"525\":4,\"534\":1,\"546\":1,\"583\":2,\"604\":2,\"605\":6,\"606\":26,\"607\":10,\"612\":2,\"633\":1,\"691\":3,\"692\":1,\"695\":1,\"701\":7,\"702\":4,\"704\":4,\"705\":4,\"706\":1,\"707\":2,\"708\":1,\"709\":1,\"714\":3,\"715\":2,\"717\":9,\"720\":1,\"721\":1,\"722\":3,\"724\":2,\"729\":5,\"730\":3,\"732\":6,\"734\":1,\"735\":2,\"737\":1,\"738\":12,\"739\":6,\"740\":6,\"741\":14,\"744\":4,\"745\":5,\"747\":1,\"748\":13,\"749\":2,\"750\":2,\"766\":1,\"769\":15,\"770\":2,\"781\":4,\"791\":7,\"793\":1,\"811\":1,\"825\":1,\"887\":1,\"935\":1}}],[\"定理\",{\"1\":{\"941\":1}}],[\"定律\",{\"1\":{\"897\":1}}],[\"定向\",{\"1\":{\"776\":1}}],[\"定\",{\"1\":{\"770\":1,\"824\":1}}],[\"定量\",{\"1\":{\"572\":1}}],[\"定值\",{\"1\":{\"366\":1,\"410\":1,\"415\":1}}],[\"定位\",{\"1\":{\"357\":2,\"358\":1}}],[\"定制\",{\"1\":{\"312\":1,\"370\":1}}],[\"定点\",{\"1\":{\"223\":3,\"225\":1}}],[\"定义方法\",{\"1\":{\"757\":1}}],[\"定义数据\",{\"1\":{\"654\":1}}],[\"定义\",{\"0\":{\"564\":1,\"585\":1,\"651\":1,\"658\":1,\"681\":1,\"692\":1,\"702\":1,\"704\":1,\"706\":1,\"740\":1,\"757\":1,\"855\":1},\"1\":{\"4\":2,\"11\":2,\"13\":1,\"36\":1,\"41\":1,\"45\":1,\"94\":1,\"96\":1,\"102\":1,\"103\":1,\"221\":1,\"222\":8,\"223\":5,\"225\":4,\"226\":2,\"228\":1,\"257\":1,\"299\":1,\"303\":2,\"305\":1,\"308\":4,\"312\":1,\"315\":1,\"318\":1,\"323\":1,\"342\":1,\"347\":1,\"348\":3,\"349\":1,\"353\":1,\"451\":2,\"459\":1,\"500\":1,\"509\":1,\"522\":1,\"524\":2,\"529\":1,\"532\":1,\"564\":1,\"573\":5,\"581\":1,\"583\":5,\"585\":2,\"586\":2,\"587\":1,\"590\":4,\"591\":1,\"595\":3,\"597\":1,\"598\":5,\"599\":3,\"600\":4,\"601\":1,\"604\":1,\"605\":1,\"606\":10,\"607\":1,\"609\":1,\"611\":5,\"612\":2,\"613\":1,\"614\":2,\"615\":4,\"616\":2,\"617\":2,\"620\":5,\"621\":3,\"623\":2,\"635\":2,\"638\":2,\"639\":5,\"651\":1,\"652\":3,\"654\":2,\"658\":4,\"661\":2,\"662\":1,\"665\":2,\"666\":1,\"670\":4,\"671\":2,\"672\":3,\"673\":2,\"675\":5,\"676\":1,\"682\":2,\"683\":1,\"685\":1,\"690\":1,\"691\":1,\"692\":5,\"693\":2,\"696\":4,\"698\":3,\"704\":4,\"706\":1,\"707\":10,\"708\":2,\"709\":3,\"713\":3,\"714\":3,\"715\":1,\"717\":8,\"718\":6,\"720\":4,\"721\":8,\"722\":10,\"724\":5,\"726\":1,\"728\":1,\"729\":2,\"730\":7,\"732\":7,\"734\":3,\"735\":5,\"740\":3,\"741\":6,\"744\":6,\"745\":8,\"749\":1,\"750\":2,\"755\":6,\"757\":5,\"758\":3,\"759\":1,\"762\":3,\"766\":2,\"767\":1,\"768\":1,\"769\":13,\"770\":1,\"775\":2,\"780\":1,\"781\":8,\"789\":5,\"791\":3,\"793\":5,\"816\":1,\"817\":1,\"824\":1,\"825\":2,\"826\":1,\"830\":1,\"845\":2,\"854\":3,\"855\":2,\"904\":1,\"944\":3}}],[\"定时器\",{\"0\":{\"19\":1,\"20\":1},\"1\":{\"3\":1,\"19\":5,\"20\":5}}],[\"与非\",{\"1\":{\"745\":1}}],[\"与其\",{\"1\":{\"223\":2,\"228\":1,\"268\":1,\"395\":1,\"545\":1,\"584\":1,\"887\":1}}],[\"与析构\",{\"1\":{\"27\":1}}],[\"与\",{\"0\":{\"159\":1,\"176\":1,\"180\":1,\"337\":1,\"445\":1,\"448\":1,\"477\":1,\"483\":1,\"484\":1,\"507\":1,\"509\":1,\"510\":1,\"511\":1,\"623\":1,\"626\":1,\"627\":1,\"662\":1,\"679\":1,\"683\":1,\"691\":1,\"697\":1,\"714\":1,\"723\":1,\"728\":1,\"731\":1,\"746\":1,\"748\":1,\"753\":1,\"763\":1,\"770\":1,\"772\":1,\"783\":1,\"789\":1,\"792\":1,\"797\":1,\"802\":1,\"808\":1,\"809\":1,\"810\":1,\"812\":1,\"818\":1,\"898\":1,\"936\":1},\"1\":{\"4\":2,\"11\":2,\"20\":2,\"22\":1,\"33\":1,\"36\":1,\"54\":1,\"58\":1,\"62\":1,\"63\":1,\"65\":1,\"69\":1,\"85\":1,\"86\":2,\"94\":1,\"95\":2,\"103\":1,\"128\":1,\"174\":1,\"182\":1,\"197\":2,\"201\":1,\"205\":1,\"209\":2,\"210\":1,\"218\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":3,\"225\":3,\"226\":2,\"227\":3,\"228\":2,\"234\":1,\"244\":1,\"245\":1,\"246\":2,\"250\":1,\"255\":1,\"259\":1,\"265\":1,\"273\":1,\"277\":2,\"282\":1,\"284\":1,\"288\":3,\"294\":1,\"303\":2,\"306\":1,\"308\":1,\"312\":7,\"315\":1,\"319\":1,\"320\":1,\"322\":2,\"323\":4,\"325\":1,\"342\":1,\"349\":2,\"350\":1,\"353\":1,\"354\":2,\"355\":4,\"357\":1,\"358\":1,\"370\":2,\"371\":3,\"372\":7,\"386\":1,\"391\":2,\"396\":1,\"399\":3,\"401\":1,\"408\":1,\"411\":1,\"412\":2,\"419\":1,\"436\":1,\"451\":1,\"453\":1,\"476\":2,\"485\":1,\"492\":1,\"503\":1,\"504\":1,\"509\":1,\"510\":2,\"511\":2,\"524\":1,\"529\":1,\"541\":1,\"545\":1,\"570\":2,\"577\":1,\"586\":2,\"587\":1,\"589\":2,\"590\":1,\"601\":1,\"612\":2,\"621\":1,\"625\":1,\"639\":1,\"648\":1,\"654\":1,\"663\":2,\"666\":1,\"676\":1,\"681\":1,\"701\":4,\"703\":1,\"708\":3,\"709\":2,\"717\":3,\"722\":1,\"726\":1,\"728\":1,\"735\":4,\"737\":1,\"744\":1,\"745\":2,\"750\":3,\"758\":1,\"759\":1,\"766\":1,\"768\":1,\"769\":4,\"776\":2,\"777\":1,\"781\":2,\"782\":2,\"790\":2,\"793\":2,\"794\":3,\"801\":1,\"805\":1,\"809\":1,\"810\":4,\"811\":1,\"818\":1,\"829\":3,\"830\":1,\"845\":1,\"858\":1,\"860\":1,\"867\":1,\"868\":1,\"875\":2,\"884\":1,\"887\":1,\"893\":1,\"897\":1,\"901\":1,\"906\":1,\"908\":2,\"910\":3,\"924\":1,\"935\":3,\"936\":1,\"938\":3,\"939\":1,\"940\":2,\"951\":2,\"955\":1}}],[\"其基\",{\"1\":{\"665\":1}}],[\"其后\",{\"1\":{\"645\":1}}],[\"其参\",{\"1\":{\"372\":1}}],[\"其仅\",{\"1\":{\"303\":1}}],[\"其子\",{\"1\":{\"227\":1}}],[\"其次\",{\"1\":{\"210\":1,\"242\":1,\"303\":1,\"386\":1}}],[\"其放回\",{\"1\":{\"209\":1}}],[\"其余\",{\"1\":{\"103\":4,\"210\":1,\"682\":1,\"961\":1}}],[\"其右子\",{\"1\":{\"81\":1,\"97\":2}}],[\"其根\",{\"1\":{\"69\":1}}],[\"其实\",{\"1\":{\"55\":1,\"172\":1,\"299\":1,\"379\":1,\"380\":2,\"399\":1,\"601\":1,\"686\":1,\"708\":1,\"855\":1,\"904\":1,\"906\":1}}],[\"其他\",{\"0\":{\"130\":1,\"228\":1,\"236\":1,\"543\":1,\"571\":1,\"636\":1},\"1\":{\"23\":1,\"30\":2,\"38\":1,\"39\":1,\"41\":1,\"50\":1,\"55\":1,\"168\":1,\"217\":1,\"219\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"299\":1,\"303\":1,\"353\":1,\"354\":1,\"355\":1,\"370\":1,\"409\":1,\"500\":1,\"574\":1,\"575\":1,\"583\":2,\"589\":1,\"596\":2,\"597\":2,\"598\":3,\"600\":1,\"604\":2,\"612\":1,\"617\":3,\"620\":2,\"621\":1,\"624\":2,\"668\":1,\"676\":1,\"705\":1,\"726\":1,\"748\":1,\"752\":1,\"767\":1,\"769\":2,\"785\":1,\"794\":1,\"805\":1,\"811\":1,\"816\":1,\"825\":2,\"846\":1,\"855\":1,\"859\":1,\"884\":1,\"887\":1,\"924\":1}}],[\"其值\",{\"1\":{\"20\":1,\"525\":1,\"612\":1,\"656\":1,\"661\":1,\"671\":1,\"675\":1}}],[\"其\",{\"1\":{\"8\":1,\"15\":1,\"19\":1,\"20\":1,\"23\":2,\"24\":1,\"27\":1,\"34\":1,\"39\":2,\"69\":1,\"72\":2,\"81\":2,\"95\":1,\"97\":3,\"139\":3,\"193\":1,\"194\":1,\"197\":1,\"209\":1,\"220\":6,\"222\":1,\"223\":3,\"225\":2,\"226\":1,\"244\":1,\"246\":2,\"262\":1,\"280\":1,\"282\":1,\"290\":1,\"294\":1,\"298\":1,\"301\":1,\"307\":1,\"319\":2,\"325\":2,\"337\":1,\"347\":1,\"348\":1,\"349\":2,\"353\":1,\"354\":1,\"355\":2,\"370\":3,\"372\":2,\"394\":1,\"398\":1,\"399\":1,\"419\":1,\"500\":1,\"529\":2,\"545\":5,\"563\":1,\"600\":1,\"604\":1,\"607\":1,\"619\":1,\"672\":1,\"675\":4,\"676\":2,\"689\":1,\"698\":1,\"701\":1,\"708\":1,\"719\":2,\"722\":1,\"735\":1,\"741\":2,\"744\":1,\"748\":1,\"750\":1,\"756\":1,\"769\":1,\"770\":1,\"781\":2,\"785\":2,\"793\":1,\"893\":1,\"904\":1,\"927\":1,\"928\":3,\"929\":1,\"930\":1,\"938\":5,\"939\":1,\"940\":3,\"951\":4,\"952\":1,\"953\":2,\"955\":1,\"957\":1}}],[\"其它\",{\"1\":{\"8\":1,\"203\":1,\"529\":1,\"572\":1,\"583\":1}}],[\"其二\",{\"1\":{\"4\":1,\"11\":1}}],[\"其一\",{\"1\":{\"4\":1,\"11\":1,\"644\":1}}],[\"其中\",{\"1\":{\"4\":1,\"11\":1,\"29\":2,\"38\":1,\"40\":1,\"41\":1,\"44\":1,\"75\":1,\"85\":1,\"139\":1,\"192\":2,\"203\":1,\"210\":1,\"222\":1,\"263\":1,\"282\":2,\"299\":1,\"303\":1,\"307\":1,\"308\":3,\"311\":1,\"315\":1,\"319\":2,\"320\":1,\"322\":1,\"332\":2,\"334\":1,\"338\":1,\"342\":1,\"366\":1,\"371\":1,\"372\":1,\"391\":1,\"392\":1,\"394\":1,\"395\":1,\"399\":1,\"451\":2,\"468\":1,\"476\":1,\"532\":1,\"589\":1,\"600\":1,\"606\":2,\"647\":1,\"693\":1,\"720\":1,\"724\":1,\"744\":1,\"755\":1,\"769\":2,\"770\":1,\"781\":2,\"793\":2,\"829\":1,\"862\":1,\"864\":1,\"887\":1,\"902\":1,\"908\":1,\"909\":1,\"928\":2,\"938\":2,\"939\":1,\"947\":1,\"951\":2}}],[\"两点\",{\"1\":{\"940\":1}}],[\"两全其美\",{\"1\":{\"926\":1}}],[\"两侧\",{\"1\":{\"804\":1,\"810\":1,\"814\":1}}],[\"两大类\",{\"1\":{\"610\":1}}],[\"两端\",{\"1\":{\"572\":1}}],[\"两者\",{\"1\":{\"484\":1,\"574\":1,\"875\":2,\"947\":1}}],[\"两者之间\",{\"1\":{\"5\":1,\"502\":1}}],[\"两条\",{\"1\":{\"456\":1}}],[\"两步\",{\"1\":{\"391\":1,\"854\":1}}],[\"两件事\",{\"1\":{\"366\":1,\"415\":1}}],[\"两层\",{\"1\":{\"322\":1}}],[\"两对\",{\"1\":{\"303\":1}}],[\"两项\",{\"1\":{\"303\":1,\"354\":1,\"947\":1}}],[\"两图\",{\"1\":{\"294\":1}}],[\"两组\",{\"1\":{\"270\":1}}],[\"两类\",{\"1\":{\"237\":1,\"242\":1,\"250\":1,\"895\":1}}],[\"两张\",{\"1\":{\"210\":2,\"938\":1}}],[\"两数\",{\"1\":{\"104\":1}}],[\"两次\",{\"1\":{\"103\":1,\"113\":1,\"528\":1,\"601\":1,\"609\":3}}],[\"两边\",{\"1\":{\"91\":1,\"97\":1,\"577\":1}}],[\"两篇\",{\"1\":{\"52\":2,\"940\":1}}],[\"两个\",{\"0\":{\"149\":1},\"1\":{\"23\":1,\"30\":2,\"39\":1,\"53\":1,\"56\":1,\"88\":4,\"103\":2,\"104\":1,\"126\":1,\"137\":4,\"138\":1,\"168\":1,\"199\":1,\"200\":2,\"202\":1,\"210\":2,\"222\":1,\"225\":1,\"226\":1,\"242\":1,\"259\":1,\"260\":4,\"263\":3,\"268\":3,\"282\":1,\"290\":3,\"301\":1,\"303\":2,\"305\":2,\"307\":2,\"308\":2,\"310\":1,\"322\":1,\"323\":1,\"349\":1,\"355\":1,\"356\":1,\"357\":2,\"379\":3,\"380\":2,\"394\":2,\"395\":1,\"409\":1,\"451\":1,\"468\":1,\"471\":1,\"528\":1,\"532\":3,\"535\":1,\"543\":1,\"559\":1,\"571\":1,\"574\":1,\"595\":3,\"600\":2,\"601\":3,\"616\":2,\"648\":1,\"649\":2,\"676\":6,\"689\":4,\"701\":2,\"704\":1,\"721\":1,\"724\":3,\"744\":1,\"745\":2,\"748\":1,\"757\":1,\"766\":1,\"798\":1,\"809\":2,\"825\":1,\"828\":1,\"829\":1,\"859\":1,\"884\":1,\"958\":1,\"959\":1,\"961\":1,\"963\":1}}],[\"两\",{\"1\":{\"4\":1,\"11\":1,\"103\":12,\"199\":1,\"263\":2,\"270\":1,\"372\":1,\"398\":1,\"750\":1,\"859\":1}}],[\"两种\",{\"1\":{\"4\":1,\"11\":1,\"23\":1,\"30\":1,\"33\":1,\"40\":1,\"41\":1,\"199\":1,\"222\":1,\"260\":2,\"303\":1,\"349\":1,\"380\":2,\"392\":3,\"402\":1,\"480\":1,\"648\":1,\"673\":1,\"928\":1,\"960\":1,\"961\":1}}],[\"中的\",{\"1\":{\"958\":1}}],[\"中零\",{\"1\":{\"957\":1}}],[\"中会\",{\"1\":{\"875\":1}}],[\"中分\",{\"1\":{\"828\":1}}],[\"中止\",{\"1\":{\"818\":1,\"826\":1}}],[\"中去\",{\"1\":{\"688\":2}}],[\"中取\",{\"1\":{\"665\":1}}],[\"中不含\",{\"1\":{\"665\":1}}],[\"中以\",{\"1\":{\"645\":1,\"789\":1}}],[\"中将\",{\"1\":{\"635\":1,\"959\":1}}],[\"中案\",{\"1\":{\"633\":1}}],[\"中用\",{\"1\":{\"604\":1,\"616\":1,\"617\":1,\"676\":1,\"769\":1,\"781\":2}}],[\"中栈\",{\"1\":{\"563\":2}}],[\"中未\",{\"1\":{\"546\":1}}],[\"中键\",{\"1\":{\"545\":1}}],[\"中前\",{\"1\":{\"543\":1}}],[\"中才\",{\"1\":{\"465\":1,\"767\":1}}],[\"中先\",{\"1\":{\"380\":1}}],[\"中文\",{\"1\":{\"360\":1,\"649\":1}}],[\"中有\",{\"1\":{\"295\":1,\"609\":1,\"960\":1}}],[\"中起\",{\"1\":{\"270\":1,\"527\":1}}],[\"中点\",{\"1\":{\"228\":1,\"246\":1}}],[\"中是\",{\"1\":{\"217\":1,\"283\":1,\"380\":1,\"527\":1,\"577\":1,\"666\":2,\"676\":1,\"785\":1}}],[\"中间层\",{\"1\":{\"892\":2}}],[\"中间状态\",{\"1\":{\"476\":1}}],[\"中间\",{\"0\":{\"846\":1},\"1\":{\"199\":2,\"244\":2,\"245\":1,\"246\":1,\"282\":1,\"311\":2,\"534\":1,\"572\":1,\"785\":1,\"801\":1,\"839\":1,\"930\":1,\"939\":1,\"955\":2,\"958\":1,\"960\":1,\"961\":1,\"963\":1}}],[\"中端\",{\"1\":{\"192\":1}}],[\"中等\",{\"0\":{\"144\":1},\"1\":{\"242\":1}}],[\"中包\",{\"1\":{\"137\":1}}],[\"中使\",{\"1\":{\"137\":1}}],[\"中缀\",{\"1\":{\"106\":1}}],[\"中序\",{\"1\":{\"70\":1,\"71\":1,\"86\":6,\"97\":1,\"99\":2,\"100\":2}}],[\"中心点\",{\"1\":{\"222\":1,\"223\":1,\"312\":1,\"317\":2,\"318\":3,\"319\":1,\"322\":2}}],[\"中心\",{\"1\":{\"50\":1,\"221\":1,\"312\":1,\"399\":2,\"400\":1,\"425\":1,\"446\":2,\"449\":1,\"837\":1}}],[\"中篇\",{\"1\":{\"46\":1}}],[\"中该\",{\"1\":{\"39\":1,\"137\":2}}],[\"中断\",{\"1\":{\"38\":1,\"852\":1}}],[\"中\",{\"0\":{\"100\":1,\"138\":1,\"616\":1,\"804\":1},\"1\":{\"4\":1,\"5\":1,\"8\":5,\"10\":2,\"11\":1,\"13\":3,\"16\":2,\"19\":2,\"20\":1,\"22\":2,\"27\":1,\"28\":4,\"30\":2,\"31\":5,\"32\":1,\"34\":3,\"35\":2,\"41\":1,\"43\":1,\"44\":2,\"46\":1,\"51\":2,\"53\":3,\"58\":1,\"69\":1,\"70\":2,\"71\":2,\"72\":5,\"76\":1,\"77\":2,\"80\":1,\"85\":2,\"86\":4,\"89\":2,\"96\":2,\"97\":4,\"100\":4,\"102\":1,\"103\":8,\"105\":3,\"106\":1,\"110\":2,\"112\":1,\"122\":2,\"123\":1,\"126\":4,\"128\":1,\"137\":20,\"138\":1,\"139\":1,\"165\":1,\"168\":1,\"171\":1,\"172\":2,\"184\":1,\"186\":1,\"189\":1,\"192\":1,\"193\":1,\"198\":1,\"199\":1,\"200\":2,\"201\":1,\"203\":2,\"208\":2,\"209\":2,\"210\":6,\"211\":1,\"216\":1,\"217\":2,\"218\":2,\"220\":3,\"221\":1,\"222\":11,\"223\":3,\"224\":1,\"225\":7,\"226\":5,\"227\":6,\"228\":10,\"229\":1,\"242\":2,\"246\":3,\"247\":2,\"254\":2,\"257\":1,\"259\":2,\"263\":2,\"268\":1,\"270\":1,\"276\":1,\"281\":1,\"282\":5,\"284\":4,\"288\":2,\"298\":3,\"299\":1,\"300\":2,\"303\":1,\"304\":2,\"305\":1,\"306\":1,\"307\":3,\"308\":4,\"311\":1,\"312\":2,\"313\":1,\"314\":2,\"315\":2,\"317\":2,\"318\":1,\"319\":4,\"320\":1,\"322\":5,\"323\":1,\"325\":1,\"332\":2,\"334\":3,\"337\":2,\"338\":2,\"342\":1,\"344\":2,\"348\":1,\"350\":2,\"355\":1,\"356\":1,\"357\":5,\"366\":2,\"370\":1,\"371\":2,\"372\":2,\"373\":1,\"379\":1,\"380\":4,\"391\":5,\"392\":5,\"394\":3,\"398\":5,\"399\":2,\"400\":1,\"411\":1,\"416\":1,\"419\":7,\"436\":3,\"449\":2,\"459\":1,\"464\":1,\"465\":6,\"471\":2,\"476\":1,\"485\":1,\"492\":3,\"502\":1,\"509\":1,\"525\":1,\"527\":3,\"528\":1,\"530\":1,\"532\":2,\"534\":2,\"535\":1,\"537\":2,\"538\":2,\"539\":1,\"543\":2,\"544\":1,\"545\":8,\"546\":2,\"562\":1,\"563\":2,\"570\":1,\"571\":3,\"572\":1,\"573\":1,\"577\":3,\"581\":1,\"583\":2,\"587\":1,\"589\":1,\"590\":2,\"591\":1,\"592\":1,\"594\":1,\"595\":3,\"597\":2,\"598\":7,\"599\":3,\"600\":2,\"601\":5,\"605\":2,\"606\":9,\"607\":1,\"609\":10,\"610\":2,\"611\":6,\"612\":1,\"613\":6,\"615\":3,\"616\":4,\"617\":2,\"620\":14,\"621\":3,\"624\":1,\"625\":1,\"633\":1,\"635\":1,\"639\":1,\"650\":1,\"651\":1,\"652\":2,\"654\":1,\"656\":1,\"658\":1,\"662\":2,\"664\":1,\"671\":2,\"676\":3,\"677\":1,\"682\":1,\"684\":2,\"686\":1,\"687\":2,\"688\":5,\"690\":2,\"693\":1,\"694\":1,\"695\":1,\"696\":2,\"697\":1,\"698\":3,\"701\":5,\"703\":1,\"705\":2,\"706\":1,\"707\":5,\"708\":2,\"709\":4,\"710\":1,\"713\":2,\"714\":4,\"715\":1,\"717\":4,\"718\":1,\"719\":1,\"721\":2,\"722\":4,\"725\":1,\"726\":1,\"729\":4,\"730\":1,\"732\":5,\"735\":2,\"736\":1,\"738\":1,\"739\":1,\"740\":1,\"741\":2,\"744\":4,\"745\":11,\"748\":2,\"749\":2,\"750\":5,\"751\":2,\"752\":6,\"756\":1,\"757\":1,\"758\":1,\"760\":1,\"761\":1,\"766\":7,\"767\":2,\"768\":2,\"769\":24,\"775\":1,\"776\":1,\"777\":2,\"780\":2,\"781\":14,\"782\":5,\"785\":7,\"787\":1,\"789\":1,\"801\":1,\"804\":2,\"806\":1,\"807\":1,\"808\":1,\"810\":2,\"816\":3,\"817\":3,\"818\":2,\"819\":1,\"825\":7,\"826\":7,\"827\":1,\"828\":6,\"829\":1,\"836\":2,\"843\":1,\"844\":1,\"849\":1,\"858\":1,\"859\":2,\"860\":1,\"880\":1,\"882\":1,\"884\":2,\"887\":2,\"889\":3,\"890\":1,\"893\":3,\"895\":1,\"901\":1,\"902\":1,\"904\":1,\"905\":1,\"906\":2,\"907\":2,\"910\":1,\"922\":2,\"925\":3,\"926\":4,\"928\":3,\"929\":4,\"938\":2,\"949\":1,\"951\":2,\"953\":2,\"955\":2,\"957\":4,\"958\":3,\"959\":2,\"961\":3,\"963\":1}}],[\"从纯\",{\"1\":{\"938\":1,\"951\":1}}],[\"从文件\",{\"1\":{\"793\":1}}],[\"从头\",{\"1\":{\"701\":1}}],[\"从头开始\",{\"1\":{\"153\":1,\"372\":1,\"857\":1}}],[\"从右\",{\"1\":{\"666\":1,\"803\":1,\"815\":1}}],[\"从左往右\",{\"1\":{\"595\":1,\"811\":1}}],[\"从左到右\",{\"1\":{\"72\":2,\"589\":1,\"807\":1}}],[\"从小到大\",{\"1\":{\"576\":1,\"829\":1}}],[\"从行\",{\"1\":{\"461\":1}}],[\"从不\",{\"1\":{\"254\":1}}],[\"从点\",{\"1\":{\"246\":1,\"247\":1,\"280\":1}}],[\"从未\",{\"1\":{\"198\":1,\"426\":1}}],[\"从来\",{\"1\":{\"191\":1}}],[\"从下\",{\"1\":{\"153\":1}}],[\"从大到\",{\"1\":{\"107\":1,\"576\":1,\"916\":1}}],[\"从后\",{\"1\":{\"100\":1}}],[\"从中\",{\"1\":{\"86\":1,\"781\":1,\"922\":1}}],[\"从前\",{\"1\":{\"86\":1,\"940\":1}}],[\"从根\",{\"1\":{\"82\":1}}],[\"从图\",{\"1\":{\"69\":1}}],[\"从而\",{\"1\":{\"29\":1,\"52\":1,\"94\":1,\"192\":1,\"193\":2,\"194\":2,\"199\":1,\"217\":2,\"282\":1,\"303\":1,\"307\":1,\"308\":1,\"320\":1,\"369\":1,\"379\":2,\"380\":1,\"384\":1,\"390\":1,\"391\":1,\"392\":1,\"399\":1,\"714\":1,\"736\":1,\"769\":1,\"889\":1,\"893\":1,\"957\":1}}],[\"从池\",{\"1\":{\"8\":1,\"35\":1}}],[\"从\",{\"1\":{\"4\":1,\"11\":1,\"20\":1,\"31\":2,\"38\":1,\"43\":1,\"44\":1,\"46\":2,\"71\":1,\"72\":1,\"107\":1,\"112\":1,\"153\":3,\"165\":1,\"168\":2,\"199\":1,\"200\":1,\"210\":1,\"218\":1,\"220\":3,\"227\":6,\"228\":4,\"245\":2,\"246\":1,\"247\":2,\"254\":1,\"260\":1,\"263\":1,\"270\":1,\"273\":2,\"282\":1,\"284\":3,\"288\":1,\"293\":1,\"317\":1,\"319\":1,\"332\":2,\"344\":1,\"348\":1,\"350\":2,\"357\":2,\"366\":2,\"370\":1,\"371\":1,\"372\":2,\"379\":1,\"391\":1,\"392\":1,\"394\":1,\"415\":1,\"417\":1,\"419\":3,\"456\":1,\"457\":1,\"461\":1,\"469\":2,\"471\":1,\"527\":1,\"534\":2,\"563\":1,\"573\":1,\"576\":1,\"583\":1,\"589\":1,\"595\":1,\"609\":1,\"613\":1,\"614\":1,\"621\":1,\"665\":1,\"685\":2,\"689\":1,\"693\":1,\"701\":1,\"714\":1,\"718\":1,\"745\":1,\"748\":5,\"750\":6,\"759\":1,\"769\":1,\"781\":12,\"782\":1,\"787\":1,\"791\":6,\"793\":1,\"799\":1,\"809\":1,\"815\":1,\"816\":1,\"818\":1,\"828\":4,\"862\":1,\"864\":1,\"884\":1,\"893\":2,\"905\":1,\"906\":1,\"910\":1,\"913\":2,\"925\":2,\"929\":1,\"939\":1,\"957\":1}}],[\"进制\",{\"1\":{\"663\":1}}],[\"进展\",{\"1\":{\"402\":1}}],[\"进阶\",{\"1\":{\"358\":1}}],[\"进去\",{\"1\":{\"338\":1}}],[\"进来\",{\"1\":{\"99\":1,\"692\":1,\"930\":1}}],[\"进而\",{\"1\":{\"70\":1,\"372\":1,\"957\":1}}],[\"进一步提高\",{\"1\":{\"245\":1,\"357\":1}}],[\"进一步\",{\"0\":{\"638\":1},\"1\":{\"38\":1,\"103\":1,\"210\":1,\"222\":1,\"228\":3,\"245\":2,\"246\":2,\"247\":1,\"254\":2,\"260\":1,\"283\":1,\"300\":1,\"306\":1,\"357\":2,\"386\":1,\"889\":1,\"893\":1,\"928\":1,\"953\":1}}],[\"进程\",{\"1\":{\"13\":6,\"16\":2,\"28\":2,\"30\":3,\"33\":1,\"841\":3,\"852\":6}}],[\"进入\",{\"1\":{\"8\":1,\"24\":1,\"26\":1,\"35\":1,\"165\":1,\"172\":1,\"191\":2,\"351\":1,\"395\":1,\"484\":1}}],[\"进\",{\"1\":{\"4\":1,\"11\":1,\"390\":1}}],[\"进行\",{\"0\":{\"711\":1},\"1\":{\"4\":1,\"8\":1,\"10\":1,\"11\":1,\"16\":2,\"17\":1,\"19\":1,\"23\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":5,\"43\":2,\"44\":2,\"45\":1,\"46\":2,\"49\":1,\"50\":1,\"51\":4,\"52\":2,\"54\":1,\"55\":5,\"72\":1,\"86\":1,\"94\":2,\"95\":1,\"96\":1,\"103\":2,\"128\":1,\"189\":1,\"192\":2,\"194\":1,\"196\":2,\"197\":1,\"198\":3,\"203\":1,\"205\":1,\"209\":1,\"217\":1,\"218\":2,\"222\":1,\"223\":2,\"225\":2,\"226\":2,\"227\":1,\"228\":6,\"245\":2,\"246\":3,\"250\":1,\"259\":2,\"260\":5,\"261\":1,\"262\":1,\"268\":1,\"272\":1,\"280\":1,\"282\":4,\"288\":1,\"290\":1,\"293\":1,\"294\":1,\"295\":1,\"299\":1,\"304\":3,\"308\":2,\"311\":1,\"312\":3,\"314\":1,\"315\":2,\"316\":1,\"318\":1,\"319\":8,\"320\":2,\"323\":1,\"327\":1,\"331\":1,\"332\":1,\"337\":1,\"340\":1,\"344\":1,\"348\":3,\"349\":2,\"350\":1,\"355\":1,\"366\":1,\"370\":2,\"371\":1,\"372\":4,\"380\":2,\"391\":3,\"392\":2,\"396\":1,\"402\":2,\"404\":1,\"405\":2,\"408\":2,\"410\":3,\"411\":1,\"415\":1,\"416\":2,\"417\":3,\"419\":3,\"425\":1,\"436\":1,\"446\":1,\"467\":1,\"469\":2,\"471\":2,\"484\":2,\"492\":5,\"528\":1,\"529\":4,\"531\":1,\"545\":1,\"546\":3,\"574\":1,\"586\":1,\"587\":1,\"590\":2,\"595\":1,\"604\":1,\"609\":1,\"612\":1,\"689\":1,\"692\":1,\"695\":1,\"701\":1,\"709\":1,\"713\":3,\"714\":1,\"715\":1,\"724\":1,\"725\":1,\"729\":1,\"745\":2,\"758\":1,\"769\":1,\"770\":2,\"781\":1,\"784\":1,\"788\":2,\"791\":1,\"793\":1,\"794\":3,\"799\":1,\"804\":1,\"807\":1,\"809\":1,\"810\":1,\"818\":2,\"824\":1,\"826\":1,\"827\":1,\"829\":1,\"830\":1,\"846\":1,\"854\":1,\"857\":2,\"858\":1,\"859\":3,\"860\":1,\"863\":1,\"864\":1,\"868\":1,\"883\":1,\"884\":2,\"887\":2,\"889\":1,\"893\":1,\"895\":1,\"905\":1,\"912\":2,\"922\":3,\"928\":1,\"929\":4,\"935\":2,\"953\":2,\"959\":5,\"963\":1}}],[\"pdata\",{\"1\":{\"904\":7}}],[\"pd\",{\"1\":{\"872\":1}}],[\"pdf\",{\"1\":{\"359\":1,\"938\":1,\"950\":1,\"951\":1}}],[\"p3\",{\"1\":{\"668\":2,\"676\":3,\"735\":1}}],[\"photograph\",{\"1\":{\"929\":1}}],[\"photo\",{\"1\":{\"860\":4}}],[\"physcal\",{\"1\":{\"449\":1}}],[\"phase\",{\"1\":{\"51\":2}}],[\"people\",{\"1\":{\"687\":1}}],[\"peak\",{\"1\":{\"451\":1}}],[\"pedestrian\",{\"1\":{\"428\":1}}],[\"perception\",{\"1\":{\"872\":1}}],[\"perceptual\",{\"0\":{\"963\":1},\"1\":{\"864\":1,\"928\":2,\"963\":1}}],[\"persistent\",{\"1\":{\"845\":1}}],[\"persons\",{\"1\":{\"428\":1}}],[\"person\",{\"1\":{\"422\":5,\"428\":1,\"759\":3}}],[\"performed\",{\"1\":{\"956\":1}}],[\"perform\",{\"1\":{\"427\":1}}],[\"performing\",{\"1\":{\"427\":1}}],[\"performance\",{\"1\":{\"261\":1}}],[\"per\",{\"1\":{\"422\":2,\"424\":1,\"429\":1}}],[\"permitrootlogin\",{\"1\":{\"186\":1}}],[\"permutations\",{\"1\":{\"126\":2}}],[\"permuteunique\",{\"1\":{\"126\":1}}],[\"permute\",{\"1\":{\"125\":1,\"344\":1}}],[\"permanently\",{\"1\":{\"43\":1,\"476\":1}}],[\"pk\",{\"1\":{\"371\":5,\"372\":2}}],[\"pkg\",{\"1\":{\"44\":2}}],[\"png\",{\"1\":{\"835\":1}}],[\"pn\",{\"1\":{\"363\":2,\"364\":3}}],[\"p0\",{\"1\":{\"363\":2,\"364\":2,\"366\":2,\"371\":2,\"372\":2,\"829\":32,\"830\":13}}],[\"psa\",{\"1\":{\"887\":1}}],[\"psnr\",{\"1\":{\"451\":3,\"875\":1,\"910\":4,\"928\":1}}],[\"ps\",{\"1\":{\"354\":1,\"388\":1,\"841\":1,\"852\":1}}],[\"ptc\",{\"0\":{\"892\":1},\"1\":{\"893\":1}}],[\"pth\",{\"1\":{\"846\":2}}],[\"pthread\",{\"1\":{\"8\":4,\"24\":4,\"25\":4,\"27\":4}}],[\"pts\",{\"1\":{\"841\":1}}],[\"ptr3\",{\"1\":{\"667\":1}}],[\"ptr2\",{\"1\":{\"667\":1}}],[\"ptr\",{\"1\":{\"664\":5,\"665\":4,\"666\":13,\"762\":1}}],[\"ptr1\",{\"1\":{\"522\":6,\"667\":1,\"668\":2}}],[\"pt\",{\"1\":{\"353\":2,\"354\":3,\"355\":4,\"356\":1,\"357\":1,\"673\":3,\"713\":2,\"714\":11,\"732\":14,\"766\":1,\"769\":6,\"770\":1,\"929\":1}}],[\"ppid\",{\"1\":{\"852\":1}}],[\"pp\",{\"1\":{\"342\":2}}],[\"ppd\",{\"1\":{\"323\":2}}],[\"pbr\",{\"1\":{\"340\":1}}],[\"pgae\",{\"1\":{\"696\":1}}],[\"pgk\",{\"1\":{\"372\":3}}],[\"pgt\",{\"1\":{\"323\":1}}],[\"pg\",{\"1\":{\"323\":1,\"342\":2,\"451\":2}}],[\"pj\",{\"1\":{\"268\":1}}],[\"pvt\",{\"1\":{\"389\":1}}],[\"pvalid\",{\"1\":{\"338\":1}}],[\"pvcnn\",{\"1\":{\"280\":1}}],[\"pvrnet\",{\"1\":{\"228\":1}}],[\"pvnet\",{\"1\":{\"228\":1}}],[\"pid\",{\"1\":{\"841\":3,\"852\":5}}],[\"pixels\",{\"1\":{\"422\":1}}],[\"pixel\",{\"1\":{\"422\":1,\"887\":1,\"888\":1,\"889\":1,\"922\":2}}],[\"picassooo\",{\"1\":{\"359\":1}}],[\"pi\",{\"1\":{\"268\":1,\"298\":3,\"305\":1,\"347\":1,\"353\":1,\"354\":1}}],[\"pin\",{\"1\":{\"210\":4,\"845\":2}}],[\"pipeline\",{\"1\":{\"49\":1}}],[\"p2\",{\"1\":{\"209\":2,\"638\":2,\"668\":2,\"672\":1,\"676\":11,\"698\":7,\"735\":4,\"782\":2,\"826\":16,\"828\":11,\"829\":9,\"830\":15}}],[\"p193\",{\"1\":{\"757\":1}}],[\"p108\",{\"1\":{\"621\":1}}],[\"p1\",{\"1\":{\"209\":2,\"210\":2,\"298\":3,\"638\":2,\"676\":11,\"698\":7,\"734\":5,\"782\":2,\"826\":26,\"828\":25,\"829\":34,\"830\":43}}],[\"pq\",{\"1\":{\"192\":1}}],[\"pqrs\",{\"1\":{\"114\":2}}],[\"pyplot\",{\"1\":{\"838\":1}}],[\"pydata\",{\"1\":{\"836\":1}}],[\"pytorch\",{\"1\":{\"344\":1,\"845\":1,\"852\":1,\"854\":1,\"891\":1}}],[\"python3\",{\"1\":{\"188\":1,\"833\":1}}],[\"python\",{\"0\":{\"835\":1},\"1\":{\"126\":2,\"304\":1,\"545\":4,\"832\":2,\"833\":1,\"835\":1,\"836\":2,\"841\":1}}],[\"py\",{\"1\":{\"304\":1,\"305\":1,\"411\":1,\"877\":1}}],[\"pycharm\",{\"1\":{\"189\":1}}],[\"plt\",{\"1\":{\"838\":2}}],[\"please\",{\"1\":{\"745\":1}}],[\"plant\",{\"1\":{\"429\":2}}],[\"plantae\",{\"1\":{\"429\":2}}],[\"places\",{\"0\":{\"424\":1},\"1\":{\"424\":2}}],[\"platform\",{\"1\":{\"188\":3,\"833\":1}}],[\"plugins\",{\"1\":{\"188\":2}}],[\"plugin\",{\"1\":{\"188\":3}}],[\"pwke\",{\"1\":{\"139\":1}}],[\"pwwkew\",{\"1\":{\"139\":1}}],[\"pcnn\",{\"1\":{\"222\":2}}],[\"pc\",{\"1\":{\"54\":4}}],[\"paddings\",{\"1\":{\"929\":1}}],[\"padding\",{\"1\":{\"929\":1}}],[\"palette\",{\"1\":{\"901\":2}}],[\"page\",{\"1\":{\"427\":1,\"618\":1}}],[\"paper\",{\"1\":{\"340\":1,\"889\":1,\"950\":2,\"960\":1}}],[\"papers\",{\"1\":{\"48\":1,\"192\":1,\"198\":1,\"211\":2,\"256\":1,\"262\":1,\"266\":1,\"271\":1,\"272\":1,\"273\":2,\"313\":1,\"342\":1,\"343\":1,\"397\":1,\"862\":1,\"864\":1,\"871\":1,\"890\":1,\"939\":1,\"940\":1,\"944\":1,\"945\":1,\"947\":2}}],[\"paches\",{\"1\":{\"263\":1}}],[\"pack\",{\"1\":{\"44\":3}}],[\"packages\",{\"1\":{\"188\":1}}],[\"package\",{\"1\":{\"44\":1}}],[\"param\",{\"1\":{\"835\":5}}],[\"parameter\",{\"1\":{\"344\":3,\"366\":1,\"586\":1,\"590\":2,\"859\":1}}],[\"parameters\",{\"1\":{\"309\":1,\"877\":1}}],[\"params\",{\"1\":{\"229\":1}}],[\"part\",{\"1\":{\"313\":1}}],[\"partnet\",{\"1\":{\"194\":1}}],[\"partitioning\",{\"1\":{\"315\":1,\"383\":2}}],[\"partition\",{\"1\":{\"118\":1,\"380\":3}}],[\"partial\",{\"1\":{\"43\":1,\"309\":1,\"476\":1}}],[\"pan\",{\"1\":{\"226\":1}}],[\"panopticsegmentation\",{\"1\":{\"425\":1}}],[\"panoptic\",{\"1\":{\"195\":1,\"422\":1}}],[\"patch14\",{\"1\":{\"929\":3}}],[\"patch\",{\"0\":{\"381\":1,\"382\":1,\"892\":1},\"1\":{\"315\":1,\"323\":6,\"379\":1,\"380\":7,\"392\":2,\"873\":1,\"892\":1,\"928\":1,\"956\":1}}],[\"patches\",{\"1\":{\"263\":1,\"314\":5,\"380\":1}}],[\"pats\",{\"1\":{\"220\":1}}],[\"pathlist\",{\"1\":{\"835\":2}}],[\"pathlib\",{\"1\":{\"835\":1}}],[\"path\",{\"0\":{\"963\":1},\"1\":{\"82\":20,\"85\":4,\"112\":9,\"113\":5,\"114\":4,\"115\":4,\"116\":4,\"118\":5,\"119\":8,\"121\":5,\"122\":4,\"123\":7,\"125\":6,\"126\":5,\"835\":4,\"846\":2,\"963\":1}}],[\"pathsum\",{\"1\":{\"85\":1}}],[\"paths\",{\"1\":{\"82\":1}}],[\"pass\",{\"1\":{\"195\":1,\"304\":1}}],[\"passwd\",{\"1\":{\"186\":1}}],[\"pairs\",{\"1\":{\"426\":1}}],[\"paired\",{\"1\":{\"309\":1}}],[\"pair\",{\"1\":{\"90\":1,\"100\":3,\"263\":1,\"544\":1,\"545\":1,\"559\":4,\"561\":1}}],[\"pow\",{\"1\":{\"854\":1,\"855\":1}}],[\"polarmask\",{\"1\":{\"402\":1}}],[\"poll\",{\"0\":{\"38\":1,\"494\":1},\"1\":{\"30\":1,\"38\":8,\"492\":2,\"499\":1}}],[\"pooled\",{\"1\":{\"228\":1,\"309\":1}}],[\"pooling\",{\"0\":{\"206\":1,\"307\":1,\"308\":1,\"365\":1,\"366\":1,\"367\":1,\"415\":1},\"1\":{\"195\":2,\"220\":2,\"225\":2,\"309\":9,\"312\":1,\"366\":4,\"408\":1,\"409\":1,\"410\":1,\"415\":1,\"416\":1,\"419\":7}}],[\"pout\",{\"1\":{\"209\":1,\"210\":3}}],[\"potentially\",{\"1\":{\"261\":1}}],[\"potential\",{\"1\":{\"201\":1}}],[\"port\",{\"1\":{\"186\":1}}],[\"pop\",{\"1\":{\"71\":3,\"72\":9,\"73\":1,\"75\":1,\"82\":2,\"84\":1,\"85\":7,\"99\":1,\"100\":1,\"106\":5,\"107\":5,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"118\":2,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"125\":1,\"126\":1,\"540\":2,\"563\":1,\"566\":3,\"567\":1,\"570\":2,\"574\":2,\"577\":1}}],[\"pointername\",{\"1\":{\"665\":1,\"734\":1}}],[\"pointer\",{\"0\":{\"667\":1},\"1\":{\"638\":4,\"664\":2,\"712\":1}}],[\"pointflow\",{\"1\":{\"337\":1}}],[\"pointmvs\",{\"0\":{\"326\":1},\"1\":{\"340\":1}}],[\"pointgpt\",{\"0\":{\"313\":1,\"314\":1},\"1\":{\"229\":1,\"313\":2,\"314\":1,\"316\":1,\"319\":1,\"325\":3,\"340\":1}}],[\"pointgcn\",{\"1\":{\"226\":1}}],[\"pointdan\",{\"1\":{\"228\":1}}],[\"point2sequences\",{\"1\":{\"228\":1}}],[\"pointcontrast\",{\"0\":{\"256\":1},\"1\":{\"256\":1,\"261\":1,\"262\":1,\"265\":1}}],[\"pointconv\",{\"1\":{\"222\":1}}],[\"pointcnn\",{\"1\":{\"223\":1}}],[\"pointweb\",{\"1\":{\"220\":1}}],[\"pointnet\",{\"1\":{\"220\":13,\"225\":2,\"227\":2,\"247\":1,\"248\":2,\"263\":1,\"272\":1,\"306\":1,\"312\":5,\"319\":6}}],[\"points\",{\"1\":{\"195\":1,\"305\":9,\"342\":2,\"372\":1}}],[\"point\",{\"0\":{\"56\":1,\"212\":1,\"272\":1,\"315\":1,\"953\":1,\"956\":1},\"1\":{\"48\":1,\"195\":1,\"211\":1,\"220\":1,\"256\":1,\"259\":1,\"262\":1,\"263\":2,\"265\":1,\"272\":3,\"273\":2,\"275\":1,\"312\":1,\"313\":1,\"314\":4,\"315\":1,\"317\":1,\"319\":1,\"321\":1,\"372\":1,\"422\":1,\"953\":1,\"955\":2,\"956\":1}}],[\"possesses\",{\"1\":{\"427\":1}}],[\"possible\",{\"1\":{\"422\":1}}],[\"posed\",{\"1\":{\"875\":1}}],[\"posediffusion\",{\"0\":{\"894\":1},\"1\":{\"453\":1,\"894\":1}}],[\"pose\",{\"1\":{\"422\":1,\"894\":1}}],[\"pos\",{\"1\":{\"344\":4,\"534\":1,\"541\":2,\"840\":2}}],[\"positional\",{\"1\":{\"322\":2,\"344\":3,\"854\":1}}],[\"position\",{\"0\":{\"367\":1},\"1\":{\"201\":1,\"539\":2}}],[\"positive\",{\"1\":{\"49\":1,\"263\":1,\"411\":1,\"412\":1}}],[\"posix\",{\"1\":{\"13\":1,\"28\":1}}],[\"postordertraversal\",{\"1\":{\"71\":1}}],[\"postive\",{\"1\":{\"52\":1,\"411\":1}}],[\"post\",{\"0\":{\"477\":1},\"1\":{\"3\":1,\"23\":2,\"41\":3,\"314\":1}}],[\"pr\",{\"1\":{\"559\":2}}],[\"pruning\",{\"0\":{\"385\":1},\"1\":{\"385\":1,\"390\":1}}],[\"print\",{\"1\":{\"762\":6,\"827\":2,\"830\":9,\"840\":2,\"846\":3,\"849\":2}}],[\"printstar\",{\"1\":{\"583\":3}}],[\"pricedesc\",{\"1\":{\"469\":1}}],[\"price\",{\"1\":{\"458\":1,\"468\":2,\"469\":4,\"471\":3,\"650\":2,\"665\":1}}],[\"prices\",{\"1\":{\"148\":4}}],[\"priority\",{\"0\":{\"578\":1},\"1\":{\"578\":1}}],[\"prior\",{\"1\":{\"309\":3}}],[\"privileged\",{\"1\":{\"184\":2}}],[\"private\",{\"1\":{\"27\":1,\"100\":1,\"103\":1,\"107\":1,\"605\":1,\"606\":2,\"703\":4,\"704\":2,\"705\":1,\"706\":1,\"707\":1,\"715\":1,\"717\":1,\"718\":1,\"721\":1,\"722\":1,\"724\":1,\"738\":1,\"744\":1,\"745\":1,\"749\":3,\"769\":1}}],[\"preserving\",{\"1\":{\"900\":1}}],[\"preception\",{\"1\":{\"872\":1}}],[\"preceding\",{\"1\":{\"321\":2,\"361\":2}}],[\"prefetch\",{\"1\":{\"845\":1}}],[\"predictor\",{\"1\":{\"873\":1,\"874\":1}}],[\"predict\",{\"1\":{\"873\":1}}],[\"prediction\",{\"0\":{\"202\":1,\"281\":1},\"1\":{\"202\":1,\"273\":2,\"314\":1,\"322\":1,\"889\":1}}],[\"pred\",{\"1\":{\"838\":5,\"840\":2}}],[\"preprocessed\",{\"1\":{\"426\":2}}],[\"preproj\",{\"1\":{\"298\":1}}],[\"pretrained\",{\"1\":{\"344\":1,\"846\":3,\"929\":4}}],[\"pretraining\",{\"1\":{\"262\":1}}],[\"preorder\",{\"1\":{\"82\":5,\"86\":10}}],[\"preordertraversal\",{\"1\":{\"71\":1}}],[\"pre\",{\"1\":{\"72\":12,\"95\":1,\"99\":10,\"100\":14,\"103\":9,\"146\":4,\"191\":1,\"256\":1,\"261\":1,\"272\":2,\"273\":2,\"313\":1,\"314\":1,\"321\":1}}],[\"previous\",{\"1\":{\"380\":1,\"383\":1,\"422\":1,\"428\":1}}],[\"prev\",{\"1\":{\"71\":2}}],[\"practical\",{\"0\":{\"55\":1},\"1\":{\"53\":1}}],[\"proceedings\",{\"1\":{\"950\":1}}],[\"process\",{\"0\":{\"897\":1},\"1\":{\"8\":1,\"44\":2,\"46\":2,\"945\":1}}],[\"proj\",{\"1\":{\"838\":3,\"859\":2}}],[\"protected\",{\"1\":{\"703\":2,\"715\":1,\"749\":1,\"769\":1}}],[\"prototype\",{\"1\":{\"590\":1,\"619\":1}}],[\"protozoa\",{\"1\":{\"429\":1}}],[\"protocol\",{\"1\":{\"49\":1,\"475\":1}}],[\"proxy\",{\"1\":{\"530\":2,\"531\":2}}],[\"prod\",{\"1\":{\"458\":3,\"461\":2,\"462\":1,\"467\":2,\"468\":5,\"469\":7,\"471\":4}}],[\"prode\",{\"1\":{\"457\":1}}],[\"products\",{\"1\":{\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"461\":2,\"462\":2,\"467\":1,\"468\":1,\"469\":2,\"471\":2}}],[\"product\",{\"1\":{\"457\":1}}],[\"produce\",{\"1\":{\"380\":1}}],[\"program\",{\"1\":{\"785\":1}}],[\"programmercarl\",{\"1\":{\"103\":1,\"104\":1}}],[\"progress\",{\"1\":{\"427\":2}}],[\"providing\",{\"1\":{\"383\":1}}],[\"provided\",{\"1\":{\"191\":1,\"426\":1}}],[\"proportion\",{\"1\":{\"321\":1}}],[\"proposed\",{\"1\":{\"321\":1,\"380\":1,\"383\":1,\"424\":1}}],[\"proposal\",{\"0\":{\"251\":1,\"252\":1,\"411\":1},\"1\":{\"417\":9}}],[\"probabilistic\",{\"0\":{\"866\":1,\"938\":1,\"940\":1,\"951\":1,\"953\":1},\"1\":{\"910\":2,\"938\":1,\"940\":1,\"951\":1,\"953\":1}}],[\"probability\",{\"1\":{\"293\":1}}],[\"problem\",{\"1\":{\"188\":1}}],[\"problems\",{\"1\":{\"81\":1,\"82\":1,\"126\":2,\"427\":1}}],[\"prokudin\",{\"1\":{\"228\":1}}],[\"prompting\",{\"1\":{\"889\":1}}],[\"prompts\",{\"1\":{\"322\":1}}],[\"prompt\",{\"1\":{\"48\":1,\"860\":1,\"929\":2,\"945\":1}}],[\"professional\",{\"1\":{\"41\":1}}],[\"proactor\",{\"0\":{\"13\":1,\"32\":1,\"498\":1},\"1\":{\"13\":2,\"31\":1,\"32\":1,\"34\":1,\"499\":1}}],[\"pulse\",{\"1\":{\"910\":1}}],[\"pull\",{\"1\":{\"165\":1,\"184\":1}}],[\"putgetgetline\",{\"1\":{\"781\":1}}],[\"put\",{\"0\":{\"779\":1},\"1\":{\"781\":4}}],[\"pub\",{\"1\":{\"359\":2}}],[\"publisher\",{\"1\":{\"41\":1}}],[\"publicly\",{\"1\":{\"422\":1}}],[\"public\",{\"1\":{\"27\":1,\"70\":1,\"72\":5,\"74\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"85\":1,\"87\":1,\"90\":1,\"96\":1,\"99\":2,\"100\":4,\"102\":1,\"103\":6,\"104\":6,\"105\":6,\"106\":2,\"107\":2,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"118\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"125\":1,\"126\":1,\"128\":1,\"138\":1,\"139\":1,\"142\":1,\"143\":1,\"148\":1,\"524\":1,\"605\":1,\"606\":2,\"703\":3,\"704\":2,\"705\":1,\"706\":1,\"707\":1,\"709\":2,\"717\":2,\"718\":1,\"721\":1,\"722\":1,\"724\":1,\"732\":1,\"734\":1,\"738\":1,\"744\":2,\"745\":1,\"749\":6,\"769\":3}}],[\"purpose\",{\"1\":{\"380\":1}}],[\"purposes\",{\"1\":{\"314\":1}}],[\"purge\",{\"1\":{\"191\":1}}],[\"push\",{\"1\":{\"4\":1,\"11\":1,\"70\":1,\"71\":10,\"72\":35,\"73\":3,\"75\":3,\"82\":11,\"84\":3,\"85\":8,\"99\":2,\"100\":5,\"102\":4,\"104\":2,\"105\":2,\"106\":8,\"107\":8,\"112\":2,\"113\":2,\"114\":2,\"115\":2,\"116\":2,\"118\":2,\"119\":2,\"121\":3,\"122\":2,\"123\":2,\"125\":2,\"126\":2,\"128\":1,\"138\":1,\"534\":4,\"539\":4,\"540\":4,\"541\":3,\"542\":1,\"563\":1,\"565\":2,\"570\":4,\"574\":2,\"577\":1}}],[\"p\",{\"1\":{\"23\":3,\"56\":1,\"86\":4,\"89\":4,\"91\":8,\"97\":2,\"138\":9,\"165\":2,\"184\":2,\"196\":1,\"200\":1,\"209\":1,\"210\":3,\"221\":1,\"268\":3,\"290\":5,\"293\":1,\"298\":1,\"308\":2,\"317\":1,\"334\":2,\"338\":4,\"347\":6,\"348\":16,\"349\":22,\"353\":2,\"354\":3,\"363\":1,\"364\":1,\"366\":2,\"371\":1,\"394\":1,\"451\":7,\"525\":8,\"538\":3,\"539\":12,\"543\":5,\"638\":2,\"665\":2,\"668\":2,\"670\":8,\"671\":12,\"672\":1,\"675\":22,\"676\":16,\"682\":2,\"709\":9,\"712\":2,\"713\":14,\"735\":9,\"760\":12,\"769\":4,\"825\":11,\"827\":15,\"828\":2,\"830\":7,\"835\":6,\"893\":2,\"897\":9,\"902\":2,\"903\":1,\"904\":3,\"905\":2,\"917\":1,\"944\":1}}],[\"写出\",{\"1\":{\"639\":1,\"730\":1,\"741\":1,\"827\":1}}],[\"写回\",{\"1\":{\"528\":1}}],[\"写成\",{\"1\":{\"99\":1,\"354\":1,\"590\":1,\"735\":1,\"740\":1,\"741\":1,\"869\":1,\"944\":1}}],[\"写法\",{\"1\":{\"83\":1,\"116\":1,\"590\":1,\"689\":1,\"704\":1,\"714\":1,\"720\":1,\"735\":1}}],[\"写呢\",{\"1\":{\"72\":1}}],[\"写\",{\"1\":{\"4\":3,\"11\":3,\"15\":3,\"16\":5,\"30\":2,\"32\":1,\"38\":1,\"70\":4,\"104\":1,\"105\":2,\"112\":1,\"191\":1,\"492\":2,\"530\":1,\"590\":1,\"599\":1,\"639\":1,\"707\":1,\"717\":1,\"735\":1,\"781\":1,\"782\":1,\"793\":3,\"837\":1}}],[\"写入\",{\"1\":{\"4\":3,\"11\":3,\"32\":1,\"46\":1,\"528\":1,\"781\":1,\"793\":1,\"837\":1}}],[\"为真\",{\"1\":{\"819\":1}}],[\"为学\",{\"1\":{\"730\":1}}],[\"为类\",{\"1\":{\"729\":1}}],[\"为啥\",{\"1\":{\"690\":1}}],[\"为常\",{\"1\":{\"671\":2,\"673\":1}}],[\"为底\",{\"1\":{\"645\":1}}],[\"为友元\",{\"0\":{\"605\":1}}],[\"为准\",{\"1\":{\"587\":1,\"621\":1,\"689\":1}}],[\"为栈\",{\"1\":{\"563\":1}}],[\"为键\",{\"1\":{\"545\":1}}],[\"为点\",{\"1\":{\"263\":1,\"327\":1}}],[\"为此\",{\"1\":{\"218\":1,\"246\":1,\"248\":1,\"305\":1,\"953\":1}}],[\"为止\",{\"1\":{\"107\":1,\"689\":1,\"781\":2,\"829\":1}}],[\"为根\",{\"1\":{\"81\":1,\"97\":4}}],[\"为了\",{\"1\":{\"44\":1,\"53\":1,\"80\":1,\"199\":1,\"209\":1,\"217\":1,\"222\":2,\"223\":1,\"225\":1,\"226\":4,\"228\":3,\"242\":1,\"245\":2,\"247\":1,\"249\":1,\"259\":1,\"270\":1,\"273\":1,\"300\":1,\"314\":1,\"315\":1,\"318\":1,\"319\":1,\"320\":2,\"322\":1,\"349\":2,\"353\":1,\"366\":1,\"373\":1,\"379\":1,\"380\":2,\"391\":1,\"396\":1,\"415\":1,\"456\":1,\"469\":1,\"527\":3,\"528\":1,\"530\":2,\"573\":1,\"590\":1,\"613\":1,\"665\":1,\"667\":1,\"707\":1,\"745\":2,\"769\":1,\"785\":1,\"801\":1,\"807\":2,\"818\":1,\"864\":1,\"902\":1,\"922\":1,\"928\":3,\"940\":1,\"959\":1}}],[\"为空\",{\"0\":{\"568\":1},\"1\":{\"41\":2,\"71\":5,\"72\":1,\"93\":1,\"97\":4,\"99\":2,\"107\":1,\"540\":2,\"542\":2,\"556\":2,\"567\":1,\"571\":1,\"667\":1,\"826\":1}}],[\"为例\",{\"1\":{\"32\":1,\"34\":1,\"210\":2,\"392\":1,\"859\":1}}],[\"为主\",{\"1\":{\"31\":1,\"436\":1}}],[\"为什么\",{\"0\":{\"8\":1,\"17\":1,\"446\":1},\"1\":{\"49\":2,\"82\":1,\"85\":1,\"103\":1,\"104\":1,\"105\":1,\"118\":1,\"121\":1,\"122\":1,\"146\":1,\"290\":1,\"304\":1,\"348\":1,\"366\":1,\"409\":1,\"464\":1,\"600\":1,\"920\":2,\"958\":1}}],[\"为\",{\"1\":{\"4\":1,\"11\":1,\"19\":1,\"20\":1,\"23\":2,\"25\":1,\"27\":1,\"34\":1,\"36\":2,\"37\":4,\"40\":2,\"41\":2,\"42\":3,\"69\":5,\"71\":3,\"72\":1,\"73\":1,\"75\":2,\"77\":1,\"80\":3,\"85\":1,\"88\":2,\"89\":1,\"93\":1,\"95\":2,\"96\":1,\"97\":6,\"100\":1,\"103\":2,\"104\":1,\"113\":1,\"139\":3,\"153\":2,\"168\":1,\"170\":1,\"174\":3,\"175\":1,\"192\":2,\"194\":1,\"196\":1,\"197\":1,\"199\":3,\"200\":2,\"201\":1,\"204\":1,\"209\":2,\"210\":2,\"220\":1,\"221\":1,\"222\":9,\"223\":5,\"224\":1,\"225\":4,\"226\":2,\"227\":1,\"228\":3,\"235\":1,\"242\":2,\"244\":1,\"245\":1,\"246\":2,\"257\":1,\"261\":3,\"263\":1,\"268\":1,\"270\":1,\"280\":1,\"282\":1,\"288\":1,\"290\":5,\"292\":2,\"293\":1,\"299\":2,\"303\":3,\"304\":2,\"305\":1,\"307\":2,\"308\":4,\"315\":5,\"316\":1,\"318\":1,\"331\":1,\"332\":3,\"338\":1,\"342\":2,\"347\":4,\"348\":4,\"353\":2,\"354\":3,\"355\":1,\"357\":3,\"359\":1,\"366\":1,\"372\":5,\"379\":1,\"380\":1,\"386\":1,\"390\":1,\"391\":1,\"393\":1,\"394\":1,\"395\":3,\"399\":1,\"404\":1,\"406\":1,\"410\":1,\"411\":2,\"415\":1,\"416\":1,\"417\":1,\"419\":2,\"423\":2,\"425\":1,\"436\":1,\"437\":1,\"446\":1,\"449\":2,\"451\":15,\"461\":1,\"485\":1,\"492\":1,\"522\":2,\"524\":2,\"527\":1,\"528\":2,\"529\":1,\"530\":1,\"531\":2,\"532\":3,\"534\":2,\"535\":9,\"538\":7,\"539\":4,\"540\":2,\"541\":2,\"542\":5,\"543\":5,\"545\":1,\"546\":1,\"559\":1,\"563\":4,\"564\":2,\"568\":2,\"573\":3,\"583\":1,\"589\":2,\"590\":1,\"594\":1,\"597\":1,\"598\":1,\"599\":1,\"600\":5,\"605\":1,\"606\":2,\"607\":4,\"611\":3,\"612\":8,\"614\":1,\"620\":1,\"634\":1,\"635\":2,\"638\":8,\"640\":1,\"644\":1,\"652\":2,\"657\":1,\"667\":1,\"668\":1,\"670\":1,\"671\":2,\"675\":7,\"676\":6,\"682\":1,\"684\":1,\"687\":1,\"690\":3,\"692\":1,\"693\":1,\"695\":1,\"696\":1,\"698\":1,\"701\":1,\"703\":2,\"705\":3,\"707\":4,\"709\":2,\"712\":5,\"713\":1,\"714\":2,\"717\":3,\"718\":1,\"720\":2,\"721\":2,\"725\":2,\"729\":1,\"732\":3,\"734\":1,\"735\":4,\"738\":2,\"740\":1,\"741\":1,\"744\":7,\"745\":4,\"749\":1,\"750\":2,\"755\":3,\"760\":1,\"762\":1,\"769\":10,\"781\":10,\"784\":1,\"787\":2,\"788\":1,\"789\":3,\"790\":2,\"791\":1,\"793\":7,\"798\":1,\"799\":1,\"801\":1,\"804\":1,\"805\":1,\"806\":3,\"807\":2,\"808\":2,\"810\":5,\"811\":1,\"816\":1,\"817\":1,\"818\":1,\"819\":1,\"825\":2,\"826\":3,\"828\":3,\"829\":1,\"830\":3,\"833\":2,\"835\":1,\"837\":1,\"841\":1,\"844\":1,\"845\":4,\"849\":3,\"859\":1,\"875\":2,\"883\":1,\"893\":1,\"901\":1,\"902\":1,\"903\":1,\"904\":3,\"906\":1,\"908\":2,\"909\":2,\"927\":4,\"928\":6,\"929\":4,\"940\":2,\"944\":1,\"947\":3,\"953\":3,\"957\":4}}],[\"-\",{\"0\":{\"52\":1,\"73\":1,\"74\":1,\"75\":1,\"78\":1,\"90\":1,\"91\":1,\"98\":1,\"107\":1,\"108\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"118\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"125\":1,\"126\":1,\"128\":1,\"129\":1,\"131\":1,\"132\":1,\"135\":1,\"137\":1,\"138\":1,\"139\":1,\"142\":1,\"143\":1,\"146\":1,\"148\":1,\"152\":1,\"153\":1,\"154\":1,\"157\":7,\"161\":3,\"175\":5,\"187\":7,\"196\":1,\"207\":1,\"237\":3,\"252\":1,\"272\":1,\"286\":1,\"322\":1,\"330\":1,\"367\":1,\"383\":1,\"403\":1,\"407\":1,\"410\":1,\"418\":1,\"426\":1,\"880\":1,\"881\":1,\"890\":1,\"895\":1,\"897\":1,\"899\":1,\"900\":1,\"901\":1,\"904\":1,\"921\":1,\"945\":1,\"947\":1},\"1\":{\"4\":1,\"10\":1,\"11\":2,\"30\":1,\"38\":1,\"41\":17,\"42\":8,\"43\":10,\"44\":2,\"48\":1,\"49\":1,\"51\":1,\"53\":3,\"54\":19,\"55\":3,\"70\":6,\"71\":13,\"72\":68,\"73\":6,\"74\":1,\"75\":12,\"76\":4,\"77\":8,\"78\":6,\"80\":11,\"81\":21,\"82\":50,\"83\":20,\"84\":5,\"85\":28,\"86\":4,\"87\":7,\"88\":8,\"89\":2,\"90\":6,\"91\":11,\"94\":5,\"95\":7,\"96\":6,\"97\":24,\"98\":11,\"99\":12,\"100\":24,\"102\":23,\"103\":106,\"104\":46,\"105\":24,\"106\":6,\"107\":1,\"112\":5,\"113\":1,\"114\":3,\"115\":2,\"116\":3,\"118\":4,\"119\":2,\"122\":1,\"126\":31,\"128\":9,\"137\":10,\"138\":6,\"139\":6,\"143\":5,\"146\":2,\"148\":2,\"152\":1,\"153\":1,\"164\":4,\"165\":7,\"166\":5,\"168\":8,\"170\":1,\"171\":1,\"172\":3,\"174\":4,\"175\":1,\"177\":1,\"178\":1,\"179\":2,\"181\":1,\"182\":4,\"184\":13,\"185\":5,\"186\":4,\"188\":1,\"189\":1,\"191\":28,\"195\":5,\"196\":1,\"200\":2,\"201\":1,\"202\":2,\"208\":3,\"210\":2,\"214\":1,\"217\":2,\"218\":1,\"220\":2,\"222\":2,\"223\":3,\"225\":3,\"226\":3,\"227\":5,\"228\":2,\"229\":2,\"232\":3,\"235\":2,\"237\":1,\"242\":1,\"246\":1,\"249\":1,\"254\":2,\"255\":2,\"256\":3,\"259\":1,\"261\":2,\"262\":2,\"263\":6,\"265\":2,\"268\":1,\"271\":2,\"272\":5,\"273\":5,\"276\":2,\"277\":2,\"284\":1,\"291\":1,\"292\":1,\"293\":4,\"294\":1,\"299\":1,\"303\":5,\"304\":11,\"305\":4,\"309\":1,\"310\":2,\"312\":3,\"313\":3,\"314\":5,\"317\":1,\"318\":1,\"319\":1,\"320\":2,\"321\":1,\"342\":1,\"344\":5,\"349\":2,\"354\":4,\"355\":5,\"357\":5,\"359\":8,\"360\":1,\"366\":8,\"367\":4,\"369\":2,\"370\":6,\"372\":2,\"375\":1,\"379\":1,\"380\":6,\"383\":3,\"385\":2,\"388\":3,\"390\":4,\"392\":6,\"396\":1,\"399\":1,\"401\":1,\"402\":6,\"406\":4,\"409\":2,\"410\":4,\"419\":2,\"422\":5,\"423\":1,\"426\":2,\"427\":1,\"428\":1,\"429\":4,\"446\":1,\"449\":4,\"451\":4,\"453\":6,\"456\":1,\"465\":4,\"480\":1,\"503\":1,\"532\":2,\"535\":1,\"536\":2,\"542\":2,\"544\":2,\"545\":5,\"559\":1,\"572\":1,\"578\":1,\"601\":1,\"612\":5,\"615\":1,\"626\":1,\"633\":2,\"642\":4,\"645\":1,\"663\":1,\"676\":6,\"709\":2,\"713\":6,\"714\":1,\"732\":2,\"760\":8,\"769\":5,\"770\":1,\"781\":1,\"793\":1,\"798\":1,\"799\":2,\"800\":1,\"801\":2,\"811\":6,\"813\":1,\"814\":4,\"825\":3,\"826\":11,\"827\":7,\"828\":12,\"829\":31,\"830\":31,\"832\":4,\"835\":3,\"840\":2,\"841\":5,\"844\":2,\"845\":1,\"848\":1,\"852\":9,\"854\":1,\"855\":1,\"857\":1,\"858\":1,\"859\":7,\"862\":7,\"864\":6,\"865\":1,\"868\":5,\"872\":3,\"875\":12,\"876\":1,\"877\":4,\"884\":1,\"887\":7,\"888\":1,\"889\":9,\"890\":1,\"891\":2,\"894\":2,\"895\":3,\"896\":2,\"899\":1,\"901\":5,\"904\":3,\"910\":8,\"911\":3,\"921\":3,\"922\":5,\"928\":6,\"929\":15,\"935\":1,\"936\":2,\"938\":1,\"945\":3,\"947\":3,\"950\":1,\"951\":1,\"952\":1,\"957\":1,\"958\":1,\"959\":1,\"961\":3}}],[\"将头\",{\"1\":{\"828\":2,\"829\":1,\"830\":2}}],[\"将会\",{\"1\":{\"471\":1}}],[\"将源\",{\"1\":{\"332\":1}}],[\"将谱域\",{\"1\":{\"229\":1}}],[\"将点\",{\"1\":{\"199\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"228\":1,\"246\":1,\"276\":1,\"315\":1}}],[\"将主\",{\"1\":{\"168\":1}}],[\"将值\",{\"1\":{\"95\":2}}],[\"将来\",{\"1\":{\"43\":1}}],[\"将类\",{\"1\":{\"36\":1,\"37\":1,\"612\":2,\"707\":1,\"740\":1}}],[\"将要\",{\"1\":{\"4\":1,\"11\":1,\"38\":1,\"94\":1,\"828\":1,\"829\":1,\"830\":2}}],[\"将\",{\"0\":{\"605\":1},\"1\":{\"4\":1,\"8\":1,\"10\":1,\"11\":1,\"13\":1,\"19\":1,\"20\":1,\"22\":2,\"23\":5,\"24\":1,\"25\":1,\"27\":2,\"30\":1,\"31\":1,\"32\":2,\"34\":4,\"38\":2,\"39\":4,\"46\":2,\"49\":2,\"51\":1,\"53\":1,\"54\":1,\"55\":1,\"71\":7,\"72\":2,\"95\":2,\"96\":3,\"97\":3,\"103\":1,\"107\":2,\"128\":1,\"168\":1,\"169\":1,\"184\":1,\"193\":1,\"194\":1,\"197\":2,\"199\":1,\"200\":2,\"201\":1,\"204\":1,\"205\":1,\"209\":5,\"210\":3,\"216\":1,\"217\":3,\"218\":3,\"222\":5,\"223\":3,\"225\":4,\"226\":2,\"228\":8,\"229\":1,\"244\":3,\"245\":3,\"246\":8,\"260\":1,\"263\":1,\"265\":1,\"268\":1,\"277\":1,\"282\":1,\"284\":1,\"288\":1,\"290\":1,\"293\":1,\"294\":2,\"298\":2,\"299\":2,\"300\":2,\"301\":2,\"303\":1,\"308\":2,\"312\":1,\"313\":1,\"314\":5,\"315\":4,\"318\":3,\"320\":1,\"322\":2,\"325\":1,\"327\":2,\"332\":2,\"334\":1,\"338\":1,\"342\":1,\"344\":2,\"354\":1,\"355\":1,\"357\":3,\"359\":2,\"366\":1,\"370\":2,\"372\":3,\"380\":1,\"386\":1,\"390\":2,\"391\":6,\"392\":1,\"393\":2,\"395\":1,\"398\":3,\"410\":2,\"415\":1,\"417\":1,\"419\":4,\"485\":1,\"522\":1,\"528\":1,\"535\":1,\"545\":1,\"571\":1,\"573\":3,\"587\":1,\"590\":1,\"595\":2,\"598\":1,\"599\":3,\"600\":2,\"606\":1,\"607\":2,\"613\":2,\"614\":1,\"615\":1,\"616\":1,\"624\":2,\"635\":1,\"639\":2,\"654\":1,\"664\":2,\"665\":1,\"667\":1,\"668\":1,\"671\":1,\"673\":1,\"676\":10,\"682\":1,\"685\":1,\"687\":1,\"688\":8,\"690\":1,\"692\":1,\"698\":1,\"701\":2,\"707\":1,\"708\":1,\"712\":1,\"718\":1,\"724\":2,\"729\":5,\"732\":1,\"734\":1,\"735\":1,\"738\":2,\"741\":1,\"745\":2,\"750\":2,\"755\":1,\"757\":1,\"758\":1,\"762\":1,\"766\":1,\"769\":1,\"781\":9,\"782\":2,\"787\":1,\"791\":2,\"793\":2,\"794\":2,\"804\":5,\"806\":1,\"808\":1,\"809\":1,\"810\":3,\"811\":1,\"825\":3,\"826\":2,\"827\":4,\"828\":4,\"829\":11,\"830\":4,\"844\":1,\"849\":2,\"858\":1,\"860\":2,\"863\":2,\"864\":3,\"875\":1,\"884\":1,\"889\":2,\"893\":1,\"895\":1,\"901\":3,\"906\":2,\"907\":2,\"922\":3,\"924\":1,\"925\":3,\"928\":3,\"929\":4,\"930\":1,\"938\":1,\"940\":4,\"941\":1,\"944\":1,\"947\":3,\"951\":1,\"953\":3,\"958\":4,\"959\":1,\"961\":1}}],[\"分辨\",{\"1\":{\"922\":1}}],[\"分辨率\",{\"1\":{\"193\":1,\"218\":1,\"226\":1,\"246\":2,\"282\":1,\"290\":1,\"308\":1,\"311\":1,\"379\":1,\"883\":1,\"910\":2,\"922\":4,\"935\":2,\"955\":2,\"961\":3}}],[\"分开\",{\"1\":{\"758\":1,\"875\":1}}],[\"分号\",{\"1\":{\"606\":1,\"654\":3,\"704\":1,\"717\":1,\"718\":1,\"732\":1,\"749\":1,\"816\":2,\"817\":1}}],[\"分隔\",{\"1\":{\"458\":1}}],[\"分块\",{\"1\":{\"380\":1,\"419\":1,\"476\":1}}],[\"分离\",{\"1\":{\"372\":1,\"639\":1}}],[\"分区\",{\"1\":{\"332\":1}}],[\"分散\",{\"1\":{\"299\":2}}],[\"分量\",{\"1\":{\"228\":1}}],[\"分层\",{\"1\":{\"218\":1,\"225\":2,\"227\":1,\"228\":1,\"246\":2,\"379\":1}}],[\"分组\",{\"1\":{\"199\":2,\"200\":2,\"211\":1,\"220\":1,\"225\":1}}],[\"分数\",{\"1\":{\"198\":2,\"202\":2,\"220\":1,\"225\":1,\"245\":3,\"392\":2,\"417\":1,\"901\":1,\"910\":3,\"935\":1}}],[\"分析\",{\"1\":{\"193\":1,\"599\":1,\"609\":1,\"612\":1,\"690\":2,\"698\":1,\"769\":1,\"781\":2,\"830\":1}}],[\"分发\",{\"0\":{\"142\":1}}],[\"分列\",{\"1\":{\"91\":1}}],[\"分解成\",{\"1\":{\"315\":1}}],[\"分解\",{\"1\":{\"90\":1,\"301\":1}}],[\"分布\",{\"1\":{\"63\":1,\"218\":1,\"222\":1,\"227\":2,\"228\":3,\"246\":2,\"299\":2,\"348\":6,\"349\":4,\"354\":2,\"451\":1,\"577\":3,\"889\":1,\"902\":1,\"904\":2,\"905\":1,\"913\":2,\"917\":1,\"953\":2,\"957\":2,\"959\":3}}],[\"分支\",{\"0\":{\"818\":1},\"1\":{\"62\":1,\"65\":1,\"126\":2,\"168\":3,\"200\":3,\"201\":4,\"202\":2}}],[\"分割器\",{\"1\":{\"889\":2}}],[\"分割\",{\"0\":{\"48\":1,\"117\":1,\"118\":1,\"234\":1,\"243\":1,\"244\":1,\"250\":1,\"253\":1,\"317\":1,\"402\":1},\"1\":{\"47\":1,\"49\":6,\"50\":1,\"51\":8,\"52\":1,\"53\":4,\"55\":3,\"86\":1,\"119\":1,\"192\":9,\"193\":5,\"194\":2,\"195\":2,\"197\":1,\"198\":2,\"199\":6,\"202\":1,\"214\":2,\"227\":2,\"232\":1,\"234\":1,\"243\":6,\"244\":3,\"245\":6,\"246\":2,\"249\":1,\"250\":2,\"254\":3,\"261\":1,\"262\":1,\"264\":1,\"265\":1,\"306\":1,\"310\":1,\"311\":3,\"313\":1,\"314\":1,\"315\":1,\"359\":3,\"366\":1,\"370\":2,\"377\":1,\"379\":1,\"402\":4,\"422\":1,\"423\":1,\"425\":6,\"426\":1,\"427\":1,\"468\":1,\"534\":1,\"849\":1,\"875\":1,\"887\":3,\"889\":3}}],[\"分\",{\"1\":{\"31\":1,\"106\":1,\"416\":1,\"436\":1,\"620\":1,\"701\":1,\"756\":1,\"757\":1,\"902\":1}}],[\"分配内存\",{\"1\":{\"586\":2,\"617\":1,\"714\":1,\"744\":2}}],[\"分配资源\",{\"1\":{\"22\":1}}],[\"分配\",{\"0\":{\"712\":1},\"1\":{\"19\":2,\"31\":1,\"36\":2,\"170\":1,\"193\":1,\"223\":2,\"246\":1,\"542\":1,\"606\":1,\"609\":10,\"611\":2,\"612\":3,\"614\":1,\"620\":1,\"712\":3,\"717\":1,\"732\":1,\"744\":3,\"824\":1,\"893\":1}}],[\"分为\",{\"1\":{\"5\":1,\"40\":1,\"41\":1,\"97\":1,\"200\":1,\"210\":1,\"219\":1,\"221\":1,\"222\":2,\"232\":1,\"237\":1,\"243\":1,\"248\":1,\"250\":1,\"314\":1,\"372\":1,\"398\":1,\"409\":1,\"423\":1,\"502\":1,\"609\":2,\"610\":2,\"785\":1,\"875\":1,\"922\":1,\"961\":1}}],[\"分成\",{\"1\":{\"4\":1,\"11\":1,\"148\":1,\"244\":1,\"355\":1,\"380\":1,\"398\":1,\"419\":2}}],[\"分别\",{\"1\":{\"4\":1,\"11\":1,\"42\":1,\"81\":1,\"126\":1,\"128\":1,\"137\":2,\"192\":1,\"197\":1,\"202\":1,\"210\":1,\"221\":1,\"242\":2,\"260\":2,\"261\":2,\"263\":1,\"268\":1,\"270\":1,\"295\":1,\"323\":1,\"354\":1,\"357\":1,\"394\":2,\"406\":1,\"419\":1,\"480\":1,\"528\":3,\"609\":1,\"682\":1,\"701\":1,\"710\":1,\"730\":3,\"741\":1,\"744\":1,\"759\":1,\"781\":1,\"859\":2,\"940\":1,\"961\":2}}],[\"分类器\",{\"0\":{\"941\":1,\"946\":1},\"1\":{\"416\":1,\"451\":4,\"859\":2,\"941\":2,\"944\":1,\"947\":3}}],[\"分类法\",{\"1\":{\"244\":1}}],[\"分类\",{\"0\":{\"215\":1,\"416\":1,\"584\":1,\"632\":1,\"654\":1,\"785\":1,\"912\":1},\"1\":{\"4\":2,\"11\":2,\"202\":1,\"214\":1,\"216\":1,\"217\":1,\"218\":1,\"220\":2,\"225\":3,\"227\":2,\"229\":2,\"244\":1,\"306\":1,\"310\":1,\"313\":1,\"344\":1,\"353\":1,\"355\":1,\"357\":1,\"359\":5,\"366\":1,\"370\":1,\"379\":1,\"380\":1,\"392\":1,\"402\":1,\"404\":1,\"408\":1,\"410\":1,\"415\":1,\"417\":1,\"419\":1,\"424\":1,\"429\":1,\"640\":1,\"642\":1,\"816\":1,\"829\":1,\"830\":1,\"836\":1,\"857\":1,\"859\":2,\"860\":2,\"875\":2,\"891\":1,\"892\":1,\"944\":1,\"959\":1}}],[\"实战\",{\"1\":{\"894\":1}}],[\"实质\",{\"1\":{\"769\":1,\"940\":1}}],[\"实用\",{\"1\":{\"748\":1}}],[\"实在\",{\"1\":{\"744\":1}}],[\"实型\",{\"1\":{\"640\":1}}],[\"实体\",{\"1\":{\"619\":1,\"715\":1}}],[\"实\",{\"1\":{\"524\":2,\"586\":2,\"589\":1,\"595\":1}}],[\"实参\",{\"1\":{\"524\":3,\"586\":6,\"589\":5,\"594\":4,\"595\":1,\"599\":1,\"600\":1,\"605\":1,\"606\":2,\"621\":1,\"642\":2,\"671\":5,\"688\":2,\"690\":2,\"710\":4,\"718\":6,\"720\":1,\"721\":6,\"726\":1,\"729\":6,\"730\":9,\"741\":1,\"745\":1,\"762\":6,\"827\":1}}],[\"实施\",{\"1\":{\"392\":1}}],[\"实践\",{\"1\":{\"372\":1}}],[\"实时\",{\"1\":{\"237\":1,\"245\":1}}],[\"实验\",{\"0\":{\"339\":1,\"910\":1},\"1\":{\"194\":1,\"199\":1,\"222\":1,\"257\":1,\"298\":1,\"299\":1,\"355\":1,\"370\":1,\"882\":1,\"928\":2}}],[\"实例\",{\"0\":{\"250\":1,\"402\":1},\"1\":{\"5\":8,\"49\":1,\"192\":5,\"193\":1,\"195\":6,\"197\":2,\"198\":1,\"199\":8,\"200\":2,\"201\":3,\"202\":2,\"214\":2,\"229\":1,\"243\":1,\"250\":2,\"259\":1,\"366\":1,\"370\":1,\"377\":1,\"402\":4,\"423\":1,\"425\":1,\"502\":8,\"702\":1,\"738\":2,\"739\":1,\"829\":1,\"833\":1}}],[\"实际上\",{\"1\":{\"344\":1,\"411\":1,\"524\":1,\"532\":1,\"600\":1,\"698\":1,\"736\":1,\"794\":1,\"944\":1}}],[\"实际\",{\"1\":{\"4\":1,\"11\":1,\"32\":1,\"193\":1,\"254\":1,\"348\":1,\"357\":1,\"476\":1,\"528\":1,\"586\":1,\"620\":1,\"685\":1,\"690\":1,\"738\":3,\"739\":2,\"740\":3,\"741\":4,\"767\":1,\"825\":1,\"875\":1,\"939\":2,\"959\":1}}],[\"实现\",{\"0\":{\"480\":1,\"764\":1,\"854\":1},\"1\":{\"3\":1,\"4\":1,\"5\":1,\"10\":1,\"11\":1,\"13\":3,\"19\":1,\"20\":1,\"22\":1,\"26\":1,\"27\":1,\"30\":1,\"31\":2,\"32\":1,\"33\":1,\"41\":2,\"44\":1,\"58\":1,\"70\":1,\"71\":3,\"72\":2,\"103\":1,\"107\":1,\"189\":1,\"192\":1,\"193\":1,\"194\":1,\"199\":2,\"210\":1,\"218\":2,\"220\":2,\"222\":3,\"223\":3,\"225\":3,\"226\":2,\"227\":1,\"228\":1,\"234\":1,\"245\":1,\"246\":4,\"254\":1,\"290\":1,\"312\":1,\"313\":1,\"315\":1,\"370\":5,\"380\":1,\"384\":1,\"396\":1,\"410\":1,\"451\":1,\"480\":1,\"485\":2,\"502\":1,\"534\":1,\"545\":1,\"559\":1,\"563\":9,\"573\":1,\"577\":1,\"595\":1,\"600\":1,\"688\":1,\"701\":2,\"716\":1,\"718\":1,\"719\":1,\"729\":1,\"730\":1,\"738\":1,\"743\":1,\"744\":1,\"748\":1,\"750\":1,\"769\":3,\"781\":1,\"789\":1,\"790\":1,\"791\":1,\"793\":2,\"826\":1,\"830\":1,\"855\":2,\"889\":1,\"891\":1,\"900\":1,\"910\":1,\"925\":1,\"935\":1,\"962\":1}}],[\"该数\",{\"1\":{\"712\":1}}],[\"该组\",{\"1\":{\"372\":1}}],[\"该点\",{\"1\":{\"299\":1}}],[\"该处\",{\"1\":{\"292\":1}}],[\"该列\",{\"1\":{\"292\":1}}],[\"该类\",{\"1\":{\"219\":1,\"714\":1,\"744\":1,\"769\":2}}],[\"该篇为\",{\"1\":{\"49\":1}}],[\"该行\",{\"1\":{\"41\":1,\"585\":1}}],[\"该\",{\"1\":{\"4\":1,\"5\":2,\"10\":1,\"11\":1,\"19\":3,\"24\":1,\"25\":1,\"28\":1,\"32\":1,\"34\":2,\"38\":1,\"39\":3,\"41\":1,\"43\":2,\"44\":1,\"46\":1,\"50\":1,\"53\":1,\"54\":3,\"71\":4,\"86\":1,\"97\":4,\"113\":1,\"128\":1,\"192\":1,\"193\":2,\"198\":2,\"199\":1,\"218\":3,\"220\":1,\"222\":2,\"223\":1,\"226\":1,\"227\":1,\"228\":1,\"245\":2,\"246\":9,\"247\":1,\"262\":4,\"292\":1,\"308\":1,\"315\":1,\"321\":1,\"344\":1,\"355\":1,\"372\":4,\"392\":1,\"396\":1,\"417\":1,\"423\":1,\"502\":2,\"524\":1,\"528\":2,\"529\":1,\"530\":1,\"534\":1,\"538\":1,\"545\":2,\"592\":1,\"598\":4,\"611\":1,\"612\":3,\"615\":3,\"663\":1,\"665\":2,\"671\":1,\"673\":1,\"675\":2,\"676\":1,\"707\":1,\"712\":4,\"713\":1,\"714\":1,\"717\":1,\"722\":3,\"745\":1,\"760\":1,\"769\":7,\"781\":1,\"793\":1,\"794\":1,\"817\":1,\"825\":1,\"826\":3,\"828\":2,\"830\":1,\"833\":1,\"843\":1,\"852\":1,\"858\":1,\"864\":1,\"889\":1,\"952\":1}}],[\"、\",{\"0\":{\"13\":1,\"39\":2,\"637\":1,\"638\":1,\"701\":1,\"702\":2,\"812\":1},\"1\":{\"4\":1,\"11\":1,\"23\":1,\"28\":3,\"30\":3,\"31\":4,\"38\":1,\"41\":2,\"42\":2,\"46\":1,\"49\":3,\"58\":4,\"61\":1,\"62\":1,\"63\":3,\"64\":2,\"65\":1,\"69\":1,\"77\":3,\"86\":2,\"93\":2,\"102\":1,\"137\":2,\"139\":2,\"172\":1,\"192\":4,\"193\":3,\"194\":2,\"195\":2,\"196\":4,\"214\":1,\"216\":1,\"218\":1,\"219\":3,\"220\":5,\"222\":2,\"225\":3,\"228\":1,\"233\":1,\"234\":2,\"242\":2,\"244\":12,\"245\":1,\"247\":1,\"248\":2,\"249\":3,\"250\":1,\"254\":10,\"257\":13,\"260\":1,\"262\":5,\"268\":1,\"273\":1,\"290\":1,\"293\":1,\"301\":2,\"303\":2,\"305\":1,\"310\":1,\"315\":1,\"325\":1,\"342\":4,\"348\":1,\"370\":7,\"372\":1,\"373\":2,\"380\":3,\"388\":3,\"389\":2,\"390\":7,\"392\":1,\"394\":2,\"398\":2,\"399\":2,\"402\":1,\"423\":9,\"425\":4,\"426\":1,\"427\":3,\"428\":1,\"449\":1,\"451\":1,\"492\":2,\"499\":2,\"500\":2,\"527\":2,\"545\":6,\"570\":3,\"571\":2,\"573\":2,\"581\":1,\"583\":6,\"585\":2,\"586\":1,\"590\":7,\"595\":1,\"597\":1,\"598\":2,\"601\":1,\"606\":2,\"609\":2,\"610\":3,\"612\":3,\"617\":3,\"619\":2,\"623\":11,\"624\":4,\"639\":2,\"657\":2,\"663\":2,\"668\":3,\"670\":2,\"676\":5,\"682\":1,\"687\":1,\"693\":3,\"695\":8,\"701\":3,\"703\":2,\"704\":3,\"709\":3,\"712\":1,\"713\":3,\"714\":6,\"721\":4,\"722\":3,\"724\":3,\"729\":3,\"732\":2,\"735\":2,\"739\":2,\"741\":8,\"747\":3,\"748\":1,\"749\":1,\"750\":2,\"756\":1,\"769\":21,\"770\":4,\"774\":2,\"778\":2,\"779\":2,\"780\":3,\"781\":6,\"782\":4,\"787\":2,\"788\":1,\"793\":2,\"806\":4,\"810\":1,\"811\":16,\"817\":1,\"818\":8,\"819\":4,\"825\":3,\"826\":9,\"827\":2,\"828\":2,\"829\":1,\"859\":1,\"860\":1,\"910\":1,\"924\":1,\"925\":1,\"935\":5,\"953\":2,\"958\":3,\"961\":6,\"962\":1}}],[\"状态机\",{\"0\":{\"44\":1},\"1\":{\"44\":8,\"46\":1}}],[\"状态\",{\"0\":{\"43\":1,\"476\":1},\"1\":{\"4\":1,\"11\":1,\"15\":3,\"22\":2,\"38\":2,\"42\":7,\"43\":1,\"44\":8,\"126\":1,\"186\":2,\"449\":1,\"476\":9,\"854\":1,\"855\":1}}],[\"对数\",{\"1\":{\"904\":3,\"909\":1,\"920\":1}}],[\"对角线\",{\"1\":{\"859\":2}}],[\"对要\",{\"1\":{\"829\":1,\"830\":1}}],[\"对用\",{\"1\":{\"775\":1}}],[\"对本\",{\"1\":{\"617\":1}}],[\"对逐\",{\"1\":{\"419\":1}}],[\"对不上\",{\"1\":{\"419\":1}}],[\"对框\",{\"1\":{\"410\":1}}],[\"对二值\",{\"1\":{\"392\":1}}],[\"对二值化\",{\"1\":{\"392\":1}}],[\"对超\",{\"1\":{\"357\":1}}],[\"对待\",{\"1\":{\"332\":1}}],[\"对偶\",{\"1\":{\"312\":1}}],[\"对边\",{\"1\":{\"308\":2}}],[\"对顶角\",{\"1\":{\"305\":1}}],[\"对原\",{\"1\":{\"293\":1}}],[\"对抗\",{\"0\":{\"454\":1},\"1\":{\"285\":1,\"454\":1,\"912\":1,\"928\":1}}],[\"对图\",{\"1\":{\"226\":1}}],[\"对以\",{\"1\":{\"204\":1}}],[\"对准\",{\"1\":{\"202\":1}}],[\"对点\",{\"1\":{\"193\":1,\"196\":1,\"228\":3,\"250\":1,\"268\":1,\"319\":1,\"320\":2,\"953\":1}}],[\"对比度\",{\"1\":{\"451\":1}}],[\"对比\",{\"0\":{\"268\":1},\"1\":{\"126\":1,\"242\":1,\"255\":1,\"260\":2,\"268\":4,\"270\":1,\"436\":1,\"846\":1,\"859\":4,\"940\":1}}],[\"对称性\",{\"1\":{\"312\":1,\"884\":1}}],[\"对称\",{\"0\":{\"77\":1},\"1\":{\"220\":1,\"225\":1,\"246\":1,\"248\":1,\"303\":2,\"305\":1,\"859\":1}}],[\"对齐\",{\"1\":{\"53\":4,\"223\":1,\"228\":1,\"259\":1,\"285\":1,\"419\":2,\"839\":1,\"883\":1,\"944\":1}}],[\"对模型\",{\"1\":{\"51\":1,\"52\":1,\"375\":1}}],[\"对应\",{\"1\":{\"46\":1,\"86\":1,\"107\":1,\"137\":1,\"209\":4,\"210\":4,\"227\":1,\"268\":2,\"282\":1,\"290\":8,\"294\":1,\"323\":1,\"347\":1,\"350\":2,\"355\":1,\"366\":3,\"371\":1,\"372\":3,\"408\":1,\"410\":1,\"411\":1,\"415\":3,\"419\":6,\"545\":2,\"671\":1,\"718\":1,\"758\":1,\"785\":1,\"790\":1,\"837\":1,\"887\":1,\"929\":1,\"940\":1}}],[\"对此\",{\"1\":{\"20\":1}}],[\"对于\",{\"1\":{\"10\":1,\"16\":4,\"30\":1,\"38\":1,\"52\":1,\"69\":3,\"137\":1,\"192\":1,\"209\":1,\"223\":2,\"225\":1,\"227\":1,\"242\":2,\"268\":2,\"270\":1,\"290\":1,\"299\":1,\"306\":1,\"310\":1,\"319\":1,\"322\":1,\"334\":1,\"342\":1,\"353\":1,\"355\":1,\"366\":1,\"370\":2,\"371\":2,\"372\":1,\"380\":1,\"392\":3,\"394\":1,\"399\":1,\"406\":2,\"415\":1,\"416\":2,\"451\":2,\"480\":1,\"527\":3,\"529\":2,\"536\":1,\"587\":1,\"589\":1,\"595\":1,\"666\":1,\"684\":1,\"696\":1,\"707\":1,\"719\":1,\"745\":1,\"752\":3,\"766\":1,\"785\":4,\"787\":2,\"863\":1,\"864\":1,\"903\":1,\"912\":1,\"927\":1,\"928\":1,\"929\":1,\"935\":1}}],[\"对象\",{\"0\":{\"520\":1,\"521\":1,\"522\":1,\"523\":1,\"524\":1,\"701\":1,\"704\":1,\"709\":1,\"710\":1,\"714\":1,\"715\":1,\"723\":1,\"724\":1,\"725\":1,\"728\":1,\"730\":1,\"731\":1,\"732\":1,\"733\":1,\"734\":1,\"735\":1,\"752\":1,\"775\":1,\"777\":1,\"789\":1},\"1\":{\"5\":1,\"19\":2,\"22\":4,\"32\":2,\"34\":3,\"36\":3,\"37\":2,\"46\":2,\"53\":1,\"195\":1,\"198\":3,\"199\":2,\"217\":1,\"232\":2,\"234\":2,\"235\":2,\"242\":2,\"243\":1,\"307\":1,\"322\":1,\"358\":1,\"398\":1,\"423\":2,\"425\":3,\"502\":1,\"522\":2,\"524\":4,\"525\":6,\"529\":2,\"530\":1,\"531\":2,\"545\":2,\"559\":2,\"583\":1,\"605\":5,\"606\":11,\"612\":5,\"620\":1,\"623\":1,\"663\":1,\"667\":2,\"668\":1,\"669\":1,\"670\":2,\"671\":4,\"673\":3,\"675\":2,\"691\":2,\"695\":1,\"701\":23,\"702\":4,\"704\":4,\"708\":12,\"709\":13,\"710\":5,\"714\":16,\"715\":1,\"717\":13,\"718\":13,\"720\":6,\"721\":1,\"722\":25,\"724\":10,\"725\":9,\"726\":7,\"728\":6,\"729\":17,\"730\":9,\"732\":18,\"733\":4,\"734\":5,\"735\":4,\"736\":9,\"738\":3,\"739\":1,\"740\":1,\"741\":5,\"743\":2,\"744\":18,\"745\":19,\"752\":3,\"766\":3,\"767\":2,\"769\":15,\"770\":4,\"775\":1,\"778\":1,\"781\":9,\"782\":2,\"785\":1,\"789\":6,\"790\":2,\"791\":6,\"793\":8,\"806\":1,\"814\":3,\"816\":2,\"824\":1,\"825\":1,\"893\":3,\"926\":1}}],[\"对\",{\"0\":{\"613\":1,\"637\":1,\"693\":1,\"752\":1,\"781\":1,\"782\":1},\"1\":{\"4\":1,\"8\":1,\"10\":1,\"11\":1,\"16\":2,\"19\":1,\"23\":1,\"30\":1,\"38\":1,\"39\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"49\":1,\"50\":1,\"52\":1,\"53\":1,\"55\":5,\"64\":1,\"70\":1,\"72\":2,\"82\":1,\"103\":1,\"104\":3,\"126\":4,\"128\":1,\"218\":3,\"220\":1,\"222\":1,\"223\":2,\"225\":1,\"226\":1,\"228\":3,\"245\":2,\"246\":1,\"260\":6,\"268\":1,\"272\":1,\"280\":1,\"282\":2,\"288\":2,\"290\":1,\"292\":1,\"294\":1,\"295\":1,\"299\":3,\"301\":1,\"303\":3,\"304\":2,\"308\":2,\"315\":1,\"319\":4,\"320\":1,\"331\":1,\"337\":1,\"340\":1,\"342\":1,\"344\":1,\"349\":2,\"350\":1,\"354\":1,\"355\":5,\"357\":1,\"370\":2,\"372\":1,\"380\":2,\"393\":1,\"395\":1,\"406\":1,\"408\":1,\"409\":1,\"410\":1,\"417\":2,\"419\":3,\"423\":1,\"425\":1,\"436\":1,\"451\":3,\"469\":3,\"492\":3,\"527\":1,\"528\":2,\"529\":2,\"530\":1,\"537\":1,\"545\":16,\"546\":4,\"590\":3,\"595\":2,\"601\":1,\"604\":1,\"606\":2,\"609\":1,\"611\":1,\"612\":2,\"615\":2,\"616\":2,\"620\":1,\"621\":1,\"623\":1,\"639\":1,\"648\":1,\"652\":1,\"665\":1,\"671\":4,\"673\":1,\"676\":3,\"683\":4,\"684\":1,\"689\":3,\"693\":1,\"695\":2,\"698\":2,\"701\":3,\"707\":2,\"709\":1,\"713\":4,\"714\":1,\"715\":2,\"717\":3,\"718\":1,\"719\":3,\"724\":3,\"725\":1,\"728\":1,\"729\":1,\"745\":1,\"748\":1,\"750\":3,\"752\":3,\"755\":1,\"756\":1,\"757\":1,\"759\":1,\"769\":5,\"781\":6,\"782\":1,\"784\":1,\"790\":1,\"791\":2,\"793\":1,\"798\":1,\"807\":1,\"809\":1,\"810\":1,\"816\":1,\"846\":1,\"854\":1,\"857\":1,\"859\":5,\"860\":1,\"862\":2,\"863\":1,\"868\":2,\"884\":2,\"887\":4,\"889\":1,\"893\":1,\"901\":1,\"904\":1,\"905\":1,\"908\":1,\"912\":1,\"915\":1,\"923\":1,\"925\":1,\"929\":2,\"935\":2,\"940\":2,\"949\":1,\"952\":1,\"953\":1,\"959\":4,\"961\":1}}],[\"对外部\",{\"1\":{\"615\":1}}],[\"对外\",{\"1\":{\"3\":1,\"563\":1,\"701\":3,\"705\":1,\"709\":1}}],[\"。\",{\"1\":{\"3\":1,\"4\":3,\"5\":4,\"8\":3,\"10\":4,\"11\":3,\"13\":9,\"16\":8,\"17\":6,\"19\":4,\"20\":3,\"22\":2,\"28\":5,\"29\":2,\"30\":13,\"31\":5,\"32\":6,\"33\":1,\"36\":6,\"37\":5,\"38\":2,\"39\":1,\"40\":2,\"41\":14,\"42\":8,\"43\":13,\"44\":8,\"45\":1,\"46\":3,\"49\":2,\"50\":2,\"51\":6,\"52\":3,\"53\":12,\"54\":4,\"55\":10,\"69\":7,\"70\":4,\"71\":15,\"72\":14,\"75\":1,\"81\":2,\"82\":2,\"85\":6,\"86\":19,\"88\":2,\"89\":4,\"90\":1,\"93\":6,\"94\":6,\"95\":3,\"96\":6,\"97\":21,\"103\":9,\"104\":1,\"107\":5,\"110\":1,\"113\":2,\"122\":1,\"126\":13,\"128\":4,\"137\":17,\"138\":8,\"139\":5,\"141\":1,\"153\":4,\"168\":3,\"169\":1,\"170\":2,\"172\":3,\"174\":7,\"175\":4,\"177\":1,\"186\":2,\"189\":1,\"192\":8,\"193\":6,\"194\":4,\"195\":8,\"196\":2,\"197\":2,\"198\":9,\"199\":11,\"200\":6,\"201\":7,\"202\":5,\"203\":1,\"204\":1,\"205\":1,\"208\":1,\"209\":6,\"210\":11,\"211\":1,\"214\":8,\"216\":1,\"217\":7,\"218\":11,\"219\":1,\"220\":21,\"221\":3,\"222\":28,\"223\":19,\"224\":2,\"225\":19,\"226\":14,\"227\":12,\"228\":25,\"229\":8,\"232\":2,\"233\":2,\"234\":2,\"235\":2,\"237\":4,\"242\":14,\"243\":2,\"244\":6,\"245\":19,\"246\":38,\"247\":6,\"248\":5,\"249\":4,\"250\":3,\"254\":12,\"257\":1,\"259\":8,\"260\":2,\"261\":2,\"262\":3,\"263\":4,\"265\":2,\"268\":11,\"270\":7,\"273\":4,\"276\":1,\"277\":2,\"280\":3,\"281\":2,\"282\":11,\"283\":3,\"284\":7,\"288\":3,\"290\":7,\"292\":2,\"293\":1,\"294\":1,\"298\":4,\"299\":6,\"300\":3,\"301\":2,\"303\":9,\"304\":9,\"305\":2,\"306\":4,\"307\":5,\"308\":10,\"310\":4,\"311\":4,\"312\":10,\"313\":1,\"314\":12,\"315\":11,\"316\":3,\"317\":3,\"318\":4,\"319\":8,\"320\":8,\"321\":1,\"322\":13,\"323\":6,\"325\":4,\"327\":3,\"329\":1,\"332\":6,\"334\":2,\"337\":4,\"342\":13,\"344\":5,\"347\":3,\"348\":5,\"349\":6,\"353\":1,\"354\":8,\"355\":20,\"356\":2,\"357\":11,\"358\":1,\"366\":3,\"369\":1,\"370\":15,\"371\":5,\"372\":14,\"373\":1,\"379\":1,\"380\":10,\"386\":7,\"388\":1,\"389\":1,\"390\":7,\"391\":4,\"392\":7,\"393\":2,\"394\":5,\"395\":5,\"396\":6,\"398\":12,\"399\":9,\"400\":2,\"402\":4,\"404\":1,\"405\":2,\"406\":3,\"408\":2,\"409\":2,\"410\":4,\"411\":2,\"412\":2,\"413\":2,\"415\":3,\"416\":2,\"417\":6,\"419\":11,\"423\":5,\"425\":2,\"426\":1,\"436\":9,\"437\":2,\"446\":2,\"449\":3,\"451\":18,\"456\":1,\"460\":1,\"461\":3,\"465\":3,\"467\":4,\"469\":4,\"471\":3,\"476\":20,\"480\":3,\"484\":6,\"485\":10,\"492\":9,\"500\":4,\"502\":4,\"524\":1,\"527\":7,\"528\":5,\"529\":7,\"530\":10,\"531\":2,\"532\":4,\"534\":6,\"535\":2,\"538\":3,\"539\":6,\"540\":5,\"541\":1,\"542\":4,\"544\":4,\"545\":6,\"546\":4,\"559\":2,\"563\":8,\"567\":1,\"570\":2,\"571\":1,\"572\":2,\"573\":1,\"575\":1,\"577\":3,\"590\":1,\"598\":1,\"599\":1,\"601\":2,\"605\":1,\"606\":1,\"607\":2,\"609\":3,\"612\":12,\"613\":2,\"620\":3,\"672\":2,\"676\":5,\"677\":1,\"687\":2,\"688\":1,\"689\":1,\"690\":1,\"701\":2,\"703\":1,\"710\":3,\"713\":2,\"717\":2,\"718\":1,\"719\":1,\"722\":1,\"744\":6,\"745\":5,\"748\":2,\"750\":1,\"752\":4,\"757\":1,\"766\":4,\"776\":1,\"777\":1,\"782\":2,\"788\":1,\"791\":3,\"793\":5,\"811\":1,\"824\":1,\"829\":1,\"833\":2,\"836\":1,\"837\":2,\"841\":1,\"843\":1,\"844\":1,\"845\":2,\"848\":1,\"849\":1,\"852\":4,\"854\":1,\"855\":2,\"857\":1,\"858\":1,\"859\":10,\"860\":8,\"862\":2,\"863\":6,\"864\":7,\"865\":2,\"875\":5,\"880\":1,\"881\":1,\"882\":4,\"887\":5,\"889\":3,\"890\":1,\"891\":2,\"892\":1,\"893\":5,\"901\":2,\"902\":1,\"904\":5,\"906\":5,\"907\":4,\"908\":2,\"909\":1,\"910\":5,\"922\":11,\"923\":5,\"924\":2,\"925\":6,\"926\":4,\"927\":1,\"928\":8,\"929\":6,\"930\":1,\"935\":10,\"938\":14,\"939\":4,\"940\":15,\"941\":3,\"944\":5,\"945\":1,\"947\":2,\"949\":2,\"951\":7,\"952\":3,\"953\":6,\"955\":5,\"957\":5,\"958\":3,\"959\":4,\"960\":1,\"961\":5,\"963\":1}}],[\"功能\",{\"0\":{\"26\":1,\"27\":1,\"786\":1},\"1\":{\"3\":1,\"4\":1,\"10\":1,\"11\":1,\"423\":1,\"476\":1,\"545\":3,\"563\":2,\"582\":1,\"590\":1,\"701\":2,\"714\":1,\"737\":2,\"750\":1,\"766\":1,\"769\":3,\"786\":2,\"793\":2,\"806\":1,\"816\":1}}],[\"访问\",{\"0\":{\"751\":1,\"752\":1},\"1\":{\"3\":1,\"4\":1,\"5\":2,\"11\":1,\"19\":1,\"24\":1,\"36\":3,\"37\":6,\"41\":2,\"43\":1,\"71\":8,\"72\":2,\"86\":3,\"184\":2,\"211\":1,\"254\":1,\"476\":4,\"500\":2,\"502\":2,\"509\":1,\"527\":3,\"529\":2,\"545\":3,\"546\":1,\"570\":4,\"574\":5,\"604\":1,\"605\":1,\"606\":1,\"607\":2,\"612\":9,\"619\":1,\"621\":1,\"663\":1,\"664\":1,\"671\":3,\"697\":1,\"703\":5,\"709\":3,\"713\":3,\"714\":3,\"732\":1,\"734\":1,\"736\":1,\"744\":1,\"745\":5,\"750\":1,\"751\":3,\"752\":9,\"768\":1,\"769\":3,\"810\":1}}],[\"+\",{\"0\":{\"581\":2,\"631\":2,\"640\":2},\"1\":{\"3\":1,\"69\":2,\"72\":24,\"73\":5,\"74\":1,\"75\":5,\"80\":10,\"81\":1,\"82\":13,\"83\":4,\"84\":2,\"85\":2,\"86\":8,\"87\":8,\"88\":1,\"90\":6,\"96\":2,\"99\":2,\"100\":7,\"102\":16,\"103\":11,\"104\":59,\"105\":17,\"106\":8,\"107\":4,\"112\":8,\"113\":3,\"114\":3,\"115\":4,\"116\":5,\"118\":7,\"119\":10,\"121\":3,\"122\":3,\"123\":3,\"125\":2,\"126\":2,\"128\":8,\"137\":25,\"138\":10,\"139\":13,\"142\":8,\"143\":3,\"146\":4,\"148\":3,\"152\":9,\"153\":2,\"180\":2,\"191\":3,\"192\":4,\"197\":2,\"208\":2,\"211\":4,\"220\":8,\"225\":2,\"227\":2,\"245\":2,\"261\":1,\"263\":2,\"272\":2,\"282\":2,\"288\":2,\"290\":1,\"294\":1,\"304\":4,\"310\":4,\"312\":8,\"323\":1,\"334\":2,\"344\":2,\"354\":1,\"356\":2,\"363\":1,\"364\":2,\"366\":1,\"371\":5,\"372\":2,\"383\":1,\"391\":1,\"395\":3,\"399\":2,\"411\":1,\"416\":1,\"446\":1,\"451\":10,\"465\":3,\"528\":6,\"529\":4,\"530\":4,\"531\":4,\"534\":3,\"538\":1,\"540\":7,\"541\":4,\"542\":2,\"545\":2,\"548\":1,\"552\":1,\"553\":1,\"559\":1,\"573\":2,\"576\":4,\"589\":3,\"594\":2,\"598\":2,\"599\":2,\"600\":2,\"601\":2,\"612\":10,\"613\":4,\"625\":1,\"633\":1,\"642\":3,\"644\":1,\"645\":2,\"654\":4,\"676\":8,\"683\":4,\"684\":1,\"690\":4,\"691\":4,\"692\":2,\"695\":2,\"698\":5,\"707\":4,\"708\":2,\"712\":2,\"737\":2,\"745\":5,\"747\":2,\"748\":4,\"750\":2,\"759\":8,\"760\":8,\"775\":2,\"781\":8,\"786\":2,\"789\":4,\"798\":3,\"800\":11,\"801\":3,\"805\":4,\"806\":2,\"807\":4,\"809\":2,\"811\":4,\"814\":4,\"816\":7,\"818\":1,\"826\":1,\"829\":1,\"830\":2,\"841\":1,\"846\":1,\"859\":1,\"864\":3,\"867\":6,\"868\":1,\"869\":20,\"877\":3,\"897\":47,\"899\":5,\"900\":33,\"901\":1,\"904\":4,\"913\":3,\"922\":1,\"947\":4,\"963\":1}}],[\"储存区\",{\"1\":{\"609\":6,\"611\":1,\"612\":1,\"614\":1}}],[\"储存期\",{\"1\":{\"609\":5,\"610\":1}}],[\"储存\",{\"0\":{\"608\":1,\"610\":1,\"708\":1,\"711\":1,\"713\":1},\"1\":{\"3\":1,\"69\":2,\"90\":1,\"504\":1,\"525\":1,\"609\":9,\"610\":9,\"611\":4,\"612\":2,\"617\":1,\"620\":1,\"633\":2,\"659\":1,\"662\":1,\"664\":1,\"702\":1,\"708\":7,\"710\":1,\"712\":1,\"713\":1,\"715\":1,\"717\":2,\"732\":1,\"782\":3,\"784\":1,\"785\":1,\"804\":1,\"824\":1}}],[\"多篇\",{\"1\":{\"960\":1}}],[\"多此一举\",{\"1\":{\"958\":1}}],[\"多寡\",{\"1\":{\"938\":1}}],[\"多项\",{\"1\":{\"935\":1}}],[\"多项式\",{\"1\":{\"225\":1,\"226\":2}}],[\"多余\",{\"1\":{\"906\":1}}],[\"多行\",{\"1\":{\"625\":1}}],[\"多大\",{\"1\":{\"606\":1}}],[\"多用\",{\"1\":{\"601\":2,\"612\":1,\"738\":1}}],[\"多态现象\",{\"1\":{\"701\":1}}],[\"多态性\",{\"0\":{\"763\":1,\"764\":1,\"831\":1},\"1\":{\"511\":2,\"701\":4,\"769\":5,\"770\":2}}],[\"多态\",{\"0\":{\"511\":1},\"1\":{\"747\":1}}],[\"多重\",{\"0\":{\"629\":1},\"1\":{\"510\":1,\"748\":2}}],[\"多于\",{\"1\":{\"461\":1}}],[\"多条\",{\"1\":{\"457\":1,\"528\":1}}],[\"多元\",{\"1\":{\"451\":2}}],[\"多组\",{\"1\":{\"372\":1}}],[\"多头\",{\"1\":{\"370\":2,\"399\":2,\"882\":5}}],[\"多维\",{\"1\":{\"315\":3,\"318\":1}}],[\"多次\",{\"1\":{\"310\":1,\"703\":1,\"722\":1,\"750\":1,\"830\":1,\"922\":1}}],[\"多流\",{\"1\":{\"245\":1}}],[\"多任务\",{\"1\":{\"225\":2,\"242\":1}}],[\"多种\",{\"1\":{\"222\":1,\"247\":1,\"257\":1,\"399\":1,\"449\":1}}],[\"多层\",{\"1\":{\"201\":1,\"220\":1,\"322\":1}}],[\"多样性\",{\"1\":{\"451\":2,\"892\":1,\"924\":1}}],[\"多样\",{\"1\":{\"63\":2,\"193\":1,\"261\":1}}],[\"多少\",{\"1\":{\"36\":1,\"110\":1,\"137\":1,\"612\":1,\"665\":1,\"745\":1,\"846\":2,\"938\":2,\"939\":1,\"951\":2}}],[\"多\",{\"0\":{\"217\":1,\"233\":1,\"616\":1,\"818\":1,\"943\":1},\"1\":{\"32\":1,\"33\":1,\"50\":1,\"53\":3,\"62\":1,\"63\":1,\"65\":1,\"104\":1,\"175\":1,\"214\":3,\"216\":1,\"217\":1,\"218\":1,\"225\":1,\"228\":6,\"229\":1,\"232\":1,\"234\":1,\"244\":1,\"245\":4,\"246\":1,\"247\":4,\"257\":1,\"262\":1,\"265\":1,\"272\":1,\"299\":1,\"303\":1,\"332\":1,\"342\":1,\"359\":1,\"369\":1,\"370\":1,\"379\":1,\"390\":1,\"393\":1,\"399\":1,\"427\":1,\"621\":1,\"785\":1,\"862\":1,\"865\":1,\"873\":1,\"893\":2,\"906\":1,\"916\":1,\"935\":3,\"940\":2,\"944\":1}}],[\"多线程\",{\"0\":{\"628\":1},\"1\":{\"5\":1,\"26\":1,\"33\":1,\"502\":1,\"527\":2,\"528\":2,\"530\":1,\"532\":1}}],[\"多个\",{\"0\":{\"162\":1,\"172\":1,\"458\":1,\"468\":1,\"595\":1},\"1\":{\"3\":1,\"10\":1,\"30\":2,\"194\":1,\"217\":2,\"220\":4,\"223\":1,\"225\":1,\"227\":1,\"228\":3,\"242\":1,\"245\":3,\"247\":1,\"262\":1,\"291\":1,\"298\":1,\"304\":2,\"313\":1,\"314\":1,\"394\":1,\"396\":1,\"458\":1,\"468\":1,\"469\":2,\"492\":3,\"500\":2,\"528\":1,\"529\":1,\"534\":1,\"574\":1,\"587\":1,\"589\":2,\"590\":1,\"601\":1,\"606\":2,\"609\":1,\"658\":1,\"701\":1,\"720\":2,\"722\":2,\"724\":1,\"725\":2,\"730\":1,\"737\":1,\"741\":1,\"743\":1,\"745\":1,\"748\":4,\"768\":1,\"818\":1}}],[\"多路复用\",{\"0\":{\"14\":1,\"492\":1},\"1\":{\"3\":1,\"492\":4,\"499\":1}}],[\"和文\",{\"1\":{\"858\":1}}],[\"和域\",{\"1\":{\"717\":1,\"744\":1}}],[\"和析构\",{\"0\":{\"699\":1},\"1\":{\"510\":1,\"530\":1,\"722\":1,\"750\":3}}],[\"和面\",{\"1\":{\"301\":1}}],[\"和表\",{\"1\":{\"242\":1}}],[\"和池\",{\"1\":{\"225\":1}}],[\"和\",{\"0\":{\"83\":1,\"106\":1,\"143\":1,\"153\":1,\"416\":1,\"508\":1,\"596\":1,\"619\":1,\"658\":1,\"684\":1,\"685\":1,\"692\":1,\"694\":1,\"700\":1,\"711\":2,\"729\":1,\"742\":1,\"752\":1,\"807\":1,\"819\":1},\"1\":{\"3\":3,\"4\":2,\"5\":1,\"10\":3,\"11\":2,\"15\":1,\"19\":1,\"20\":1,\"22\":2,\"23\":2,\"25\":1,\"27\":1,\"29\":2,\"30\":4,\"31\":2,\"33\":1,\"34\":1,\"38\":8,\"40\":1,\"41\":2,\"42\":3,\"44\":2,\"45\":1,\"49\":1,\"51\":2,\"52\":1,\"53\":6,\"54\":1,\"55\":3,\"60\":1,\"69\":1,\"70\":1,\"72\":3,\"81\":1,\"82\":1,\"85\":3,\"86\":8,\"88\":1,\"89\":1,\"91\":1,\"100\":1,\"103\":1,\"104\":5,\"106\":1,\"112\":1,\"113\":1,\"115\":1,\"122\":1,\"126\":4,\"128\":2,\"137\":9,\"138\":2,\"139\":1,\"153\":7,\"186\":1,\"189\":1,\"191\":1,\"192\":6,\"193\":10,\"194\":6,\"195\":4,\"196\":1,\"197\":1,\"198\":2,\"199\":1,\"201\":4,\"202\":1,\"210\":4,\"211\":2,\"214\":4,\"216\":1,\"218\":4,\"220\":6,\"221\":4,\"222\":13,\"223\":3,\"225\":10,\"226\":5,\"227\":3,\"228\":9,\"229\":1,\"232\":1,\"233\":1,\"234\":1,\"237\":2,\"242\":8,\"243\":2,\"244\":3,\"245\":7,\"246\":12,\"247\":7,\"248\":1,\"249\":3,\"250\":1,\"254\":2,\"255\":1,\"259\":2,\"260\":4,\"261\":2,\"262\":1,\"263\":1,\"268\":6,\"270\":4,\"273\":3,\"277\":1,\"282\":6,\"293\":2,\"294\":1,\"295\":1,\"298\":2,\"299\":5,\"300\":1,\"301\":2,\"303\":3,\"304\":1,\"305\":1,\"306\":1,\"307\":1,\"308\":1,\"310\":2,\"312\":5,\"314\":1,\"315\":5,\"317\":3,\"319\":2,\"320\":3,\"322\":3,\"323\":4,\"325\":5,\"327\":1,\"332\":1,\"342\":2,\"344\":3,\"348\":1,\"349\":2,\"353\":2,\"354\":6,\"355\":6,\"356\":4,\"357\":8,\"370\":4,\"371\":1,\"372\":1,\"379\":2,\"380\":3,\"384\":1,\"386\":4,\"391\":2,\"392\":1,\"394\":3,\"395\":4,\"398\":3,\"399\":1,\"400\":2,\"402\":2,\"411\":1,\"413\":3,\"416\":1,\"417\":2,\"419\":1,\"423\":5,\"425\":3,\"426\":1,\"436\":1,\"437\":1,\"446\":1,\"451\":10,\"462\":1,\"467\":1,\"468\":1,\"469\":1,\"471\":1,\"476\":1,\"480\":1,\"484\":1,\"492\":1,\"499\":1,\"502\":1,\"509\":2,\"527\":1,\"528\":2,\"529\":1,\"531\":1,\"534\":1,\"535\":1,\"544\":3,\"545\":4,\"546\":1,\"563\":2,\"567\":1,\"570\":2,\"571\":1,\"573\":1,\"577\":2,\"581\":4,\"584\":1,\"589\":1,\"590\":1,\"597\":2,\"599\":2,\"600\":2,\"601\":3,\"606\":5,\"609\":6,\"610\":2,\"611\":4,\"613\":2,\"617\":1,\"621\":1,\"623\":2,\"625\":1,\"639\":1,\"642\":2,\"659\":1,\"666\":1,\"668\":2,\"671\":1,\"672\":1,\"676\":3,\"682\":1,\"683\":3,\"686\":1,\"693\":2,\"695\":2,\"701\":9,\"703\":3,\"706\":1,\"707\":1,\"709\":2,\"710\":1,\"712\":3,\"714\":1,\"721\":2,\"722\":1,\"724\":1,\"725\":1,\"732\":1,\"734\":1,\"735\":3,\"744\":1,\"745\":2,\"748\":5,\"750\":5,\"752\":5,\"756\":1,\"762\":5,\"766\":3,\"768\":1,\"769\":2,\"770\":2,\"781\":7,\"782\":2,\"785\":3,\"786\":1,\"787\":1,\"788\":3,\"789\":3,\"791\":2,\"793\":3,\"794\":1,\"800\":1,\"810\":1,\"811\":1,\"816\":2,\"817\":4,\"818\":1,\"819\":1,\"825\":1,\"826\":2,\"828\":2,\"830\":1,\"843\":1,\"846\":1,\"849\":1,\"854\":1,\"855\":1,\"858\":1,\"859\":6,\"860\":2,\"862\":3,\"863\":1,\"864\":2,\"873\":1,\"874\":1,\"875\":1,\"883\":1,\"884\":1,\"887\":1,\"889\":1,\"893\":5,\"901\":1,\"904\":1,\"906\":2,\"910\":7,\"912\":1,\"917\":1,\"922\":5,\"924\":3,\"926\":4,\"928\":3,\"929\":1,\"930\":3,\"935\":8,\"938\":1,\"939\":1,\"940\":2,\"941\":1,\"944\":2,\"947\":1,\"951\":1,\"953\":2,\"955\":1,\"957\":2,\"958\":2,\"959\":2,\"961\":5}}],[\"非凸\",{\"1\":{\"957\":1}}],[\"非正常\",{\"1\":{\"852\":1}}],[\"非虚\",{\"1\":{\"769\":2}}],[\"非法\",{\"1\":{\"670\":1,\"671\":2}}],[\"非必要\",{\"1\":{\"621\":1}}],[\"非叶\",{\"1\":{\"227\":3}}],[\"非线性\",{\"1\":{\"220\":2,\"222\":1,\"223\":1,\"399\":1,\"436\":2}}],[\"非零值\",{\"1\":{\"246\":1,\"436\":1}}],[\"非零\",{\"1\":{\"210\":1}}],[\"非商业\",{\"1\":{\"126\":1}}],[\"非空\",{\"1\":{\"86\":3}}],[\"非常灵活\",{\"1\":{\"379\":1}}],[\"非常适合\",{\"1\":{\"237\":1}}],[\"非常\",{\"1\":{\"38\":1,\"174\":1,\"191\":1,\"259\":1,\"357\":1,\"370\":2,\"379\":1,\"384\":1,\"676\":1,\"760\":1,\"859\":1,\"882\":1,\"903\":1,\"938\":1,\"940\":2,\"951\":1,\"955\":1}}],[\"非负值\",{\"1\":{\"642\":1}}],[\"非负\",{\"1\":{\"28\":1}}],[\"非\",{\"0\":{\"19\":1},\"1\":{\"3\":2,\"15\":2,\"19\":1,\"30\":5,\"36\":1,\"37\":1,\"39\":1,\"52\":1,\"69\":2,\"198\":1,\"199\":1,\"223\":1,\"226\":1,\"248\":1,\"293\":1,\"308\":2,\"312\":1,\"353\":2,\"354\":4,\"355\":3,\"416\":1,\"465\":1,\"467\":1,\"604\":1,\"612\":2,\"624\":2,\"632\":1,\"668\":2,\"671\":7,\"745\":8,\"769\":1,\"781\":1,\"793\":1,\"806\":1,\"808\":1,\"810\":5,\"813\":1,\"817\":1,\"819\":1,\"884\":1,\"893\":1,\"903\":1,\"904\":1}}],[\"了解\",{\"1\":{\"243\":1,\"907\":1}}],[\"了\",{\"0\":{\"485\":1,\"852\":1},\"1\":{\"3\":1,\"10\":1,\"13\":1,\"17\":1,\"19\":1,\"20\":2,\"22\":1,\"25\":1,\"30\":2,\"36\":2,\"38\":6,\"42\":1,\"43\":1,\"49\":4,\"50\":1,\"52\":1,\"53\":3,\"54\":2,\"55\":4,\"70\":1,\"75\":1,\"77\":1,\"81\":1,\"82\":2,\"85\":8,\"88\":3,\"89\":2,\"96\":1,\"97\":2,\"102\":1,\"103\":3,\"104\":1,\"107\":3,\"112\":2,\"114\":1,\"115\":1,\"116\":1,\"122\":1,\"123\":1,\"125\":2,\"126\":2,\"128\":1,\"137\":8,\"148\":1,\"153\":1,\"165\":1,\"168\":2,\"170\":2,\"174\":1,\"175\":6,\"191\":1,\"192\":7,\"194\":6,\"195\":1,\"199\":5,\"201\":1,\"202\":1,\"209\":1,\"210\":3,\"211\":3,\"217\":1,\"218\":7,\"220\":5,\"222\":5,\"223\":5,\"225\":6,\"226\":5,\"227\":2,\"228\":9,\"229\":1,\"233\":1,\"234\":1,\"242\":3,\"245\":5,\"246\":12,\"247\":4,\"248\":2,\"249\":1,\"254\":4,\"257\":6,\"259\":3,\"262\":4,\"263\":2,\"264\":1,\"265\":1,\"270\":1,\"273\":2,\"276\":1,\"283\":2,\"288\":1,\"290\":4,\"292\":2,\"293\":3,\"294\":1,\"299\":1,\"300\":1,\"301\":1,\"303\":1,\"305\":1,\"306\":2,\"307\":1,\"308\":1,\"312\":4,\"313\":1,\"315\":4,\"318\":1,\"319\":3,\"320\":4,\"321\":1,\"322\":1,\"325\":5,\"327\":1,\"342\":1,\"344\":1,\"347\":1,\"353\":1,\"355\":3,\"356\":2,\"357\":8,\"366\":1,\"370\":6,\"372\":3,\"373\":2,\"374\":1,\"379\":13,\"380\":6,\"384\":2,\"386\":2,\"390\":3,\"392\":1,\"395\":1,\"396\":1,\"398\":1,\"399\":6,\"402\":1,\"404\":1,\"405\":1,\"410\":2,\"411\":1,\"415\":1,\"419\":8,\"423\":1,\"425\":1,\"436\":2,\"465\":1,\"476\":6,\"480\":2,\"484\":1,\"485\":6,\"492\":1,\"509\":1,\"527\":2,\"528\":4,\"530\":4,\"532\":1,\"535\":1,\"545\":3,\"559\":1,\"563\":2,\"599\":1,\"600\":1,\"604\":1,\"605\":3,\"606\":4,\"607\":1,\"612\":3,\"615\":1,\"617\":1,\"621\":3,\"623\":2,\"637\":1,\"666\":1,\"670\":3,\"671\":1,\"676\":2,\"683\":1,\"684\":3,\"685\":1,\"690\":1,\"693\":1,\"695\":1,\"698\":2,\"701\":2,\"708\":1,\"712\":1,\"713\":3,\"714\":6,\"720\":1,\"721\":5,\"722\":3,\"724\":2,\"729\":1,\"730\":1,\"744\":3,\"745\":4,\"747\":2,\"748\":6,\"750\":4,\"751\":1,\"755\":1,\"760\":1,\"768\":1,\"769\":4,\"775\":2,\"781\":5,\"793\":4,\"794\":2,\"810\":1,\"811\":2,\"826\":1,\"828\":4,\"829\":2,\"830\":5,\"846\":2,\"852\":4,\"855\":1,\"859\":1,\"860\":2,\"863\":2,\"864\":3,\"865\":2,\"887\":2,\"893\":2,\"895\":1,\"909\":1,\"910\":2,\"913\":2,\"922\":1,\"923\":1,\"924\":3,\"926\":3,\"928\":3,\"929\":1,\"935\":8,\"939\":3,\"940\":6,\"941\":1,\"944\":3,\"945\":1,\"952\":2,\"953\":3,\"955\":2,\"958\":3,\"963\":1}}],[\"，\",{\"0\":{\"15\":1,\"17\":1,\"531\":1,\"842\":1,\"846\":1,\"852\":2,\"915\":1},\"1\":{\"3\":4,\"4\":11,\"5\":12,\"8\":10,\"10\":23,\"11\":11,\"13\":29,\"15\":7,\"16\":7,\"17\":11,\"19\":13,\"20\":19,\"22\":10,\"23\":13,\"24\":2,\"26\":2,\"27\":4,\"28\":9,\"29\":4,\"30\":43,\"31\":9,\"32\":8,\"33\":1,\"34\":9,\"36\":12,\"37\":8,\"38\":39,\"39\":16,\"40\":4,\"41\":21,\"42\":11,\"43\":7,\"44\":17,\"45\":1,\"46\":8,\"49\":7,\"50\":2,\"51\":4,\"52\":5,\"53\":16,\"54\":5,\"55\":16,\"60\":2,\"61\":1,\"62\":3,\"63\":3,\"64\":3,\"65\":3,\"69\":12,\"70\":8,\"71\":25,\"72\":15,\"75\":2,\"77\":3,\"80\":3,\"81\":5,\"82\":5,\"83\":1,\"85\":21,\"86\":14,\"87\":1,\"88\":6,\"89\":5,\"90\":4,\"91\":6,\"93\":5,\"94\":14,\"95\":8,\"96\":9,\"97\":38,\"98\":1,\"99\":7,\"100\":8,\"103\":31,\"104\":7,\"105\":2,\"106\":7,\"107\":4,\"110\":6,\"113\":2,\"114\":2,\"115\":1,\"122\":3,\"123\":2,\"126\":22,\"128\":5,\"137\":28,\"138\":3,\"139\":7,\"141\":4,\"143\":2,\"146\":1,\"148\":1,\"152\":3,\"153\":14,\"160\":4,\"165\":2,\"166\":1,\"168\":7,\"169\":1,\"170\":2,\"172\":4,\"174\":11,\"175\":8,\"179\":1,\"180\":1,\"181\":2,\"184\":6,\"186\":6,\"189\":1,\"191\":15,\"192\":8,\"193\":23,\"194\":10,\"195\":8,\"196\":3,\"197\":4,\"198\":14,\"199\":12,\"200\":6,\"201\":8,\"202\":10,\"203\":4,\"204\":1,\"208\":3,\"209\":5,\"210\":19,\"211\":8,\"214\":4,\"216\":1,\"217\":10,\"218\":14,\"219\":1,\"220\":24,\"221\":2,\"222\":26,\"223\":18,\"224\":1,\"225\":33,\"226\":15,\"227\":20,\"228\":35,\"229\":8,\"232\":3,\"233\":3,\"234\":4,\"235\":4,\"237\":4,\"242\":9,\"243\":2,\"244\":5,\"245\":16,\"246\":30,\"247\":4,\"248\":7,\"249\":1,\"250\":5,\"254\":14,\"255\":1,\"257\":7,\"259\":13,\"260\":9,\"261\":4,\"262\":8,\"263\":5,\"264\":2,\"265\":3,\"268\":4,\"269\":1,\"270\":8,\"271\":1,\"273\":6,\"275\":1,\"276\":3,\"277\":3,\"280\":2,\"281\":1,\"282\":18,\"283\":6,\"284\":8,\"288\":13,\"290\":23,\"291\":1,\"292\":9,\"293\":9,\"294\":10,\"295\":2,\"298\":3,\"299\":17,\"300\":7,\"301\":4,\"303\":18,\"304\":8,\"305\":5,\"306\":6,\"307\":9,\"308\":13,\"310\":4,\"311\":5,\"312\":20,\"313\":2,\"314\":13,\"315\":17,\"316\":5,\"317\":4,\"318\":4,\"319\":14,\"320\":14,\"321\":1,\"322\":16,\"323\":6,\"325\":6,\"332\":12,\"334\":3,\"337\":4,\"338\":4,\"340\":2,\"342\":12,\"344\":4,\"347\":5,\"348\":13,\"349\":14,\"350\":5,\"351\":2,\"353\":4,\"354\":10,\"355\":32,\"356\":7,\"357\":23,\"358\":1,\"359\":1,\"366\":10,\"369\":3,\"370\":25,\"371\":10,\"372\":18,\"373\":4,\"374\":2,\"375\":1,\"379\":37,\"380\":25,\"384\":6,\"385\":1,\"386\":10,\"390\":8,\"391\":15,\"392\":18,\"393\":2,\"394\":8,\"395\":8,\"396\":2,\"398\":11,\"399\":21,\"400\":3,\"402\":6,\"404\":5,\"406\":8,\"408\":3,\"409\":2,\"410\":6,\"411\":10,\"412\":3,\"413\":2,\"415\":7,\"416\":8,\"417\":3,\"419\":21,\"422\":2,\"423\":3,\"424\":1,\"425\":7,\"426\":2,\"436\":13,\"437\":5,\"446\":4,\"449\":4,\"451\":20,\"456\":2,\"457\":1,\"458\":1,\"459\":4,\"460\":3,\"461\":4,\"462\":1,\"464\":1,\"465\":4,\"467\":4,\"468\":5,\"469\":5,\"471\":7,\"475\":1,\"476\":40,\"480\":9,\"484\":10,\"485\":20,\"492\":9,\"500\":5,\"502\":12,\"509\":1,\"522\":6,\"524\":7,\"525\":9,\"527\":16,\"528\":18,\"529\":19,\"530\":18,\"531\":6,\"532\":6,\"534\":7,\"535\":3,\"536\":2,\"537\":1,\"539\":2,\"540\":2,\"541\":3,\"542\":1,\"544\":10,\"545\":19,\"546\":8,\"556\":1,\"557\":2,\"558\":1,\"559\":12,\"560\":1,\"561\":4,\"563\":17,\"565\":1,\"566\":4,\"567\":3,\"568\":3,\"570\":3,\"572\":3,\"573\":5,\"574\":1,\"575\":4,\"576\":3,\"577\":12,\"583\":7,\"584\":1,\"585\":2,\"586\":7,\"587\":5,\"589\":10,\"590\":11,\"591\":1,\"592\":1,\"594\":5,\"595\":11,\"596\":1,\"597\":4,\"598\":5,\"599\":10,\"600\":24,\"601\":8,\"604\":2,\"605\":11,\"606\":23,\"607\":4,\"609\":11,\"610\":2,\"611\":15,\"612\":41,\"613\":10,\"614\":1,\"615\":10,\"616\":6,\"617\":7,\"619\":2,\"620\":15,\"621\":15,\"624\":9,\"633\":3,\"634\":1,\"635\":6,\"637\":2,\"638\":4,\"639\":4,\"642\":10,\"644\":3,\"645\":1,\"647\":1,\"648\":4,\"649\":3,\"650\":1,\"651\":2,\"652\":3,\"654\":7,\"656\":3,\"657\":1,\"658\":2,\"661\":3,\"662\":2,\"663\":1,\"664\":2,\"665\":5,\"666\":7,\"667\":3,\"668\":7,\"669\":1,\"670\":5,\"671\":17,\"672\":4,\"673\":4,\"675\":12,\"676\":31,\"677\":2,\"682\":4,\"683\":8,\"684\":7,\"685\":7,\"686\":1,\"688\":12,\"689\":11,\"690\":8,\"691\":3,\"692\":2,\"693\":3,\"694\":2,\"695\":3,\"696\":7,\"697\":1,\"698\":11,\"701\":21,\"702\":3,\"703\":8,\"704\":4,\"705\":4,\"706\":4,\"707\":8,\"708\":9,\"709\":4,\"710\":7,\"712\":11,\"713\":11,\"714\":27,\"715\":6,\"717\":23,\"718\":15,\"719\":2,\"720\":8,\"721\":13,\"722\":27,\"724\":5,\"725\":4,\"726\":5,\"728\":2,\"729\":12,\"730\":21,\"732\":6,\"734\":4,\"735\":11,\"736\":12,\"737\":3,\"738\":8,\"739\":3,\"740\":7,\"741\":9,\"743\":2,\"744\":28,\"745\":30,\"747\":2,\"748\":13,\"749\":3,\"750\":15,\"751\":1,\"752\":7,\"755\":21,\"756\":2,\"757\":5,\"758\":1,\"759\":6,\"760\":1,\"762\":6,\"766\":8,\"767\":4,\"768\":3,\"769\":45,\"770\":8,\"775\":11,\"776\":4,\"777\":2,\"780\":1,\"781\":48,\"782\":2,\"785\":18,\"787\":6,\"788\":3,\"789\":6,\"790\":2,\"791\":4,\"793\":44,\"794\":5,\"798\":3,\"799\":2,\"800\":2,\"801\":5,\"804\":5,\"805\":1,\"806\":3,\"807\":6,\"808\":1,\"809\":5,\"810\":6,\"811\":6,\"813\":2,\"816\":6,\"817\":5,\"818\":13,\"819\":2,\"824\":4,\"825\":13,\"826\":30,\"827\":6,\"828\":15,\"829\":9,\"830\":27,\"833\":6,\"834\":1,\"835\":3,\"836\":1,\"837\":9,\"839\":1,\"841\":2,\"843\":5,\"844\":1,\"845\":6,\"846\":1,\"848\":5,\"849\":3,\"852\":12,\"854\":7,\"855\":5,\"857\":3,\"858\":2,\"859\":23,\"860\":10,\"862\":1,\"863\":10,\"864\":9,\"865\":1,\"867\":1,\"868\":3,\"869\":8,\"873\":7,\"874\":3,\"875\":33,\"880\":1,\"882\":5,\"883\":3,\"884\":9,\"887\":7,\"888\":2,\"889\":4,\"890\":1,\"891\":1,\"892\":3,\"893\":8,\"896\":1,\"897\":1,\"899\":1,\"900\":2,\"901\":7,\"902\":1,\"903\":2,\"904\":10,\"905\":1,\"906\":8,\"907\":4,\"908\":3,\"909\":2,\"910\":7,\"912\":1,\"913\":1,\"915\":3,\"916\":1,\"917\":1,\"920\":3,\"922\":15,\"923\":4,\"924\":4,\"925\":5,\"926\":4,\"927\":4,\"928\":30,\"929\":19,\"930\":3,\"935\":18,\"938\":15,\"939\":4,\"940\":24,\"941\":4,\"944\":6,\"945\":2,\"947\":2,\"949\":7,\"950\":1,\"951\":6,\"952\":5,\"953\":10,\"955\":6,\"957\":25,\"958\":22,\"959\":25,\"960\":5,\"961\":25,\"962\":1,\"963\":10}}],[\"模版\",{\"0\":{\"600\":1},\"1\":{\"600\":13,\"623\":1,\"702\":1}}],[\"模板\",{\"0\":{\"737\":1,\"740\":1},\"1\":{\"384\":1,\"544\":1,\"546\":1,\"737\":2,\"738\":7,\"739\":5,\"740\":3,\"741\":13}}],[\"模\",{\"1\":{\"372\":1}}],[\"模糊性\",{\"1\":{\"303\":2}}],[\"模糊\",{\"0\":{\"834\":1},\"1\":{\"303\":1,\"304\":1,\"832\":1,\"834\":1,\"928\":1}}],[\"模糊推理\",{\"1\":{\"245\":1}}],[\"模态\",{\"0\":{\"943\":1},\"1\":{\"242\":2,\"247\":1,\"299\":1,\"325\":2,\"859\":2,\"862\":1,\"864\":1,\"865\":1,\"888\":1,\"935\":2,\"944\":1}}],[\"模块\",{\"1\":{\"53\":1,\"193\":1,\"194\":1,\"225\":3,\"228\":1,\"246\":1,\"314\":4,\"316\":1,\"370\":1,\"373\":4,\"380\":1,\"398\":2,\"406\":1,\"722\":1,\"893\":1,\"928\":2,\"929\":1,\"930\":1}}],[\"模拟题\",{\"1\":{\"102\":1}}],[\"模拟\",{\"0\":{\"32\":1},\"1\":{\"13\":1,\"32\":1,\"72\":1,\"103\":1,\"227\":3,\"370\":1,\"840\":1}}],[\"模式\",{\"0\":{\"17\":2,\"31\":1,\"32\":1,\"33\":1,\"496\":1,\"502\":1},\"1\":{\"3\":1,\"4\":2,\"5\":2,\"11\":2,\"13\":2,\"15\":3,\"16\":4,\"17\":4,\"31\":2,\"32\":1,\"33\":3,\"34\":6,\"38\":3,\"39\":2,\"310\":1,\"372\":1,\"499\":1,\"501\":1,\"502\":2,\"793\":1}}],[\"模型\",{\"0\":{\"13\":1,\"30\":1,\"61\":1,\"228\":1,\"373\":1,\"451\":1,\"452\":1,\"453\":1,\"454\":1,\"492\":1,\"896\":1,\"902\":1,\"912\":1,\"936\":1,\"943\":1,\"946\":1},\"1\":{\"3\":1,\"4\":1,\"11\":1,\"30\":1,\"32\":1,\"44\":1,\"47\":1,\"49\":2,\"51\":1,\"52\":1,\"53\":2,\"54\":3,\"55\":2,\"61\":1,\"63\":2,\"192\":3,\"193\":2,\"194\":2,\"195\":1,\"198\":2,\"199\":1,\"218\":1,\"225\":1,\"228\":2,\"229\":1,\"261\":1,\"262\":1,\"273\":2,\"276\":2,\"277\":3,\"301\":1,\"312\":2,\"315\":3,\"319\":1,\"320\":3,\"322\":1,\"325\":4,\"349\":2,\"350\":2,\"355\":1,\"366\":1,\"370\":8,\"371\":1,\"372\":1,\"379\":1,\"386\":1,\"390\":2,\"398\":1,\"402\":2,\"404\":1,\"437\":2,\"451\":2,\"453\":1,\"454\":1,\"492\":1,\"499\":1,\"843\":1,\"854\":1,\"857\":3,\"858\":1,\"859\":1,\"860\":6,\"862\":1,\"863\":2,\"864\":2,\"868\":2,\"873\":1,\"875\":4,\"887\":1,\"895\":2,\"902\":2,\"904\":3,\"906\":2,\"907\":2,\"908\":2,\"910\":2,\"911\":1,\"913\":1,\"915\":1,\"922\":7,\"924\":4,\"926\":1,\"927\":4,\"928\":7,\"929\":8,\"935\":3,\"936\":1,\"938\":1,\"940\":2,\"941\":2,\"944\":1,\"947\":4,\"951\":1,\"952\":4,\"953\":3,\"959\":1}}],[\"的有\",{\"1\":{\"869\":1}}],[\"的类\",{\"1\":{\"748\":1}}],[\"的呢\",{\"1\":{\"577\":1}}],[\"的值\",{\"1\":{\"525\":1,\"666\":2,\"670\":1,\"673\":1,\"807\":2}}],[\"的边\",{\"1\":{\"303\":1}}],[\"的是\",{\"1\":{\"86\":1}}],[\"的话\",{\"1\":{\"17\":1,\"31\":1,\"87\":1,\"103\":1,\"292\":1,\"379\":1,\"528\":1,\"563\":1,\"830\":1,\"863\":1,\"938\":1,\"951\":1}}],[\"的\",{\"0\":{\"10\":1,\"13\":1,\"26\":1,\"27\":1,\"60\":1,\"61\":1,\"73\":1,\"74\":1,\"75\":1,\"78\":1,\"79\":1,\"80\":1,\"82\":1,\"84\":1,\"86\":1,\"89\":1,\"90\":1,\"91\":1,\"100\":1,\"114\":1,\"139\":1,\"143\":1,\"148\":1,\"161\":1,\"182\":1,\"193\":1,\"216\":1,\"219\":1,\"221\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"238\":1,\"239\":1,\"245\":1,\"246\":1,\"248\":1,\"251\":1,\"314\":1,\"350\":1,\"351\":1,\"436\":1,\"437\":1,\"451\":1,\"460\":1,\"462\":1,\"485\":1,\"517\":1,\"519\":1,\"522\":1,\"523\":1,\"524\":1,\"528\":1,\"529\":1,\"532\":1,\"549\":1,\"554\":1,\"579\":1,\"581\":1,\"587\":1,\"591\":1,\"592\":1,\"593\":1,\"608\":1,\"613\":1,\"626\":1,\"627\":1,\"631\":1,\"634\":1,\"637\":1,\"638\":1,\"639\":2,\"647\":1,\"657\":1,\"662\":1,\"670\":1,\"671\":1,\"673\":1,\"675\":1,\"684\":1,\"685\":1,\"692\":1,\"694\":1,\"695\":1,\"699\":1,\"702\":1,\"705\":1,\"708\":1,\"709\":1,\"714\":1,\"715\":1,\"718\":1,\"721\":1,\"723\":1,\"724\":1,\"725\":1,\"728\":1,\"732\":1,\"733\":1,\"734\":1,\"735\":1,\"742\":1,\"743\":1,\"748\":1,\"749\":1,\"750\":1,\"751\":1,\"752\":1,\"760\":1,\"768\":1,\"778\":1,\"781\":1,\"782\":1,\"787\":1,\"788\":1,\"791\":1,\"792\":1,\"799\":1,\"804\":1,\"812\":1,\"827\":1,\"828\":1,\"829\":1,\"834\":1,\"842\":1,\"854\":1,\"898\":1,\"915\":3,\"916\":1,\"937\":1,\"941\":1,\"943\":1,\"946\":1},\"1\":{\"3\":5,\"4\":3,\"5\":9,\"8\":11,\"10\":17,\"11\":3,\"13\":24,\"15\":1,\"16\":8,\"17\":3,\"19\":10,\"20\":15,\"22\":10,\"23\":9,\"24\":1,\"25\":6,\"27\":5,\"28\":8,\"29\":1,\"30\":10,\"31\":3,\"32\":5,\"33\":4,\"34\":11,\"35\":5,\"36\":3,\"37\":1,\"38\":21,\"39\":2,\"40\":1,\"41\":20,\"42\":7,\"43\":8,\"44\":9,\"45\":3,\"49\":7,\"50\":4,\"51\":12,\"52\":13,\"53\":12,\"54\":6,\"55\":19,\"58\":2,\"63\":2,\"64\":2,\"69\":8,\"70\":17,\"71\":13,\"72\":20,\"75\":3,\"77\":4,\"80\":2,\"81\":8,\"82\":7,\"83\":2,\"85\":16,\"86\":37,\"87\":1,\"88\":1,\"89\":5,\"90\":3,\"91\":5,\"93\":13,\"94\":7,\"95\":10,\"96\":10,\"97\":48,\"98\":5,\"99\":4,\"100\":7,\"102\":8,\"103\":42,\"104\":6,\"105\":4,\"106\":7,\"107\":15,\"110\":7,\"112\":3,\"113\":5,\"115\":1,\"118\":1,\"122\":1,\"123\":3,\"125\":1,\"126\":27,\"128\":9,\"137\":36,\"138\":20,\"139\":7,\"143\":3,\"146\":1,\"148\":3,\"152\":4,\"153\":7,\"165\":6,\"168\":6,\"169\":2,\"170\":1,\"171\":1,\"172\":7,\"174\":8,\"175\":6,\"179\":1,\"182\":4,\"184\":4,\"186\":3,\"189\":1,\"191\":10,\"192\":14,\"193\":29,\"194\":12,\"195\":8,\"196\":2,\"197\":2,\"198\":11,\"199\":23,\"200\":3,\"201\":17,\"202\":12,\"203\":5,\"204\":1,\"205\":1,\"208\":5,\"209\":13,\"210\":17,\"211\":10,\"214\":10,\"216\":1,\"217\":9,\"218\":24,\"219\":1,\"220\":27,\"221\":9,\"222\":47,\"223\":41,\"224\":4,\"225\":35,\"226\":24,\"227\":30,\"228\":47,\"229\":23,\"232\":6,\"233\":2,\"234\":4,\"235\":6,\"237\":4,\"242\":16,\"243\":3,\"244\":10,\"245\":19,\"246\":44,\"247\":7,\"248\":7,\"249\":2,\"250\":7,\"254\":25,\"255\":2,\"256\":1,\"257\":19,\"259\":22,\"260\":11,\"261\":5,\"262\":11,\"263\":6,\"265\":1,\"268\":12,\"270\":19,\"272\":1,\"273\":10,\"276\":5,\"277\":12,\"280\":1,\"281\":3,\"282\":21,\"283\":7,\"284\":14,\"288\":10,\"290\":24,\"291\":2,\"292\":10,\"293\":6,\"294\":8,\"295\":1,\"298\":6,\"299\":22,\"300\":8,\"301\":9,\"303\":16,\"304\":18,\"305\":5,\"306\":5,\"307\":4,\"308\":21,\"309\":2,\"310\":5,\"311\":6,\"312\":40,\"313\":2,\"314\":17,\"315\":26,\"316\":6,\"317\":5,\"318\":10,\"319\":13,\"320\":13,\"321\":2,\"322\":21,\"323\":15,\"325\":11,\"327\":1,\"329\":2,\"331\":1,\"332\":9,\"334\":4,\"337\":7,\"338\":4,\"340\":2,\"342\":21,\"344\":12,\"347\":12,\"348\":21,\"349\":4,\"350\":8,\"351\":3,\"353\":5,\"354\":13,\"355\":36,\"356\":10,\"357\":26,\"358\":5,\"359\":5,\"366\":6,\"367\":1,\"369\":6,\"370\":21,\"371\":9,\"372\":25,\"373\":5,\"375\":3,\"379\":42,\"380\":17,\"384\":6,\"386\":11,\"390\":12,\"391\":24,\"392\":22,\"393\":6,\"394\":10,\"395\":19,\"396\":6,\"398\":17,\"399\":24,\"400\":1,\"401\":2,\"402\":9,\"404\":3,\"405\":1,\"406\":7,\"408\":2,\"409\":3,\"410\":9,\"411\":4,\"412\":2,\"413\":4,\"415\":5,\"416\":5,\"417\":7,\"419\":33,\"423\":4,\"425\":3,\"426\":3,\"428\":1,\"429\":1,\"436\":16,\"437\":4,\"446\":4,\"449\":3,\"451\":39,\"457\":1,\"459\":2,\"460\":4,\"461\":3,\"462\":2,\"465\":7,\"467\":8,\"468\":1,\"469\":8,\"471\":4,\"476\":32,\"480\":11,\"484\":7,\"485\":15,\"492\":13,\"500\":6,\"502\":9,\"503\":2,\"504\":1,\"509\":4,\"510\":2,\"512\":1,\"523\":1,\"524\":8,\"525\":11,\"527\":18,\"528\":14,\"529\":6,\"530\":13,\"531\":1,\"532\":3,\"534\":9,\"535\":3,\"536\":6,\"537\":8,\"538\":4,\"539\":3,\"540\":3,\"541\":7,\"542\":5,\"543\":2,\"544\":10,\"545\":29,\"546\":10,\"558\":1,\"559\":7,\"561\":3,\"562\":1,\"563\":15,\"564\":1,\"565\":1,\"566\":2,\"570\":4,\"571\":3,\"572\":3,\"573\":9,\"574\":6,\"575\":7,\"576\":4,\"577\":12,\"578\":1,\"581\":2,\"583\":5,\"584\":1,\"585\":1,\"586\":8,\"587\":7,\"589\":9,\"590\":9,\"591\":1,\"592\":3,\"594\":6,\"595\":9,\"596\":1,\"597\":4,\"598\":11,\"599\":9,\"600\":12,\"601\":14,\"604\":5,\"605\":9,\"606\":24,\"607\":16,\"609\":18,\"610\":10,\"611\":12,\"612\":16,\"613\":12,\"614\":4,\"615\":4,\"616\":3,\"617\":4,\"619\":4,\"620\":14,\"621\":10,\"623\":5,\"624\":3,\"625\":3,\"633\":3,\"634\":2,\"635\":2,\"637\":3,\"638\":5,\"639\":6,\"642\":4,\"645\":3,\"647\":2,\"648\":3,\"649\":2,\"651\":2,\"652\":4,\"654\":1,\"656\":3,\"657\":1,\"658\":1,\"659\":3,\"661\":2,\"662\":2,\"663\":7,\"664\":4,\"665\":11,\"666\":6,\"667\":1,\"668\":8,\"669\":1,\"670\":13,\"671\":39,\"672\":8,\"673\":4,\"675\":16,\"676\":29,\"677\":2,\"680\":2,\"682\":4,\"683\":2,\"684\":7,\"685\":7,\"686\":2,\"687\":6,\"688\":5,\"689\":4,\"690\":13,\"691\":5,\"692\":2,\"693\":4,\"695\":2,\"696\":5,\"698\":8,\"701\":32,\"702\":5,\"703\":7,\"704\":3,\"705\":5,\"706\":1,\"707\":13,\"708\":32,\"709\":9,\"710\":6,\"712\":14,\"713\":10,\"714\":16,\"715\":4,\"716\":1,\"717\":18,\"718\":19,\"719\":5,\"720\":12,\"721\":9,\"722\":16,\"724\":8,\"725\":3,\"726\":7,\"728\":5,\"729\":17,\"730\":10,\"732\":16,\"733\":5,\"734\":12,\"735\":23,\"736\":18,\"737\":2,\"738\":14,\"739\":4,\"740\":10,\"741\":7,\"743\":2,\"744\":21,\"745\":29,\"747\":4,\"748\":34,\"749\":12,\"750\":35,\"751\":5,\"752\":7,\"755\":17,\"756\":3,\"757\":5,\"758\":2,\"760\":9,\"762\":8,\"766\":13,\"767\":5,\"768\":4,\"769\":79,\"770\":16,\"775\":7,\"776\":3,\"777\":1,\"778\":1,\"780\":1,\"781\":24,\"782\":11,\"784\":1,\"785\":11,\"786\":1,\"787\":5,\"788\":2,\"789\":5,\"790\":4,\"791\":6,\"793\":31,\"794\":5,\"798\":2,\"799\":5,\"800\":2,\"801\":9,\"804\":6,\"806\":4,\"807\":5,\"808\":5,\"809\":4,\"810\":1,\"811\":5,\"813\":1,\"814\":1,\"815\":1,\"816\":5,\"817\":8,\"818\":10,\"819\":2,\"824\":4,\"825\":25,\"826\":25,\"827\":10,\"828\":28,\"829\":22,\"830\":38,\"832\":1,\"833\":5,\"834\":1,\"835\":2,\"837\":6,\"839\":2,\"841\":4,\"843\":2,\"844\":2,\"845\":6,\"846\":4,\"848\":6,\"849\":4,\"852\":2,\"854\":4,\"855\":3,\"857\":2,\"858\":6,\"859\":29,\"860\":15,\"862\":5,\"863\":20,\"864\":14,\"865\":3,\"867\":3,\"868\":5,\"869\":1,\"872\":1,\"873\":5,\"874\":1,\"875\":16,\"882\":3,\"883\":2,\"884\":7,\"887\":16,\"888\":1,\"889\":9,\"890\":4,\"891\":4,\"892\":4,\"893\":12,\"895\":2,\"900\":1,\"901\":3,\"902\":9,\"903\":2,\"904\":18,\"905\":1,\"906\":11,\"907\":6,\"908\":2,\"909\":2,\"910\":10,\"911\":1,\"913\":2,\"915\":3,\"916\":6,\"917\":3,\"918\":1,\"920\":2,\"922\":24,\"923\":9,\"924\":6,\"925\":6,\"926\":11,\"927\":1,\"928\":28,\"929\":29,\"930\":3,\"935\":22,\"938\":36,\"939\":5,\"940\":44,\"941\":9,\"944\":10,\"945\":4,\"947\":6,\"949\":6,\"951\":21,\"952\":6,\"953\":16,\"955\":10,\"957\":22,\"958\":20,\"959\":18,\"960\":6,\"961\":27,\"962\":4,\"963\":4}}],[\"池和多\",{\"1\":{\"226\":1}}],[\"池来\",{\"1\":{\"217\":1,\"246\":1,\"311\":1}}],[\"池仅\",{\"1\":{\"217\":1}}],[\"池化层\",{\"1\":{\"200\":1,\"306\":1,\"311\":1,\"380\":1}}],[\"池化\",{\"1\":{\"195\":1,\"198\":1,\"225\":2,\"248\":1,\"301\":3,\"308\":7,\"310\":1,\"312\":3}}],[\"池中\",{\"1\":{\"8\":1}}],[\"池是\",{\"1\":{\"8\":1,\"35\":1,\"307\":1}}],[\"池\",{\"0\":{\"7\":1,\"8\":1,\"35\":1},\"1\":{\"3\":2,\"8\":2,\"10\":1,\"225\":2,\"226\":1,\"227\":2}}],[\"加噪\",{\"1\":{\"939\":1}}],[\"加噪到\",{\"1\":{\"939\":2}}],[\"加少\",{\"0\":{\"916\":1}}],[\"加减\",{\"1\":{\"813\":1,\"814\":1}}],[\"加类\",{\"1\":{\"745\":2}}],[\"加以\",{\"1\":{\"611\":1}}],[\"加号\",{\"1\":{\"534\":1}}],[\"加密\",{\"1\":{\"484\":1,\"485\":2}}],[\"加密传输\",{\"1\":{\"484\":1}}],[\"加回\",{\"1\":{\"399\":1}}],[\"加在一起\",{\"1\":{\"380\":1,\"750\":1}}],[\"加载\",{\"0\":{\"846\":1},\"1\":{\"372\":1,\"839\":1}}],[\"加深\",{\"1\":{\"294\":1}}],[\"加大\",{\"1\":{\"260\":1,\"893\":1,\"938\":1}}],[\"加持\",{\"1\":{\"257\":1,\"373\":1}}],[\"加速\",{\"1\":{\"199\":1,\"220\":1}}],[\"加快\",{\"1\":{\"198\":1,\"222\":2}}],[\"加油站\",{\"0\":{\"154\":1}}],[\"加上\",{\"1\":{\"70\":1,\"126\":1,\"137\":1,\"153\":4,\"597\":1,\"605\":2,\"606\":1,\"617\":2,\"639\":1,\"642\":1,\"654\":1,\"689\":1,\"706\":1,\"707\":1,\"717\":1,\"745\":1,\"769\":1,\"801\":1,\"805\":1,\"818\":1,\"938\":1,\"951\":1}}],[\"加入\",{\"1\":{\"55\":1,\"72\":1,\"85\":2,\"107\":1,\"112\":1,\"226\":1,\"369\":2,\"484\":1,\"485\":1,\"654\":1,\"676\":1,\"741\":2,\"775\":1,\"951\":1,\"962\":1}}],[\"加权\",{\"1\":{\"50\":1,\"222\":2,\"223\":4,\"226\":1,\"246\":1,\"295\":1,\"354\":1,\"395\":2,\"918\":1,\"935\":1}}],[\"加一\",{\"1\":{\"23\":1}}],[\"加锁\",{\"0\":{\"529\":1},\"1\":{\"8\":1,\"24\":2,\"25\":2,\"27\":1,\"527\":1,\"528\":1,\"529\":5}}],[\"加\",{\"1\":{\"3\":1,\"104\":1,\"137\":1,\"500\":1,\"589\":1,\"597\":1,\"609\":1,\"642\":2,\"644\":2,\"676\":2,\"684\":1,\"698\":1,\"738\":1,\"741\":1,\"769\":1,\"801\":1,\"811\":1,\"915\":1,\"916\":1,\"917\":1,\"940\":1}}],[\"是不是\",{\"1\":{\"99\":1,\"106\":1,\"860\":1,\"957\":1}}],[\"是从\",{\"1\":{\"89\":1,\"96\":1,\"125\":1,\"153\":1,\"222\":2,\"223\":1,\"226\":1,\"245\":1,\"314\":1,\"436\":1,\"708\":2,\"790\":2,\"815\":3,\"902\":1,\"906\":1}}],[\"是因为\",{\"1\":{\"86\":2,\"175\":1,\"261\":1,\"379\":1,\"676\":1,\"892\":1}}],[\"是有\",{\"1\":{\"55\":1}}],[\"是否是\",{\"1\":{\"81\":1,\"860\":1}}],[\"是否\",{\"0\":{\"177\":1,\"568\":1},\"1\":{\"30\":2,\"31\":1,\"71\":4,\"72\":1,\"85\":1,\"99\":1,\"107\":2,\"126\":1,\"128\":1,\"137\":2,\"138\":1,\"170\":2,\"172\":1,\"186\":1,\"191\":1,\"261\":2,\"354\":1,\"542\":1,\"556\":1,\"559\":2,\"571\":1,\"574\":2,\"599\":1,\"667\":1,\"671\":1,\"684\":1,\"708\":2,\"710\":1,\"712\":1,\"714\":2,\"721\":1,\"744\":1,\"769\":1,\"775\":1,\"781\":1,\"793\":1,\"828\":1,\"833\":2,\"837\":1,\"860\":1,\"939\":1,\"947\":1,\"963\":1}}],[\"是非\",{\"1\":{\"13\":1,\"476\":1,\"959\":1}}],[\"是\",{\"0\":{\"10\":1,\"15\":2,\"475\":1,\"613\":1,\"915\":1},\"1\":{\"3\":1,\"4\":2,\"10\":2,\"11\":2,\"13\":12,\"15\":1,\"17\":2,\"19\":1,\"20\":1,\"22\":4,\"23\":3,\"27\":1,\"28\":4,\"30\":7,\"34\":3,\"36\":2,\"37\":1,\"38\":8,\"39\":1,\"41\":3,\"42\":3,\"44\":4,\"50\":1,\"52\":3,\"53\":2,\"69\":1,\"70\":3,\"72\":1,\"75\":1,\"80\":1,\"81\":1,\"82\":2,\"85\":2,\"86\":6,\"87\":2,\"88\":2,\"89\":1,\"90\":1,\"91\":1,\"93\":1,\"96\":1,\"97\":2,\"99\":2,\"103\":5,\"106\":3,\"107\":1,\"110\":1,\"115\":1,\"122\":1,\"126\":7,\"128\":1,\"137\":5,\"138\":10,\"139\":5,\"141\":1,\"143\":1,\"160\":1,\"165\":1,\"169\":1,\"170\":2,\"174\":4,\"175\":1,\"181\":2,\"184\":1,\"186\":1,\"189\":1,\"191\":2,\"193\":6,\"197\":1,\"198\":3,\"199\":2,\"201\":1,\"203\":2,\"208\":2,\"209\":2,\"210\":2,\"214\":5,\"217\":1,\"220\":2,\"222\":6,\"223\":2,\"225\":3,\"226\":1,\"227\":6,\"228\":1,\"242\":6,\"244\":2,\"245\":1,\"246\":1,\"248\":2,\"249\":1,\"250\":1,\"254\":4,\"257\":1,\"259\":6,\"260\":1,\"262\":1,\"268\":1,\"270\":3,\"280\":1,\"282\":4,\"284\":2,\"288\":1,\"290\":1,\"291\":2,\"292\":2,\"293\":1,\"298\":1,\"299\":3,\"303\":1,\"304\":4,\"306\":1,\"308\":1,\"309\":1,\"310\":3,\"311\":1,\"312\":6,\"314\":2,\"315\":3,\"319\":1,\"320\":1,\"322\":1,\"323\":2,\"332\":1,\"342\":3,\"344\":3,\"348\":4,\"349\":4,\"351\":2,\"355\":3,\"356\":3,\"357\":3,\"366\":4,\"370\":4,\"371\":3,\"372\":1,\"379\":7,\"380\":6,\"386\":1,\"394\":2,\"396\":1,\"398\":2,\"399\":7,\"402\":3,\"406\":1,\"409\":1,\"410\":1,\"413\":1,\"415\":1,\"416\":4,\"419\":5,\"426\":1,\"436\":2,\"437\":2,\"446\":1,\"451\":6,\"459\":1,\"460\":2,\"464\":1,\"465\":1,\"467\":2,\"469\":1,\"475\":1,\"476\":8,\"480\":2,\"484\":5,\"485\":5,\"492\":3,\"522\":1,\"524\":3,\"525\":5,\"527\":7,\"528\":4,\"535\":2,\"536\":2,\"537\":4,\"538\":1,\"539\":1,\"540\":1,\"544\":4,\"545\":3,\"563\":7,\"565\":1,\"566\":2,\"567\":1,\"572\":1,\"573\":2,\"574\":1,\"575\":1,\"576\":1,\"577\":5,\"581\":1,\"583\":2,\"586\":3,\"587\":1,\"589\":2,\"590\":1,\"595\":3,\"596\":1,\"598\":4,\"599\":1,\"600\":2,\"604\":1,\"605\":2,\"606\":5,\"607\":3,\"609\":3,\"610\":1,\"611\":1,\"612\":5,\"613\":3,\"614\":1,\"615\":1,\"616\":1,\"617\":1,\"619\":1,\"620\":4,\"624\":2,\"635\":1,\"637\":2,\"642\":3,\"647\":1,\"648\":1,\"651\":1,\"654\":2,\"657\":1,\"663\":2,\"664\":2,\"665\":3,\"666\":2,\"667\":1,\"668\":2,\"669\":2,\"671\":3,\"672\":1,\"675\":6,\"676\":7,\"677\":1,\"683\":1,\"685\":2,\"686\":2,\"687\":1,\"688\":7,\"689\":2,\"690\":3,\"691\":1,\"693\":1,\"698\":1,\"701\":5,\"702\":5,\"703\":1,\"704\":1,\"705\":2,\"706\":1,\"708\":3,\"710\":1,\"712\":1,\"713\":1,\"715\":1,\"717\":2,\"718\":1,\"719\":1,\"720\":2,\"722\":1,\"726\":2,\"728\":2,\"729\":5,\"730\":3,\"735\":2,\"736\":6,\"737\":2,\"738\":7,\"739\":1,\"740\":3,\"741\":1,\"744\":4,\"745\":6,\"747\":1,\"748\":7,\"749\":3,\"750\":7,\"751\":1,\"752\":1,\"755\":5,\"756\":1,\"757\":3,\"759\":1,\"762\":2,\"767\":1,\"769\":10,\"770\":4,\"775\":3,\"777\":1,\"780\":2,\"781\":5,\"782\":3,\"785\":2,\"789\":1,\"793\":8,\"794\":1,\"799\":1,\"801\":3,\"804\":1,\"807\":2,\"809\":1,\"816\":1,\"818\":3,\"824\":1,\"825\":2,\"827\":2,\"828\":5,\"829\":2,\"830\":4,\"834\":1,\"837\":5,\"841\":1,\"845\":1,\"848\":3,\"849\":1,\"852\":1,\"854\":1,\"859\":10,\"860\":2,\"862\":3,\"863\":1,\"864\":2,\"865\":1,\"873\":1,\"874\":1,\"875\":5,\"884\":1,\"889\":1,\"891\":1,\"896\":1,\"901\":1,\"902\":2,\"905\":2,\"906\":2,\"907\":2,\"922\":4,\"923\":2,\"925\":2,\"928\":7,\"929\":8,\"930\":2,\"935\":1,\"938\":4,\"939\":1,\"940\":6,\"941\":1,\"945\":1,\"947\":2,\"949\":4,\"951\":4,\"953\":2,\"955\":1,\"957\":10,\"958\":6,\"959\":2,\"960\":3,\"961\":7,\"962\":1,\"963\":1}}],[\"络小绎\",{\"1\":{\"54\":1}}],[\"络\",{\"1\":{\"3\":1}}],[\"⽹\",{\"1\":{\"3\":1}}],[\",\",{\"0\":{\"50\":1,\"51\":1,\"52\":1,\"369\":1,\"435\":1},\"1\":{\"1\":1,\"3\":4,\"4\":2,\"5\":4,\"8\":17,\"10\":9,\"11\":3,\"13\":9,\"15\":1,\"16\":13,\"17\":1,\"19\":2,\"20\":2,\"22\":3,\"23\":12,\"24\":10,\"25\":11,\"27\":6,\"28\":6,\"29\":1,\"30\":10,\"31\":3,\"32\":8,\"33\":2,\"34\":13,\"35\":13,\"36\":6,\"37\":4,\"38\":22,\"39\":8,\"40\":1,\"41\":25,\"42\":7,\"43\":13,\"44\":7,\"46\":2,\"47\":5,\"48\":4,\"49\":5,\"51\":5,\"52\":10,\"53\":9,\"54\":7,\"55\":8,\"56\":3,\"58\":3,\"60\":1,\"61\":3,\"62\":3,\"63\":2,\"64\":1,\"65\":11,\"67\":6,\"69\":11,\"70\":21,\"71\":25,\"72\":70,\"73\":5,\"74\":1,\"75\":6,\"76\":1,\"77\":5,\"78\":3,\"80\":8,\"81\":8,\"82\":28,\"83\":9,\"84\":2,\"85\":24,\"86\":33,\"87\":13,\"88\":6,\"89\":11,\"90\":17,\"91\":11,\"93\":7,\"94\":11,\"95\":12,\"96\":17,\"97\":32,\"98\":26,\"99\":13,\"100\":24,\"102\":25,\"103\":58,\"104\":51,\"105\":31,\"106\":15,\"107\":1,\"110\":9,\"112\":12,\"113\":11,\"114\":16,\"115\":10,\"116\":17,\"118\":6,\"119\":7,\"121\":59,\"122\":7,\"123\":4,\"125\":10,\"126\":17,\"128\":22,\"134\":1,\"137\":48,\"138\":24,\"139\":16,\"142\":5,\"143\":5,\"148\":2,\"152\":5,\"153\":6,\"160\":4,\"165\":9,\"166\":3,\"168\":4,\"169\":1,\"170\":10,\"172\":19,\"174\":11,\"175\":7,\"177\":3,\"179\":2,\"181\":2,\"182\":4,\"184\":3,\"186\":14,\"188\":6,\"189\":5,\"191\":13,\"192\":2,\"193\":4,\"194\":3,\"195\":16,\"197\":2,\"198\":6,\"199\":4,\"201\":10,\"202\":8,\"203\":4,\"204\":1,\"205\":1,\"208\":6,\"209\":3,\"210\":12,\"211\":8,\"214\":6,\"217\":1,\"220\":3,\"221\":1,\"222\":5,\"223\":2,\"225\":3,\"226\":2,\"227\":1,\"228\":2,\"229\":7,\"232\":2,\"242\":5,\"244\":1,\"245\":4,\"246\":10,\"248\":1,\"254\":4,\"255\":2,\"256\":2,\"257\":13,\"259\":5,\"260\":4,\"261\":7,\"262\":6,\"263\":9,\"264\":1,\"265\":2,\"266\":2,\"268\":7,\"270\":1,\"271\":5,\"272\":4,\"273\":7,\"276\":3,\"277\":10,\"278\":1,\"280\":1,\"281\":3,\"282\":23,\"284\":3,\"285\":2,\"288\":5,\"290\":12,\"291\":8,\"292\":9,\"293\":9,\"294\":20,\"295\":1,\"298\":4,\"299\":9,\"300\":4,\"301\":6,\"303\":17,\"304\":69,\"305\":33,\"307\":1,\"308\":2,\"309\":11,\"312\":6,\"313\":2,\"314\":7,\"315\":4,\"317\":4,\"318\":4,\"319\":2,\"320\":3,\"321\":4,\"322\":9,\"323\":6,\"325\":2,\"327\":2,\"332\":19,\"334\":6,\"338\":2,\"340\":16,\"342\":16,\"343\":1,\"344\":42,\"347\":14,\"348\":12,\"349\":12,\"350\":4,\"351\":1,\"353\":6,\"354\":10,\"355\":20,\"356\":4,\"357\":10,\"358\":5,\"359\":12,\"360\":6,\"361\":5,\"364\":2,\"366\":12,\"367\":3,\"369\":5,\"370\":9,\"371\":12,\"372\":23,\"375\":4,\"377\":13,\"379\":10,\"380\":14,\"383\":5,\"385\":1,\"386\":3,\"390\":2,\"391\":1,\"392\":13,\"394\":11,\"395\":14,\"397\":2,\"398\":2,\"399\":26,\"401\":3,\"402\":10,\"404\":2,\"405\":1,\"406\":5,\"408\":2,\"409\":2,\"410\":4,\"411\":6,\"413\":4,\"415\":2,\"416\":1,\"417\":8,\"419\":7,\"422\":39,\"423\":2,\"424\":3,\"425\":3,\"426\":14,\"427\":10,\"428\":8,\"429\":12,\"435\":3,\"437\":1,\"446\":11,\"449\":12,\"451\":51,\"453\":11,\"454\":2,\"456\":2,\"457\":4,\"458\":3,\"459\":2,\"460\":4,\"461\":8,\"462\":2,\"463\":3,\"465\":3,\"467\":6,\"468\":6,\"469\":10,\"471\":7,\"476\":18,\"480\":2,\"484\":3,\"485\":12,\"492\":5,\"499\":2,\"500\":4,\"502\":4,\"503\":2,\"504\":5,\"509\":4,\"510\":4,\"511\":3,\"512\":4,\"522\":4,\"524\":12,\"525\":13,\"527\":2,\"528\":9,\"529\":12,\"530\":17,\"531\":14,\"532\":5,\"534\":17,\"535\":15,\"536\":4,\"537\":7,\"538\":25,\"539\":30,\"540\":21,\"541\":21,\"542\":13,\"543\":23,\"544\":8,\"545\":41,\"546\":5,\"548\":5,\"551\":1,\"552\":1,\"553\":1,\"554\":3,\"556\":1,\"557\":3,\"558\":1,\"559\":25,\"560\":1,\"561\":2,\"562\":1,\"563\":10,\"565\":1,\"566\":2,\"567\":2,\"568\":1,\"570\":23,\"571\":11,\"572\":1,\"573\":10,\"574\":33,\"575\":6,\"576\":10,\"577\":7,\"581\":7,\"583\":19,\"584\":8,\"585\":3,\"586\":13,\"587\":8,\"589\":22,\"590\":21,\"591\":1,\"592\":1,\"594\":6,\"595\":50,\"596\":1,\"597\":9,\"598\":21,\"599\":30,\"600\":41,\"601\":24,\"602\":2,\"604\":2,\"605\":10,\"606\":22,\"607\":6,\"609\":19,\"610\":8,\"611\":10,\"612\":35,\"613\":9,\"614\":2,\"615\":12,\"616\":4,\"617\":12,\"619\":5,\"620\":10,\"621\":15,\"623\":10,\"624\":10,\"625\":7,\"626\":3,\"632\":3,\"633\":45,\"634\":1,\"635\":3,\"637\":1,\"638\":2,\"639\":11,\"640\":5,\"642\":16,\"644\":3,\"645\":5,\"647\":20,\"648\":9,\"650\":5,\"652\":2,\"654\":16,\"657\":3,\"658\":11,\"661\":4,\"662\":9,\"663\":9,\"664\":1,\"665\":14,\"666\":5,\"667\":5,\"668\":9,\"670\":10,\"671\":37,\"672\":9,\"673\":4,\"675\":41,\"676\":28,\"680\":1,\"681\":2,\"682\":19,\"683\":26,\"684\":16,\"685\":10,\"686\":5,\"687\":12,\"688\":24,\"689\":27,\"690\":27,\"691\":3,\"692\":2,\"693\":11,\"694\":1,\"695\":19,\"696\":11,\"697\":4,\"698\":21,\"701\":33,\"702\":2,\"703\":7,\"704\":14,\"705\":4,\"706\":5,\"707\":17,\"708\":11,\"709\":13,\"710\":5,\"712\":10,\"713\":13,\"714\":30,\"715\":3,\"717\":17,\"718\":18,\"719\":13,\"720\":15,\"721\":52,\"722\":41,\"724\":20,\"725\":11,\"726\":10,\"728\":1,\"729\":28,\"730\":24,\"732\":10,\"733\":1,\"734\":6,\"735\":23,\"736\":5,\"737\":2,\"738\":20,\"739\":10,\"740\":9,\"741\":16,\"744\":31,\"745\":40,\"747\":2,\"748\":18,\"749\":8,\"750\":20,\"751\":1,\"752\":5,\"755\":44,\"756\":12,\"757\":19,\"758\":12,\"759\":8,\"760\":16,\"762\":19,\"766\":12,\"767\":2,\"768\":3,\"769\":95,\"770\":13,\"775\":7,\"776\":10,\"777\":5,\"778\":3,\"779\":1,\"780\":3,\"781\":48,\"782\":24,\"784\":1,\"785\":16,\"787\":4,\"788\":3,\"789\":4,\"790\":6,\"791\":9,\"793\":61,\"794\":7,\"798\":6,\"799\":9,\"800\":4,\"801\":10,\"803\":1,\"804\":14,\"805\":2,\"806\":15,\"807\":22,\"808\":10,\"809\":23,\"810\":42,\"811\":67,\"813\":13,\"814\":8,\"815\":5,\"816\":22,\"817\":22,\"818\":16,\"819\":8,\"824\":4,\"825\":22,\"826\":24,\"827\":15,\"828\":23,\"829\":33,\"830\":28,\"832\":3,\"833\":5,\"834\":12,\"835\":17,\"836\":2,\"837\":29,\"839\":5,\"840\":14,\"841\":3,\"845\":23,\"846\":19,\"848\":15,\"849\":33,\"852\":20,\"854\":11,\"855\":7,\"856\":3,\"857\":1,\"858\":2,\"859\":24,\"860\":2,\"862\":15,\"863\":1,\"864\":9,\"865\":1,\"867\":21,\"868\":11,\"869\":20,\"871\":2,\"872\":2,\"873\":3,\"874\":2,\"875\":8,\"876\":3,\"877\":27,\"882\":12,\"883\":5,\"884\":25,\"887\":10,\"888\":2,\"889\":7,\"890\":4,\"891\":6,\"893\":5,\"894\":3,\"895\":3,\"896\":7,\"897\":39,\"899\":5,\"900\":26,\"901\":14,\"902\":7,\"903\":3,\"904\":20,\"905\":6,\"906\":4,\"907\":4,\"908\":6,\"909\":1,\"910\":10,\"911\":1,\"912\":8,\"913\":10,\"915\":2,\"916\":3,\"917\":5,\"918\":3,\"920\":3,\"921\":2,\"922\":5,\"923\":3,\"925\":1,\"926\":1,\"928\":12,\"929\":11,\"930\":1,\"935\":8,\"938\":11,\"939\":5,\"940\":14,\"941\":1,\"944\":4,\"945\":6,\"947\":5,\"950\":1,\"951\":7,\"952\":2,\"953\":3,\"955\":3,\"956\":1,\"957\":6,\"958\":5,\"959\":5,\"961\":9,\"962\":1,\"963\":3}}],[\"t0\",{\"1\":{\"939\":1}}],[\"t5\",{\"1\":{\"929\":1}}],[\"tls\",{\"1\":{\"484\":2,\"485\":2}}],[\"tlabs\",{\"1\":{\"277\":1}}],[\"tw\",{\"1\":{\"413\":1}}],[\"two\",{\"1\":{\"208\":1,\"305\":2,\"361\":5,\"945\":1}}],[\"twosum\",{\"1\":{\"104\":2}}],[\"ty\",{\"1\":{\"413\":3}}],[\"typically\",{\"1\":{\"309\":1}}],[\"typeerror\",{\"1\":{\"854\":1}}],[\"typedef\",{\"0\":{\"634\":1,\"638\":1},\"1\":{\"634\":3,\"635\":1,\"637\":2,\"638\":3,\"639\":10}}],[\"typename\",{\"1\":{\"585\":2,\"590\":6,\"600\":5,\"658\":3,\"665\":1,\"670\":1,\"672\":1,\"673\":1,\"712\":1,\"734\":1,\"735\":3,\"756\":1,\"801\":2,\"811\":2}}],[\"type\",{\"1\":{\"41\":2,\"42\":2,\"44\":11,\"532\":2,\"542\":1,\"545\":1,\"662\":1,\"811\":1,\"814\":1}}],[\"txt\",{\"1\":{\"838\":1}}],[\"tx\",{\"1\":{\"413\":2}}],[\"tnnls\",{\"1\":{\"359\":1}}],[\"tcp\",{\"0\":{\"490\":1},\"1\":{\"484\":3,\"485\":1}}],[\"tckd\",{\"1\":{\"354\":4,\"355\":5,\"356\":5,\"357\":1}}],[\"tchapmi\",{\"1\":{\"246\":1}}],[\"tg\",{\"1\":{\"322\":2}}],[\"tsurf\",{\"1\":{\"282\":5}}],[\"t2t\",{\"1\":{\"388\":1}}],[\"t2\",{\"1\":{\"88\":4,\"260\":1,\"522\":2,\"528\":2,\"529\":2,\"530\":2,\"531\":2,\"600\":1,\"709\":3,\"717\":4,\"741\":1,\"899\":1,\"900\":6}}],[\"t1\",{\"1\":{\"88\":4,\"260\":1,\"522\":3,\"524\":5,\"525\":2,\"528\":2,\"529\":2,\"530\":2,\"531\":2,\"600\":1,\"605\":3,\"606\":3,\"709\":11,\"717\":4,\"732\":8,\"734\":4,\"735\":2,\"741\":1,\"859\":2,\"897\":3,\"900\":1}}],[\"taming\",{\"1\":{\"862\":1}}],[\"tanh\",{\"0\":{\"445\":1,\"446\":1},\"1\":{\"446\":3,\"449\":2}}],[\"tau\",{\"1\":{\"356\":1}}],[\"takes\",{\"1\":{\"854\":1}}],[\"taken\",{\"1\":{\"426\":1}}],[\"take\",{\"1\":{\"344\":1}}],[\"tatarchenko\",{\"1\":{\"245\":1}}],[\"table\",{\"1\":{\"249\":1}}],[\"tab\",{\"1\":{\"191\":1,\"625\":2,\"648\":1}}],[\"targetstring\",{\"1\":{\"534\":1}}],[\"targetsum\",{\"1\":{\"85\":13}}],[\"target\",{\"0\":{\"323\":1},\"1\":{\"104\":13,\"115\":7,\"116\":6,\"273\":2,\"354\":2,\"955\":1}}],[\"tasks\",{\"1\":{\"380\":1,\"427\":5}}],[\"task\",{\"1\":{\"54\":2,\"312\":5,\"873\":1}}],[\"tue\",{\"1\":{\"755\":3}}],[\"tuple\",{\"1\":{\"304\":1}}],[\"tuv\",{\"1\":{\"114\":2}}],[\"tu\",{\"1\":{\"82\":1}}],[\"tuning\",{\"1\":{\"51\":1,\"875\":1}}],[\"total\",{\"1\":{\"428\":1,\"745\":5,\"852\":2}}],[\"together\",{\"1\":{\"427\":1}}],[\"toolbox\",{\"1\":{\"426\":1}}],[\"tools\",{\"1\":{\"185\":1}}],[\"torchvision\",{\"1\":{\"344\":1}}],[\"torch\",{\"0\":{\"848\":1,\"849\":1,\"850\":1,\"851\":1},\"1\":{\"304\":6,\"344\":7,\"840\":3,\"845\":2,\"846\":2,\"848\":2,\"849\":6,\"854\":2,\"855\":2,\"868\":3}}],[\"torchsparse\",{\"0\":{\"211\":1},\"1\":{\"211\":4}}],[\"toco\",{\"0\":{\"891\":1}}],[\"toc\",{\"1\":{\"300\":1,\"869\":1}}],[\"tokenize\",{\"1\":{\"929\":1}}],[\"tokenizer\",{\"1\":{\"929\":6}}],[\"token\",{\"0\":{\"385\":1,\"390\":1,\"393\":1,\"892\":1},\"1\":{\"272\":1,\"314\":1,\"321\":2,\"385\":1,\"386\":1,\"390\":8,\"391\":10,\"392\":15,\"393\":1,\"394\":9,\"395\":5,\"891\":1,\"892\":1,\"893\":6,\"929\":3}}],[\"tokens\",{\"1\":{\"106\":11,\"314\":1,\"321\":2,\"386\":4,\"390\":3,\"392\":2,\"393\":2,\"394\":2,\"395\":12,\"892\":1,\"929\":1}}],[\"to\",{\"0\":{\"157\":1,\"187\":1,\"237\":1},\"1\":{\"82\":9,\"119\":4,\"188\":2,\"189\":2,\"191\":2,\"195\":2,\"202\":1,\"208\":2,\"305\":3,\"309\":7,\"314\":1,\"321\":2,\"344\":1,\"359\":1,\"361\":1,\"380\":4,\"410\":1,\"422\":2,\"426\":1,\"427\":6,\"429\":1,\"451\":1,\"535\":2,\"574\":1,\"781\":2,\"840\":1,\"845\":2,\"846\":2,\"852\":1,\"859\":2,\"864\":1,\"867\":1,\"868\":2,\"875\":1,\"887\":1,\"901\":2,\"921\":1,\"929\":3,\"945\":1}}],[\"topology\",{\"1\":{\"309\":2}}],[\"top\",{\"1\":{\"71\":3,\"99\":1,\"100\":1,\"102\":5,\"106\":10,\"354\":2,\"355\":1,\"357\":2,\"361\":2,\"366\":1,\"392\":2,\"402\":1,\"566\":1,\"567\":2}}],[\"towards\",{\"0\":{\"55\":1,\"385\":1},\"1\":{\"385\":1,\"959\":1}}],[\"tmp3\",{\"1\":{\"103\":4}}],[\"tmp2\",{\"1\":{\"103\":11}}],[\"tmp1\",{\"1\":{\"103\":14}}],[\"tmp\",{\"1\":{\"71\":12,\"72\":34,\"73\":5,\"75\":7,\"84\":6,\"85\":13,\"97\":6,\"103\":21,\"105\":10,\"106\":20,\"139\":4,\"538\":2}}],[\"tps\",{\"0\":{\"392\":1},\"1\":{\"377\":1,\"385\":1,\"386\":2,\"391\":5,\"392\":1,\"396\":1}}],[\"tp\",{\"1\":{\"56\":1}}],[\"try\",{\"1\":{\"529\":1,\"530\":1,\"531\":1,\"856\":1}}],[\"tr\",{\"1\":{\"451\":2,\"904\":1}}],[\"tried\",{\"1\":{\"852\":1}}],[\"triangular\",{\"1\":{\"340\":2}}],[\"triangles\",{\"1\":{\"305\":1}}],[\"trimbst\",{\"1\":{\"98\":5}}],[\"truncation\",{\"1\":{\"929\":1}}],[\"trunc\",{\"1\":{\"793\":1}}],[\"true\",{\"1\":{\"77\":2,\"78\":1,\"85\":2,\"99\":4,\"104\":4,\"118\":1,\"119\":1,\"125\":2,\"126\":3,\"128\":1,\"152\":1,\"184\":2,\"304\":1,\"344\":1,\"542\":2,\"556\":1,\"810\":4,\"837\":2,\"845\":3,\"877\":2,\"929\":1}}],[\"truth\",{\"1\":{\"52\":1,\"284\":1,\"412\":2}}],[\"tracking\",{\"0\":{\"956\":1},\"1\":{\"956\":1}}],[\"tranformer\",{\"1\":{\"929\":1}}],[\"transform\",{\"1\":{\"887\":1}}],[\"transformers\",{\"0\":{\"385\":1},\"1\":{\"220\":1,\"344\":1,\"380\":1,\"385\":1,\"386\":1,\"392\":1,\"862\":1,\"887\":1,\"929\":1}}],[\"transformer\",{\"0\":{\"320\":1,\"378\":1},\"1\":{\"192\":1,\"193\":1,\"194\":1,\"195\":2,\"198\":2,\"199\":2,\"200\":1,\"201\":6,\"273\":2,\"304\":2,\"314\":1,\"320\":3,\"321\":1,\"322\":3,\"344\":6,\"370\":1,\"377\":1,\"379\":11,\"380\":8,\"383\":1,\"389\":1,\"399\":1,\"858\":1,\"859\":2,\"862\":1,\"863\":3,\"864\":3,\"865\":1,\"877\":1,\"924\":1,\"926\":2,\"929\":2,\"935\":2}}],[\"transferable\",{\"1\":{\"856\":1}}],[\"transfer\",{\"1\":{\"475\":1,\"889\":2}}],[\"translation\",{\"1\":{\"305\":1,\"952\":1}}],[\"tradeoff\",{\"1\":{\"872\":2}}],[\"traveller59\",{\"1\":{\"208\":1}}],[\"traversal\",{\"1\":{\"70\":4,\"100\":4}}],[\"trained\",{\"1\":{\"52\":2,\"195\":1}}],[\"trainingobject\",{\"1\":{\"904\":1}}],[\"training\",{\"0\":{\"868\":1},\"1\":{\"51\":1,\"54\":4,\"211\":1,\"256\":1,\"261\":1,\"272\":2,\"273\":2,\"313\":1,\"314\":1,\"321\":1,\"410\":1,\"422\":3,\"427\":2,\"428\":2,\"429\":1}}],[\"train\",{\"0\":{\"859\":1},\"1\":{\"49\":1,\"195\":1,\"867\":1}}],[\"tree\",{\"1\":{\"70\":1,\"81\":2,\"82\":1,\"93\":1,\"429\":1,\"465\":6}}],[\"treenode\",{\"1\":{\"69\":4,\"70\":10,\"71\":9,\"72\":16,\"73\":4,\"75\":4,\"76\":2,\"77\":3,\"78\":2,\"80\":4,\"81\":2,\"82\":6,\"83\":3,\"84\":3,\"85\":6,\"86\":3,\"87\":8,\"88\":3,\"89\":6,\"90\":9,\"91\":6,\"94\":2,\"95\":4,\"96\":4,\"97\":2,\"98\":4,\"99\":7,\"100\":14}}],[\"ten\",{\"1\":{\"559\":1}}],[\"tensorflow\",{\"1\":{\"841\":1}}],[\"tensorboardx\",{\"1\":{\"840\":1}}],[\"tensorboard\",{\"0\":{\"840\":1,\"841\":1},\"1\":{\"839\":1,\"840\":1,\"841\":3}}],[\"tensors\",{\"1\":{\"312\":1,\"929\":1}}],[\"tensor\",{\"0\":{\"204\":1},\"1\":{\"209\":3,\"210\":2,\"304\":9,\"848\":3,\"849\":6,\"855\":1}}],[\"temperature\",{\"1\":{\"859\":1}}],[\"temp\",{\"1\":{\"538\":2,\"695\":7,\"846\":5}}],[\"template\",{\"1\":{\"422\":1,\"600\":7,\"738\":5,\"740\":1,\"741\":3}}],[\"teacher\",{\"1\":{\"350\":1,\"355\":4,\"357\":1}}],[\"tetrahedra\",{\"1\":{\"277\":2}}],[\"terms\",{\"1\":{\"427\":1}}],[\"term\",{\"1\":{\"208\":1}}],[\"text2image\",{\"0\":{\"932\":1}}],[\"texts\",{\"1\":{\"859\":1}}],[\"text\",{\"0\":{\"929\":1,\"945\":1},\"1\":{\"42\":2,\"785\":1,\"856\":1,\"859\":4,\"862\":1,\"864\":1,\"889\":2,\"921\":1,\"927\":1,\"929\":22,\"930\":2,\"945\":3}}],[\"testing\",{\"1\":{\"51\":1,\"428\":1}}],[\"test\",{\"0\":{\"1\":1},\"1\":{\"1\":1,\"421\":1,\"422\":5}}],[\"thu\",{\"1\":{\"755\":2}}],[\"thus\",{\"1\":{\"309\":1,\"380\":1,\"956\":1}}],[\"th\",{\"1\":{\"366\":1,\"413\":2}}],[\"third\",{\"1\":{\"563\":1}}],[\"thing\",{\"1\":{\"422\":1}}],[\"thin\",{\"1\":{\"350\":1}}],[\"this\",{\"0\":{\"736\":1},\"1\":{\"37\":2,\"188\":2,\"261\":2,\"314\":1,\"426\":1,\"427\":2,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"605\":1,\"612\":2,\"708\":1,\"736\":6,\"745\":3}}],[\"those\",{\"1\":{\"429\":1}}],[\"thomas\",{\"1\":{\"222\":1}}],[\"though\",{\"1\":{\"188\":1}}],[\"than\",{\"1\":{\"208\":1,\"422\":2,\"424\":3,\"428\":2,\"693\":1}}],[\"that\",{\"1\":{\"195\":2,\"208\":1,\"261\":3,\"305\":1,\"309\":1,\"422\":2,\"427\":2,\"956\":1}}],[\"theme\",{\"1\":{\"838\":1}}],[\"them\",{\"1\":{\"305\":1,\"309\":1,\"383\":1}}],[\"thereby\",{\"1\":{\"305\":1}}],[\"these\",{\"1\":{\"195\":1,\"305\":1,\"344\":1,\"827\":1,\"830\":1}}],[\"then\",{\"1\":{\"195\":1,\"309\":1,\"314\":1,\"693\":1,\"845\":1,\"942\":1}}],[\"the\",{\"1\":{\"188\":2,\"191\":3,\"195\":1,\"201\":2,\"208\":2,\"261\":3,\"293\":1,\"305\":3,\"309\":26,\"314\":6,\"321\":7,\"340\":1,\"344\":2,\"361\":11,\"366\":2,\"380\":1,\"383\":8,\"422\":13,\"424\":1,\"426\":9,\"427\":6,\"428\":5,\"429\":4,\"690\":1,\"724\":2,\"745\":2,\"845\":6,\"872\":2,\"904\":1,\"910\":1,\"911\":1,\"928\":1,\"942\":1,\"945\":4,\"956\":2}}],[\"through\",{\"0\":{\"895\":1},\"1\":{\"195\":2,\"895\":1}}],[\"throw\",{\"1\":{\"27\":1,\"530\":3,\"531\":3}}],[\"threshold\",{\"1\":{\"884\":1}}],[\"threesum\",{\"1\":{\"104\":1}}],[\"thread\",{\"1\":{\"8\":1,\"528\":4,\"529\":4,\"530\":4,\"531\":4}}],[\"tiu\",{\"1\":{\"959\":1}}],[\"ti\",{\"1\":{\"732\":1,\"900\":1}}],[\"timeout\",{\"1\":{\"845\":1}}],[\"time\",{\"1\":{\"522\":2,\"524\":9,\"525\":9,\"528\":2,\"529\":2,\"530\":4,\"531\":4,\"605\":15,\"606\":15,\"709\":7,\"717\":10,\"732\":14,\"734\":1,\"735\":10}}],[\"timeslot\",{\"1\":{\"20\":3}}],[\"tick\",{\"1\":{\"20\":4}}],[\"tip\",{\"1\":{\"1\":1,\"55\":2,\"263\":1,\"317\":1,\"318\":1,\"323\":1,\"467\":1,\"595\":1,\"615\":1,\"650\":1,\"721\":1,\"756\":1,\"757\":1,\"769\":1,\"791\":1,\"801\":2,\"811\":1,\"845\":1,\"854\":1,\"884\":1}}],[\"t\",{\"1\":{\"3\":1,\"8\":1,\"27\":1,\"102\":6,\"104\":7,\"137\":26,\"165\":2,\"290\":1,\"322\":2,\"323\":1,\"334\":1,\"353\":4,\"354\":2,\"524\":3,\"525\":5,\"532\":3,\"534\":1,\"538\":3,\"539\":9,\"543\":1,\"571\":1,\"574\":5,\"600\":18,\"605\":6,\"612\":1,\"648\":1,\"666\":1,\"681\":1,\"695\":2,\"709\":6,\"781\":1,\"825\":1,\"827\":1,\"830\":1,\"859\":17,\"862\":3,\"867\":19,\"868\":13,\"869\":86,\"882\":1,\"896\":2,\"897\":107,\"899\":4,\"900\":59,\"901\":8,\"904\":2,\"905\":1,\"906\":2,\"907\":1,\"908\":1,\"909\":1,\"917\":7,\"944\":1,\"963\":3}}],[\"27825451\",{\"1\":{\"855\":1}}],[\"27\",{\"1\":{\"220\":1,\"254\":2,\"325\":1,\"370\":1,\"601\":1}}],[\"27.\",{\"1\":{\"102\":1}}],[\"250\",{\"1\":{\"422\":1}}],[\"256\",{\"1\":{\"344\":1,\"411\":3,\"633\":1,\"922\":2,\"928\":2}}],[\"25\",{\"1\":{\"218\":1}}],[\"255\",{\"1\":{\"119\":1}}],[\"257\",{\"1\":{\"82\":1}}],[\"280\",{\"1\":{\"419\":1}}],[\"28\",{\"1\":{\"220\":1,\"342\":1}}],[\"28.\",{\"1\":{\"105\":1}}],[\"283.\",{\"1\":{\"102\":1}}],[\"26\",{\"1\":{\"104\":1,\"220\":1,\"270\":1,\"856\":1,\"874\":1}}],[\"26.\",{\"1\":{\"102\":1}}],[\"24\",{\"1\":{\"218\":1,\"261\":1}}],[\"247\",{\"1\":{\"199\":1}}],[\"242.\",{\"1\":{\"104\":1}}],[\"24.\",{\"1\":{\"103\":1}}],[\"23.2023\",{\"1\":{\"876\":1}}],[\"23.3\",{\"1\":{\"825\":1}}],[\"2345432\",{\"1\":{\"600\":1}}],[\"2304.10716\",{\"1\":{\"385\":1}}],[\"23\",{\"1\":{\"218\":1,\"227\":1,\"721\":1,\"724\":1,\"730\":2,\"825\":1,\"935\":1}}],[\"239.\",{\"0\":{\"107\":1}}],[\"235.\",{\"0\":{\"91\":1},\"1\":{\"100\":1}}],[\"236.\",{\"1\":{\"85\":1}}],[\"2.27\",{\"1\":{\"852\":1}}],[\"2.26\",{\"1\":{\"852\":1}}],[\"2.2.2\",{\"1\":{\"227\":1}}],[\"2.0\",{\"1\":{\"845\":1}}],[\"2.0.50727\",{\"1\":{\"41\":1}}],[\"2.50\",{\"1\":{\"471\":1}}],[\"2.5\",{\"1\":{\"424\":1}}],[\"2.3\",{\"1\":{\"370\":1,\"600\":1}}],[\"2.30\",{\"1\":{\"355\":1}}],[\"2.18\",{\"1\":{\"370\":1}}],[\"2.1\",{\"0\":{\"331\":1,\"332\":1},\"1\":{\"192\":1}}],[\"2.\",{\"0\":{\"70\":1,\"94\":1,\"117\":1,\"178\":1,\"208\":1,\"214\":1,\"330\":1,\"457\":1,\"468\":1,\"520\":1,\"530\":1,\"749\":1,\"855\":1,\"868\":1},\"1\":{\"191\":2,\"288\":1,\"294\":1,\"304\":1,\"314\":1,\"383\":1,\"471\":1}}],[\"2108.02938\",{\"1\":{\"938\":1,\"951\":1}}],[\"2109.09406\",{\"1\":{\"53\":1}}],[\"2112.10752\",{\"1\":{\"922\":1}}],[\"215\",{\"1\":{\"633\":2}}],[\"214\",{\"1\":{\"254\":1}}],[\"216.\",{\"0\":{\"113\":1}}],[\"21\",{\"1\":{\"42\":1,\"192\":1,\"217\":1,\"606\":1,\"869\":5,\"900\":3}}],[\"223\",{\"1\":{\"718\":1}}],[\"2211.05778\",{\"1\":{\"360\":1}}],[\"2203.08679\",{\"1\":{\"358\":1}}],[\"22\",{\"1\":{\"42\":1,\"165\":2,\"184\":4,\"186\":3,\"218\":1,\"721\":2,\"729\":2,\"889\":1,\"897\":3,\"901\":1,\"904\":7,\"918\":1}}],[\"20880415\",{\"1\":{\"875\":1}}],[\"204\",{\"1\":{\"476\":1}}],[\"2048\",{\"1\":{\"344\":1}}],[\"205\",{\"1\":{\"424\":1}}],[\"207.\",{\"0\":{\"135\":1}}],[\"20.\",{\"1\":{\"106\":1}}],[\"2022\",{\"1\":{\"272\":1,\"340\":1,\"358\":1,\"397\":1,\"862\":1,\"864\":1,\"871\":1,\"887\":1,\"921\":1,\"939\":1,\"940\":1,\"945\":1}}],[\"2021\",{\"1\":{\"262\":1,\"342\":1,\"856\":1,\"862\":1,\"922\":1,\"950\":1}}],[\"2020\",{\"1\":{\"256\":1,\"606\":1}}],[\"2020.\",{\"0\":{\"50\":1,\"52\":1}}],[\"2023\",{\"1\":{\"192\":1,\"198\":1,\"266\":1,\"271\":1,\"273\":1,\"888\":1,\"890\":1,\"891\":1}}],[\"202.\",{\"1\":{\"104\":1}}],[\"203.\",{\"1\":{\"103\":1}}],[\"209.\",{\"1\":{\"102\":1}}],[\"2015\",{\"1\":{\"422\":2}}],[\"2017\",{\"1\":{\"361\":1,\"422\":3,\"429\":2}}],[\"2014.\",{\"1\":{\"422\":1}}],[\"2014\",{\"1\":{\"342\":1}}],[\"2018\",{\"1\":{\"275\":1,\"286\":1,\"887\":1}}],[\"2019\",{\"1\":{\"51\":1,\"242\":1,\"301\":1}}],[\"2019.\",{\"0\":{\"51\":1}}],[\"2016\",{\"0\":{\"49\":1},\"1\":{\"367\":1}}],[\"206.\",{\"1\":{\"103\":1}}],[\"206\",{\"1\":{\"43\":1,\"476\":1}}],[\"2002\",{\"1\":{\"769\":1}}],[\"20000\",{\"1\":{\"417\":2,\"423\":1,\"528\":1,\"529\":3}}],[\"2000\",{\"1\":{\"404\":2,\"408\":1,\"867\":1,\"868\":1}}],[\"2009\",{\"1\":{\"42\":1}}],[\"200\",{\"1\":{\"42\":2,\"43\":1,\"247\":1,\"422\":1,\"476\":2}}],[\"20\",{\"1\":{\"20\":1,\"41\":1,\"72\":2,\"217\":1,\"261\":1,\"380\":1,\"425\":1,\"599\":1,\"642\":1,\"673\":1,\"685\":1,\"698\":1,\"704\":1,\"706\":1,\"745\":1,\"757\":1}}],[\"2\",{\"0\":{\"1\":1,\"330\":1,\"436\":1,\"638\":1,\"845\":1},\"1\":{\"28\":1,\"41\":2,\"42\":1,\"43\":1,\"44\":1,\"51\":1,\"54\":2,\"69\":4,\"80\":5,\"81\":1,\"82\":3,\"86\":1,\"96\":1,\"98\":2,\"105\":6,\"114\":6,\"116\":1,\"119\":1,\"121\":13,\"123\":1,\"126\":4,\"137\":3,\"138\":3,\"139\":1,\"143\":1,\"153\":1,\"198\":2,\"199\":1,\"208\":1,\"209\":1,\"222\":1,\"228\":2,\"235\":3,\"242\":1,\"245\":4,\"247\":4,\"257\":4,\"261\":1,\"262\":1,\"290\":4,\"299\":1,\"301\":1,\"303\":1,\"304\":7,\"307\":1,\"308\":2,\"321\":2,\"331\":1,\"332\":6,\"334\":1,\"344\":6,\"353\":1,\"355\":1,\"359\":1,\"398\":1,\"399\":1,\"406\":1,\"411\":3,\"419\":2,\"429\":1,\"446\":1,\"449\":1,\"451\":11,\"476\":1,\"528\":5,\"529\":3,\"530\":5,\"531\":2,\"532\":3,\"538\":2,\"539\":6,\"540\":2,\"541\":4,\"542\":2,\"543\":7,\"545\":2,\"548\":1,\"554\":1,\"557\":2,\"558\":2,\"559\":1,\"570\":1,\"571\":1,\"573\":3,\"583\":2,\"585\":1,\"590\":3,\"595\":2,\"597\":1,\"598\":1,\"600\":2,\"612\":4,\"617\":1,\"623\":1,\"624\":1,\"633\":2,\"642\":2,\"654\":3,\"668\":1,\"670\":1,\"687\":2,\"688\":5,\"690\":2,\"693\":3,\"695\":1,\"704\":1,\"709\":1,\"712\":1,\"713\":1,\"714\":2,\"718\":3,\"721\":2,\"722\":1,\"724\":3,\"725\":3,\"729\":1,\"732\":1,\"735\":1,\"739\":1,\"741\":1,\"755\":4,\"757\":1,\"769\":5,\"770\":1,\"778\":1,\"779\":1,\"781\":2,\"782\":2,\"798\":3,\"806\":1,\"807\":3,\"808\":2,\"810\":1,\"811\":9,\"816\":1,\"817\":2,\"818\":3,\"819\":1,\"825\":1,\"826\":3,\"827\":1,\"829\":1,\"835\":2,\"837\":1,\"838\":1,\"849\":3,\"854\":1,\"855\":1,\"859\":1,\"867\":4,\"868\":1,\"869\":14,\"897\":12,\"904\":4,\"913\":1,\"917\":1,\"928\":2}}],[\" \",{\"0\":{\"1\":1,\"34\":2,\"49\":5,\"50\":9,\"51\":8,\"52\":8,\"53\":1,\"55\":6,\"56\":6,\"66\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":3,\"74\":4,\"75\":3,\"76\":1,\"77\":1,\"78\":2,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":3,\"91\":3,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":2,\"99\":1,\"107\":3,\"108\":5,\"111\":1,\"112\":3,\"113\":4,\"114\":3,\"115\":3,\"116\":4,\"117\":1,\"118\":3,\"119\":5,\"120\":1,\"121\":3,\"122\":4,\"123\":3,\"124\":1,\"125\":3,\"126\":4,\"127\":1,\"128\":4,\"129\":3,\"130\":1,\"131\":3,\"132\":3,\"135\":3,\"137\":3,\"138\":3,\"139\":3,\"142\":3,\"143\":4,\"146\":3,\"148\":4,\"152\":3,\"153\":3,\"154\":3,\"163\":2,\"165\":4,\"166\":11,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"173\":1,\"174\":1,\"177\":1,\"178\":1,\"179\":2,\"180\":2,\"181\":2,\"182\":1,\"183\":4,\"186\":2,\"196\":2,\"197\":1,\"198\":1,\"201\":1,\"202\":2,\"203\":1,\"204\":2,\"205\":2,\"207\":1,\"208\":1,\"211\":1,\"212\":7,\"213\":1,\"214\":1,\"215\":1,\"217\":1,\"218\":1,\"220\":1,\"221\":1,\"224\":1,\"227\":1,\"228\":1,\"230\":1,\"231\":2,\"232\":1,\"237\":2,\"240\":1,\"241\":1,\"243\":1,\"244\":2,\"245\":1,\"246\":1,\"247\":1,\"248\":1,\"250\":1,\"251\":1,\"252\":2,\"253\":1,\"259\":1,\"266\":2,\"278\":1,\"280\":1,\"281\":3,\"282\":4,\"283\":2,\"284\":1,\"286\":6,\"289\":2,\"290\":1,\"292\":2,\"303\":1,\"304\":1,\"306\":1,\"308\":1,\"309\":1,\"314\":1,\"315\":2,\"320\":6,\"321\":2,\"323\":1,\"329\":1,\"330\":2,\"331\":1,\"332\":1,\"333\":1,\"334\":1,\"335\":1,\"336\":1,\"337\":1,\"341\":1,\"342\":1,\"345\":2,\"346\":1,\"349\":1,\"350\":2,\"351\":2,\"352\":2,\"356\":2,\"358\":3,\"361\":2,\"362\":1,\"363\":1,\"364\":1,\"365\":2,\"366\":2,\"367\":2,\"369\":6,\"370\":1,\"374\":1,\"375\":1,\"378\":1,\"381\":1,\"382\":1,\"384\":1,\"385\":11,\"387\":1,\"388\":1,\"389\":1,\"393\":1,\"397\":1,\"407\":1,\"410\":1,\"411\":2,\"412\":1,\"413\":1,\"415\":1,\"418\":1,\"422\":5,\"426\":2,\"435\":2,\"436\":1,\"437\":1,\"439\":1,\"445\":2,\"456\":2,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"461\":1,\"462\":1,\"467\":1,\"468\":1,\"469\":1,\"471\":3,\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"476\":1,\"477\":2,\"478\":1,\"479\":1,\"480\":1,\"483\":2,\"484\":3,\"485\":3,\"486\":1,\"516\":1,\"517\":1,\"518\":1,\"519\":1,\"520\":1,\"521\":1,\"522\":1,\"523\":1,\"524\":1,\"525\":1,\"526\":1,\"527\":1,\"530\":1,\"532\":1,\"533\":2,\"555\":1,\"563\":1,\"571\":1,\"583\":1,\"611\":1,\"612\":2,\"613\":2,\"614\":2,\"617\":2,\"620\":1,\"623\":2,\"625\":1,\"626\":1,\"631\":1,\"634\":2,\"638\":2,\"640\":1,\"662\":2,\"667\":1,\"668\":2,\"669\":1,\"677\":1,\"687\":1,\"688\":1,\"689\":1,\"690\":1,\"691\":2,\"707\":2,\"712\":1,\"713\":1,\"736\":1,\"748\":1,\"749\":1,\"750\":1,\"751\":1,\"752\":5,\"775\":1,\"776\":1,\"777\":1,\"779\":2,\"818\":2,\"833\":1,\"835\":3,\"840\":2,\"854\":1,\"855\":1,\"866\":3,\"867\":1,\"868\":1,\"869\":1,\"871\":3,\"872\":1,\"880\":1,\"881\":1,\"882\":1,\"883\":1,\"884\":2,\"892\":2,\"895\":6,\"896\":2,\"897\":2,\"901\":4,\"904\":1,\"905\":1,\"911\":3,\"917\":1,\"919\":1,\"923\":1,\"924\":1,\"929\":2,\"934\":1,\"938\":6,\"940\":6,\"942\":6,\"944\":9,\"945\":7,\"947\":2,\"949\":1,\"950\":7,\"951\":7,\"953\":7,\"954\":1,\"955\":1,\"956\":1,\"958\":1,\"959\":1,\"960\":2,\"961\":1,\"962\":1,\"963\":2},\"1\":{\"3\":2,\"5\":1,\"8\":2,\"10\":7,\"11\":4,\"13\":41,\"15\":2,\"16\":6,\"17\":4,\"19\":10,\"22\":3,\"25\":3,\"27\":41,\"28\":1,\"30\":1,\"31\":2,\"36\":1,\"37\":1,\"38\":9,\"39\":3,\"41\":72,\"42\":32,\"43\":17,\"44\":45,\"48\":26,\"49\":12,\"51\":22,\"52\":23,\"53\":16,\"54\":36,\"55\":8,\"58\":1,\"60\":1,\"61\":2,\"62\":4,\"63\":1,\"64\":2,\"65\":4,\"69\":26,\"70\":94,\"71\":117,\"72\":643,\"73\":59,\"74\":35,\"75\":89,\"76\":23,\"77\":96,\"78\":51,\"80\":130,\"81\":57,\"82\":185,\"83\":88,\"84\":45,\"85\":151,\"86\":90,\"87\":146,\"88\":39,\"89\":69,\"90\":143,\"91\":56,\"93\":6,\"94\":45,\"95\":50,\"96\":64,\"97\":136,\"98\":79,\"99\":162,\"100\":285,\"102\":147,\"103\":785,\"104\":606,\"105\":320,\"106\":206,\"107\":115,\"110\":19,\"112\":75,\"113\":65,\"114\":121,\"115\":62,\"116\":88,\"118\":92,\"119\":114,\"121\":60,\"122\":62,\"123\":63,\"125\":58,\"126\":124,\"128\":164,\"137\":434,\"138\":186,\"139\":166,\"142\":45,\"143\":72,\"146\":64,\"148\":33,\"152\":92,\"153\":54,\"160\":13,\"163\":3,\"165\":39,\"166\":29,\"168\":19,\"169\":1,\"170\":44,\"171\":18,\"172\":25,\"174\":19,\"175\":25,\"177\":8,\"178\":3,\"179\":6,\"180\":4,\"181\":5,\"182\":13,\"184\":27,\"185\":11,\"186\":32,\"188\":55,\"189\":21,\"191\":129,\"192\":16,\"195\":139,\"196\":10,\"197\":13,\"198\":29,\"199\":36,\"200\":10,\"201\":45,\"202\":26,\"203\":12,\"205\":2,\"208\":51,\"209\":1,\"210\":3,\"211\":23,\"214\":23,\"218\":3,\"220\":20,\"221\":6,\"222\":52,\"223\":6,\"225\":8,\"226\":3,\"227\":3,\"228\":7,\"229\":5,\"232\":9,\"242\":20,\"244\":5,\"245\":38,\"246\":40,\"247\":21,\"248\":6,\"249\":14,\"254\":7,\"255\":6,\"256\":15,\"259\":3,\"260\":1,\"261\":51,\"262\":13,\"263\":10,\"265\":3,\"266\":22,\"268\":33,\"271\":23,\"272\":23,\"273\":38,\"275\":8,\"276\":4,\"277\":24,\"278\":1,\"282\":25,\"283\":6,\"284\":18,\"286\":1,\"288\":3,\"290\":15,\"291\":2,\"292\":10,\"293\":18,\"294\":12,\"295\":5,\"297\":2,\"298\":22,\"299\":13,\"301\":3,\"303\":27,\"304\":163,\"305\":145,\"306\":1,\"307\":10,\"308\":5,\"309\":193,\"311\":2,\"312\":25,\"313\":11,\"314\":81,\"315\":7,\"316\":1,\"317\":2,\"318\":4,\"319\":15,\"320\":8,\"321\":61,\"322\":23,\"323\":38,\"325\":5,\"331\":2,\"332\":16,\"334\":6,\"337\":2,\"338\":4,\"340\":30,\"342\":40,\"343\":10,\"344\":165,\"347\":11,\"348\":28,\"349\":27,\"350\":14,\"351\":1,\"353\":9,\"354\":25,\"355\":70,\"356\":16,\"357\":88,\"358\":12,\"359\":52,\"360\":12,\"361\":103,\"364\":3,\"366\":51,\"367\":10,\"369\":9,\"370\":26,\"371\":36,\"372\":62,\"373\":2,\"375\":9,\"377\":5,\"379\":35,\"380\":123,\"383\":73,\"385\":13,\"386\":13,\"389\":1,\"390\":29,\"391\":41,\"392\":59,\"393\":9,\"394\":50,\"395\":53,\"396\":10,\"397\":13,\"398\":11,\"399\":56,\"401\":6,\"402\":7,\"404\":2,\"405\":2,\"406\":10,\"408\":4,\"409\":3,\"410\":13,\"411\":8,\"412\":2,\"413\":2,\"415\":1,\"416\":4,\"419\":14,\"421\":1,\"422\":269,\"423\":15,\"424\":27,\"425\":4,\"426\":134,\"427\":156,\"428\":66,\"429\":72,\"436\":1,\"437\":5,\"446\":11,\"449\":16,\"451\":66,\"454\":1,\"457\":6,\"458\":7,\"459\":5,\"460\":6,\"461\":15,\"462\":4,\"465\":11,\"467\":11,\"468\":10,\"469\":30,\"471\":14,\"473\":5,\"475\":3,\"476\":56,\"480\":10,\"484\":27,\"485\":10,\"499\":2,\"500\":4,\"502\":1,\"503\":3,\"509\":1,\"522\":18,\"523\":1,\"524\":62,\"525\":34,\"528\":68,\"529\":79,\"530\":118,\"531\":121,\"532\":27,\"534\":59,\"535\":37,\"536\":5,\"538\":33,\"539\":51,\"540\":43,\"541\":41,\"542\":45,\"543\":32,\"544\":17,\"545\":135,\"546\":24,\"547\":2,\"548\":19,\"549\":2,\"550\":2,\"551\":3,\"552\":2,\"553\":2,\"554\":3,\"556\":4,\"557\":2,\"558\":2,\"559\":54,\"560\":2,\"561\":7,\"562\":2,\"563\":19,\"564\":3,\"565\":1,\"566\":4,\"567\":3,\"568\":4,\"570\":13,\"571\":2,\"572\":3,\"573\":57,\"574\":47,\"575\":4,\"576\":63,\"577\":17,\"581\":3,\"583\":39,\"584\":3,\"585\":14,\"586\":4,\"587\":20,\"589\":16,\"590\":19,\"594\":10,\"595\":80,\"597\":11,\"598\":28,\"599\":76,\"600\":89,\"601\":78,\"605\":63,\"606\":113,\"607\":5,\"609\":8,\"610\":1,\"611\":21,\"612\":150,\"613\":32,\"614\":2,\"615\":47,\"616\":12,\"617\":26,\"618\":1,\"619\":9,\"620\":1,\"621\":10,\"623\":15,\"624\":38,\"625\":8,\"626\":10,\"632\":12,\"633\":25,\"634\":18,\"635\":25,\"637\":20,\"638\":43,\"639\":12,\"640\":1,\"642\":30,\"644\":12,\"645\":15,\"647\":3,\"648\":16,\"649\":20,\"650\":7,\"653\":2,\"654\":18,\"656\":1,\"657\":5,\"658\":20,\"659\":3,\"661\":17,\"662\":6,\"663\":3,\"664\":14,\"665\":36,\"666\":77,\"667\":19,\"668\":26,\"670\":45,\"671\":79,\"672\":31,\"673\":44,\"675\":45,\"676\":103,\"681\":4,\"682\":15,\"683\":80,\"684\":15,\"685\":30,\"686\":5,\"687\":25,\"688\":47,\"689\":38,\"690\":126,\"691\":2,\"692\":22,\"693\":36,\"694\":12,\"695\":117,\"696\":16,\"697\":1,\"698\":97,\"701\":2,\"703\":9,\"704\":48,\"706\":42,\"707\":35,\"708\":13,\"709\":71,\"712\":41,\"713\":75,\"714\":72,\"717\":51,\"718\":60,\"719\":9,\"720\":8,\"721\":99,\"722\":98,\"724\":93,\"725\":32,\"726\":16,\"728\":2,\"729\":53,\"730\":24,\"732\":48,\"734\":14,\"735\":36,\"736\":10,\"738\":46,\"739\":10,\"740\":18,\"741\":19,\"744\":34,\"745\":130,\"747\":1,\"748\":6,\"749\":59,\"750\":5,\"755\":55,\"756\":15,\"757\":62,\"758\":19,\"759\":85,\"760\":24,\"761\":1,\"762\":26,\"766\":8,\"769\":206,\"770\":26,\"775\":7,\"777\":3,\"778\":1,\"780\":1,\"781\":392,\"782\":36,\"785\":6,\"789\":1,\"793\":75,\"794\":9,\"798\":13,\"799\":6,\"800\":16,\"801\":25,\"804\":26,\"805\":27,\"806\":19,\"807\":17,\"808\":14,\"809\":53,\"810\":39,\"811\":39,\"813\":4,\"814\":5,\"816\":23,\"817\":62,\"818\":87,\"819\":8,\"825\":144,\"826\":184,\"827\":92,\"828\":157,\"829\":193,\"830\":504,\"832\":1,\"833\":19,\"834\":36,\"835\":88,\"836\":9,\"837\":39,\"838\":27,\"840\":34,\"841\":19,\"844\":2,\"845\":70,\"846\":94,\"848\":24,\"849\":41,\"852\":61,\"854\":37,\"855\":15,\"856\":32,\"858\":1,\"859\":118,\"860\":24,\"862\":35,\"864\":25,\"865\":1,\"867\":17,\"868\":51,\"869\":3,\"871\":11,\"872\":7,\"873\":10,\"874\":7,\"875\":11,\"876\":9,\"877\":86,\"880\":6,\"881\":6,\"882\":8,\"883\":2,\"884\":20,\"887\":30,\"888\":14,\"889\":37,\"890\":12,\"891\":21,\"892\":5,\"893\":16,\"894\":12,\"895\":13,\"896\":13,\"897\":5,\"899\":4,\"900\":9,\"901\":22,\"902\":9,\"903\":1,\"904\":30,\"905\":10,\"906\":7,\"907\":9,\"908\":4,\"909\":4,\"910\":66,\"911\":16,\"912\":10,\"913\":8,\"917\":2,\"921\":9,\"922\":23,\"924\":3,\"925\":5,\"926\":3,\"927\":2,\"928\":23,\"929\":67,\"930\":2,\"935\":20,\"936\":3,\"938\":13,\"939\":14,\"940\":13,\"942\":11,\"944\":15,\"945\":53,\"947\":18,\"950\":1,\"951\":13,\"952\":8,\"953\":11,\"955\":14,\"956\":29,\"957\":33,\"958\":35,\"959\":48,\"960\":3,\"961\":72,\"962\":3,\"963\":29}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
